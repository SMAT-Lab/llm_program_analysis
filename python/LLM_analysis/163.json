{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class PagesDataStore(object):\n\n\n    def __init__(self, db):\n        self.db = db\n        pass\n"
    },
    {
      "id": "n2",
      "code": "    def add_link_to_crawl(self, url):\n        \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n        pass\n"
    },
    {
      "id": "n3",
      "code": "    def remove_link_to_crawl(self, url):\n        \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n        pass\n"
    },
    {
      "id": "n4",
      "code": "    def reduce_priority_link_to_crawl(self, url):\n        \"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"\n        pass\n"
    },
    {
      "id": "n5",
      "code": "    def extract_max_priority_page(self):\n        \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"\n        pass\n"
    },
    {
      "id": "n6",
      "code": "    def insert_crawled_link(self, url, signature):\n        \"\"\"Add the given link to `crawled_links`.\"\"\"\n        pass\n"
    },
    {
      "id": "n7",
      "code": "    def crawled_similar(self, signature):\n        \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"\n        pass\n"
    },
    {
      "id": "n8",
      "code": "    def __init__(self, db):\n        self.db = db\n        pass\n"
    },
    {
      "id": "n9",
      "code": "    def add_link_to_crawl(self, url):\n        \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n        pass\n"
    },
    {
      "id": "n10",
      "code": "    def remove_link_to_crawl(self, url):\n        \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n        pass\n"
    },
    {
      "id": "n11",
      "code": "    def reduce_priority_link_to_crawl(self, url):\n        \"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"\n        pass\n"
    },
    {
      "id": "n12",
      "code": "    def extract_max_priority_page(self):\n        \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"\n        pass\n"
    },
    {
      "id": "n13",
      "code": "    def insert_crawled_link(self, url, signature):\n        \"\"\"Add the given link to `crawled_links`.\"\"\"\n        pass\n"
    },
    {
      "id": "n14",
      "code": "    def crawled_similar(self, signature):\n        \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"\n        pass\n"
    },
    {
      "id": "n15",
      "code": "class Page(object):\n\n\n    def __init__(self, url, contents, child_urls):\n        self.url = url\n        self.contents = contents\n        self.child_urls = child_urls\n        self.signature = self.create_signature()\n"
    },
    {
      "id": "n16",
      "code": "    def create_signature(self):\n        # Create signature based on url and contents\n        pass\n"
    },
    {
      "id": "n17",
      "code": "    def __init__(self, url, contents, child_urls):\n        self.url = url\n        self.contents = contents\n        self.child_urls = child_urls\n        self.signature = self.create_signature()\n"
    },
    {
      "id": "n18",
      "code": "    def create_signature(self):\n        # Create signature based on url and contents\n        pass\n"
    },
    {
      "id": "n19",
      "code": "class Crawler(object):\n\n\n    def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n        self.pages = pages\n        self.data_store = data_store\n        self.reverse_index_queue = reverse_index_queue\n        self.doc_index_queue = doc_index_queue\n"
    },
    {
      "id": "n20",
      "code": "    def crawl_page(self, page):\n        for url in page.child_urls:\n            self.data_store.add_link_to_crawl(url)\n        self.reverse_index_queue.generate(page)\n        self.doc_index_queue.generate(page)\n        self.data_store.remove_link_to_crawl(page.url)\n        self.data_store.insert_crawled_link(page.url, page.signature)\n"
    },
    {
      "id": "n21",
      "code": "    def crawl(self):\n        while True:\n            page = self.data_store.extract_max_priority_page()\n\n            if page is None:\n                break\n"
    },
    {
      "id": "n22",
      "code": "            if self.data_store.crawled_similar(page.signature):\n                self.data_store.reduce_priority_link_to_crawl(page.url)\n\n            else:\n                self.crawl_page(page)\n"
    },
    {
      "id": "n23",
      "code": "            page = self.data_store.extract_max_priority_page()\n"
    },
    {
      "id": "n24",
      "code": "    def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n        self.pages = pages\n        self.data_store = data_store\n        self.reverse_index_queue = reverse_index_queue\n        self.doc_index_queue = doc_index_queue\n"
    },
    {
      "id": "n25",
      "code": "    def crawl_page(self, page):\n\n        for url in page.child_urls:\n            self.data_store.add_link_to_crawl(url)\n\n        self.reverse_index_queue.generate(page)\n        self.doc_index_queue.generate(page)\n        self.data_store.remove_link_to_crawl(page.url)\n        self.data_store.insert_crawled_link(page.url, page.signature)\n"
    },
    {
      "id": "n26",
      "code": "    def crawl(self):\n"
    },
    {
      "id": "n27",
      "code": "        while True:\n\n            page = self.data_store.extract_max_priority_page()\n            if page is None:\n"
    },
    {
      "id": "n28",
      "code": "                break\n"
    },
    {
      "id": "n29",
      "code": "            if self.data_store.crawled_similar(page.signature):\n                self.data_store.reduce_priority_link_to_crawl(page.url)\n"
    },
    {
      "id": "n30",
      "code": "            else:\n                self.crawl_page(page)\n"
    },
    {
      "id": "n31",
      "code": "            page = self.data_store.extract_max_priority_page()\n"
    }
  ],
  "edges": [
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n27",
      "target": "n29"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n31",
      "target": "n27"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n23",
      "target": "n21"
    },
    {
      "source": "n29",
      "target": "n30"
    }
  ]
}