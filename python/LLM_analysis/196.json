{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\n\nimport pytest\n\nfrom backend.util.test import SpinTestServer\n\n#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\n\nlogger = logging.getLogger(__name__)\n\n# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n"
    },
    {
      "id": "n1",
      "code": "@pytest.fixture(scope=\"session\")\n\nasync def server():\n    async with SpinTestServer() as server:\n        yield server\n"
    },
    {
      "id": "n2",
      "code": "@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n"
    },
    {
      "id": "n3",
      "code": "    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n"
    },
    {
      "id": "n4",
      "code": "    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n\n        yield  # This runs the test function\n\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"\n"
    },
    {
      "id": "n5",
      "code": "    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}