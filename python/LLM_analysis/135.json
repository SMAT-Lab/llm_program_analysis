{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n"
    },
    {
      "id": "n1",
      "code": "class HitCounts(MRJob):\n\n\n    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n\n\n\n    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n\n\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1\n\n\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n\n        yield key, sum(values)\n\n\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n\n\n\n\n"
    },
    {
      "id": "n2",
      "code": "    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n"
    },
    {
      "id": "n3",
      "code": "    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n"
    },
    {
      "id": "n4",
      "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1\n"
    },
    {
      "id": "n5",
      "code": "    def reducer(self, key, values):\n\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n\n        yield key, sum(values)\n"
    },
    {
      "id": "n6",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
    },
    {
      "id": "n7",
      "code": "if __name__ == '__main__':\n    HitCounts.run()\n"
    }
  ],
  "edges": []
}