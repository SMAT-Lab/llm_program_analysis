{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\nimport random\nfrom datetime import datetime\n\nimport prisma.enums\nfrom faker import Faker\nfrom prisma import Prisma\n\n\nfaker = Faker()\n\n# Constants for data generation limits\n\n\n# Base entities\nNUM_USERS = 100  # Creates 100 user records\nNUM_AGENT_BLOCKS = 100  # Creates 100 agent block templates\n\n\n# Per-user entities\nMIN_GRAPHS_PER_USER = 1  # Each user will have between 1-5 graphs\nMAX_GRAPHS_PER_USER = 5  # Total graphs: 500-2500 (NUM_USERS * MIN/MAX_GRAPHS)\n\n\n# Per-graph entities\nMIN_NODES_PER_GRAPH = 2  # Each graph will have between 2-5 nodes\nMAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (GRAPHS_PER_USER * NUM_USERS * MIN/MAX_NODES)\n)\n\n\n\n# Additional per-user entities\nMIN_PRESETS_PER_USER = 1  # Each user will have between 1-2 presets\nMAX_PRESETS_PER_USER = 5  # Total presets: 500-2500 (NUM_USERS * MIN/MAX_PRESETS)\nMIN_AGENTS_PER_USER = 1  # Each user will have between 1-2 agents\nMAX_AGENTS_PER_USER = 10  # Total agents: 500-5000 (NUM_USERS * MIN/MAX_AGENTS)\n\n\n# Execution and review records\nMIN_EXECUTIONS_PER_GRAPH = 1  # Each graph will have between 1-5 execution records\nMAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)\n)\n\nMIN_REVIEWS_PER_VERSION = 1  # Each version will have between 1-3 reviews\nMAX_REVIEWS_PER_VERSION = 5  # Total reviews depends on number of versions created\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def get_image():\n    url = faker.image_url()\n"
    },
    {
      "id": "n2",
      "code": "    while \"placekitten.com\" in url:\n        url = faker.image_url()\n"
    },
    {
      "id": "n3",
      "code": "    return url\n"
    },
    {
      "id": "n4",
      "code": "async def main():\n    db = Prisma()\n    await db.connect()\n\n    print(f\"Inserting {NUM_USERS} users\")\n    users = []\n\n    for _ in range(NUM_USERS):\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)\n\n    agent_blocks = []\n    print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")\n\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)\n\n    agent_graphs = []\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs\")\n\n    for user in users:\n        for _ in range(\n            random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)\n        ):  # Adjust the range to create more graphs per user if desired\n            graph = await db.agentgraph.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"isActive\": True,\n                    \"isTemplate\": False,\n                }\n            )\n            agent_graphs.append(graph)\n\n    agent_nodes = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes\"\n    )\n\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):  # Create 5 AgentNodes per graph\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(\n                data={\n                    \"agentBlockId\": block.id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": \"{}\",\n                    \"metadata\": \"{}\",\n                }\n            )\n            agent_nodes.append(node)\n\n    agent_presets = []\n    print(f\"Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets\")\n\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):  # Create 1 AgentPreset per user\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"isActive\": True,\n                }\n            )\n            agent_presets.append(preset)\n\n    user_agents = []\n    print(f\"Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents\")\n\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):  # Create 1 UserAgent per user\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(\n                data={\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"agentPresetId\": preset.id,\n                    \"isFavorite\": random.choice([True, False]),\n                    \"isCreatedByUser\": random.choice([True, False]),\n                    \"isArchived\": random.choice([True, False]),\n                    \"isDeleted\": random.choice([True, False]),\n                }\n            )\n            user_agents.append(user_agent)\n\n    # Insert AgentGraphExecutions\n    agent_graph_executions = []\n\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions\"\n    )\n\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(\n            MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH\n        )\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = (\n                random.choice(matching_presets)\n                if matching_presets and random.random() < 0.5\n                else None\n            )\n\n            graph_execution_data.append(\n                {\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"userId\": user.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"startedAt\": faker.date_time_this_year(),\n                    \"agentPresetId\": preset.id if preset else None,\n                }\n            )\n\n\n    agent_graph_executions = await db.agentgraphexecution.create_many(\n        data=graph_execution_data\n    )\n\n    # Need to fetch the created records since create_many doesn't return them\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions\"\n    )\n\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [\n            node for node in agent_nodes if node.agentGraphId == execution.agentGraphId\n        ]\n        for node in nodes:\n            node_execution_data.append(\n                {\n                    \"agentGraphExecutionId\": execution.id,\n                    \"agentNodeId\": node.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"addedTime\": datetime.now(),\n                }\n            )\n\n\n    agent_node_executions = await db.agentnodeexecution.create_many(\n        data=node_execution_data\n    )\n\n    # Need to fetch the created records since create_many doesn't return them\n    agent_node_executions = await db.agentnodeexecution.find_many()\n\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs\"\n    )\n\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        # Input data\n        input_output_data.append(\n            {\n                \"name\": \"input1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByInputExecId\": node_execution.id,\n            }\n        )\n        # Output data\n        input_output_data.append(\n            {\n                \"name\": \"output1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByOutputExecId\": node_execution.id,\n            }\n        )\n\n\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links\")\n\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(\n                data={\n                    \"agentNodeSourceId\": source_node.id,\n                    \"sourceName\": \"output1\",\n                    \"agentNodeSinkId\": sink_node.id,\n                    \"sinkName\": \"input1\",\n                    \"isStatic\": False,\n                }\n            )\n\n\n    print(f\"Inserting {NUM_USERS} analytics details\")\n\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(\n                data={\n                    \"userId\": user.id,\n                    \"type\": faker.word(),\n                    \"data\": prisma.Json({}),\n                    \"dataIndex\": faker.word(),\n                }\n            )\n\n\n    print(f\"Inserting {NUM_USERS} analytics metrics\")\n\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(\n                data={\n                    \"userId\": user.id,\n                    \"analyticMetric\": faker.word(),\n                    \"value\": random.uniform(0, 100),\n                    \"dataString\": faker.word(),\n                }\n            )\n\n\n    print(f\"Inserting {NUM_USERS} credit transactions\")\n\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(\n                data={\n                    \"transactionKey\": str(faker.uuid4()),\n                    \"userId\": user.id,\n                    \"blockId\": block.id,\n                    \"amount\": random.randint(1, 100),\n                    \"type\": (\n                        prisma.enums.CreditTransactionType.TOP_UP\n                        if random.random() < 0.5\n                        else prisma.enums.CreditTransactionType.USAGE\n                    ),\n                    \"metadata\": prisma.Json({}),\n                }\n            )\n\n\n    profiles = []\n    print(f\"Inserting {NUM_USERS} profiles\")\n\n    for user in users:\n        profile = await db.profile.create(\n            data={\n                \"userId\": user.id,\n                \"name\": user.name or faker.name(),\n                \"username\": faker.unique.user_name(),\n                \"description\": faker.text(),\n                \"links\": [faker.url() for _ in range(3)],\n                \"avatarUrl\": get_image(),\n            }\n        )\n        profiles.append(profile)\n\n    # Insert StoreListings\n    store_listings = []\n\n    print(f\"Inserting {NUM_USERS} store listings\")\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"owningUserId\": user.id,\n                \"isApproved\": random.choice([True, False]),\n            }\n        )\n        store_listings.append(listing)\n\n\n    store_listing_versions = []\n    print(f\"Inserting {NUM_USERS} store listing versions\")\n\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"slug\": faker.slug(),\n                \"name\": graph.name or faker.sentence(nb_words=3),\n                \"subHeading\": faker.sentence(),\n                \"videoUrl\": faker.url(),\n                \"imageUrls\": [get_image() for _ in range(3)],\n                \"description\": faker.text(),\n                \"categories\": [faker.word() for _ in range(3)],\n                \"isFeatured\": random.choice([True, False]),\n                \"isAvailable\": True,\n                \"isApproved\": random.choice([True, False]),\n                \"storeListingId\": listing.id,\n            }\n        )\n        store_listing_versions.append(version)\n\n\n    print(f\"Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews\")\n\n    for version in store_listing_versions:\n        # Create a copy of users list and shuffle it to avoid duplicates\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n\n        # Limit number of reviews to available unique reviewers\n        num_reviews = min(\n            random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION),\n            len(available_reviewers),\n        )\n\n        # Take only the first num_reviews reviewers\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(\n                data={\n                    \"storeListingVersionId\": version.id,\n                    \"reviewByUserId\": reviewer.id,\n                    \"score\": random.randint(1, 5),\n                    \"comments\": faker.text(),\n                }\n            )\n\n\n    print(f\"Inserting {NUM_USERS} store listing submissions\")\n\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice(\n            [\n                prisma.enums.SubmissionStatus.PENDING,\n                prisma.enums.SubmissionStatus.APPROVED,\n                prisma.enums.SubmissionStatus.REJECTED,\n            ]\n        )\n        await db.storelistingsubmission.create(\n            data={\n                \"storeListingId\": listing.id,\n                \"storeListingVersionId\": version.id,\n                \"reviewerId\": reviewer.id,\n                \"Status\": status,\n                \"reviewComments\": faker.text(),\n            }\n        )\n\n\n    print(f\"Inserting {NUM_USERS} api keys\")\n\n    for user in users:\n        await db.apikey.create(\n            data={\n                \"name\": faker.word(),\n                \"prefix\": str(faker.uuid4())[:8],\n                \"postfix\": str(faker.uuid4())[-8:],\n                \"key\": str(faker.sha256()),\n                \"status\": prisma.enums.APIKeyStatus.ACTIVE,\n                \"permissions\": [\n                    prisma.enums.APIKeyPermission.EXECUTE_GRAPH,\n                    prisma.enums.APIKeyPermission.READ_GRAPH,\n                ],\n                \"description\": faker.text(),\n                \"userId\": user.id,\n            }\n        )\n\n\n    await db.disconnect()\n\n"
    },
    {
      "id": "n5",
      "code": "if __name__ == \"__main__\":\n    asyncio.run(main())\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}