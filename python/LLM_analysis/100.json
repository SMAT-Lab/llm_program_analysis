{
  "nodes": [
    {
      "id": "n0",
      "code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n\nfrom backend.data.model import SchemaField\n\nfrom backend.util.request import requests\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class JinaChunkingBlock(Block):\n"
    },
    {
      "id": "n2",
      "code": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to chunk\")\n\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        max_chunk_length: int = SchemaField(\n            description=\"Maximum length of each chunk\", default=1000\n        )\n        return_tokens: bool = SchemaField(\n            description=\"Whether to return token information\", default=False\n        )\n\n"
    },
    {
      "id": "n3",
      "code": "    class Output(BlockSchema):\n        chunks: list = SchemaField(description=\"List of chunked texts\")\n        tokens: list = SchemaField(\n            description=\"List of token information for each chunk\", optional=True\n        )\n\n"
    },
    {
      "id": "n4",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n            description=\"Chunks texts using Jina AI's segmentation service\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=JinaChunkingBlock.Input,\n            output_schema=JinaChunkingBlock.Output,\n        )\n\n\n    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n\n        url = \"https://segment.jina.ai/\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n\n        all_chunks = []\n        all_tokens = []\n\n"
    },
    {
      "id": "n5",
      "code": "        for text in input_data.texts:\n            data = {\n                \"content\": text,\n                \"return_tokens\": str(input_data.return_tokens).lower(),\n                \"return_chunks\": \"true\",\n                \"max_chunk_length\": str(input_data.max_chunk_length),\n            }\n\n\n            response = requests.post(url, headers=headers, json=data)\n            result = response.json()\n\n\n            all_chunks.extend(result.get(\"chunks\", []))\n\n            if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))\n"
    },
    {
      "id": "n6",
      "code": "\n        yield \"chunks\", all_chunks\n\n        if input_data.return_tokens:\n            yield \"tokens\", all_tokens\n"
    },
    {
      "id": "n7",
      "code": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to chunk\")\n\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n        max_chunk_length: int = SchemaField(\n            description=\"Maximum length of each chunk\", default=1000\n        )\n\n        return_tokens: bool = SchemaField(\n            description=\"Whether to return token information\", default=False\n        )\n"
    },
    {
      "id": "n8",
      "code": "    class Output(BlockSchema):\n        chunks: list = SchemaField(description=\"List of chunked texts\")\n        tokens: list = SchemaField(\n            description=\"List of token information for each chunk\", optional=True\n        )\n"
    },
    {
      "id": "n9",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n            description=\"Chunks texts using Jina AI's segmentation service\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=JinaChunkingBlock.Input,\n            output_schema=JinaChunkingBlock.Output,\n        )\n"
    },
    {
      "id": "n10",
      "code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n\n        url = \"https://segment.jina.ai/\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        all_chunks = []\n        all_tokens = []\n"
    },
    {
      "id": "n11",
      "code": "        for text in input_data.texts:\n            data = {\n                \"content\": text,\n                \"return_tokens\": str(input_data.return_tokens).lower(),\n                \"return_chunks\": \"true\",\n                \"max_chunk_length\": str(input_data.max_chunk_length),\n            }\n\n            response = requests.post(url, headers=headers, json=data)\n            result = response.json()\n\n            all_chunks.extend(result.get(\"chunks\", []))\n\n            if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))\n"
    },
    {
      "id": "n12",
      "code": "        yield \"chunks\", all_chunks\n\n        if input_data.return_tokens:\n            yield \"tokens\", all_tokens\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n10",
      "target": "n11"
    }
  ]
}