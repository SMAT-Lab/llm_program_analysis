{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n\nfrom .config import SETTINGS\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n"
    },
    {
      "id": "n1",
      "code": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()\n"
    },
    {
      "id": "n2",
      "code": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n\n    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n\n    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")\n"
    },
    {
      "id": "n3",
      "code": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")\n"
    },
    {
      "id": "n4",
      "code": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n\n    if additional_attributes:\n"
    },
    {
      "id": "n5",
      "code": "        for key, value in additional_attributes.items():\n            builder.set(key, value)\n"
    },
    {
      "id": "n6",
      "code": "    return builder.build()\n"
    },
    {
      "id": "n7",
      "code": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n"
    },
    {
      "id": "n8",
      "code": "        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n\n            try:\n                user_id = kwargs.get(\"user_id\")\n\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n"
    },
    {
      "id": "n9",
      "code": "                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n"
    },
    {
      "id": "n10",
      "code": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n"
    },
    {
      "id": "n11",
      "code": "        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n\n            try:\n                user_id = kwargs.get(\"user_id\")\n\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n"
    },
    {
      "id": "n12",
      "code": "                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n"
    },
    {
      "id": "n13",
      "code": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n"
    },
    {
      "id": "n14",
      "code": "        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator\n"
    },
    {
      "id": "n15",
      "code": "    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n"
    },
    {
      "id": "n16",
      "code": "        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n"
    },
    {
      "id": "n17",
      "code": "                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n"
    },
    {
      "id": "n18",
      "code": "                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n"
    },
    {
      "id": "n19",
      "code": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n"
    },
    {
      "id": "n20",
      "code": "        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n"
    },
    {
      "id": "n21",
      "code": "                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n"
    },
    {
      "id": "n22",
      "code": "                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n"
    },
    {
      "id": "n23",
      "code": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n"
    },
    {
      "id": "n24",
      "code": "        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator\n"
    },
    {
      "id": "n25",
      "code": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)\n"
    },
    {
      "id": "n26",
      "code": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n\n    \"\"\"Decorator for beta features.\"\"\"\n\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)\n"
    },
    {
      "id": "n27",
      "code": "@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n\n    try:\n        yield\n\n    finally:\n        get_client().variation = original_variation\n"
    }
  ],
  "edges": [
    {
      "source": "n7",
      "target": "n11"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n15",
      "target": "n20"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n11",
      "target": "n13"
    }
  ]
}