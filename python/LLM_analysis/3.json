{
  "nodes": [
    {
      "id": "n0",
      "code": "from typing import Type\n\nfrom backend.blocks.ai_music_generator import AIMusicGeneratorBlock\nfrom backend.blocks.ai_shortform_video_block import AIShortformVideoCreatorBlock\nfrom backend.blocks.ideogram import IdeogramModelBlock\nfrom backend.blocks.jina.embeddings import JinaEmbeddingBlock\nfrom backend.blocks.jina.search import ExtractWebsiteContentBlock, SearchTheWebBlock\n\nfrom backend.blocks.llm import (\n    MODEL_METADATA,\n    AIConversationBlock,\n    AIListGeneratorBlock,\n    AIStructuredResponseGeneratorBlock,\n    AITextGeneratorBlock,\n    AITextSummarizerBlock,\n    LlmModel,\n)\n\nfrom backend.blocks.replicate_flux_advanced import ReplicateFluxAdvancedModelBlock\nfrom backend.blocks.talking_head import CreateTalkingAvatarVideoBlock\nfrom backend.blocks.text_to_speech_block import UnrealTextToSpeechBlock\n\nfrom backend.data.block import Block\nfrom backend.data.cost import BlockCost, BlockCostType\n\nfrom backend.integrations.credentials_store import (\n    anthropic_credentials,\n    did_credentials,\n    groq_credentials,\n    ideogram_credentials,\n    jina_credentials,\n    open_router_credentials,\n    openai_credentials,\n    replicate_credentials,\n    revid_credentials,\n    unreal_credentials,\n)\n\n# =============== Configure the cost for each LLM Model call =============== #\n\n\nMODEL_COST: dict[LlmModel, int] = {\n    LlmModel.O1_PREVIEW: 16,\n    LlmModel.O1_MINI: 4,\n    LlmModel.GPT4O_MINI: 1,\n    LlmModel.GPT4O: 3,\n    LlmModel.GPT4_TURBO: 10,\n    LlmModel.GPT3_5_TURBO: 1,\n    LlmModel.CLAUDE_3_5_SONNET: 4,\n    LlmModel.CLAUDE_3_HAIKU: 1,\n    LlmModel.LLAMA3_8B: 1,\n    LlmModel.LLAMA3_70B: 1,\n    LlmModel.MIXTRAL_8X7B: 1,\n    LlmModel.GEMMA_7B: 1,\n    LlmModel.GEMMA2_9B: 1,\n    LlmModel.LLAMA3_1_405B: 1,\n    LlmModel.LLAMA3_1_70B: 1,\n    LlmModel.LLAMA3_1_8B: 1,\n    LlmModel.OLLAMA_LLAMA3_8B: 1,\n    LlmModel.OLLAMA_LLAMA3_405B: 1,\n    LlmModel.OLLAMA_DOLPHIN: 1,\n    LlmModel.GEMINI_FLASH_1_5_8B: 1,\n    LlmModel.GROK_BETA: 5,\n    LlmModel.MISTRAL_NEMO: 1,\n    LlmModel.COHERE_COMMAND_R_08_2024: 1,\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: 3,\n    LlmModel.EVA_QWEN_2_5_32B: 1,\n    LlmModel.DEEPSEEK_CHAT: 2,\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: 1,\n    LlmModel.QWEN_QWQ_32B_PREVIEW: 2,\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: 1,\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: 1,\n    LlmModel.AMAZON_NOVA_LITE_V1: 1,\n    LlmModel.AMAZON_NOVA_MICRO_V1: 1,\n    LlmModel.AMAZON_NOVA_PRO_V1: 1,\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: 1,\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: 1,\n}\n\nfor model in LlmModel:\n    if model not in MODEL_COST:\n        raise ValueError(f\"Missing MODEL_COST for model: {model}\")\n"
    },
    {
      "id": "n1",
      "code": "LLM_COST = (\n\n    # Anthropic Models\n    [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\n                    \"id\": anthropic_credentials.id,\n                    \"provider\": anthropic_credentials.provider,\n                    \"type\": anthropic_credentials.type,\n                },\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"anthropic\"\n    ]\n\n    # OpenAI Models\n    + [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\n                    \"id\": openai_credentials.id,\n                    \"provider\": openai_credentials.provider,\n                    \"type\": openai_credentials.type,\n                },\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"openai\"\n    ]\n\n    # Groq Models\n    + [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\"id\": groq_credentials.id},\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"groq\"\n    ]\n\n    # Open Router Models\n    + [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\n                    \"id\": open_router_credentials.id,\n                    \"provider\": open_router_credentials.provider,\n                    \"type\": open_router_credentials.type,\n                },\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"open_router\"\n    ]\n\n)\n"
    },
    {
      "id": "n2",
      "code": "BLOCK_COSTS: dict[Type[Block], list[BlockCost]] = {\n    AIConversationBlock: LLM_COST,\n    AITextGeneratorBlock: LLM_COST,\n    AIStructuredResponseGeneratorBlock: LLM_COST,\n    AITextSummarizerBlock: LLM_COST,\n    AIListGeneratorBlock: LLM_COST,\n    CreateTalkingAvatarVideoBlock: [\n        BlockCost(\n            cost_amount=15,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": did_credentials.id,\n                    \"provider\": did_credentials.provider,\n                    \"type\": did_credentials.type,\n                }\n            },\n        )\n    ],\n    SearchTheWebBlock: [\n        BlockCost(\n            cost_amount=1,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": jina_credentials.id,\n                    \"provider\": jina_credentials.provider,\n                    \"type\": jina_credentials.type,\n                }\n            },\n        )\n    ],\n    ExtractWebsiteContentBlock: [\n        BlockCost(\n            cost_amount=1,\n            cost_filter={\n                \"raw_content\": False,\n                \"credentials\": {\n                    \"id\": jina_credentials.id,\n                    \"provider\": jina_credentials.provider,\n                    \"type\": jina_credentials.type,\n                },\n            },\n        )\n    ],\n    IdeogramModelBlock: [\n        BlockCost(\n            cost_amount=16,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": ideogram_credentials.id,\n                    \"provider\": ideogram_credentials.provider,\n                    \"type\": ideogram_credentials.type,\n                }\n            },\n        )\n    ],\n    AIShortformVideoCreatorBlock: [\n        BlockCost(\n            cost_amount=50,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": revid_credentials.id,\n                    \"provider\": revid_credentials.provider,\n                    \"type\": revid_credentials.type,\n                }\n            },\n        )\n    ],\n    ReplicateFluxAdvancedModelBlock: [\n        BlockCost(\n            cost_amount=10,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": replicate_credentials.id,\n                    \"provider\": replicate_credentials.provider,\n                    \"type\": replicate_credentials.type,\n                }\n            },\n        )\n    ],\n    AIMusicGeneratorBlock: [\n        BlockCost(\n            cost_amount=11,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": replicate_credentials.id,\n                    \"provider\": replicate_credentials.provider,\n                    \"type\": replicate_credentials.type,\n                }\n            },\n        )\n    ],\n    JinaEmbeddingBlock: [\n        BlockCost(\n            cost_amount=12,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": jina_credentials.id,\n                    \"provider\": jina_credentials.provider,\n                    \"type\": jina_credentials.type,\n                }\n            },\n        )\n    ],\n    UnrealTextToSpeechBlock: [\n        BlockCost(\n            cost_amount=5,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": unreal_credentials.id,\n                    \"provider\": unreal_credentials.provider,\n                    \"type\": unreal_credentials.type,\n                }\n            },\n        )\n    ],\n}\n"
    }
  ],
  "edges": []
}