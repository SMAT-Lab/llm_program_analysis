{
  "nodes": [
    {
      "id": "n0",
      "code": "\"\"\"\nThe command line interface for the agent server\n\"\"\"\n\nimport os\nimport pathlib\n\nimport click\nimport psutil\n\nfrom backend import app\nfrom backend.util.process import AppProcess\n"
    },
    {
      "id": "n1",
      "code": "def get_pid_path() -> pathlib.Path:\n    home_dir = pathlib.Path.home()\n    new_dir = home_dir / \".config\" / \"agpt\"\n    file_path = new_dir / \"running.tmp\"\n    return file_path\n"
    },
    {
      "id": "n2",
      "code": "def get_pid() -> int | None:\n    file_path = get_pid_path()\n\n    if not file_path.exists():\n        return None\n"
    },
    {
      "id": "n3",
      "code": "    os.makedirs(file_path.parent, exist_ok=True)\n\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        pid = file.read()\n\n    try:\n        return int(pid)\n"
    },
    {
      "id": "n4",
      "code": "    except ValueError:\n        return None\n"
    },
    {
      "id": "n5",
      "code": "def write_pid(pid: int):\n    file_path = get_pid_path()\n\n    os.makedirs(file_path.parent, exist_ok=True)\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as file:\n        file.write(str(pid))\n"
    },
    {
      "id": "n6",
      "code": "class MainApp(AppProcess):\n"
    },
    {
      "id": "n7",
      "code": "    def run(self):\n        app.main(silent=True)\n"
    },
    {
      "id": "n8",
      "code": "@click.group()\ndef main():\n    \"\"\"AutoGPT Server CLI Tool\"\"\"\n    pass\n"
    },
    {
      "id": "n9",
      "code": "@main.command()\ndef start():\n\n    \"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\n\n    # Define the path for the new directory and file\n    pid = get_pid()\n\n    if pid and psutil.pid_exists(pid):\n        print(\"Server is already running\")\n        exit(1)\n"
    },
    {
      "id": "n10",
      "code": "    elif pid:\n        print(\"PID does not exist deleting file\")\n        os.remove(get_pid_path())\n"
    },
    {
      "id": "n11",
      "code": "    print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n\n    write_pid(pid)\n    print(\"done\")\n\n    os._exit(status=0)\n"
    },
    {
      "id": "n12",
      "code": "@main.command()\ndef stop():\n\n    \"\"\"\n    Stops the server\n    \"\"\"\n\n    pid = get_pid()\n\n    if not pid:\n        print(\"Server is not running\")\n        return\n"
    },
    {
      "id": "n13",
      "code": "    os.remove(get_pid_path())\n\n    process = psutil.Process(int(pid))\n\n    for child in process.children(recursive=True):\n        child.terminate()\n\n    process.terminate()\n"
    },
    {
      "id": "n14",
      "code": "    print(\"Server Stopped\")\n"
    },
    {
      "id": "n15",
      "code": "@main.command()\ndef gen_encrypt_key():\n\n    \"\"\"\n    Generate a new encryption key\n    \"\"\"\n\n    from cryptography.fernet import Fernet\n\n    print(Fernet.generate_key().decode())\n"
    },
    {
      "id": "n16",
      "code": "@click.group()\ndef test():\n\n    \"\"\"\n    Group for test commands\n    \"\"\"\n    pass\n"
    },
    {
      "id": "n17",
      "code": "@test.command()\n@click.argument(\"server_address\")\ndef reddit(server_address: str):\n\n    \"\"\"\n    Create an event graph\n    \"\"\"\n\n    import requests\n\n    from backend.usecases.reddit_marketing import create_test_graph\n\n    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n\n    response = requests.post(url, headers=headers, data=data)\n\n    graph_id = response.json()[\"id\"]\n    print(f\"Graph created with ID: {graph_id}\")\n"
    },
    {
      "id": "n18",
      "code": "@test.command()\n@click.argument(\"server_address\")\ndef populate_db(server_address: str):\n\n    \"\"\"\n    Create an event graph\n    \"\"\"\n\n    import requests\n\n    from backend.usecases.sample import create_test_graph\n\n    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n\n    response = requests.post(url, headers=headers, data=data)\n\n    graph_id = response.json()[\"id\"]\n\n    if response.status_code == 200:\n"
    },
    {
      "id": "n19",
      "code": "        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n\n        schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\"\n        data = {\n            \"graph_id\": graph_id,\n            \"cron\": \"*/5 * * * *\",\n            \"input_data\": {\"input\": \"Hello, World!\"},\n        }\n        response = requests.post(schedule_url, headers=headers, json=data)\n"
    },
    {
      "id": "n20",
      "code": "    print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")\n"
    },
    {
      "id": "n21",
      "code": "@test.command()\n@click.argument(\"server_address\")\ndef graph(server_address: str):\n\n    \"\"\"\n    Create an event graph\n    \"\"\"\n\n    import requests\n\n    from backend.usecases.sample import create_test_graph\n\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = create_test_graph().model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n"
    },
    {
      "id": "n22",
      "code": "    if response.status_code == 200:\n        print(response.json()[\"id\"])\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n"
    },
    {
      "id": "n23",
      "code": "    else:\n        print(\"Failed to send graph\")\n        print(f\"Response: {response.text}\")\n"
    },
    {
      "id": "n24",
      "code": "@test.command()\n@click.argument(\"graph_id\")\n@click.argument(\"content\")\ndef execute(graph_id: str, content: dict):\n\n    \"\"\"\n    Create an event graph\n    \"\"\"\n\n    import requests\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\n    requests.post(execute_url, headers=headers, json=content)\n"
    },
    {
      "id": "n25",
      "code": "@test.command()\ndef event():\n\n    \"\"\"\n    Send an event to the running server\n    \"\"\"\n\n    print(\"Event sent\")\n"
    },
    {
      "id": "n26",
      "code": "@test.command()\n@click.argument(\"server_address\")\n@click.argument(\"graph_id\")\ndef websocket(server_address: str, graph_id: str):\n\n    \"\"\"\n    Tests the websocket connection.\n    \"\"\"\n\n    import asyncio\n\n    import websockets.asyncio.client\n\n    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage\n\n    async def send_message(server_address: str):\n        uri = f\"ws://{server_address}\"\n\n        async with websockets.asyncio.client.connect(uri) as websocket:\n            try:\n\n                msg = WsMessage(\n                    method=Methods.SUBSCRIBE,\n                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),\n                ).model_dump_json()\n                await websocket.send(msg)\n\n                print(f\"Sending: {msg}\")\n"
    },
    {
      "id": "n27",
      "code": "                while True:\n                    response = await websocket.recv()\n                    print(f\"Response from server: {response}\")\n"
    },
    {
      "id": "n28",
      "code": "            except InterruptedError:\n                exit(0)\n"
    },
    {
      "id": "n29",
      "code": "    asyncio.run(send_message(server_address))\n\n    print(\"Testing WS\")\n"
    },
    {
      "id": "n30",
      "code": "main.add_command(test)\n"
    },
    {
      "id": "n31",
      "code": "if __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "edges": [
    {
      "source": "n27",
      "target": "n27"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    }
  ]
}