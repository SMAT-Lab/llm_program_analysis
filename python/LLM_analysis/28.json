{
  "nodes": [
    {
      "id": "n0",
      "code": "from enum import Enum\nfrom typing import Any, Optional\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import BlockInput\n"
    },
    {
      "id": "n1",
      "code": "class BlockCostType(str, Enum):\n    RUN = \"run\"  # cost X credits per run\n    BYTE = \"byte\"  # cost X credits per byte\n    SECOND = \"second\"  # cost X credits per second\n    DOLLAR = \"dollar\"  # cost X dollars per run\n"
    },
    {
      "id": "n2",
      "code": "class BlockCost(BaseModel):\n    cost_amount: int\n    cost_filter: BlockInput\n    cost_type: BlockCostType\n"
    },
    {
      "id": "n3",
      "code": "    def __init__(\n        self,\n        cost_amount: int,\n        cost_type: BlockCostType = BlockCostType.RUN,\n        cost_filter: Optional[BlockInput] = None,\n        **data: Any,\n    ) -> None:\n\n        super().__init__(\n            cost_amount=cost_amount,\n            cost_filter=cost_filter or {},\n            cost_type=cost_type,\n            **data,\n        )\n"
    },
    {
      "id": "n4",
      "code": "    def __init__(\n        self,\n        cost_amount: int,\n        cost_type: BlockCostType = BlockCostType.RUN,\n        cost_filter: Optional[BlockInput] = None,\n        **data: Any,\n    ) -> None:\n\n        super().__init__(\n            cost_amount=cost_amount,\n            cost_filter=cost_filter or {},\n            cost_type=cost_type,\n            **data,\n        )\n"
    }
  ],
  "edges": []
}