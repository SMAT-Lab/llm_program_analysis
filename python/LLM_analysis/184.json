{
  "nodes": [
    {
      "id": "n0",
      "code": "from typing import Dict, Set\n\nfrom fastapi import WebSocket\n\nfrom backend.data import execution\nfrom backend.server.model import Methods, WsMessage\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n\n"
    },
    {
      "id": "n2",
      "code": "    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n\n"
    },
    {
      "id": "n3",
      "code": "    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n\n"
    },
    {
      "id": "n4",
      "code": "    async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n\n"
    },
    {
      "id": "n5",
      "code": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n\n"
    },
    {
      "id": "n6",
      "code": "    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:\n            message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)\n\n"
    },
    {
      "id": "n7",
      "code": "    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n"
    },
    {
      "id": "n8",
      "code": "    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n"
    },
    {
      "id": "n9",
      "code": "    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n"
    },
    {
      "id": "n10",
      "code": "    async def subscribe(self, graph_id: str, websocket: WebSocket):\n\n        if graph_id not in self.subscriptions:\n\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n"
    },
    {
      "id": "n11",
      "code": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n\n        if graph_id in self.subscriptions:\n\n            self.subscriptions[graph_id].discard(websocket)\n\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n"
    },
    {
      "id": "n12",
      "code": "    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n\n        if graph_id in self.subscriptions:\n\n            message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()\n\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)\n"
    }
  ],
  "edges": []
}