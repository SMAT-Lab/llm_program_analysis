{
  "nodes": [
    {
      "id": "n0",
      "code": "from enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
    },
    {
      "id": "n1",
      "code": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"\n"
    },
    {
      "id": "n2",
      "code": "class ConditionBlock(Block):\n"
    },
    {
      "id": "n3",
      "code": "    class Input(BlockSchema):\n        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n"
    },
    {
      "id": "n4",
      "code": "    class Output(BlockSchema):\n        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )\n"
    },
    {
      "id": "n5",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n\n        value1 = input_data.value1\n        if isinstance(value1, str):\n            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n\n\n        value2 = input_data.value2\n        if isinstance(value2, str):\n            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n\n\n        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n\n        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }\n\n        result = comparison_funcs[operator](value1, value2)\n\n        yield \"result\", result\n\n        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value\n"
    },
    {
      "id": "n6",
      "code": "    class Input(BlockSchema):\n\n        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n\n        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n\n        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n\n        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n\n        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n"
    },
    {
      "id": "n7",
      "code": "    class Output(BlockSchema):\n\n        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n\n        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n\n        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )\n"
    },
    {
      "id": "n8",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )\n"
    },
    {
      "id": "n9",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n\n        value1 = input_data.value1\n        if isinstance(value1, str):\n"
    },
    {
      "id": "n10",
      "code": "            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n"
    },
    {
      "id": "n11",
      "code": "        value2 = input_data.value2\n        if isinstance(value2, str):\n"
    },
    {
      "id": "n12",
      "code": "            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n"
    },
    {
      "id": "n13",
      "code": "        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n\n        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }\n\n        result = comparison_funcs[operator](value1, value2)\n\n        yield \"result\", result\n\n        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value\n"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}