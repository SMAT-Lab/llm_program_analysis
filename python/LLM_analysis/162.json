{
  "nodes": [
    {
      "id": "n0",
      "code": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class Rank(Enum):\n\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2\n"
    },
    {
      "id": "n2",
      "code": "class Employee(metaclass=ABCMeta):\n\n"
    },
    {
      "id": "n3",
      "code": "    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n"
    },
    {
      "id": "n4",
      "code": "    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n"
    },
    {
      "id": "n5",
      "code": "    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n"
    },
    {
      "id": "n6",
      "code": "    @abstractmethod\n    def escalate_call(self):\n        pass\n"
    },
    {
      "id": "n7",
      "code": "    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)\n"
    },
    {
      "id": "n8",
      "code": "    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n"
    },
    {
      "id": "n9",
      "code": "    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n"
    },
    {
      "id": "n10",
      "code": "    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n"
    },
    {
      "id": "n11",
      "code": "    def escalate_call(self):\n        pass\n"
    },
    {
      "id": "n12",
      "code": "    def _escalate_call(self):\n\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)\n"
    },
    {
      "id": "n13",
      "code": "class Operator(Employee):\n"
    },
    {
      "id": "n14",
      "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n"
    },
    {
      "id": "n15",
      "code": "    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()\n"
    },
    {
      "id": "n16",
      "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n"
    },
    {
      "id": "n17",
      "code": "    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()\n"
    },
    {
      "id": "n18",
      "code": "class Supervisor(Employee):\n\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n\n\n    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()\n"
    },
    {
      "id": "n19",
      "code": "\n\n"
    },
    {
      "id": "n20",
      "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n"
    },
    {
      "id": "n21",
      "code": "    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()\n"
    },
    {
      "id": "n22",
      "code": "class Director(Employee):\n\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n\n\n    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')\n\n"
    },
    {
      "id": "n23",
      "code": "\n\n"
    },
    {
      "id": "n24",
      "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n"
    },
    {
      "id": "n25",
      "code": "    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')\n"
    },
    {
      "id": "n26",
      "code": "class CallState(Enum):\n\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2\n"
    },
    {
      "id": "n27",
      "code": "class Call(object):\n\n\n    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None\n\n"
    },
    {
      "id": "n28",
      "code": "\n\n"
    },
    {
      "id": "n29",
      "code": "    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None\n"
    },
    {
      "id": "n30",
      "code": "class CallCenter(object):\n\n\n    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n\n"
    },
    {
      "id": "n31",
      "code": "    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n\n        employee = None\n\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n\n        if employee is None:\n            self.queued_calls.append(call)\n"
    },
    {
      "id": "n32",
      "code": "    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None\n"
    },
    {
      "id": "n33",
      "code": "    def notify_call_escalated(self, call):\n        pass\n"
    },
    {
      "id": "n34",
      "code": "    def notify_call_completed(self, call):\n        pass\n"
    },
    {
      "id": "n35",
      "code": "    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass\n"
    },
    {
      "id": "n36",
      "code": "    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n\n"
    },
    {
      "id": "n37",
      "code": "    def dispatch_call(self, call):\n\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n\n        employee = None\n\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n\n        if employee is None:\n            self.queued_calls.append(call)\n"
    },
    {
      "id": "n38",
      "code": "    def _dispatch_call(self, call, employees):\n\n        for employee in employees:\n"
    },
    {
      "id": "n39",
      "code": "            if employee.call is None:\n                employee.take_call(call)\n                return employee\n"
    },
    {
      "id": "n40",
      "code": "        return None\n"
    },
    {
      "id": "n41",
      "code": "    def notify_call_escalated(self, call):\n        pass\n"
    },
    {
      "id": "n42",
      "code": "    def notify_call_completed(self, call):\n        pass\n"
    },
    {
      "id": "n43",
      "code": "    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass\n"
    }
  ],
  "edges": [
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n39",
      "target": "n40"
    },
    {
      "source": "n38",
      "target": "n40"
    }
  ]
}