{
  "nodes": [
    {
      "id": "n0",
      "code": "import subprocess\nimport sys\nimport time\n"
    },
    {
      "id": "n1",
      "code": "def wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n"
    },
    {
      "id": "n2",
      "code": "    for _ in range(max_retries):\n        try:\n\n        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n"
    },
    {
      "id": "n3",
      "code": "            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n"
    },
    {
      "id": "n4",
      "code": "        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n"
    },
    {
      "id": "n5",
      "code": "    print(\"Failed to connect to PostgreSQL.\")\n    return False\n"
    },
    {
      "id": "n6",
      "code": "def run_command(command, check=True):\n\n    try:\n        subprocess.run(command, check=check)\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)\n"
    },
    {
      "id": "n7",
      "code": "def test():\n\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )\n\n    if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)\n"
    },
    {
      "id": "n8",
      "code": "    run_command([\"prisma\", \"migrate\", \"dev\"])\n\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n"
    },
    {
      "id": "n9",
      "code": "    sys.exit(result.returncode)\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n4",
      "target": "n2"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}