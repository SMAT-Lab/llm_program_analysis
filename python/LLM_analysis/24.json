{
  "nodes": [
    {
      "id": "n0",
      "code": "from backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\n\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\n\nfrom .base import Slant3DBlockBase\n"
    },
    {
      "id": "n1",
      "code": "class Slant3DSlicerBlock(Slant3DBlockBase):\n    \"\"\"Block for slicing 3D model files\"\"\"\n\n"
    },
    {
      "id": "n2",
      "code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        file_url: str = SchemaField(\n            description=\"URL of the 3D model file to slice (STL)\"\n        )\n"
    },
    {
      "id": "n3",
      "code": "    class Output(BlockSchema):\n        message: str = SchemaField(description=\"Response message\")\n        price: float = SchemaField(description=\"Calculated price for printing\")\n        error: str = SchemaField(description=\"Error message if slicing failed\")\n"
    },
    {
      "id": "n4",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\",\n            description=\"Slice a 3D model file and get pricing information\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"file_url\": \"https://example.com/model.stl\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"message\": \"Slicing successful\",\n                    \"data\": {\"price\": 8.23},\n                }\n            },\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n\n        try:\n            result = self._make_request(\n                \"POST\",\n                \"slicer\",\n                credentials.api_key.get_secret_value(),\n                json={\"fileURL\": input_data.file_url},\n            )\n"
    },
    {
      "id": "n5",
      "code": "            yield \"message\", result[\"message\"]\n            yield \"price\", result[\"data\"][\"price\"]\n"
    },
    {
      "id": "n6",
      "code": "        except Exception as e:\n            yield \"error\", str(e)\n            raise\n"
    },
    {
      "id": "n7",
      "code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        file_url: str = SchemaField(\n            description=\"URL of the 3D model file to slice (STL)\"\n        )\n"
    },
    {
      "id": "n8",
      "code": "    class Output(BlockSchema):\n        message: str = SchemaField(description=\"Response message\")\n        price: float = SchemaField(description=\"Calculated price for printing\")\n        error: str = SchemaField(description=\"Error message if slicing failed\")\n"
    },
    {
      "id": "n9",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\",\n            description=\"Slice a 3D model file and get pricing information\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"file_url\": \"https://example.com/model.stl\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"message\": \"Slicing successful\",\n                    \"data\": {\"price\": 8.23},\n                }\n            },\n        )\n"
    },
    {
      "id": "n10",
      "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n\n        try:\n            result = self._make_request(\n                \"POST\",\n                \"slicer\",\n                credentials.api_key.get_secret_value(),\n                json={\"fileURL\": input_data.file_url},\n            )\n            yield \"message\", result[\"message\"]\n            yield \"price\", result[\"data\"][\"price\"]\n\n        except Exception as e:\n            yield \"error\", str(e)\n            raise\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n5"
    }
  ]
}