{
  "nodes": [
    {
      "id": "n0",
      "code": "class Item(object):\n\n\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n"
    },
    {
      "id": "n1",
      "code": "\n\n\n"
    },
    {
      "id": "n2",
      "code": "class HashTable(object):\n\n"
    },
    {
      "id": "n3",
      "code": "    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n\n"
    },
    {
      "id": "n4",
      "code": "    def _hash_function(self, key):\n        return key % self.size\n\n"
    },
    {
      "id": "n5",
      "code": "    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))\n\n"
    },
    {
      "id": "n6",
      "code": "    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')\n\n"
    },
    {
      "id": "n7",
      "code": "    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')\n\n"
    },
    {
      "id": "n8",
      "code": "    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n"
    },
    {
      "id": "n9",
      "code": "    def _hash_function(self, key):\n        return key % self.size\n"
    },
    {
      "id": "n10",
      "code": "    def set(self, key, value):\n        hash_index = self._hash_function(key)\n\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n\n        self.table[hash_index].append(Item(key, value))\n"
    },
    {
      "id": "n11",
      "code": "    def get(self, key):\n        hash_index = self._hash_function(key)\n\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n\n        raise KeyError('Key not found')\n"
    },
    {
      "id": "n12",
      "code": "    def remove(self, key):\n        hash_index = self._hash_function(key)\n\n        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n\n        raise KeyError('Key not found')\n"
    }
  ],
  "edges": []
}