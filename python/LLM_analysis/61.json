{
  "nodes": [
    {
      "id": "n0",
      "code": "import json\nfrom typing import Any, Type, TypeVar, overload\n\nimport jsonschema\nfrom fastapi.encoders import jsonable_encoder\n\nfrom .type import type_match\n"
    },
    {
      "id": "n1",
      "code": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)\n"
    },
    {
      "id": "n2",
      "code": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))\n"
    },
    {
      "id": "n3",
      "code": "T = TypeVar(\"T\")\n"
    },
    {
      "id": "n4",
      "code": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n"
    },
    {
      "id": "n5",
      "code": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...\n"
    },
    {
      "id": "n6",
      "code": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n\n    if target_type:\n        return type_match(parsed, target_type)\n\n    return parsed\n"
    },
    {
      "id": "n7",
      "code": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n\n    try:\n        jsonschema.validate(data, schema)\n        return None\n\n    except jsonschema.ValidationError as e:\n        return str(e)\n"
    }
  ],
  "edges": []
}