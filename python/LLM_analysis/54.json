{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\n\nimport re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\n\n\n# Temporary replacement\n# The descriptions that contain () at the end must adapt to the new policy later\npunctuation = punctuation.replace('()', '')\n\n\n\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\n\n\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\n\n\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\n\n\nanchor_re = re.compile(anchor + '\\s(.+)')\ncategory_title_in_index_re = re.compile('\\*\\s\\[(.*)\\]')\nlink_re = re.compile('\\[(.+)\\]\\((http.*)\\)')\n\n\n# Type aliases\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def error_message(line_number: int, message: str) -> str:\n    line = line_number + 1\n    return f'(L{line:03d}) {message}'\n"
    },
    {
      "id": "n2",
      "code": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n\n\n    categories = {}\n    category_line_num = {}\n\n"
    },
    {
      "id": "n3",
      "code": "    for line_num, line_content in enumerate(contents):\n\n"
    },
    {
      "id": "n4",
      "code": "        if line_content.startswith(anchor):\n            category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue\n"
    },
    {
      "id": "n5",
      "code": "        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n"
    },
    {
      "id": "n6",
      "code": "        raw_title = [\n            raw_content.strip() for raw_content in line_content.split('|')[1:-1]\n        ][0]\n\n\n        title_match = link_re.match(raw_title)\n        if title_match:\n                title = title_match.group(1).upper()\n                categories[category].append(title)\n"
    },
    {
      "id": "n7",
      "code": "    return (categories, category_line_num)\n\n"
    },
    {
      "id": "n8",
      "code": "def check_alphabetical_order(lines: List[str]) -> List[str]:\n\n\n    err_msgs = []\n\n\n    categories, category_line_num = get_categories_content(contents=lines)\n\n"
    },
    {
      "id": "n9",
      "code": "    for category, api_list in categories.items():\n"
    },
    {
      "id": "n10",
      "code": "        if sorted(api_list) != api_list:\n            err_msg = error_message(\n                category_line_num[category], \n                f'{category} category is not alphabetical order'\n            )\n            err_msgs.append(err_msg)\n"
    },
    {
      "id": "n11",
      "code": "    \n    return err_msgs\n"
    },
    {
      "id": "n12",
      "code": "\n"
    },
    {
      "id": "n13",
      "code": "def check_title(line_num: int, raw_title: str) -> List[str]:\n\n    err_msgs = []\n\n    title_match = link_re.match(raw_title)\n"
    },
    {
      "id": "n14",
      "code": "    if not title_match:\n        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)\n"
    },
    {
      "id": "n15",
      "code": "    else:\n        # do not allow \"... API\" in the entry title\n        title = title_match.group(1)\n\n        if title.upper().endswith(' API'):\n            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)\n"
    },
    {
      "id": "n16",
      "code": "    return err_msgs\n"
    },
    {
      "id": "n17",
      "code": "def check_description(line_num: int, description: str) -> List[str]:\n\n\n    err_msgs = []\n\n\n    first_char = description[0]\n    if first_char.upper() != first_char:\n"
    },
    {
      "id": "n18",
      "code": "        err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)\n"
    },
    {
      "id": "n19",
      "code": "\n\n    last_char = description[-1]\n    if last_char in punctuation:\n"
    },
    {
      "id": "n20",
      "code": "        err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)\n"
    },
    {
      "id": "n21",
      "code": "\n\n    desc_length = len(description)\n    if desc_length > max_description_length:\n"
    },
    {
      "id": "n22",
      "code": "        err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)\n"
    },
    {
      "id": "n23",
      "code": "    \n\n    return err_msgs\n\n"
    },
    {
      "id": "n24",
      "code": "def check_auth(line_num: int, auth: str) -> List[str]:\n\n\n    err_msgs = []\n\n    backtick = '`'\n"
    },
    {
      "id": "n25",
      "code": "    if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):\n        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)\n"
    },
    {
      "id": "n26",
      "code": "    if auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)\n\n    return err_msgs\n"
    },
    {
      "id": "n27",
      "code": "def check_https(line_num: int, https: str) -> List[str]:\n\n    err_msgs = []\n\n    if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)\n\n    return err_msgs\n"
    },
    {
      "id": "n28",
      "code": "def check_cors(line_num: int, cors: str) -> List[str]:\n\n\n    err_msgs = []\n\n\n    if cors not in cors_keys:\n        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)\n\n    return err_msgs\n"
    },
    {
      "id": "n29",
      "code": "def check_entry(line_num: int, segments: List[str]) -> List[str]:\n\n\n    raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]\n\n\n    title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)\n\n    err_msgs = [\n        *title_err_msgs,\n        *desc_err_msgs,\n        *auth_err_msgs,\n        *https_err_msgs,\n        *cors_err_msgs\n    ]\n\n    return err_msgs\n\n"
    },
    {
      "id": "n30",
      "code": "def check_file_format(lines: List[str]) -> List[str]:\n\n\n    err_msgs = []\n    category_title_in_index = []\n\n\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n\n\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n\n"
    },
    {
      "id": "n31",
      "code": "    for line_num, line_content in enumerate(lines):\n\n"
    },
    {
      "id": "n32",
      "code": "        category_title_match = category_title_in_index_re.match(line_content)\n        if category_title_match:\n            category_title_in_index.append(category_title_match.group(1))\n\n\n        # check each category for the minimum number of entries\n        if line_content.startswith(anchor):\n            category_match = anchor_re.match(line_content)\n            if category_match:\n                if category_match.group(1) not in category_title_in_index:\n                    err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n                    err_msgs.append(err_msg)\n            else:\n                err_msg = error_message(line_num, 'category header is not formatted correctly')\n                err_msgs.append(err_msg)\n\n"
    },
    {
      "id": "n33",
      "code": "            if num_in_category < min_entries_per_category:\n                err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n                err_msgs.append(err_msg)\n\n"
    },
    {
      "id": "n34",
      "code": "            category = line_content.split(' ')[1]\n            category_line = line_num\n            num_in_category = 0\n            continue\n\n"
    },
    {
      "id": "n35",
      "code": "        # skips lines that we do not care about\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n\n"
    },
    {
      "id": "n36",
      "code": "        num_in_category += 1\n        segments = line_content.split('|')[1:-1]\n        if len(segments) < num_segments:\n            err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n            err_msgs.append(err_msg)\n            continue\n    \n"
    },
    {
      "id": "n37",
      "code": "        for segment in segments:\n            # every line segment should start and end with exactly 1 space\n            if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\n                err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n                err_msgs.append(err_msg)\n        \n\n        segments = [segment.strip() for segment in segments]\n        entry_err_msgs = check_entry(line_num, segments)\n        err_msgs.extend(entry_err_msgs)\n    \n"
    },
    {
      "id": "n38",
      "code": "    return err_msgs\n\n"
    },
    {
      "id": "n39",
      "code": "def main(filename: str) -> None:\n\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list(line.rstrip() for line in file)\n\n\n    file_format_err_msgs = check_file_format(lines)\n\n\n    if file_format_err_msgs:\n        for err_msg in file_format_err_msgs:\n            print(err_msg)\n        sys.exit(1)\n\n"
    },
    {
      "id": "n40",
      "code": "if __name__ == '__main__':\n\n    num_args = len(sys.argv)\n\n    if num_args < 2:\n        print('No .md file passed (file should contain Markdown table syntax)')\n        sys.exit(1)\n"
    },
    {
      "id": "n41",
      "code": "    filename = sys.argv[1]\n"
    },
    {
      "id": "n42",
      "code": "    main(filename)\n"
    }
  ],
  "edges": [
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n5",
      "target": "n3"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n40",
      "target": "n41"
    },
    {
      "source": "n31",
      "target": "n38"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n36",
      "target": "n31"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n37",
      "target": "n31"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n35",
      "target": "n31"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n40",
      "target": "n42"
    },
    {
      "source": "n4",
      "target": "n3"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n10",
      "target": "n9"
    },
    {
      "source": "n33",
      "target": "n34"
    },
    {
      "source": "n36",
      "target": "n37"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n34",
      "target": "n31"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n41",
      "target": "n42"
    }
  ]
}