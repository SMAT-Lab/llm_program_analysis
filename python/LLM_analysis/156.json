{
  "nodes": [
    {
      "id": "n0",
      "code": "from fastapi import HTTPException, Request\nfrom starlette.middleware.base import RequestResponseEndpoint\n\nfrom .limiter import RateLimiter\n"
    },
    {
      "id": "n1",
      "code": "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n\n    if not request.url.path.startswith(\"/api\"):\n        return await call_next(request)\n"
    },
    {
      "id": "n2",
      "code": "    api_key = request.headers.get(\"Authorization\")\n    if not api_key:\n        return await call_next(request)\n"
    },
    {
      "id": "n3",
      "code": "    api_key = api_key.replace(\"Bearer \", \"\")\n\n    is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)\n\n    if not is_allowed:\n        raise HTTPException(\n            status_code=429, detail=\"Rate limit exceeded. Please try again later.\"\n        )\n"
    },
    {
      "id": "n4",
      "code": "    response = await call_next(request)\n    response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)\n    response.headers[\"X-RateLimit-Remaining\"] = str(remaining)\n    response.headers[\"X-RateLimit-Reset\"] = str(reset_time)\n"
    },
    {
      "id": "n5",
      "code": "    return response\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}