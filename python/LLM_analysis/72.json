{
  "nodes": [
    {
      "id": "n0",
      "code": "import json\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n"
    },
    {
      "id": "n1",
      "code": "class HttpMethod(Enum):\n    GET = \"GET\"\n    POST = \"POST\"\n    PUT = \"PUT\"\n    DELETE = \"DELETE\"\n    PATCH = \"PATCH\"\n    OPTIONS = \"OPTIONS\"\n    HEAD = \"HEAD\"\n\n"
    },
    {
      "id": "n2",
      "code": "class SendWebRequestBlock(Block):\n"
    },
    {
      "id": "n3",
      "code": "    class Input(BlockSchema):\n        url: str = SchemaField(\n            description=\"The URL to send the request to\",\n            placeholder=\"https://api.example.com\",\n        )\n        method: HttpMethod = SchemaField(\n            description=\"The HTTP method to use for the request\",\n            default=HttpMethod.POST,\n        )\n        headers: dict[str, str] = SchemaField(\n            description=\"The headers to include in the request\",\n            default={},\n        )\n        json_format: bool = SchemaField(\n            title=\"JSON format\",\n            description=\"Whether to send and receive body as JSON\",\n            default=True,\n        )\n        body: Any = SchemaField(\n            description=\"The body of the request\",\n            default=None,\n        )\n"
    },
    {
      "id": "n4",
      "code": "    class Output(BlockSchema):\n        response: object = SchemaField(description=\"The response from the server\")\n        client_error: object = SchemaField(description=\"The error on 4xx status codes\")\n        server_error: object = SchemaField(description=\"The error on 5xx status codes\")\n"
    },
    {
      "id": "n5",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\",\n            description=\"This block makes an HTTP request to the given URL.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendWebRequestBlock.Input,\n            output_schema=SendWebRequestBlock.Output,\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n\n        response = requests.request(\n            input_data.method.value,\n            input_data.url,\n            headers=input_data.headers,\n            json=input_data.body if input_data.json_format else None,\n            data=input_data.body if not input_data.json_format else None,\n        )\n\n        result = response.json() if input_data.json_format else response.text\n\n        if response.status_code // 100 == 2:\n            yield \"response\", result\n"
    },
    {
      "id": "n6",
      "code": "        elif response.status_code // 100 == 4:\n            yield \"client_error\", result\n"
    },
    {
      "id": "n7",
      "code": "        elif response.status_code // 100 == 5:\n            yield \"server_error\", result\n"
    },
    {
      "id": "n8",
      "code": "        else:\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")\n"
    },
    {
      "id": "n9",
      "code": "    class Input(BlockSchema):\n\n        url: str = SchemaField(\n            description=\"The URL to send the request to\",\n            placeholder=\"https://api.example.com\",\n        )\n\n        method: HttpMethod = SchemaField(\n            description=\"The HTTP method to use for the request\",\n            default=HttpMethod.POST,\n        )\n\n        headers: dict[str, str] = SchemaField(\n            description=\"The headers to include in the request\",\n            default={},\n        )\n\n        json_format: bool = SchemaField(\n            title=\"JSON format\",\n            description=\"Whether to send and receive body as JSON\",\n            default=True,\n        )\n\n        body: Any = SchemaField(\n            description=\"The body of the request\",\n            default=None,\n        )\n"
    },
    {
      "id": "n10",
      "code": "    class Output(BlockSchema):\n        response: object = SchemaField(description=\"The response from the server\")\n        client_error: object = SchemaField(description=\"The error on 4xx status codes\")\n        server_error: object = SchemaField(description=\"The error on 5xx status codes\")\n"
    },
    {
      "id": "n11",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\",\n            description=\"This block makes an HTTP request to the given URL.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendWebRequestBlock.Input,\n            output_schema=SendWebRequestBlock.Output,\n        )\n"
    },
    {
      "id": "n12",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n\n        response = requests.request(\n            input_data.method.value,\n            input_data.url,\n            headers=input_data.headers,\n            json=input_data.body if input_data.json_format else None,\n            data=input_data.body if not input_data.json_format else None,\n        )\n\n        result = response.json() if input_data.json_format else response.text\n\n        if response.status_code // 100 == 2:\n            yield \"response\", result\n"
    },
    {
      "id": "n13",
      "code": "        elif response.status_code // 100 == 4:\n            yield \"client_error\", result\n"
    },
    {
      "id": "n14",
      "code": "        elif response.status_code // 100 == 5:\n            yield \"server_error\", result\n"
    },
    {
      "id": "n15",
      "code": "        else:\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n12",
      "target": "n15"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}