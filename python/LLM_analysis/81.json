{
  "nodes": [
    {
      "id": "n0",
      "code": "import pytest\n\nfrom backend.util.service import AppService, expose, get_service_client\n\nTEST_SERVICE_PORT = 8765\n"
    },
    {
      "id": "n1",
      "code": "class ServiceTest(AppService):\n\n    def __init__(self):\n        super().__init__()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n\n    @expose\n    def add(self, a: int, b: int) -> int:\n        return a + b\n\n    @expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b\n\n    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))\n"
    },
    {
      "id": "n2",
      "code": "    def __init__(self):\n        super().__init__()\n"
    },
    {
      "id": "n3",
      "code": "    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n"
    },
    {
      "id": "n4",
      "code": "    def add(self, a: int, b: int) -> int:\n        return a + b\n"
    },
    {
      "id": "n5",
      "code": "    @expose\n    def subtract(self, a: int, b: int) -> int:\n\n        return a - b\n"
    },
    {
      "id": "n6",
      "code": "    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n\n        return self.run_and_wait(add_async(a, b))\n"
    },
    {
      "id": "n7",
      "code": "        async def add_async(a: int, b: int) -> int:\n            return a + b\n"
    },
    {
      "id": "n8",
      "code": "        async def add_async(a: int, b: int) -> int:\n            return a + b\n"
    },
    {
      "id": "n9",
      "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_service_creation(server):\n\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8\n"
    }
  ],
  "edges": []
}