{
  "nodes": [
    {
      "id": "n0",
      "code": "import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\n"
    },
    {
      "id": "n1",
      "code": "class EmailCredentials(BaseModel):\n\n    smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )\n\n    smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")\n\n    smtp_username: BlockSecret = SecretField(key=\"smtp_username\")\n    smtp_password: BlockSecret = SecretField(key=\"smtp_password\")\n\n    model_config = ConfigDict(title=\"Email Credentials\")\n"
    },
    {
      "id": "n2",
      "code": "class SendEmailBlock(Block):\n    class Input(BlockSchema):\n\n        to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )\n\n        subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )\n\n        body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )\n\n        creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the email sending operation\")\n\n        error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )\n\n    @staticmethod\n    def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:\n\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n\n        msg = MIMEMultipart()\n        msg[\"From\"] = smtp_username\n        msg[\"To\"] = to_email\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))\n\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n\n        return \"Email sent successfully\"\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"status\", self.send_email(\n            input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )\n"
    },
    {
      "id": "n3",
      "code": "    class Input(BlockSchema):\n\n        to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )\n\n        subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )\n\n        body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )\n\n        creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )\n"
    },
    {
      "id": "n4",
      "code": "    class Output(BlockSchema):\n\n        status: str = SchemaField(description=\"Status of the email sending operation\")\n        error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )\n"
    },
    {
      "id": "n5",
      "code": "    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )\n"
    },
    {
      "id": "n6",
      "code": "    @staticmethod\n    def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:\n\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n\n        msg = MIMEMultipart()\n        msg[\"From\"] = smtp_username\n        msg[\"To\"] = to_email\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))\n\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n\n        return \"Email sent successfully\"\n"
    },
    {
      "id": "n7",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"status\", self.send_email(\n            input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )\n"
    }
  ],
  "edges": []
}