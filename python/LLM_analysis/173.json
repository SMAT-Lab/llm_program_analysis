{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n"
    },
    {
      "id": "n1",
      "code": "class SalesRanker(MRJob):\n\n"
    },
    {
      "id": "n2",
      "code": "    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n"
    },
    {
      "id": "n3",
      "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n"
    },
    {
      "id": "n4",
      "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n\n        yield key, sum(values)\n"
    },
    {
      "id": "n5",
      "code": "    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n"
    },
    {
      "id": "n6",
      "code": "    def reducer_identity(self, key, value):\n        yield key, value\n"
    },
    {
      "id": "n7",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n"
    },
    {
      "id": "n8",
      "code": "    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n\n        ...\n"
    },
    {
      "id": "n9",
      "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n\n        timestamp, product_id, category, quantity = line.split('\\t')\n\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n"
    },
    {
      "id": "n10",
      "code": "    def reducer(self, key, values):\n\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n\n        yield key, sum(values)\n"
    },
    {
      "id": "n11",
      "code": "    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n"
    },
    {
      "id": "n12",
      "code": "    def reducer_identity(self, key, value):\n        yield key, value\n"
    },
    {
      "id": "n13",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n"
    },
    {
      "id": "n14",
      "code": "if __name__ == '__main__':\n    SalesRanker.run()\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n7"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n5"
    }
  ]
}