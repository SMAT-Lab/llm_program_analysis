{
  "nodes": [
    {
      "id": "n0",
      "code": "#!/usr/bin/env python\n# coding: utf-8\n\n\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\n\n\n"
    },
    {
      "id": "n1",
      "code": "def sort_blocks():\n\n    # First, we load the current README into memory\n\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()\n\n\n\n    # Separating the 'table of contents' from the contents (blocks)\n\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n\n    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + '\\n'\n        else:\n            blocks[i] = '# ' + blocks[i] + '\\n'\n\n\n\n    # Sorting the libraries\n\n    inner_blocks = sorted(blocks[0].split('##'))\n    for i in range(1, len(inner_blocks)):\n        if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]\n    inner_blocks = ''.join(inner_blocks)\n\n\n\n    # Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\n\n    blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)\n\n\n\n    with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)\n\n\n\n"
    },
    {
      "id": "n2",
      "code": "def main():\n\n    # First, we load the current README into memory as an array of lines\n\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n\n\n    # Then we cluster the lines together as blocks\n    # Each block represents a collection of lines that should be sorted\n    # This was done by assuming only links ([...](...)) are meant to be sorted\n    # Clustering is done by indentation\n\n    blocks = []\n    last_indent = None\n"
    },
    {
      "id": "n3",
      "code": "    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n\n"
    },
    {
      "id": "n4",
      "code": "        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n            if indent == last_indent:\n                blocks[-1].append(line)\n            else:\n                blocks.append([line])\n            last_indent = indent\n"
    },
    {
      "id": "n5",
      "code": "        else:\n            blocks.append([line])\n            last_indent = None\n"
    },
    {
      "id": "n6",
      "code": "\n\n    with open('README.md', 'w+') as sorted_file:\n        # Then all of the blocks are sorted individually\n\n        blocks = [\n            ''.join(sorted(block, key=str.lower)) for block in blocks\n        ]\n\n        # And the result is written back to README.md\n        sorted_file.write(''.join(blocks))\n\n\n\n    # Then we call the sorting method\n    sort_blocks()\n\n\n"
    },
    {
      "id": "n7",
      "code": "if __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "edges": [
    {
      "source": "n4",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}