{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\nfrom typing import TYPE_CHECKING, AsyncGenerator, Optional\n\nfrom prisma import Json\nfrom prisma.models import IntegrationWebhook\nfrom pydantic import Field, computed_field\n\nfrom backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE\nfrom backend.data.queue import AsyncRedisEventBus\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\n\nfrom .db import BaseDbModel\n\nif TYPE_CHECKING:\n    from .graph import NodeModel\n\nlogger = logging.getLogger(__name__)\n"
    },
    {
      "id": "n1",
      "code": "class Webhook(BaseDbModel):\n    user_id: str\n    provider: ProviderName\n    credentials_id: str\n    webhook_type: str\n    resource: str\n    events: list[str]\n    config: dict = Field(default_factory=dict)\n    secret: str\n\n    provider_webhook_id: str\n\n    attached_nodes: Optional[list[\"NodeModel\"]] = None\n\n"
    },
    {
      "id": "n2",
      "code": "    @computed_field\n    @property\n    def url(self) -> str:\n        return webhook_ingress_url(self.provider.value, self.id)\n"
    },
    {
      "id": "n3",
      "code": "    @staticmethod\n    def from_db(webhook: IntegrationWebhook):\n        from .graph import NodeModel\n\n        return Webhook(\n            id=webhook.id,\n            user_id=webhook.userId,\n            provider=ProviderName(webhook.provider),\n            credentials_id=webhook.credentialsId,\n            webhook_type=webhook.webhookType,\n            resource=webhook.resource,\n            events=webhook.events,\n            config=dict(webhook.config),\n            secret=webhook.secret,\n            provider_webhook_id=webhook.providerWebhookId,\n            attached_nodes=(\n                [NodeModel.from_db(node) for node in webhook.AgentNodes]\n                if webhook.AgentNodes is not None\n                else None\n            ),\n        )\n"
    },
    {
      "id": "n4",
      "code": "    def url(self) -> str:\n        return webhook_ingress_url(self.provider.value, self.id)\n"
    },
    {
      "id": "n5",
      "code": "    def from_db(webhook: IntegrationWebhook):\n        from .graph import NodeModel\n\n        return Webhook(\n            id=webhook.id,\n            user_id=webhook.userId,\n            provider=ProviderName(webhook.provider),\n            credentials_id=webhook.credentialsId,\n            webhook_type=webhook.webhookType,\n            resource=webhook.resource,\n            events=webhook.events,\n            config=dict(webhook.config),\n            secret=webhook.secret,\n            provider_webhook_id=webhook.providerWebhookId,\n            attached_nodes=(\n                [NodeModel.from_db(node) for node in webhook.AgentNodes]\n                if webhook.AgentNodes is not None\n                else None\n            ),\n        )\n"
    },
    {
      "id": "n6",
      "code": "async def create_webhook(webhook: Webhook) -> Webhook:\n\n    created_webhook = await IntegrationWebhook.prisma().create(\n        data={\n            \"id\": webhook.id,\n            \"userId\": webhook.user_id,\n            \"provider\": webhook.provider.value,\n            \"credentialsId\": webhook.credentials_id,\n            \"webhookType\": webhook.webhook_type,\n            \"resource\": webhook.resource,\n            \"events\": webhook.events,\n            \"config\": Json(webhook.config),\n            \"secret\": webhook.secret,\n            \"providerWebhookId\": webhook.provider_webhook_id,\n        }\n    )\n\n    return Webhook.from_db(created_webhook)\n"
    },
    {
      "id": "n7",
      "code": "async def get_webhook(webhook_id: str) -> Webhook:\n    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n\n    webhook = await IntegrationWebhook.prisma().find_unique_or_raise(\n        where={\"id\": webhook_id},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n\n    return Webhook.from_db(webhook)\n"
    },
    {
      "id": "n8",
      "code": "async def get_all_webhooks_by_creds(credentials_id: str) -> list[Webhook]:\n    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n\n    if not credentials_id:\n        raise ValueError(\"credentials_id must not be empty\")\n\n    webhooks = await IntegrationWebhook.prisma().find_many(\n        where={\"credentialsId\": credentials_id},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n\n    return [Webhook.from_db(webhook) for webhook in webhooks]\n"
    },
    {
      "id": "n9",
      "code": "async def find_webhook_by_credentials_and_props(\n    credentials_id: str, webhook_type: str, resource: str, events: list[str]\n) -> Webhook | None:\n\n    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n\n    webhook = await IntegrationWebhook.prisma().find_first(\n        where={\n            \"credentialsId\": credentials_id,\n            \"webhookType\": webhook_type,\n            \"resource\": resource,\n            \"events\": {\"has_every\": events},\n        },\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n\n    return Webhook.from_db(webhook) if webhook else None\n"
    },
    {
      "id": "n10",
      "code": "async def find_webhook_by_graph_and_props(\n    graph_id: str, provider: str, webhook_type: str, events: list[str]\n) -> Webhook | None:\n\n    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n\n    webhook = await IntegrationWebhook.prisma().find_first(\n        where={\n            \"provider\": provider,\n            \"webhookType\": webhook_type,\n            \"events\": {\"has_every\": events},\n            \"AgentNodes\": {\"some\": {\"agentGraphId\": graph_id}},\n        },\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n\n    return Webhook.from_db(webhook) if webhook else None\n"
    },
    {
      "id": "n11",
      "code": "async def update_webhook_config(webhook_id: str, updated_config: dict) -> Webhook:\n    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n\n    _updated_webhook = await IntegrationWebhook.prisma().update(\n        where={\"id\": webhook_id},\n        data={\"config\": Json(updated_config)},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )\n\n    if _updated_webhook is None:\n        raise ValueError(f\"Webhook #{webhook_id} not found\")\n\n    return Webhook.from_db(_updated_webhook)\n"
    },
    {
      "id": "n12",
      "code": "async def delete_webhook(webhook_id: str) -> None:\n    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n    deleted = await IntegrationWebhook.prisma().delete(where={\"id\": webhook_id})\n\n    if not deleted:\n        raise ValueError(f\"Webhook #{webhook_id} not found\")\n"
    },
    {
      "id": "n13",
      "code": "class WebhookEvent(BaseDbModel):\n    provider: str\n    webhook_id: str\n    event_type: str\n    payload: dict\n"
    },
    {
      "id": "n14",
      "code": "class WebhookEventBus(AsyncRedisEventBus[WebhookEvent]):\n    Model = WebhookEvent\n"
    },
    {
      "id": "n15",
      "code": "    @property\n    def event_bus_name(self) -> str:\n        return \"webhooks\"\n"
    },
    {
      "id": "n16",
      "code": "async def publish_webhook_event(event: WebhookEvent):\n    await _webhook_event_bus.publish_event(\n        event, f\"{event.webhook_id}/{event.event_type}\"\n    )\n"
    },
    {
      "id": "n17",
      "code": "async def listen_for_webhook_events(\n    webhook_id: str, event_type: Optional[str] = None\n) -> AsyncGenerator[WebhookEvent, None]:\n"
    },
    {
      "id": "n18",
      "code": "    async for event in _webhook_event_bus.listen_events(\n        f\"{webhook_id}/{event_type or '*'}\"\n    ):\n\n        yield event\n"
    },
    {
      "id": "n19",
      "code": "async def wait_for_webhook_event(\n    webhook_id: str, event_type: Optional[str] = None, timeout: Optional[float] = None\n) -> WebhookEvent | None:\n    return await _webhook_event_bus.wait_for_event(\n        f\"{webhook_id}/{event_type or '*'}\", timeout\n    )\n"
    }
  ],
  "edges": [
    {
      "source": "n17",
      "target": "n18"
    }
  ]
}