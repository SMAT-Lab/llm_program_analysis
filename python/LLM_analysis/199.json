{
  "nodes": [
    {
      "id": "n0",
      "code": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def get_index_of_rightmost_set_bit(number: int) -> int:\n    \"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    intermediate = number & ~(number - 1)\n    index = 0\n"
    },
    {
      "id": "n2",
      "code": "    while intermediate:\n        intermediate >>= 1\n        index += 1\n"
    },
    {
      "id": "n3",
      "code": "    return index - 1\n"
    },
    {
      "id": "n4",
      "code": "if __name__ == \"__main__\":\n\n    \"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"\n\n    import doctest\n\n    doctest.testmod(verbose=True)\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}