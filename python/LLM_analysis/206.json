{
  "nodes": [
    {
      "id": "n0",
      "code": "import pytest\n\nfrom backend.data import db\n\nfrom backend.executor import ExecutionScheduler\n\nfrom backend.server.model import CreateGraph\n\nfrom backend.usecases.sample import create_test_graph, create_test_user\n\nfrom backend.util.service import get_service_client\n\nfrom backend.util.test import SpinTestServer\n\n@pytest.mark.asyncio(scope=\"session\")\n"
    },
    {
      "id": "n1",
      "code": "async def test_agent_schedule(server: SpinTestServer):\n\n    await db.connect()\n    test_user = await create_test_user()\n\n    test_graph = await server.agent_server.test_create_graph(\n        create_graph=CreateGraph(graph=create_test_graph()),\n        user_id=test_user.id,\n    )\n\n    scheduler = get_service_client(ExecutionScheduler)\n    schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\n    assert len(schedules) == 0\n\n    schedule = scheduler.add_execution_schedule(\n        graph_id=test_graph.id,\n        user_id=test_user.id,\n        graph_version=1,\n        cron=\"0 0 * * *\",\n        input_data={\"input\": \"data\"},\n    )\n    assert schedule\n\n    schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\n    assert len(schedules) == 1\n    assert schedules[0].cron == \"0 0 * * *\"\n\n    scheduler.delete_schedule(schedule.id, user_id=test_user.id)\n    schedules = scheduler.get_execution_schedules(test_graph.id, user_id=test_user.id)\n    assert len(schedules) == 0\n"
    }
  ],
  "edges": []
}