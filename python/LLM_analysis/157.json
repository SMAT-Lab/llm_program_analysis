{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\nimport os\n\nfrom dotenv import load_dotenv\nfrom redis import Redis\nfrom redis.asyncio import Redis as AsyncRedis\n\nfrom backend.util.retry import conn_retry\n\nload_dotenv()\n\nHOST = os.getenv(\"REDIS_HOST\", \"localhost\")\nPORT = int(os.getenv(\"REDIS_PORT\", \"6379\"))\nPASSWORD = os.getenv(\"REDIS_PASSWORD\", \"password\")\n\nlogger = logging.getLogger(__name__)\nconnection: Redis | None = None\nconnection_async: AsyncRedis | None = None\n"
    },
    {
      "id": "n1",
      "code": "@conn_retry(\"Redis\", \"Acquiring connection\")\ndef connect() -> Redis:\n\n    global connection\n    if connection:\n        return connection\n"
    },
    {
      "id": "n2",
      "code": "    c = Redis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n"
    },
    {
      "id": "n3",
      "code": "    c.ping()\n    connection = c\n    return connection\n"
    },
    {
      "id": "n4",
      "code": "@conn_retry(\"Redis\", \"Releasing connection\")\n\ndef disconnect():\n    global connection\n\n    if connection:\n        connection.close()\n\n    connection = None\n"
    },
    {
      "id": "n5",
      "code": "def get_redis(auto_connect: bool = True) -> Redis:\n\n    if connection:\n        return connection\n"
    },
    {
      "id": "n6",
      "code": "    if auto_connect:\n        return connect()\n"
    },
    {
      "id": "n7",
      "code": "    raise RuntimeError(\"Redis connection is not established\")\n"
    },
    {
      "id": "n8",
      "code": "@conn_retry(\"AsyncRedis\", \"Acquiring connection\")\nasync def connect_async() -> AsyncRedis:\n\n    global connection_async\n    if connection_async:\n        return connection_async\n"
    },
    {
      "id": "n9",
      "code": "    c = AsyncRedis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n"
    },
    {
      "id": "n10",
      "code": "    await c.ping()\n    connection_async = c\n    return connection_async\n"
    },
    {
      "id": "n11",
      "code": "@conn_retry(\"AsyncRedis\", \"Releasing connection\")\nasync def disconnect_async():\n\n    global connection_async\n    if connection_async:\n"
    },
    {
      "id": "n12",
      "code": "        await connection_async.close()\n"
    },
    {
      "id": "n13",
      "code": "    connection_async = None\n"
    },
    {
      "id": "n14",
      "code": "async def get_redis_async(auto_connect: bool = True) -> AsyncRedis:\n\n    if connection_async:\n        return connection_async\n"
    },
    {
      "id": "n15",
      "code": "    if auto_connect:\n        return await connect_async()\n"
    },
    {
      "id": "n16",
      "code": "    raise RuntimeError(\"AsyncRedis connection is not established\")\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}