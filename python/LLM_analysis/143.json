{
  "nodes": [
    {
      "id": "n0",
      "code": "import contextlib\nimport logging\nimport typing\n\nimport fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn\n\nfrom autogpt_libs.feature_flag.client import (\n    initialize_launchdarkly,\n    shutdown_launchdarkly,\n)\n\nimport backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\n\nsettings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\n\nlogging.getLogger(\"autogpt_libs\").setLevel(logging.INFO)\n"
    },
    {
      "id": "n1",
      "code": "@contextlib.contextmanager\ndef launch_darkly_context():\n\n    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:\n        initialize_launchdarkly()\n"
    },
    {
      "id": "n2",
      "code": "        try:\n            yield\n\n        finally:\n            shutdown_launchdarkly()\n"
    },
    {
      "id": "n3",
      "code": "    else:\n        yield\n"
    },
    {
      "id": "n4",
      "code": "@contextlib.asynccontextmanager\nasync def lifespan_context(app: fastapi.FastAPI):\n\n    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()\n\n    with launch_darkly_context():\n        yield\n\n    await backend.data.db.disconnect()\n"
    },
    {
      "id": "n5",
      "code": "docs_url = (\n    \"/docs\"\n    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL\n    else None\n)\n\napp = fastapi.FastAPI(\n    title=\"AutoGPT Agent Server\",\n    description=(\n        \"This server is used to execute agents that are created by the \"\n        \"AutoGPT system.\"\n    ),\n    summary=\"AutoGPT Agent Server\",\n    version=\"0.1\",\n    lifespan=lifespan_context,\n    docs_url=docs_url,\n)\n"
    },
    {
      "id": "n6",
      "code": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):\n    def handler(request: fastapi.Request, exc: Exception):\n"
    },
    {
      "id": "n7",
      "code": "        if log_error:\n            logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")\n"
    },
    {
      "id": "n8",
      "code": "        return fastapi.responses.JSONResponse(\n            content={\n                \"message\": f\"{request.method} {request.url.path} failed\",\n                \"detail\": str(exc),\n            },\n            status_code=status_code,\n        )\n"
    },
    {
      "id": "n9",
      "code": "    return handler\n"
    },
    {
      "id": "n10",
      "code": "app.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))\n\napp.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\")\n\napp.include_router(\n    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\"\n)\n\napp.include_router(\n    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\"\n)\n"
    },
    {
      "id": "n11",
      "code": "@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])\nasync def health():\n\n    return {\"status\": \"healthy\"}\n"
    },
    {
      "id": "n12",
      "code": "class AgentServer(backend.util.service.AppProcess):\n\n    def run(self):\n\n        server_app = starlette.middleware.cors.CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],  # Allows all methods\n            allow_headers=[\"*\"],  # Allows all headers\n        )\n\n        uvicorn.run(\n            server_app,\n            host=backend.util.settings.Config().agent_api_host,\n            port=backend.util.settings.Config().agent_api_port,\n        )\n"
    },
    {
      "id": "n13",
      "code": "    @staticmethod\n\n    async def test_execute_graph(\n        graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str\n    ):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)\n"
    },
    {
      "id": "n14",
      "code": "    @staticmethod\n\n    async def test_create_graph(\n        create_graph: backend.server.routers.v1.CreateGraph,\n        user_id: str,\n    ):\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)\n"
    },
    {
      "id": "n15",
      "code": "    @staticmethod\n\n    async def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n        execution = await backend.data.graph.get_execution(\n            user_id=user_id, execution_id=graph_exec_id\n        )\n        if not execution:\n            raise ValueError(f\"Execution {graph_exec_id} not found\")\n        return execution.status\n"
    },
    {
      "id": "n16",
      "code": "    @staticmethod\n\n    async def test_get_graph_run_node_execution_results(\n        graph_id: str, graph_exec_id: str, user_id: str\n    ):\n        return await backend.server.routers.v1.get_graph_run_node_execution_results(\n            graph_id, graph_exec_id, user_id\n        )\n"
    },
    {
      "id": "n17",
      "code": "    @staticmethod\n\n    async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)\n"
    },
    {
      "id": "n18",
      "code": "    def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n7",
      "target": "n8"
    }
  ]
}