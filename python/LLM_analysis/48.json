{
  "nodes": [
    {
      "id": "n0",
      "code": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n\n    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n"
    },
    {
      "id": "n1",
      "code": "        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n"
    },
    {
      "id": "n2",
      "code": "        char = pattern[pattern_index]\n        if char in pattern_map:\n"
    },
    {
      "id": "n3",
      "code": "            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n\n            else:\n                return False\n"
    },
    {
      "id": "n4",
      "code": "        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n"
    },
    {
      "id": "n5",
      "code": "            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n\n            del pattern_map[char]\n            del str_map[substr]\n"
    },
    {
      "id": "n6",
      "code": "        return False\n"
    },
    {
      "id": "n7",
      "code": "    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n\n    return backtrack(0, 0)\n"
    },
    {
      "id": "n8",
      "code": "    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n"
    },
    {
      "id": "n9",
      "code": "        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n"
    },
    {
      "id": "n10",
      "code": "        char = pattern[pattern_index]\n        if char in pattern_map:\n"
    },
    {
      "id": "n11",
      "code": "            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n\n            else:\n                return False\n"
    },
    {
      "id": "n12",
      "code": "        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n"
    },
    {
      "id": "n13",
      "code": "                continue\n"
    },
    {
      "id": "n14",
      "code": "            pattern_map[char] = substr\n            str_map[substr] = char\n\n            if backtrack(pattern_index + 1, end):\n                return True\n"
    },
    {
      "id": "n15",
      "code": "            del pattern_map[char]\n            del str_map[substr]\n"
    },
    {
      "id": "n16",
      "code": "        return False\n"
    },
    {
      "id": "n17",
      "code": "if __name__ == \"__main__\":\n\n    import doctest\n\n    doctest.testmod()\n"
    }
  ],
  "edges": [
    {
      "source": "n15",
      "target": "n12"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n13",
      "target": "n12"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}