{
  "nodes": [
    {
      "id": "n0",
      "code": "import pytest\nfrom ldclient import LDClient\n\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation\n"
    },
    {
      "id": "n1",
      "code": "@pytest.fixture\ndef ld_client(mocker):\n\n    client = mocker.Mock(spec=LDClient)\n    mocker.patch(\"ldclient.get\", return_value=client)\n    client.is_initialized.return_value = True\n    return client\n"
    },
    {
      "id": "n2",
      "code": "@pytest.mark.asyncio\nasync def test_feature_flag_enabled(ld_client):\n\n    ld_client.variation.return_value = True\n\n    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n\n    result = test_function(user_id=\"test-user\")\n\n    assert result == \"success\"\n    ld_client.variation.assert_called_once()\n"
    },
    {
      "id": "n3",
      "code": "    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n"
    },
    {
      "id": "n4",
      "code": "@pytest.mark.asyncio\nasync def test_feature_flag_unauthorized_response(ld_client):\n\n    ld_client.variation.return_value = False\n\n    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n\n    result = test_function(user_id=\"test-user\")\n    assert result == {\"error\": \"disabled\"}\n"
    },
    {
      "id": "n5",
      "code": "    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n"
    },
    {
      "id": "n6",
      "code": "def test_mock_flag_variation(ld_client):\n\n    with mock_flag_variation(\"test-flag\", True):\n        assert ld_client.variation(\"test-flag\", None, False)\n\n    with mock_flag_variation(\"test-flag\", False):\n        assert ld_client.variation(\"test-flag\", None, False)\n"
    }
  ],
  "edges": []
}