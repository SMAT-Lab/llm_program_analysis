{
  "nodes": [
    {
      "id": "n0",
      "code": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n"
    },
    {
      "id": "n1",
      "code": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]\n"
    },
    {
      "id": "n2",
      "code": "class ReadRSSFeedBlock(Block):\n"
    },
    {
      "id": "n3",
      "code": "    class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )\n"
    },
    {
      "id": "n4",
      "code": "    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n"
    },
    {
      "id": "n5",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n"
    },
    {
      "id": "n6",
      "code": "    @staticmethod\n    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore\n"
    },
    {
      "id": "n7",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n"
    },
    {
      "id": "n8",
      "code": "        while keep_going:\n            keep_going = input_data.run_continuously\n"
    },
    {
      "id": "n9",
      "code": "            feed = self.parse_feed(input_data.rss_url)\n"
    },
    {
      "id": "n10",
      "code": "            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n"
    },
    {
      "id": "n11",
      "code": "            time.sleep(input_data.polling_rate)\n"
    },
    {
      "id": "n12",
      "code": "    class Input(BlockSchema):\n\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )\n"
    },
    {
      "id": "n13",
      "code": "    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n"
    },
    {
      "id": "n14",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n"
    },
    {
      "id": "n15",
      "code": "    @staticmethod\n    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore\n"
    },
    {
      "id": "n16",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n"
    },
    {
      "id": "n17",
      "code": "        while keep_going:\n            keep_going = input_data.run_continuously\n"
    },
    {
      "id": "n18",
      "code": "            feed = self.parse_feed(input_data.rss_url)\n"
    },
    {
      "id": "n19",
      "code": "            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n"
    },
    {
      "id": "n20",
      "code": "            time.sleep(input_data.polling_rate)\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n17",
      "target": "n20"
    },
    {
      "source": "n20",
      "target": "n17"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n11",
      "target": "n8"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}