{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\n\nfrom fastapi import Request\nfrom strenum import StrEnum\n\nfrom backend.data import integrations\nfrom backend.integrations.providers import ProviderName\n\nfrom ._manual_base import ManualWebhookManagerBase\n\nlogger = logging.getLogger(__name__)\n"
    },
    {
      "id": "n1",
      "code": "class CompassWebhookType(StrEnum):\n\n    TRANSCRIPTION = \"transcription\"\n\n    TASK = \"task\"\n\n\n"
    },
    {
      "id": "n2",
      "code": "class CompassWebhookManager(ManualWebhookManagerBase):\n    PROVIDER_NAME = ProviderName.COMPASS\n    WebhookType = CompassWebhookType\n\n"
    },
    {
      "id": "n3",
      "code": "    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n\n        payload = await request.json()\n        event_type = CompassWebhookType.TRANSCRIPTION  # currently the only type\n\n        return payload, event_type\n"
    },
    {
      "id": "n4",
      "code": "    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n\n        payload = await request.json()\n        event_type = CompassWebhookType.TRANSCRIPTION  # currently the only type\n\n        return payload, event_type\n"
    }
  ],
  "edges": []
}