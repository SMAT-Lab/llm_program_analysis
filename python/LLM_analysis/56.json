{
  "nodes": [
    {
      "id": "n0",
      "code": "\"\"\"\n\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"\n\nfrom __future__ import annotations\n\nsolution = []\n"
    },
    {
      "id": "n1",
      "code": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:\n    \"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n\n    n = len(board)  # Size of the board\n\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )\n"
    },
    {
      "id": "n2",
      "code": "def solve(board: list[list[int]], row: int) -> bool:\n    \"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n"
    },
    {
      "id": "n3",
      "code": "    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n"
    },
    {
      "id": "n4",
      "code": "    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n"
    },
    {
      "id": "n5",
      "code": "        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n"
    },
    {
      "id": "n6",
      "code": "    return False\n"
    },
    {
      "id": "n7",
      "code": "def printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n\n    for i in range(len(board)):\n"
    },
    {
      "id": "n8",
      "code": "        for j in range(len(board)):\n\n            if board[i][j] == 1:\n"
    },
    {
      "id": "n9",
      "code": "                print(\"Q\", end=\" \")  # Queen is present\n"
    },
    {
      "id": "n10",
      "code": "            else:\n                print(\".\", end=\" \")  # Empty cell\n"
    },
    {
      "id": "n11",
      "code": "        print()\n"
    },
    {
      "id": "n12",
      "code": "# Number of queens (e.g., n=8 for an 8x8 board)\nn = 8\nboard = [[0 for i in range(n)] for j in range(n)]\n\nsolve(board, 0)\n\nprint(\"The total number of solutions are:\", len(solution))\n"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n11",
      "target": "n8"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}