{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n"
    },
    {
      "id": "n1",
      "code": "class SpendingByCategory(MRJob):\n\n\n    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n"
    },
    {
      "id": "n2",
      "code": "    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n"
    },
    {
      "id": "n3",
      "code": "    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n"
    },
    {
      "id": "n4",
      "code": "    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n"
    },
    {
      "id": "n5",
      "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount\n"
    },
    {
      "id": "n6",
      "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)\n"
    },
    {
      "id": "n7",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
    },
    {
      "id": "n8",
      "code": "    def __init__(self, categorizer):\n        self.categorizer = categorizer\n"
    },
    {
      "id": "n9",
      "code": "    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n"
    },
    {
      "id": "n10",
      "code": "    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n\n        ...\n"
    },
    {
      "id": "n11",
      "code": "    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n\n        ...\n"
    },
    {
      "id": "n12",
      "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n\n        if period == self.current_year_month():\n            yield (period, category), amount\n"
    },
    {
      "id": "n13",
      "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n\n        yield key, sum(values)\n"
    },
    {
      "id": "n14",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
    },
    {
      "id": "n15",
      "code": "if __name__ == '__main__':\n    SpendingByCategory.run()\n"
    }
  ],
  "edges": []
}