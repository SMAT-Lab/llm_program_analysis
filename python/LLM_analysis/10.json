{
  "nodes": [
    {
      "id": "n0",
      "code": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\n\nCHECK_INTERVAL = 30\n"
    },
    {
      "id": "n1",
      "code": "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n\n    try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)\n\n\n\n        # Handle both PR and merge group events\n"
    },
    {
      "id": "n2",
      "code": "        if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\n"
    },
    {
      "id": "n3",
      "code": "        else:\n            sha = os.environ[\"GITHUB_SHA\"]\n"
    },
    {
      "id": "n4",
      "code": "\n\n        return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )\n"
    },
    {
      "id": "n5",
      "code": "    except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)\n"
    },
    {
      "id": "n6",
      "code": "\n\n"
    },
    {
      "id": "n7",
      "code": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n\n    try:\n        print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n\n    except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)\n"
    },
    {
      "id": "n8",
      "code": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n\n    for run in check_runs:\n        if str(run[\"name\"]) != \"Check PR Status\":\n"
    },
    {
      "id": "n9",
      "code": "            status = run[\"status\"]\n            conclusion = run[\"conclusion\"]\n\n\n            if status == \"completed\":\n                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n"
    },
    {
      "id": "n10",
      "code": "                    all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )\n"
    },
    {
      "id": "n11",
      "code": "            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n"
    },
    {
      "id": "n12",
      "code": "        else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )\n"
    },
    {
      "id": "n13",
      "code": "\n    return runs_in_progress, all_others_passed\n"
    },
    {
      "id": "n14",
      "code": "def main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    print(f\"Current run ID: {current_run_id}\")\n"
    },
    {
      "id": "n15",
      "code": "    while True:\n        data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)\n\n        if not runs_in_progress:\n            break\n"
    },
    {
      "id": "n16",
      "code": "        print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n\n        time.sleep(CHECK_INTERVAL)\n"
    },
    {
      "id": "n17",
      "code": "    if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)\n"
    },
    {
      "id": "n18",
      "code": "if __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n15"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n13"
    },
    {
      "source": "n8",
      "target": "n12"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}