{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\nimport logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\n\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nfrom backend.util.process import get_service_name\n\n\nlogger = logging.getLogger(__name__)\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"\n"
    },
    {
      "id": "n2",
      "code": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):\n\n    conn_id = str(uuid4())\n"
    },
    {
      "id": "n3",
      "code": "    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n"
    },
    {
      "id": "n4",
      "code": "    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n\n        wrapped_func = retry_decorator(func)\n"
    },
    {
      "id": "n5",
      "code": "        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n"
    },
    {
      "id": "n6",
      "code": "        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n"
    },
    {
      "id": "n7",
      "code": "        return async_wrapper if is_coroutine else sync_wrapper\n\n    return decorator\n"
    },
    {
      "id": "n8",
      "code": "    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n"
    },
    {
      "id": "n9",
      "code": "    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n\n        wrapped_func = retry_decorator(func)\n"
    },
    {
      "id": "n10",
      "code": "        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n\n            try:\n                result = wrapped_func(*args, **kwargs)\n"
    },
    {
      "id": "n11",
      "code": "                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n"
    },
    {
      "id": "n12",
      "code": "            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n\n                raise\n"
    },
    {
      "id": "n13",
      "code": "        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n\n            try:\n                result = await wrapped_func(*args, **kwargs)\n"
    },
    {
      "id": "n14",
      "code": "                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n"
    },
    {
      "id": "n15",
      "code": "            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n\n                raise\n"
    },
    {
      "id": "n16",
      "code": "        return async_wrapper if is_coroutine else sync_wrapper\n"
    },
    {
      "id": "n17",
      "code": "        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n"
    },
    {
      "id": "n18",
      "code": "        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n13"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    }
  ]
}