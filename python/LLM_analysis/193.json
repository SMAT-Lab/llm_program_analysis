{
  "nodes": [
    {
      "id": "n0",
      "code": "import pytest\n\nfrom .depends import requires_admin_user, requires_user, verify_user\n"
    },
    {
      "id": "n1",
      "code": "def test_verify_user_no_payload():\n    user = verify_user(None, admin_only=False)\n\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"\n"
    },
    {
      "id": "n2",
      "code": "def test_verify_user_no_user_id():\n\n    with pytest.raises(Exception):\n        verify_user({\"role\": \"admin\"}, admin_only=False)\n"
    },
    {
      "id": "n3",
      "code": "def test_verify_user_not_admin():\n    with pytest.raises(Exception):\n        verify_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n            admin_only=True,\n        )\n"
    },
    {
      "id": "n4",
      "code": "def test_verify_user_with_admin_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"},\n        admin_only=True,\n    )\n\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"\n"
    },
    {
      "id": "n5",
      "code": "def test_verify_user_with_user_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n        admin_only=False,\n    )\n\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"\n"
    },
    {
      "id": "n6",
      "code": "def test_requires_user():\n    user = requires_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n    )\n\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"\n"
    },
    {
      "id": "n7",
      "code": "def test_requires_user_no_user_id():\n\n    with pytest.raises(Exception):\n        requires_user({\"role\": \"user\"})\n"
    },
    {
      "id": "n8",
      "code": "def test_requires_admin_user():\n    user = requires_admin_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"}\n    )\n\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"\n"
    },
    {
      "id": "n9",
      "code": "def test_requires_admin_user_not_admin():\n    with pytest.raises(Exception):\n        requires_admin_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n        )\n"
    }
  ],
  "edges": []
}