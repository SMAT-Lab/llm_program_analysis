{
  "nodes": [
    {
      "id": "n0",
      "code": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\n"
    },
    {
      "id": "n1",
      "code": "class VehicleSize(Enum):\n\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2\n"
    },
    {
      "id": "n2",
      "code": "class Vehicle(metaclass=ABCMeta):\n\n"
    },
    {
      "id": "n3",
      "code": "    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n"
    },
    {
      "id": "n4",
      "code": "    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n"
    },
    {
      "id": "n5",
      "code": "    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n"
    },
    {
      "id": "n6",
      "code": "    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass\n"
    },
    {
      "id": "n7",
      "code": "    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n"
    },
    {
      "id": "n8",
      "code": "    def clear_spots(self):\n\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n\n        self.spots_taken = []\n"
    },
    {
      "id": "n9",
      "code": "    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n"
    },
    {
      "id": "n10",
      "code": "    def can_fit_in_spot(self, spot):\n        pass\n"
    },
    {
      "id": "n11",
      "code": "class Motorcycle(Vehicle):\n"
    },
    {
      "id": "n12",
      "code": "    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n"
    },
    {
      "id": "n13",
      "code": "    def can_fit_in_spot(self, spot):\n        return True\n"
    },
    {
      "id": "n14",
      "code": "    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n"
    },
    {
      "id": "n15",
      "code": "    def can_fit_in_spot(self, spot):\n        return True\n"
    },
    {
      "id": "n16",
      "code": "class Car(Vehicle):\n"
    },
    {
      "id": "n17",
      "code": "    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n"
    },
    {
      "id": "n18",
      "code": "    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\n"
    },
    {
      "id": "n19",
      "code": "    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n"
    },
    {
      "id": "n20",
      "code": "    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\n"
    },
    {
      "id": "n21",
      "code": "class Bus(Vehicle):\n"
    },
    {
      "id": "n22",
      "code": "    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n"
    },
    {
      "id": "n23",
      "code": "    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE\n"
    },
    {
      "id": "n24",
      "code": "    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n"
    },
    {
      "id": "n25",
      "code": "    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE\n"
    },
    {
      "id": "n26",
      "code": "class ParkingLot(object):\n\n\n    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n\n\n    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False\n"
    },
    {
      "id": "n27",
      "code": "\n\n\n"
    },
    {
      "id": "n28",
      "code": "    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n"
    },
    {
      "id": "n29",
      "code": "    def park_vehicle(self, vehicle):\n\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n"
    },
    {
      "id": "n30",
      "code": "                return True\n"
    },
    {
      "id": "n31",
      "code": "        return False\n"
    },
    {
      "id": "n32",
      "code": "class Level(object):\n\n    SPOTS_PER_ROW = 10\n\n    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n"
    },
    {
      "id": "n33",
      "code": "    def spot_freed(self):\n        self.available_spots += 1\n"
    },
    {
      "id": "n34",
      "code": "    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n\n    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n"
    },
    {
      "id": "n35",
      "code": "    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass\n"
    },
    {
      "id": "n36",
      "code": "    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n"
    },
    {
      "id": "n37",
      "code": "    def spot_freed(self):\n        self.available_spots += 1\n"
    },
    {
      "id": "n38",
      "code": "    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n"
    },
    {
      "id": "n39",
      "code": "        if spot is None:\n            return None\n"
    },
    {
      "id": "n40",
      "code": "        else:\n            spot.park_vehicle(vehicle)\n            return spot\n"
    },
    {
      "id": "n41",
      "code": "    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n"
    },
    {
      "id": "n42",
      "code": "    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass\n"
    },
    {
      "id": "n43",
      "code": "class ParkingSpot(object):\n\n"
    },
    {
      "id": "n44",
      "code": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n"
    },
    {
      "id": "n45",
      "code": "    def is_available(self):\n        return True if self.vehicle is None else False\n"
    },
    {
      "id": "n46",
      "code": "    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n"
    },
    {
      "id": "n47",
      "code": "    def park_vehicle(self, vehicle):\n        pass\n"
    },
    {
      "id": "n48",
      "code": "    def remove_vehicle(self):\n        pass\n"
    },
    {
      "id": "n49",
      "code": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n"
    },
    {
      "id": "n50",
      "code": "    def is_available(self):\n        return True if self.vehicle is None else False\n"
    },
    {
      "id": "n51",
      "code": "    def can_fit_vehicle(self, vehicle):\n\n        if self.vehicle is not None:\n            return False\n\n        return vehicle.can_fit_in_spot(self)\n"
    },
    {
      "id": "n52",
      "code": "    def park_vehicle(self, vehicle):\n        pass\n"
    },
    {
      "id": "n53",
      "code": "    def remove_vehicle(self):\n        pass\n"
    }
  ],
  "edges": [
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n38",
      "target": "n40"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n29",
      "target": "n30"
    }
  ]
}