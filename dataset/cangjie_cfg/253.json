{
  "name": "253.cj",
  "type": "File",
  "blocks": [],
  "functions": [],
  "classes": [
    {
      "name": "_DEFAULT_CANG_CLASS",
      "type": "Class",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "Metric",
      "type": "Class",
      "blocks": [],
      "functions": [
        {
          "name": "constructor",
          "type": "Function",
          "blocks": [
            {
              "id": 133924160100368,
              "label": "",
              "successors": [
                {
                  "id": 133924143948720,
                  "label": "telemetry = TelemetryConfig.openTelemetry",
                  "successors": [
                    {
                      "id": 133924160100416,
                      "label": "return",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "start",
          "type": "Function",
          "blocks": [
            {
              "id": 133924160102912,
              "label": "",
              "successors": [
                {
                  "id": 133924143948864,
                  "label": "let array = ArrayList<Int64>()",
                  "successors": [
                    {
                      "id": 133924143948912,
                      "label": "let meter = telemetry.getMeter(\"io.open.oelemetry\")",
                      "successors": [
                        {
                          "id": 133924143948960,
                          "label": "let histogram = meter.histogramBuilder(\"test.histogram\").ofLongs().setUnit(\"4\").setDescription(\"histogram test\").\n            build()",
                          "successors": [
                            {
                              "id": 133924143949008,
                              "label": "let upDownCounter = meter.upDownCounterBuilder(\"test.up.down\").ofDoubles().setUnit(\"3\").setDescription(\n            \"up down test\").build()",
                              "successors": [
                                {
                                  "id": 133924143949056,
                                  "label": "let processCounter = meter.counterBuilder(\"process\").setUnit(\"2\").setDescription(\"process test\").build()",
                                  "successors": [
                                    {
                                      "id": 133924143949104,
                                      "label": "meter.gaugeBuilder(\"array.size\").ofLongs().setUnit(\"1\").setDescription(\"array size\").callback(\n            {\n                measurement => measurement.record(array.size, Attributes.of(\"array\", \"apm\").addFloat(\"aa\", 100.0))\n            }\n        )",
                                      "successors": [
                                        {
                                          "id": 133924143949152,
                                          "label": "let responseTimeAvg = MetricHolder<IDoubleCounter>.get(MetricConst.RESPONSE_TIME_AVG.key)",
                                          "successors": [
                                            {
                                              "id": 133924143949200,
                                              "label": "let requestActiveMaxTime = MetricHolder<IDoubleCounter>.get(MetricConst.REQUEST_ACTIVE_MAX_TIME.key)",
                                              "successors": [
                                                {
                                                  "id": 133924143949248,
                                                  "label": "let requestActiveTotalCount = MetricHolder<ILongCounter>.get(MetricConst.REQUEST_ACTIVE_TOTAL_COUNT.key)",
                                                  "successors": [
                                                    {
                                                      "id": 133924143949296,
                                                      "label": "let requestFailed = MetricHolder<ILongCounter>.get(MetricConst.REQUEST_FAILED.key)",
                                                      "successors": [
                                                        {
                                                          "id": 133924143949344,
                                                          "label": "upDownCounter.add(100.1, Attributes.of(\"updown\", true))",
                                                          "successors": [
                                                            {
                                                              "id": 133924143949392,
                                                              "label": "processCounter.add(1, Attributes.of(\"tttttt\", \"11111\"))",
                                                              "successors": [
                                                                {
                                                                  "id": 133924143949440,
                                                                  "label": "array.append(1)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 133924143949488,
                                                                      "label": "let random = Random()",
                                                                      "successors": [
                                                                        {
                                                                          "id": 133924143949536,
                                                                          "label": "for (x in 0..10 )",
                                                                          "successors": [
                                                                            {
                                                                              "id": 133924143949824,
                                                                              "label": "requestActiveMaxTime.calculate(Float64(x * random.nextInt64(500)), CalculateType.MAX)",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 133924143949872,
                                                                                  "label": "responseTimeAvg.calculate(Float64(x * random.nextInt64(1000)), CalculateType.AVG)",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 133924143949920,
                                                                                      "label": "requestFailed.add(x * random.nextInt64(5))",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 133924143949968,
                                                                                          "label": "requestActiveTotalCount.add(x * random.nextInt64(200))",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 133924143950016,
                                                                                              "label": "histogram.record(x * random.nextInt64(100), Attributes.of(\"random\", true))",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 133924143950064,
                                                                                                  "label": "array.append(x)",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 133924143950112,
                                                                                                      "label": "sleep(500 * Duration.millisecond)",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 133924143949536
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "id": 133924143949632,
                                                                              "label": "spawn {\n             =>\n            processCounter.add(1, Attributes.of(\"aaaa\", \"11111\"))\n            processCounter.add(2, Attributes.of(\"bbbb\", \"11111\"))\n            sleep(1 * Duration.second)\n            array.remove(0)\n            array.remove(1)\n            upDownCounter.add(-88.2, Attributes.of(\"updown\", true))\n            processCounter.add(2, Attributes.of(\"cccc\", \"11111\"))\n            processCounter.add(2, Attributes.of(\"dddd\", \"11111\"))\n            sleep(1 * Duration.second)\n            processCounter.add(3, Attributes.of(\"eeee\", \"11111\"))\n            processCounter.add(2, Attributes.of(\"ffff\", \"11111\"))\n            histogram.record(10 * random.nextInt64(100), Attributes.of(\"random\", false))\n            sleep(1 * Duration.second)\n            processCounter.add(4, Attributes.of(\"gggg\", \"11111\"))\n            processCounter.add(2, Attributes.of(\"hhhh\", \"11111\"))\n            sleep(1 * Duration.second)\n            processCounter.add(5, Attributes.of(\"iiii\", \"11111\"))\n            processCounter.add(2, Attributes.of(\"kkkk\", \"11111\"))\n            sleep(1 * Duration.second)\n            processCounter.add(2, Attributes.of(\"vvvvv\", \"33333\"))\n            upDownCounter.add(20.2, Attributes.of(\"updown\", true))\n        }",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 133924143949776,
                                                                                  "label": "sleep(10 * Duration.second)",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 133924160102960,
                                                                                      "label": "return",
                                                                                      "successors": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}