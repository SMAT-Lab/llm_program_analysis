[
  "Edge 0: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 0 => return UNSIGNED_INTEGER",
  "Edge 1: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 1 => return NEGATIVE_INTEGER",
  "Edge 2: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 2 => return BYTE_STRING",
  "Edge 3: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 3 => return UNICODE_STRING",
  "Edge 4: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 4 => return ARRAY",
  "Edge 5: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 5 => return MAP",
  "Edge 6: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 6 => return TAG",
  "Edge 7: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 7 => return SPECIAL",
  "Edge 8: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case _ => return INVALID\n        }\n    }",
  "Edge 9: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 0 => return UNSIGNED_INTEGER",
  "Edge 10: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 1 => return NEGATIVE_INTEGER",
  "Edge 11: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 2 => return BYTE_STRING",
  "Edge 12: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 3 => return UNICODE_STRING",
  "Edge 13: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 4 => return ARRAY",
  "Edge 14: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 5 => return MAP",
  "Edge 15: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 6 => return TAG",
  "Edge 16: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case 7 => return SPECIAL",
  "Edge 17: [Source] public static func ofByte(b: Int32): MajorType { ... => [Target] case _ => return INVALID\n        }\n    }"
]