[
  "Edge 0: [Source] public func isFilePathValid(filePath: String): (String,String) { ... => [Target] case Some(v) => lastSlash = v",
  "Edge 1: [Source] public func isFilePathValid(filePath: String): (String,String) { ... => [Target] case None => throw Exception(\"Invalid filepath\")\n        }\n        let directoryName: String = filePath[0..lastSlash]\n        let fileName: String = filePath[lastSlash + 1..]\n        let confield: Option<Int64> = fileName.lastIndexOf(\".\")\n        var len: Int64 = 0\n        match (confield) {",
  "Edge 2: [Source] public func isFilePathValid(filePath: String): (String,String) { ... => [Target] case Some(v) => len = v",
  "Edge 3: [Source] public func isFilePathValid(filePath: String): (String,String) { ... => [Target] case None => throw Exception(\"Invalid filepath. Need to include filename\")\n        }\n        let fields: String = fileName[len + 1..]\n        logger.info(\"isFilePathValid lastSlash INDEX : \"+\"${lastSlash}\"+\" directoryName : \"+\"${directoryName}\"+\" fileName : \"+\"${fileName}\")\n        let isFile: Bool = isReg(fileName)\n        let isDir: Bool = isDir(directoryName)\n        if (!isFile) {\n            logger.info(\"isFilePathValid isFile is  \" + \"${isFile}\")\n            throw Exception(\"${fileName}\" + \" not normal file\")\n        }\n        if (!isDir) {\n            logger.info(\"isFilePathValid isDir is  \" + \"${isDir}\")\n            throw Exception(\"isFilePathValid invalid directory\")\n        }\n        logger.info(\"isFilePathValid filePath is valid\")\n        logger.flush()\n        return (fileName,fields)\n    }"
]