[
  "Edge 0: [Source] func parseAttrToConfig(attrs: Tokens): Tokens { ... => [Target] case litConstExpr: LitConstExpr => let literal = litConstExpr.literal\n                if (literal.kind == TokenKind.INTEGER_LITERAL) {\n                    interval = Int64.parse(literal.value)\n                } else if (literal.kind == TokenKind.STRING_LITERAL) {\n                    let value = literal.value\n                    if (value == LEADING_STRING) {\n                        leading = true\n                    } else if (value == TRAILING_STRING) {\n                        trailing = true\n                    }\n                }",
  "Edge 1: [Source] func parseAttrToConfig(attrs: Tokens): Tokens { ... => [Target] case refExpr: RefExpr => let value = refExpr.identifier.value\n                if (value == LEADING_STRING) {\n                    leading = true\n                } else if (value == TRAILING_STRING) {\n                    trailing = true\n                }",
  "Edge 2: [Source] func parseAttrToConfig(attrs: Tokens): Tokens { ... => [Target] case _ => diagReport(\n                DiagReportLevel.ERROR,\n                attrs[nextIndex..nextIndex],\n                '这里必须是字面量',\n                '只支持字面量'\n            )\n        }\n\n        if (nextIndex >= attrs.size) {\n            break\n        }\n\n        if (attrs[nextIndex].kind != TokenKind.COMMA) {\n            diagReport(\n                DiagReportLevel.ERROR,\n                attrs[nextIndex..nextIndex + 1],\n                \"必须是逗号分割的多个表达式\",\n                \"改为逗号\"\n            )\n        }\n\n        index = nextIndex + 1\n    }\n\n    // 必须有interval\n    if (interval == 0) {\n        diagReport(\n            DiagReportLevel.ERROR,\n            attrs,\n            \"必须有时间(毫秒)\",\n            \"添加时间属性\"\n        )\n    }\n\n    if (!leading && !trailing) {\n        trailing = true\n    }\n\n    quote(\n        RepeaterConfig(interval: Duration.millisecond * $(interval), leading: $(leading), trailing: $(trailing)))\n}"
]