[
  "Edge 0: [Source] public static func make(predicate: (I) -> Bool): Combinator<I, I> { ... => [Target] case Cons(hd, tl) => if (predicate(hd)) {\n                    Some((hd, tl))\n                } else {\n                    None\n                }",
  "Edge 1: [Source] public static func make(predicate: (I) -> Bool): Combinator<I, I> { ... => [Target] case Nil => None\n            }\n        }\n    }",
  "Edge 2: [Source] public func map<O2>(f: (O) -> O2): Combinator<I, O2> { ... => [Target] case Some((value, rest)) => Some((f(value), rest))",
  "Edge 3: [Source] public func map<O2>(f: (O) -> O2): Combinator<I, O2> { ... => [Target] case None => None\n            }\n        }\n    }",
  "Edge 4: [Source] public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> { ... => [Target] case Some((value1, rest1)) => match (c2.parseFunc(rest1)) {",
  "Edge 5: [Source] public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> { ... => [Target] case Some((value2, rest2)) => Some(((value1, value2), rest2))",
  "Edge 6: [Source] public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> { ... => [Target] case None => None\n                }",
  "Edge 7: [Source] public func and<O2>(c2: Combinator<I, O2>): Combinator<I, (O, O2)> { ... => [Target] case None => None\n            }\n        }\n    }",
  "Edge 8: [Source] public func or(c2: Combinator<I, O>): Combinator<I, O> { ... => [Target] case Some(a) => Some(a)",
  "Edge 9: [Source] public func or(c2: Combinator<I, O>): Combinator<I, O> { ... => [Target] case None => c2.parseFunc(input)\n            }\n        }\n    }",
  "Edge 10: [Source] public func many(min: Int64): Combinator<I, List<O>> { ... => [Target] case None => break",
  "Edge 11: [Source] public func many(min: Int64): Combinator<I, List<O>> { ... => [Target] case Some((value, _rest)) => rest = _rest\n                        vlist = vlist.add(value)\n                }\n            }\n            if (vlist.lenth() < min) {\n                None\n            } else {\n                Some((vlist.reverse(), rest))\n            }\n        }\n    }",
  "Edge 12: [Source] public static func make(predicate: (I) -> Bool): Combinator<I, I> { ... => [Target] case Cons(hd, tl) => if (predicate(hd)) {\n                    Some((hd, tl))\n                } else {\n                    None\n                }",
  "Edge 13: [Source] public static func make(predicate: (I) -> Bool): Combinator<I, I> { ... => [Target] case Nil => None\n            }\n        }\n    }"
]