{
  "name": "49.cj",
  "type": "File",
  "blocks": [],
  "functions": [],
  "classes": [
    {
      "name": "_DEFAULT_CANG_CLASS",
      "type": "Class",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "Combinator",
      "type": "Class",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "<I, O>",
      "type": "Class",
      "blocks": [],
      "functions": [
        {
          "name": "make",
          "type": "Function",
          "blocks": [
            {
              "id": 133924164451488,
              "label": "",
              "successors": [
                {
                  "id": 133924145656880,
                  "label": "Combinator",
                  "successors": [
                    {
                      "id": 133924145656928,
                      "label": "{\n            input => match (input) {\n                case Cons(hd, tl) => if (predicate(hd)) {\n                    Some((hd, tl))\n                } else {\n                    None\n                }\n                case Nil => None\n            }\n        }",
                      "successors": [
                        {
                          "id": 133924164451536,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "map",
          "type": "Function",
          "blocks": [
            {
              "id": 133924164452112,
              "label": "",
              "successors": [
                {
                  "id": 133924145657072,
                  "label": "Combinator",
                  "successors": [
                    {
                      "id": 133924145657120,
                      "label": "{\n            input => match (this.parseFunc(input)) {\n                case Some((value, rest)) => Some((f(value), rest))\n                case None => None\n            }\n        }",
                      "successors": [
                        {
                          "id": 133924164452160,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "and",
          "type": "Function",
          "blocks": [
            {
              "id": 133924162519488,
              "label": "",
              "successors": [
                {
                  "id": 133924145657264,
                  "label": "Combinator",
                  "successors": [
                    {
                      "id": 133924145657312,
                      "label": "{\n            input => match (this.parseFunc(input)) {\n                case Some((value1, rest1)) => match (c2.parseFunc(rest1)) {\n                    case Some((value2, rest2)) => Some(((value1, value2), rest2))\n                    case None => None\n                }\n                case None => None\n            }\n        }",
                      "successors": [
                        {
                          "id": 133924162519536,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "or",
          "type": "Function",
          "blocks": [
            {
              "id": 133924162520112,
              "label": "",
              "successors": [
                {
                  "id": 133924145657456,
                  "label": "Combinator",
                  "successors": [
                    {
                      "id": 133924145657504,
                      "label": "{\n            input => match (this.parseFunc(input)) {\n                case Some(a) => Some(a)\n                case None => c2.parseFunc(input)\n            }\n        }",
                      "successors": [
                        {
                          "id": 133924162520160,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "many",
          "type": "Function",
          "blocks": [
            {
              "id": 133924162520736,
              "label": "",
              "successors": [
                {
                  "id": 133924145657648,
                  "label": "Combinator",
                  "successors": [
                    {
                      "id": 133924145657696,
                      "label": "{\n            input =>\n            var vlist = List<O>.empty()\n            var rest = input\n            while (true) {\n                match (this.parseFunc(rest)) {\n                    case None => break\n                    case Some((value, _rest)) =>\n                        rest = _rest\n                        vlist = vlist.add(value)\n                }\n            }\n            if (vlist.lenth() < min) {\n                None\n            } else {\n                Some((vlist.reverse(), rest))\n            }\n        }",
                      "successors": [
                        {
                          "id": 133924162520784,
                          "label": "return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}