[
  "Edge 0: [Source] func combineFunc(input: List<Token>): Option<(Expression, List<Token>)> { ... => [Target] case (e1, (Multiply, e2)) => Multiply(e1, e2)",
  "Edge 1: [Source] func combineFunc(input: List<Token>): Option<(Expression, List<Token>)> { ... => [Target] case (e1, (_, e2)) => Divide(e1, e2)\n                }\n            },\n            t[0]\n        )\n    }.parseFunc(input)\n}",
  "Edge 2: [Source] func expressionFunc(input: List<Token>): Option<(Expression, List<Token>)> { ... => [Target] case (e1, (Plus, e2)) => Plus(e1, e2)",
  "Edge 3: [Source] func expressionFunc(input: List<Token>): Option<(Expression, List<Token>)> { ... => [Target] case (e1, (_, e2)) => Minus(e1, e2)\n                }\n            },\n            t[0]\n        )\n    }.parseFunc(input)\n}",
  "Edge 4: [Source] public func toString() { ... => [Target] case Value(n) => n.toString()",
  "Edge 5: [Source] public func toString() { ... => [Target] case LParen => \"(\"",
  "Edge 6: [Source] public func toString() { ... => [Target] case RParen => \")\"",
  "Edge 7: [Source] public func toString() { ... => [Target] case Plus => \"+\"",
  "Edge 8: [Source] public func toString() { ... => [Target] case Minus => \"-\"",
  "Edge 9: [Source] public func toString() { ... => [Target] case Multiply => \"*\"",
  "Edge 10: [Source] public func toString() { ... => [Target] case Divide => \"/\"\n        }\n    }",
  "Edge 11: [Source] public func toString(): String { ... => [Target] case Number(n) => \"${n}\"",
  "Edge 12: [Source] public func toString(): String { ... => [Target] case Plus(e1, e2) => \"(+ ${e1} ${e2})\"",
  "Edge 13: [Source] public func toString(): String { ... => [Target] case Minus(e1, e2) => \"(- ${e1} ${e2})\"",
  "Edge 14: [Source] public func toString(): String { ... => [Target] case Multiply(e1, e2) => \"(* ${e1} ${e2})\"",
  "Edge 15: [Source] public func toString(): String { ... => [Target] case Divide(e1, e2) => \"(/ ${e1} ${e2})\"\n        }\n    }"
]