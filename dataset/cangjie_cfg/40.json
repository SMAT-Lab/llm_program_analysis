[
  "Edge 0: [Source] private func handleAuthResult() { ... => [Target] case \"caching_sha2_password\" => match(authData.size) {",
  "Edge 1: [Source] private func handleAuthResult() { ... => [Target] case 1 => match(authData[0]) {",
  "Edge 2: [Source] private func handleAuthResult() { ... => [Target] case 4 => // request public key from server\n                                let pktLen = 1\n        \n                                let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n                                data[0] = UInt8(pktLen & 0xff)\n                                data[1] = UInt8(pktLen >> 8)\n                                data[2] = UInt8(pktLen >> 16)\n                                data[3] = sequence\n\n                                data[4] = cachingSha2PasswordRequestPublicKey\n                                writePacket(data)\n\n                                let publicKeyData = readPacket()\n\n                                sendEncryptedPassword(publicKeyData[1..])\n\n                                readPacket()",
  "Edge 3: [Source] private func handleAuthResult() { ... => [Target] case _ => println(\"eror or correct but do later\")\n                        }",
  "Edge 4: [Source] private func handleAuthResult() { ... => [Target] case _ => println(\"error size or correct size but do later \")\n                }",
  "Edge 5: [Source] private func handleAuthResult() { ... => [Target] case _ => println(\"other, do later\")\n            \n        }\n    }",
  "Edge 6: [Source] private func readAuthResult() { ... => [Target] case 1 => return (data[1..], \"\")",
  "Edge 7: [Source] private func readAuthResult() { ... => [Target] case 254 => if (data.size == 1) {\n                    return (Array<Byte>(), \"mysql_old_password\")\n                }\n                let pluginEndIndex = ByteArrayUtils.indexByte(data, 0)\n                if (pluginEndIndex < 0) {\n                    return (Array<Byte>(), \"\")\n                }\n                let plugin = String.fromUtf8(data[1..pluginEndIndex])\n                let authData = data[pluginEndIndex + 1 ..]\n                return (authData, plugin)",
  "Edge 8: [Source] private func readAuthResult() { ... => [Target] case _ => println(\"other, do later\")\n                return (Array<Byte>(), \"\")\n        }\n    }",
  "Edge 9: [Source] protected func readColumns(count: UInt16): ArrayList<MySqlField> { ... => [Target] case 254 => println(\"read end\")\n        //",
  "Edge 10: [Source] protected func readColumns(count: UInt16): ArrayList<MySqlField> { ... => [Target] case _ => println(\"error, do later\")\n        // }\n        return returnResult\n    }",
  "Edge 11: [Source] protected func readRows():ArrayList<Array<Byte>> { ... => [Target] case 254 => break",
  "Edge 12: [Source] protected func readRows():ArrayList<Array<Byte>> { ... => [Target] case _ => result.append(data)\n            }\n        }\n        return result\n    }",
  "Edge 13: [Source] protected func readUntilEOF(): Array<Byte> { ... => [Target] case 254 => break",
  "Edge 14: [Source] protected func readUntilEOF(): Array<Byte> { ... => [Target] case 255 => println(\"error happen, do later\")",
  "Edge 15: [Source] protected func readUntilEOF(): Array<Byte> { ... => [Target] case _ => result.appendAll(tempData)\n            }\n        }\n        return result.toArray()\n    }"
]