[
  "Edge 0: [Source] func GetCoreSourceVertices<V, G>(\n    coreEdge : Edge<V, G>,\n    numberOfStateWires : Int64,\n    inputSignals : Array<CycleInput<V>>,\n    splitStateVertices : Array<(Vertex<V, G>, Vertex<V, G>)>,\n    rewriteStartingElements : HashSet<TraversalElement<V, G>>\n) : Array<Vertex<V, G>>\n    where V <: ValueSymbol<V>, G <: PrimitiveSymbol<V, G> { ... => [Target] case DEFINITE(signal) => // Make a label\n                            let signalLabel = GetSignalLabel<V, G>(signal)\n                            let signalSubgraph = if(signal.GetWidth() == 1) {\n                                None<InterfacedHypergraph<V, G>>\n                            } else {\n                                MakeSignal<V, G>(signal)\n                            }\n                            (signalLabel, signalSubgraph)",
  "Edge 1: [Source] func GetCoreSourceVertices<V, G>(\n    coreEdge : Edge<V, G>,\n    numberOfStateWires : Int64,\n    inputSignals : Array<CycleInput<V>>,\n    splitStateVertices : Array<(Vertex<V, G>, Vertex<V, G>)>,\n    rewriteStartingElements : HashSet<TraversalElement<V, G>>\n) : Array<Vertex<V, G>>\n    where V <: ValueSymbol<V>, G <: PrimitiveSymbol<V, G> { ... => [Target] case PARTIAL(pi) => let partialLabel = Label<V, G>.PARTIAL(pi)\n                            let partialSubgraph =\n                                None<InterfacedHypergraph<V, G>>\n                            (partialLabel, partialSubgraph)\n                    }\n                let inputTarget = Vertex<V, G>(input.GetWidth(), None)\n                // Create the signal\n                let inputEdge = Edge(\n                    inputLabel, Array<Vertex<V, G>>(), [inputTarget],\n                    inputSubgraph, coreEdge.GetGraph()\n                )\n                // The target of this edge will need to be traversed\n                // during rewriting\n                rewriteStartingElements.put(VERTEX(inputTarget))\n                inputTarget\n            }\n        }\n    )\n}"
]