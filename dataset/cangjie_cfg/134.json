[
  "Edge 0: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Int64\" => Int64(number)",
  "Edge 1: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Int32\" => Int32(number)",
  "Edge 2: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Int16\" => Int16(number)",
  "Edge 3: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Int8\" => Int8(number)",
  "Edge 4: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"IntNative\" => IntNative(number)",
  "Edge 5: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"UInt64\" => UInt64(number)",
  "Edge 6: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"UInt32\" => UInt32(number)",
  "Edge 7: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"UInt16\" => UInt16(number)",
  "Edge 8: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"UInt8\" => UInt8(number)",
  "Edge 9: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"UIntNative\" => UIntNative(number)",
  "Edge 10: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Float64\" => Float64(number)",
  "Edge 11: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Float32\" => Float32(number)",
  "Edge 12: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Float16\" => Float16(number)",
  "Edge 13: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Char\" => Char(number)",
  "Edge 14: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"Bool\" => number != 0",
  "Edge 15: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case \"String\" => \"${number}\"",
  "Edge 16: [Source] private func convertNumberToType(number: Int64, clazz: Class): Any { ... => [Target] case _ => throw ResultHandleException(\n                \"update sql result only support Bool and numberic type, not support ${clazz.getName()}, please change it\"\n            )\n        }\n    }"
]