[
  "Edge 0: [Source] public func getName(cdecl: CXCursor): String { ... => [Target] case CXCursor_StructDecl | CXCursor_UnionDecl | CXCursor_EnumDecl => let name = if (spelling.isEmpty()) { getTypeSpelling(getCursorType(cdecl)) } else { spelling }\n            getParentPrefix(cdecl) + name",
  "Edge 1: [Source] public func getName(cdecl: CXCursor): String { ... => [Target] case _ => spelling\n    }\n}",
  "Edge 2: [Source] func getParentName(cursor: CXCursor, ctx!: ?CTranslationContext = None): ?String { ... => [Target] case CXCursor_TranslationUnit => None",
  "Edge 3: [Source] func getParentName(cursor: CXCursor, ctx!: ?CTranslationContext = None): ?String { ... => [Target] case _ => match(ctx) {",
  "Edge 4: [Source] func getParentName(cursor: CXCursor, ctx!: ?CTranslationContext = None): ?String { ... => [Target] case Some(ctx) => getUniqueName(parent, ctx: ctx)",
  "Edge 5: [Source] func getParentName(cursor: CXCursor, ctx!: ?CTranslationContext = None): ?String { ... => [Target] case None => getName(parent)\n        }\n    }\n}",
  "Edge 6: [Source] func getParentPrefix(cursor: CXCursor, ctx!: ?CTranslationContext = None): String { ... => [Target] case Some(parentName) => \"${parentName}_\"",
  "Edge 7: [Source] func getParentPrefix(cursor: CXCursor, ctx!: ?CTranslationContext = None): String { ... => [Target] case None => \"\"\n    }\n}",
  "Edge 8: [Source] public func getUniqueName(cdecl: CXCursor, ctx!: CTranslationContext) { ... => [Target] case true => let kindSpecifier = match (cdecl.kind) {",
  "Edge 9: [Source] public func getUniqueName(cdecl: CXCursor, ctx!: CTranslationContext) { ... => [Target] case CXCursor_StructDecl => \"Struct\"",
  "Edge 10: [Source] public func getUniqueName(cdecl: CXCursor, ctx!: CTranslationContext) { ... => [Target] case CXCursor_UnionDecl => \"Union\"",
  "Edge 11: [Source] public func getUniqueName(cdecl: CXCursor, ctx!: CTranslationContext) { ... => [Target] case CXCursor_EnumDecl => \"Enum\"",
  "Edge 12: [Source] public func getUniqueName(cdecl: CXCursor, ctx!: CTranslationContext) { ... => [Target] case _ => \"\"\n            }\n            \"${parentPrefix}${kindSpecifier}_Anon${ctx.getUniquieDeclId(cdecl)}\"",
  "Edge 13: [Source] public func getUniqueName(cdecl: CXCursor, ctx!: CTranslationContext) { ... => [Target] case false => let cursorSpelling = getCursorSpelling(cdecl)\n            let name = if (cursorSpelling.isEmpty()) { getTypeSpelling(getCursorType(cdecl)) } else { cursorSpelling }\n            parentPrefix + name\n    }\n}"
]