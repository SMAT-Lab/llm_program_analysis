[
  "Edge 0: [Source] private func readRequstSetHeaderPacket(): Int64 { ... => [Target] case 0 => handleOkPacket(data[1..])\n                return 0",
  "Edge 1: [Source] private func readRequstSetHeaderPacket(): Int64 { ... => [Target] case 255 => println(\"err, do later\")\n                return -1",
  "Edge 2: [Source] private func readRequstSetHeaderPacket(): Int64 { ... => [Target] case _ => 1 + 1\n                // println(\"unknow, do later\")\n                // return -1\n        }\n\n        // column count\n        let (number, isNull, n) = ByteArrayUtils.readLengthEncodedInteger(data)\n        return Int64(number)\n    }",
  "Edge 3: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case \"SqlNullableBigInt\" => let temp = param as SqlNullableBigInt\n                    let value = temp.getOrThrow()\n                    match(value.value) {",
  "Edge 4: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case Some(number) => paramTypes[i<<1] = fieldTypeLongLong\n                            let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                            paramValues.append(appenValue)\n                            pktLen += 8",
  "Edge 5: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case None => bitMask += 1 << UInt64(i)\n                            paramTypes[i<<1] = fieldTypeNULL\n                    }",
  "Edge 6: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case \"SqlBigInt\" => let temp = param as SqlBigInt\n                    let number = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeLongLong\n                    let appenValue = ByteArrayUtils.uint64ToBytes(UInt64(number))\n                    paramValues.append(appenValue)\n                    pktLen += 8",
  "Edge 7: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case \"SqlInteger\" => let temp = param as SqlInteger\n                    let number = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeLong\n                    let appenValue = ByteArrayUtils.uint32ToBytes(UInt32(number))\n                    paramValues.append(appenValue)\n                    pktLen += 4",
  "Edge 8: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case \"SqlVarchar\" => let temp = param as SqlVarchar\n                    let s = temp.getOrThrow().value\n                    paramTypes[i<<1] = fieldTypeVarString\n                    let result = ArrayList<Byte>()\n                    var lengthBytes = ByteArrayUtils.appendLengthEncodedInteger(UInt64(s.toArray().size))\n                    result.appendAll(lengthBytes)\n                    result.appendAll(s.toArray())\n                    paramValues.append(result.toArray())\n                    pktLen = pktLen + result.toArray().size",
  "Edge 9: [Source] private func writeExecutePacket(params: Array<SqlDbType>) { ... => [Target] case _ => println(\"unsupport data type\")\n            }\n        }\n\n        let data = Array<Byte>(pktLen + 4, item: UInt8(0))\n\n        data[0] = UInt8(pktLen & 0xff)\n\t    data[1] = UInt8(pktLen >> 8)\n\t    data[2] = UInt8(pktLen >> 16)\n\t    data[3] = connection.sequence\n\n        data[4] = comStmtExecute\n\n        data[5] = UInt8(id)\n        data[6] = UInt8(id>>8)\n        data[7] = UInt8(id>>16)\n        data[8] = UInt8(id>>24)\n\n        data[10] = 0x01\n\n        if (paramCount > 0) {\n            var pos = 14 + ((Int64(paramCount) + 7) / 8)\n            for(i in 14 .. pos) {\n                data[i] = UInt8(bitMask >> UInt64((i - 14)* 8))\n            }\n\n            data[pos] = 0x01\n            pos ++\n\n            paramTypes.copyTo(data, 0, pos, paramTypes.size)\n            pos += paramTypes.size\n            for(i in 0 .. paramCount) {\n                let paramValue = paramValues[Int64(i)]\n                paramValue.toArray().copyTo(data, 0, pos, paramValue.toArray().size)\n                pos += paramValue.toArray().size\n            }\n        }\n        connection.writePacket(data)\n    }"
]