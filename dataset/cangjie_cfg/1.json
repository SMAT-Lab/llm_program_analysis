[
  "Edge 0: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (_: JsonNull, _: JsonNull) => return",
  "Edge 1: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (a: JsonBool, b: JsonBool) => @Assert(a.getValue(), b.getValue())",
  "Edge 2: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (a: JsonInt, b: JsonInt) => @Assert(a.getValue(), b.getValue())",
  "Edge 3: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (a: JsonFloat, b: JsonFloat) => @Assert(a.getValue(), b.getValue())",
  "Edge 4: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (a: JsonString, b: JsonString) => @Assert(a.getValue(), b.getValue())",
  "Edge 5: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (a: JsonArray, b: JsonArray) => @Assert(a.size(), b.size())\n            for (i in 0..a.size()) {\n                assertJson(a.get(i).getOrThrow(), b.get(i).getOrThrow())\n            }",
  "Edge 6: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case (a: JsonObject, b: JsonObject) => @Assert(a.size(), b.size())\n            let fields = a.getFields()\n            for ((k, v) in fields) {\n                match (b.get(k)) {",
  "Edge 7: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case Some(bv) => assertJson(v, bv)",
  "Edge 8: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case None => @Fail(\"Field not found: \" + k)\n                }\n            }",
  "Edge 9: [Source] public func assertJson(a: JsonValue, b: JsonValue): Unit { ... => [Target] case _ => @Fail(\"Different types: \" + a.toJsonString() + \" vs \" + b.toJsonString())\n    }\n\n    return\n}"
]