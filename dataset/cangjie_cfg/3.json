[
  "Edge 0: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.LCURL => return parseObject(t, start + 1)",
  "Edge 1: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.LSQUARE => return parseArray(t, start + 1)",
  "Edge 2: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => if (let Some((expr, next)) <- safeParseExprFragment(t, start)) {\n            let exprTokens = expr.toTokens()\n            if (exprTokens.size > 1) {\n                return (quote(castJsonValue($(expr))), next)\n            }\n            let first = exprTokens[0]\n            match (first.kind) {",
  "Edge 3: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.STRING_LITERAL => return (quote(JsonString($(first))), next)",
  "Edge 4: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.INTEGER_LITERAL => return (quote(JsonInt($(first))), next)",
  "Edge 5: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.FLOAT_LITERAL => return (quote(JsonFloat($(first))), next)",
  "Edge 6: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.BOOL_LITERAL => return (quote(JsonBool($(first))), next)",
  "Edge 7: [Source] func parseValue(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => return (quote(castJsonValue($(expr))), next)\n            }\n        } else {\n            diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${tf.value} in parseValue\", \"Unexpected token\")\n            throw Exception(\"Unexpected token ${tf.value} in parseValue\")\n        }\n    }\n}",
  "Edge 8: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.RCURL => match (state) {",
  "Edge 9: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ObjectStart => return (quote(JsonObject()), i + 1)",
  "Edge 10: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ObjectValue | JsonState.ObjectComma => tokens.append(quote(\n                            return $(ident);\n                        ))\n                    return (wrap(tokens), i + 1)",
  "Edge 11: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RCURL in parseObject\", \"Unexpected state\"\n                    )\n                    throw Exception(\"Unexpected state for RCURL in parseObject\")\n            }",
  "Edge 12: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.COMMA => match (state) {",
  "Edge 13: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ObjectValue => i++\n                    state = JsonState.ObjectComma\n                    continue",
  "Edge 14: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseObject\", \"Unexpected state\"\n                    )\n                    throw Exception(\"Unexpected state for COMMA in parseObject\")\n            }",
  "Edge 15: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.STRING_LITERAL => match (state) {",
  "Edge 16: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ObjectStart | JsonState.ObjectComma => let key = cur.value\n                    i++\n                    if (t[i].kind != TokenKind.COLON) {\n                        diagReport(DiagReportLevel.ERROR, t, \"No colon in object\", \"No colon\")\n                        throw Exception(\"No colon in object\")\n                    }\n                    i++\n                    let (value, next) = parseValue(t, i)\n                    i = next\n                    state = JsonState.ObjectValue\n                    tokens.append(quote(\n                        $(ident).put($(key), $(value));\n                    ))\n                    continue",
  "Edge 17: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for STRING_LITERAL in parseObject\",\n                        \"Unexpected state\")\n                    throw Exception(\"Unexpected state for STRING_LITERAL in parseObject\")\n            }",
  "Edge 18: [Source] func parseObject(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseObject\", \"Unexpected token\")\n                throw Exception(\"Unexpected token ${cur.value} in parseObject\")\n        }\n    }\n\n    diagReport(DiagReportLevel.ERROR, t, \"No closing curly bracket\", \"No closing curly bracket\")\n    throw Exception(\"No closing curly bracket\")\n}",
  "Edge 19: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.RSQUARE => match (state) {",
  "Edge 20: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ArrayStart => return (quote(JsonArray()), i + 1)",
  "Edge 21: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ArrayValue | JsonState.ArrayComma => tokens.append(quote(\n                            return $(ident);\n                        ))\n                    return (wrap(tokens), i + 1)",
  "Edge 22: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for RSQUARE in parseArray\",\n                        \"Unexpected state\")\n                    throw Exception(\"Unexpected state for RSQUARE in parseArray\")\n            }",
  "Edge 23: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case TokenKind.COMMA => match (state) {",
  "Edge 24: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ArrayValue => i++\n                    state = JsonState.ArrayComma\n                    continue",
  "Edge 25: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected state for COMMA in parseArray\", \"Unexpected state\")\n                    throw Exception(\"Unexpected state for COMMA in parseArray\")\n            }",
  "Edge 26: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => match (state) {",
  "Edge 27: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case JsonState.ArrayStart | JsonState.ArrayComma => let (value, next) = parseValue(t, i)\n                    i = next\n                    state = JsonState.ArrayValue\n                    tokens.append(quote(\n                        $(ident).add($(value));\n                    ))\n                    continue",
  "Edge 28: [Source] func parseArray(t: Tokens, start: Int64): (Tokens, Int64) { ... => [Target] case _ => diagReport(DiagReportLevel.ERROR, t, \"Unexpected token ${cur.value} in parseArray\",\n                        \"Unexpected token\")\n                    throw Exception(\"Unexpected token ${cur.value} in parseArray\")\n            }\n        }\n    }\n\n    diagReport(DiagReportLevel.ERROR, t, \"No closing bracket\", \"No closing bracket\")\n    throw Exception(\"No closing bracket\")\n}",
  "Edge 29: [Source] protected func jsonTransform(input: Tokens): Tokens { ... => [Target] case TokenKind.LCURL => let (ts, next) = parseObject(t, 1)\n            ret.append(quote(\n                    return $(ts);\n                ))\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial object\",\n                    \"Unexpected token after initial object\")\n                throw Exception(\"Unexpected token after initial object\")\n            }\n            return wrap(ret)",
  "Edge 30: [Source] protected func jsonTransform(input: Tokens): Tokens { ... => [Target] case TokenKind.LSQUARE => let (ts, next) = parseArray(t, 1)\n            ret.append(quote(\n                        return $(ts);\n                    ))\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial array\",\n                    \"Unexpected token after initial array\")\n                throw Exception(\"Unexpected token after initial array\")\n            }\n            return wrap(ret)",
  "Edge 31: [Source] protected func jsonTransform(input: Tokens): Tokens { ... => [Target] case _ => let (ts, next) = parseValue(t, 0)\n            if (next != t.size) {\n                diagReport(DiagReportLevel.ERROR, t, \"Unexpected token after initial value\",\n                    \"Unexpected token after initial value\")\n                throw Exception(\"Unexpected token after initial value\")\n            }\n            return ts\n    }\n}"
]