[
  "Edge 0: [Source] public func encode(oContents: String): Array<Bool> { ... => [Target] case 12 => let check = try {\n                    UPCEANReader.getStandardUPCEANChecksum(contents)\n                } catch (e: FormatException) {\n                    throw IllegalArgumentException(e.toString())\n                }\n                contents = \"${contents}${check}\"",
  "Edge 1: [Source] public func encode(oContents: String): Array<Bool> { ... => [Target] case 13 => try {\n                    if (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\n                        throw IllegalArgumentException(\"Contents do not pass checksum\")\n                    }\n                } catch (_: FormatException) {\n                    throw IllegalArgumentException(\"Illegal contents\")\n                }",
  "Edge 2: [Source] public func encode(oContents: String): Array<Bool> { ... => [Target] case _ => throw IllegalArgumentException(\"Requested contents should be 12 or 13 digits long, but got ${length}\")\n        }\n        checkNumeric(contents)\n        let firstDigit = charDigit(contents.charAt(0), 10)\n        let parities = EAN13Reader.FIRST_DIGIT_ENCODINGS[firstDigit]\n        let result = Array<Bool>(CODE_WIDTH, item: false)\n        var pos = appendPattern(result, 0, UPCEANReader.START_END_PATTERN, true)\n        for (i in 1..7) {\n            var digit = charDigit(contents.charAt(i), 10)\n            if ((parities >> (6 - i) & 1) == 1) {\n                digit += 10\n            }\n            pos += appendPattern(result, pos, UPCEANReader.L_AND_G_PATTERNS[digit], false)\n        }\n        pos += appendPattern(result, pos, UPCEANReader.MIDDLE_PATTERN, false)\n        for (i in 7..13) {\n            let digit = charDigit(contents.charAt(i), 10)\n            pos += appendPattern(result, pos, UPCEANReader.L_PATTERNS[digit], true)\n        }\n        appendPattern(result, pos, UPCEANReader.START_END_PATTERN, true)\n        result\n    }"
]