[
  "Edge 0: [Source] public static func createTokenizer(file_path: String, tokenizer_type: TokenizerType): Tokenizer { ... => [Target] case TokenizerType.HUGGINGFACE => let tokenizer = HuggingfaceTokenizer();\n        tokenizer.load_vocab(file_path: file_path);\n        println(\"tokenizer load ok\");\n        return tokenizer;",
  "Edge 1: [Source] public static func createTokenizer(file_path: String, tokenizer_type: TokenizerType): Tokenizer { ... => [Target] case other => throw Exception(\"unsupport tokenizer type\");\n    }\n  }",
  "Edge 2: [Source] public static func createTokenizer(file_path: String, tokenizer_type: TokenizerType): Tokenizer { ... => [Target] case TokenizerType.HUGGINGFACE => let tokenizer = HuggingfaceTokenizer();\n        tokenizer.load_vocab(file_path: file_path);\n        println(\"tokenizer load ok\");\n        return tokenizer;",
  "Edge 3: [Source] public static func createTokenizer(file_path: String, tokenizer_type: TokenizerType): Tokenizer { ... => [Target] case other => throw Exception(\"unsupport tokenizer type\");\n    }\n  }",
  "Edge 4: [Source] public func apply_chat_template(\n    messages: ArrayList<Message>,\n    add_generation_prompt!: Bool = false\n  ): String { ... => [Target] case RoleType.System => result_str += \"<|im_start|>system\\n${messages[0].content}<|im_end|>\\n\"\n        messages.remove(0);",
  "Edge 5: [Source] public func apply_chat_template(\n    messages: ArrayList<Message>,\n    add_generation_prompt!: Bool = false\n  ): String { ... => [Target] case _ => ()\n    }\n    // muse be double size\n    if (messages.size % 2 != 1) {\n      throw Exception(\"input times - assistant times must = 1\");\n    }\n    for (i in 0..messages.size) {\n      if (i % 2 == 0) {\n        result_str += \"<|im_start|>user\\n${messages[i].content}<|im_end|>\\n\"\n      } else {\n        result_str += \"<|im_start|>assistant\\n${messages[i].content}<|im_end|>\\n\"\n      }\n    }\n    // add_generation_prompt\n    if (add_generation_prompt) {\n      result_str += \"<|im_start|>assistant\\n\"\n    }\n    return result_str;\n  }"
]