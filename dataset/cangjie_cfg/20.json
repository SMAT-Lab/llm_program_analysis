[
  "Edge 0: [Source] func addToString(clazz: ClassDecl): ClassDecl { ... => [Target] case m: MacroExpandDecl => let vd = (m.macroInputDecl as VarDecl).getOrThrow()\n                Some(vd.identifier.value)",
  "Edge 1: [Source] func addToString(clazz: ClassDecl): ClassDecl { ... => [Target] case v: VarDecl => Some(v.identifier.value)",
  "Edge 2: [Source] func addToString(clazz: ClassDecl): ClassDecl { ... => [Target] case _ => None<String>\n        }\n\n        if (let Some(value) <- kind) {\n            let hasKey = msg |> any {m => m.hasItem(value)}\n            if (!hasKey) {\n                sb.append(\"${value}:\\${${value}},\")\n            }\n        }\n    }\n    let str = sb.toString().trimRight(\",\")\n    let funDecl = FuncDecl(quote(public func toString():String{\n        return $(str)\n    }))\n    clazz.body.decls.append(funDecl)\n    return clazz\n}"
]