[
  "Edge 0: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case 2 | 3 => var postcode: String\n                if (mode == 2) {\n                    var pc: Int64 = getPostCode2(bytes)\n                    var ps2Length: Int64 = getPostCode2Length(bytes)\n                    if (ps2Length > 10) {\n                        throw Qrcoder4cjFormatException.getFormatInstance()\n                    }\n                    postcode = pc.format(ps2Length.toString())\n                } else {\n                    postcode = getPostCode3(bytes)\n                }\n                var country: String = getCountry(bytes).format(\"3.3\");\n                var service: String = getServiceClass(bytes).format(\"3.3\");\n                result.appendAll(getMessage(bytes, 10, 84).toRuneArray())\n                if (String(result).startsWith(\"[)>\" + RS.toString() + \"01\" + GS.toString())) {\n                    result.insertAll(\n                        9,\n                        (postcode + GS.toString() + country.toString() + GS.toString() + service + GS.toString()).\n                            toRuneArray()\n                    )\n                } else {\n                    result.insertAll(\n                        0,\n                        (postcode + GS.toString() + country + GS.toString() + service + GS.toString()).toRuneArray()\n                    )\n                }",
  "Edge 1: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case 4 => result.appendAll(getMessage(bytes, 1, 93).toRuneArray())",
  "Edge 2: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case 5 => result.appendAll(getMessage(bytes, 1, 77).toRuneArray())",
  "Edge 3: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case _ => throw Exception(\"Unhandled mode: \" + mode.toString())\n        }\n        var a = DecoderResult(bytes, String(result), ArrayList<Array<UInt8>>(), mode.toString())\n        return a\n    }",
  "Edge 4: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case 2 | 3 => var postcode: String\n                if (mode == 2) {\n                    var pc: Int64 = getPostCode2(bytes)\n                    var ps2Length: Int64 = getPostCode2Length(bytes)\n                    if (ps2Length > 10) {\n                        throw Qrcoder4cjFormatException.getFormatInstance()\n                    }\n                    postcode = pc.format(ps2Length.toString())\n                } else {\n                    postcode = getPostCode3(bytes)\n                }\n                var country: String = getCountry(bytes).format(\"3.3\");\n                var service: String = getServiceClass(bytes).format(\"3.3\");\n                result.appendAll(getMessage(bytes, 10, 84).toRuneArray())\n                if (String(result).startsWith(\"[)>\" + RS.toString() + \"01\" + GS.toString())) {\n                    result.insertAll(\n                        9,\n                        (postcode + GS.toString() + country.toString() + GS.toString() + service + GS.toString()).\n                            toRuneArray()\n                    )\n                } else {\n                    result.insertAll(\n                        0,\n                        (postcode + GS.toString() + country + GS.toString() + service + GS.toString()).toRuneArray()\n                    )\n                }",
  "Edge 5: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case 4 => result.appendAll(getMessage(bytes, 1, 93).toRuneArray())",
  "Edge 6: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case 5 => result.appendAll(getMessage(bytes, 1, 77).toRuneArray())",
  "Edge 7: [Source] public static func decode(bytes: Array<UInt8>, mode: Int64): DecoderResult { ... => [Target] case _ => throw Exception(\"Unhandled mode: \" + mode.toString())\n        }\n        var a = DecoderResult(bytes, String(result), ArrayList<Array<UInt8>>(), mode.toString())\n        return a\n    }"
]