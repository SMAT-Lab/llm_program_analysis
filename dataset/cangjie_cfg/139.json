[
  "Edge 0: [Source] public func sendRequest(id: String, request: Request): Unit { ... => [Target] case Some(v) => doSomeThingRequestBody(v,id)",
  "Edge 1: [Source] public func sendRequest(id: String, request: Request): Unit { ... => [Target] case _ => ()\n        }\n        let headers = request.getHeaders()\n        for(header in headers){\n            let name: String = header[0]\n            let nameUpper = name.toAsciiUpper();\n            let conentTypeUpper = CONTENT_TYPE.toAsciiUpper();\n            let conentLengthUpper = CONTENT_LENGTH.toAsciiUpper();\n            if (conentTypeUpper.equals(nameUpper) || conentLengthUpper.equals(nameUpper)) {\n                continue\n            }\n            let arrayList: ArrayList<String> = header[1]\n            if(arrayList.size>0){\n                if(arrayList.size == 1){\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + arrayList.get(0).getOrThrow());\n                }else{\n                    var strBuilder = StringBuilder();\n                    for(str in arrayList){\n                        strBuilder.append(str).append(\",\")\n                    }\n                    fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), name + HEADER_DELIMITER + SPACE + strBuilder.toString());\n                }\n            }\n        }\n    }",
  "Edge 2: [Source] public func sendResponse(id: String, response: Response): Unit { ... => [Target] case Some(v) => doSomeThingResponseBody(v,id)",
  "Edge 3: [Source] public func sendResponse(id: String, response: Response): Unit { ... => [Target] case _ => ()\n        }\n        logWithHandler(id, MessageType.RESPONSE_STATUS(\"RSS\"), response.getCode().toString(), 0);\n        let headers = response.getHeaders()\n        for(header in headers){\n                let name: String = header[0]\n                let arrayList : ArrayList<String> = header[1]\n                if(arrayList.size > 0){\n                    if(arrayList.size == 1){\n                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + arrayList.get(0).getOrThrow(), 0);\n                    }else{\n                        var strBuilder = StringBuilder();\n                        for(str in arrayList){\n                            strBuilder.append(str).append(\",\")\n                        }\n                        logWithHandler(id, MessageType.RESPONSE_HEADER(\"RSH\"), name + HEADER_DELIMITER + strBuilder.toString(), 0);\n                    }\n                }\n            }\n    }",
  "Edge 4: [Source] private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case Some(m) => \"${m}\"",
  "Edge 5: [Source] private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case None => \"\"\n         }\n         let contentLength = body.getContentLength()\n         if (contentLength != -1) {\n                fastLog(id, MessageType.REQUEST_HEADER(\"RQH\"), CONTENT_LENGTH + HEADER_DELIMITER + SPACE + contentLength.toString());\n         }\n        fastLog(id,MessageType.REQUEST_HEADER(\"RQH\"),CONTENT_TYPE + HEADER_DELIMITER + SPACE + mediaType)\n         let inputStream = body.get()\n         let bas = inputStream as ByteArrayStream\n         match(bas){",
  "Edge 6: [Source] private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case Some(v) => doSomeThingRequestBodyLog(v,id)",
  "Edge 7: [Source] private func doSomeThingRequestBody(body : RequestBody,id: String): Unit { ... => [Target] case _ => ()\n         }\n    }"
]