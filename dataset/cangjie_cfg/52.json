[
  "Edge 0: [Source] public func set(index: Index, value: Vector): Unit { ... => [Target] case Row(r) => this[r] = value",
  "Edge 1: [Source] public func set(index: Index, value: Vector): Unit { ... => [Target] case Col(c) => for (i in 0..value.size) {\n                    this[i][c] = value[i]\n                }",
  "Edge 2: [Source] public func set(index: Index, value: Vector): Unit { ... => [Target] case Inv(i) => // 赋值时根据 index 符号做倒置\n                value.reverse()\n                this.set(i, value)\n        }\n    }",
  "Edge 3: [Source] private func transform(rotation: Rotation, inverse: Bool): Unit { ... => [Target] case I(r) => transform(r, !inverse)",
  "Edge 4: [Source] private func transform(rotation: Rotation, inverse: Bool): Unit { ... => [Target] case X(r1, r2) => // 对复合操作进行递归分解\n                if (inverse) { // 逆变换需要反序\n                    transform(r2, inverse)\n                    transform(r1, inverse)\n                } else {\n                    transform(r1, inverse)\n                    transform(r2, inverse)\n                }",
  "Edge 5: [Source] private func transform(rotation: Rotation, inverse: Bool): Unit { ... => [Target] case _ => // 各原子操作对应面先旋转 90 度，然后对相邻四个面执行置换操作\n                rotate(rotation, inverse)\n                permute(permutation[rotation], inverse)\n        }\n    }"
]