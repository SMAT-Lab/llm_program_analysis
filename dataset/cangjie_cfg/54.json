[
  "Edge 0: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 1: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"id\" => temp_id = r.readValue<UInt32>();",
  "Edge 2: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"content\" => temp_content = r.readValue<String>();",
  "Edge 3: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"single_word\" => temp_single_word = r.readValue<Bool>();",
  "Edge 4: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"lstrip\" => temp_lstrip = r.readValue<Bool>();",
  "Edge 5: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"rstrip\" => temp_rstrip = r.readValue<Bool>();",
  "Edge 6: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"normalized\" => temp_normalized = r.readValue<Bool>();",
  "Edge 7: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"special\" => temp_special = r.readValue<Bool>();",
  "Edge 8: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 9: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case _ => throw Exception(\"can't deserialize for TokenJson\");\n      }\n    }\n    return TokenJson(\n      temp_id,\n      temp_content,\n      temp_single_word,\n      temp_lstrip,\n      temp_rstrip,\n      temp_normalized,\n      temp_special\n    );\n  }",
  "Edge 10: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 11: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"id\" => temp_id = r.readValue<UInt32>();",
  "Edge 12: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"content\" => temp_content = r.readValue<String>();",
  "Edge 13: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"single_word\" => temp_single_word = r.readValue<Bool>();",
  "Edge 14: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"lstrip\" => temp_lstrip = r.readValue<Bool>();",
  "Edge 15: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"rstrip\" => temp_rstrip = r.readValue<Bool>();",
  "Edge 16: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"normalized\" => temp_normalized = r.readValue<Bool>();",
  "Edge 17: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case \"special\" => temp_special = r.readValue<Bool>();",
  "Edge 18: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 19: [Source] public static func fromJson(r: JsonReader): TokenJson { ... => [Target] case _ => throw Exception(\"can't deserialize for TokenJson\");\n      }\n    }\n    return TokenJson(\n      temp_id,\n      temp_content,\n      temp_single_word,\n      temp_lstrip,\n      temp_rstrip,\n      temp_normalized,\n      temp_special\n    );\n  }",
  "Edge 20: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 21: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();",
  "Edge 22: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 23: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case _ => throw Exception(\"can't deserialize for NormalizerJson\");\n      }\n    }\n    return NormalizerJson(temp_p_type);\n  }",
  "Edge 24: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 25: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();",
  "Edge 26: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 27: [Source] public static func fromJson(r: JsonReader): NormalizerJson { ... => [Target] case _ => throw Exception(\"can't deserialize for NormalizerJson\");\n      }\n    }\n    return NormalizerJson(temp_p_type);\n  }",
  "Edge 28: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 29: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case \"Regex\" => temp_p_regex = r.readValue<String>();",
  "Edge 30: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 31: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return PatternJson(temp_p_regex);\n  }",
  "Edge 32: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 33: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case \"Regex\" => temp_p_regex = r.readValue<String>();",
  "Edge 34: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 35: [Source] public static func fromJson(r: JsonReader): PatternJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return PatternJson(temp_p_regex);\n  }",
  "Edge 36: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 37: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();\n              // ByteLevel",
  "Edge 38: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"add_prefix_space\" => temp_add_prefix_space = r.readValue<Bool>();",
  "Edge 39: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"trim_offsets\" => temp_trim_offsets = r.readValue<Bool>();",
  "Edge 40: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"use_regex\" => temp_use_regex = r.readValue<Bool>();\n              // Split",
  "Edge 41: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"pattern\" => temp_pattern = r.readValue<PatternJson>();",
  "Edge 42: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"behavior\" => temp_behavior = r.readValue<String>();",
  "Edge 43: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"invert\" => temp_invert = r.readValue<Bool>();",
  "Edge 44: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 45: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    match (temp_p_type) {",
  "Edge 46: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"ByteLevel\" => ProcessJson(\n          temp_p_type,\n          temp_add_prefix_space,\n          temp_trim_offsets,\n          temp_use_regex,\n        );",
  "Edge 47: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"Split\" => ProcessJson(\n          temp_p_type,\n          temp_pattern,\n          temp_behavior,\n          temp_invert\n        )",
  "Edge 48: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case other => throw Exception(\"unkonw process type ${other}\")\n    }\n  }",
  "Edge 49: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 50: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();\n              // ByteLevel",
  "Edge 51: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"add_prefix_space\" => temp_add_prefix_space = r.readValue<Bool>();",
  "Edge 52: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"trim_offsets\" => temp_trim_offsets = r.readValue<Bool>();",
  "Edge 53: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"use_regex\" => temp_use_regex = r.readValue<Bool>();\n              // Split",
  "Edge 54: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"pattern\" => temp_pattern = r.readValue<PatternJson>();",
  "Edge 55: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"behavior\" => temp_behavior = r.readValue<String>();",
  "Edge 56: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"invert\" => temp_invert = r.readValue<Bool>();",
  "Edge 57: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 58: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    match (temp_p_type) {",
  "Edge 59: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"ByteLevel\" => ProcessJson(\n          temp_p_type,\n          temp_add_prefix_space,\n          temp_trim_offsets,\n          temp_use_regex,\n        );",
  "Edge 60: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case \"Split\" => ProcessJson(\n          temp_p_type,\n          temp_pattern,\n          temp_behavior,\n          temp_invert\n        )",
  "Edge 61: [Source] public static func fromJson(r: JsonReader): ProcessJson { ... => [Target] case other => throw Exception(\"unkonw process type ${other}\")\n    }\n  }",
  "Edge 62: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 63: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();",
  "Edge 64: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case \"pretokenizers\" => temp_pre_tokenizers = r.readValue<ArrayList<ProcessJson>>();",
  "Edge 65: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 66: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return PreTokenizerJson(temp_p_type, temp_pre_tokenizers);\n  }",
  "Edge 67: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 68: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();",
  "Edge 69: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case \"pretokenizers\" => temp_pre_tokenizers = r.readValue<ArrayList<ProcessJson>>();",
  "Edge 70: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 71: [Source] public static func fromJson(r: JsonReader): PreTokenizerJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return PreTokenizerJson(temp_p_type, temp_pre_tokenizers);\n  }",
  "Edge 72: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 73: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();",
  "Edge 74: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"dropout\" => temp_dropout = r.readValue<Option<Float32>>();",
  "Edge 75: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"unk_token\" => temp_unk_token = r.readValue<Option<String>>()",
  "Edge 76: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"continuing_subword_prefix\" => temp_continuing_subword_prefix = r.readValue<String>();",
  "Edge 77: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"end_of_word_suffix\" => temp_end_of_word_suffix = r.readValue<String>();",
  "Edge 78: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"fuse_unk\" => temp_fuse_unk = r.readValue<Bool>();",
  "Edge 79: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"byte_fallback\" => temp_byte_fallback = r.readValue<Bool>();",
  "Edge 80: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"vocab\" => temp_vocab = r.readValue<HashMap<String, UInt32>>();",
  "Edge 81: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"merges\" => temp_merges = r.readValue<ArrayList<String>>();",
  "Edge 82: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 83: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ModelJson\");\n      }\n    }\n    return ModelJson(\n      temp_p_type,\n      temp_dropout,\n      temp_vocab,\n      temp_merges,\n      unk_token: temp_unk_token,\n      continuing_subword_prefix: temp_continuing_subword_prefix,\n      end_of_word_suffix: temp_end_of_word_suffix,\n      fuse_unk: temp_fuse_unk,\n      byte_fallback: temp_byte_fallback\n    );\n  }",
  "Edge 84: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 85: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"type\" => temp_p_type = r.readValue<String>();",
  "Edge 86: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"dropout\" => temp_dropout = r.readValue<Option<Float32>>();",
  "Edge 87: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"unk_token\" => temp_unk_token = r.readValue<Option<String>>()",
  "Edge 88: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"continuing_subword_prefix\" => temp_continuing_subword_prefix = r.readValue<String>();",
  "Edge 89: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"end_of_word_suffix\" => temp_end_of_word_suffix = r.readValue<String>();",
  "Edge 90: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"fuse_unk\" => temp_fuse_unk = r.readValue<Bool>();",
  "Edge 91: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"byte_fallback\" => temp_byte_fallback = r.readValue<Bool>();",
  "Edge 92: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"vocab\" => temp_vocab = r.readValue<HashMap<String, UInt32>>();",
  "Edge 93: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case \"merges\" => temp_merges = r.readValue<ArrayList<String>>();",
  "Edge 94: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 95: [Source] public static func fromJson(r: JsonReader): ModelJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ModelJson\");\n      }\n    }\n    return ModelJson(\n      temp_p_type,\n      temp_dropout,\n      temp_vocab,\n      temp_merges,\n      unk_token: temp_unk_token,\n      continuing_subword_prefix: temp_continuing_subword_prefix,\n      end_of_word_suffix: temp_end_of_word_suffix,\n      fuse_unk: temp_fuse_unk,\n      byte_fallback: temp_byte_fallback\n    );\n  }",
  "Edge 96: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 97: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"version\" => temp_version = r.readValue<String>();",
  "Edge 98: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"truncation\" => temp_truncation = r.readValue<Option<String>>();",
  "Edge 99: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"padding\" => temp_padding = r.readValue<Option<String>>();",
  "Edge 100: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"added_tokens\" => temp_added_tokens = r.readValue<ArrayList<TokenJson>>();",
  "Edge 101: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"normalizer\" => temp_normalizer = r.readValue<NormalizerJson>();",
  "Edge 102: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"pre_tokenizer\" => temp_pre_tokenizer = r.readValue<PreTokenizerJson>();",
  "Edge 103: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"post_processor\" => temp_post_processor = Some(r.readValue<ProcessJson>());",
  "Edge 104: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"decoder\" => temp_decoder = Some(r.readValue<ProcessJson>());",
  "Edge 105: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"model\" => temp_model = Some(r.readValue<ModelJson>());",
  "Edge 106: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 107: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return TokenizerJson(\n      temp_version,\n      temp_truncation,\n      temp_padding,\n      temp_added_tokens,\n      temp_normalizer,\n      temp_pre_tokenizer,\n      temp_post_processor.getOrThrow(),\n      temp_decoder.getOrThrow(),\n      temp_model.getOrThrow(),\n    );\n  }",
  "Edge 108: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n            let n = r.readName()\n            match (n) {",
  "Edge 109: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"version\" => temp_version = r.readValue<String>();",
  "Edge 110: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"truncation\" => temp_truncation = r.readValue<Option<String>>();",
  "Edge 111: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"padding\" => temp_padding = r.readValue<Option<String>>();",
  "Edge 112: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"added_tokens\" => temp_added_tokens = r.readValue<ArrayList<TokenJson>>();",
  "Edge 113: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"normalizer\" => temp_normalizer = r.readValue<NormalizerJson>();",
  "Edge 114: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"pre_tokenizer\" => temp_pre_tokenizer = r.readValue<PreTokenizerJson>();",
  "Edge 115: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"post_processor\" => temp_post_processor = Some(r.readValue<ProcessJson>());",
  "Edge 116: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"decoder\" => temp_decoder = Some(r.readValue<ProcessJson>());",
  "Edge 117: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case \"model\" => temp_model = Some(r.readValue<ModelJson>());",
  "Edge 118: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n            }\n          }\n          r.endObject();\n          break;",
  "Edge 119: [Source] public static func fromJson(r: JsonReader): TokenizerJson { ... => [Target] case _ => throw Exception(\"can't deserialize for ProcessJson\");\n      }\n    }\n    return TokenizerJson(\n      temp_version,\n      temp_truncation,\n      temp_padding,\n      temp_added_tokens,\n      temp_normalizer,\n      temp_pre_tokenizer,\n      temp_post_processor.getOrThrow(),\n      temp_decoder.getOrThrow(),\n      temp_model.getOrThrow(),\n    );\n  }"
]