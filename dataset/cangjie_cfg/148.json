[
  "Edge 0: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case Some(x) => true",
  "Edge 1: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case _ => false\n        } && match(right.key) {",
  "Edge 2: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case Some(x) => true",
  "Edge 3: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case _ => false\n            }) {\n            return this.key.getOrThrow() == right.key.getOrThrow()\n        } else if(match(this.key) {",
  "Edge 4: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case Some(x) => false",
  "Edge 5: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case _ => true\n        } && match(right.key) {",
  "Edge 6: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case Some(x) => false",
  "Edge 7: [Source] public func equals(right: LinkedEntry<K, V>): Bool { ... => [Target] case _ => true\n            }) {\n                return true\n        } else {\n            return false\n        }\n    }",
  "Edge 8: [Source] public func toString(): String { ... => [Target] case Some(x) => true",
  "Edge 9: [Source] public func toString(): String { ... => [Target] case _ => false\n        }) {\"None\"} else {this.key.getOrThrow().toString()}\n    }",
  "Edge 10: [Source] public func put(key: K, value: V): Unit { ... => [Target] case Some(x) => false",
  "Edge 11: [Source] public func put(key: K, value: V): Unit { ... => [Target] case _ => true\n    }) {\n      entry = Some(LinkedEntry<K, V>(Some(key)));\n      makeTail(entry.getOrThrow());\n      let b = keyToEntry.put(key, entry.getOrThrow());\n    } else {\n      key.offer();\n    }\n    entry.getOrThrow().add(value);\n  }",
  "Edge 12: [Source] public func get(key: K): Option<V> { ... => [Target] case Some(x) => false",
  "Edge 13: [Source] public func get(key: K): Option<V> { ... => [Target] case _ => true\n    }) {\n      entry = Some(LinkedEntry<K, V>(Some(key)))\n      let b = keyToEntry.put(key, entry.getOrThrow());\n    } else {\n      key.offer();\n    }\n    let en = entry.getOrThrow()\n    makeHead(en);\n    return en.removeLast();\n  }",
  "Edge 14: [Source] public func removeLast(): Option<V> { ... => [Target] case Some(x) => true",
  "Edge 15: [Source] public func removeLast(): Option<V> { ... => [Target] case _ => false\n      }) {\n        return removed;\n      } else {\n        // We will clean up empty lru entries since they are likely to have been one off or\n        // unusual sizes and\n        // are not likely to be requested again so the gc thrash should be minimal. Doing so will\n        // speed up our\n        // removeLast operation in the future and prevent our linked list from growing to\n        // arbitrarily large\n        // sizes.\n        removeEntry(last);\n        keyToEntry.remove(last.key.getOrThrow());\n        last.key.getOrThrow().offer();\n      }\n      last = last.prev.getOrThrow();\n    }\n    return None;\n  }"
]