[
  "Edge 0: [Source] public open func initBuffers(): Unit { ... => [Target] case Some(bardata) => mBarBuffers = Array<BarBuffer>(bardata.getDataSetCount(), item: BarBuffer(0, 0, false))\n                for (i in 0..this.mBarBuffers.size) {\n                    let dataSet: ?IBarDataSet = bardata.getDataSetByIndex(i)\n                    match (dataSet) {",
  "Edge 1: [Source] public open func initBuffers(): Unit { ... => [Target] case Some(dataset) => let size = if (dataset.isStacked()) {\n                                dataset.getStackSize()\n                            } else {\n                                1\n                            }\n                            mBarBuffers[i] =\n                                BarBuffer(dataset.getEntryCount() * 4 * size, bardata.getDataSetCount(),\n                                dataset.isStacked())",
  "Edge 2: [Source] public open func initBuffers(): Unit { ... => [Target] case _ => ()\n                    }\n                }",
  "Edge 3: [Source] public open func initBuffers(): Unit { ... => [Target] case _ => ()\n        }\n    }",
  "Edge 4: [Source] public func drawData(c: CanvasRenderingContext2D): Unit { ... => [Target] case Some(bardata) => for (i in 0..bardata.getDataSetCount()) {\n                let set: ?IBarDataSet = bardata.getDataSetByIndex(i)\n                match (set) {",
  "Edge 5: [Source] public func drawData(c: CanvasRenderingContext2D): Unit { ... => [Target] case Some(ibardataset) => if (ibardataset.isVisible()) {\n                        this.drawDataSet(c, ibardataset, i)\n                    }",
  "Edge 6: [Source] public func drawData(c: CanvasRenderingContext2D): Unit { ... => [Target] case _ => ()\n                }\n            }",
  "Edge 7: [Source] public func drawData(c: CanvasRenderingContext2D): Unit { ... => [Target] case _ => ()\n        }\n    }",
  "Edge 8: [Source] private func drawDataSetFunc(index: Int64, phaseX: Float64, phaseY: Float64, dataSet: IBarDataSet,\n        c: CanvasRenderingContext2D, trans: ?Transformer): Unit { ... => [Target] case Some(bar) => bar.getTopRadius()",
  "Edge 9: [Source] private func drawDataSetFunc(index: Int64, phaseX: Float64, phaseY: Float64, dataSet: IBarDataSet,\n        c: CanvasRenderingContext2D, trans: ?Transformer): Unit { ... => [Target] case None => 0.0\n            }\n            //顶部的矩形才需要绘制圆角\n            let isDrawRounded = radius != 0.0 && (j + 4 >= buffer.size() || (j + 4 < buffer.size() &&\n                buffer.buffer[j] != buffer.buffer[j + 4]))\n            // 圆角位置：同时受 值 和 图表是否 inverted 影响\n            var cornerType: RoundCornerType = RoundCornerType.UP\n            if (isInverted) {\n                cornerType = if (dataSet.getEntryForIndex(pos).getY() > 0.0) {\n                    RoundCornerType.DOWN\n                } else {\n                    RoundCornerType.UP\n                }\n            } else {\n                cornerType = if (dataSet.getEntryForIndex(pos).getY() > 0.0) {\n                    RoundCornerType.UP\n                } else {\n                    RoundCornerType.DOWN\n                }\n            }\n            if (isCustomFill) {\n                let fill: Fill = dataSet.getFill(pos)\n                fill.fillRect(c, this.mRenderPaint, buffer.buffer[j], buffer.buffer[j + 1], buffer.buffer[j + 2],\n                    buffer.buffer[j + 3], if (isInverted) {\n                    FillDirection.DOWN\n                } else {\n                    FillDirection.UP\n                }, radius: radius, cornerType: cornerType)\n            } else {\n                Utils.drawFillRect(isDrawRounded, c, this.mRenderPaint, buffer.buffer[j], buffer.buffer[j + 1],\n                    buffer.buffer[j + 2], buffer.buffer[j + 3], radius, cornerType)\n            }\n            if (drawBorder) {\n                Utils.drawStrokeRect(isDrawRounded, c, this.mBarBorderPaint, buffer.buffer[j], buffer.buffer[j + 1],\n                    buffer.buffer[j + 2], buffer.buffer[j + 3], radius, cornerType)\n            }\n            j += 4\n            pos++\n        }\n    }",
  "Edge 10: [Source] protected open func drawDataSet(c: CanvasRenderingContext2D, dataSet: IBarDataSet, index: Int64): Unit { ... => [Target] case Some(bardata: BarData) => bardata",
  "Edge 11: [Source] protected open func drawDataSet(c: CanvasRenderingContext2D, dataSet: IBarDataSet, index: Int64): Unit { ... => [Target] case None => return\n            }\n            var radius = barData.getTopRadius()\n            var barWidth: Float64 = barData.getBarWidth()\n            var barWidthHalf: Float64 = barWidth / 2.0\n            var x: Float64 = 0.0\n            let count = min(Int64(ceil(Float64(dataSet.getEntryCount()) * phaseX)), dataSet.getEntryCount())\n            for (i in 0..count) {\n                let e: BarEntry = dataSet.getEntryForIndex(i)\n                x = e.getX()\n                this.mBarShadowRectBuffer.left = x - barWidthHalf\n                this.mBarShadowRectBuffer.right = x + barWidthHalf\n                if(let Some(t) <- trans) {\n                    t.rectValueToPixel(this.mBarShadowRectBuffer)\n                }\n                if (!this.mViewPortHandler().isInBoundsLeft(this.mBarShadowRectBuffer.right)) {\n                    continue\n                }\n                if (!this.mViewPortHandler().isInBoundsRight(this.mBarShadowRectBuffer.left)) {\n                    break\n                }\n                this.mBarShadowRectBuffer.top = this.mViewPortHandler().contentTop()\n                this.mBarShadowRectBuffer.bottom = this.mViewPortHandler().contentBottom()\n                match (this.mShadowPaint.getStyle()) {",
  "Edge 12: [Source] protected open func drawDataSet(c: CanvasRenderingContext2D, dataSet: IBarDataSet, index: Int64): Unit { ... => [Target] case Style.STROKE => Utils.drawStrokeRect(radius > 0.0, c, this.mShadowPaint,\n                        this.mBarShadowRectBuffer.left, this.mBarShadowRectBuffer.top, this.mBarShadowRectBuffer.right,\n                        this.mBarShadowRectBuffer.bottom, radius, RoundCornerType.BOTH) // 阴影上下圆角都绘制比较好",
  "Edge 13: [Source] protected open func drawDataSet(c: CanvasRenderingContext2D, dataSet: IBarDataSet, index: Int64): Unit { ... => [Target] case Style.FILL => Utils.drawFillRect(radius > 0.0, c, this.mShadowPaint, this.mBarShadowRectBuffer.left,\n                        this.mBarShadowRectBuffer.top, this.mBarShadowRectBuffer.right, this.mBarShadowRectBuffer.bottom,\n                        radius, RoundCornerType.BOTH)",
  "Edge 14: [Source] protected open func drawDataSet(c: CanvasRenderingContext2D, dataSet: IBarDataSet, index: Int64): Unit { ... => [Target] case Style.FILL_AND_STROKE => Utils.drawFillRect(radius > 0.0, c, this.mShadowPaint, this.mBarShadowRectBuffer.left,\n                        this.mBarShadowRectBuffer.top, this.mBarShadowRectBuffer.right, this.mBarShadowRectBuffer.bottom,\n                        radius, RoundCornerType.BOTH)",
  "Edge 15: [Source] protected open func drawDataSet(c: CanvasRenderingContext2D, dataSet: IBarDataSet, index: Int64): Unit { ... => [Target] case _ => Utils.drawFillRect(radius > 0.0, c, this.mShadowPaint, this.mBarShadowRectBuffer.left,\n                        this.mBarShadowRectBuffer.top, this.mBarShadowRectBuffer.right, this.mBarShadowRectBuffer.bottom,\n                        radius, RoundCornerType.BOTH) // 阴影上下圆角都绘制比较好\n                }\n            }\n        }\n        drawDataSetFunc(index, phaseX, phaseY, dataSet, c, trans)\n    }"
]