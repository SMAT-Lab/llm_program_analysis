[
  "Edge 0: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => publisher = x.trimStart(\"publisher=\")",
  "Edge 1: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Brower(host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/browse\",\n        {\n            httpContext =>\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var publisher = \"\"\n            match (httpContext.request.url.query) {",
  "Edge 2: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => publisher = x.trimStart(\"publisher=\")",
  "Edge 3: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Brower(id, host: host, publisher: publisher)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var brower = LibrariesDetail(host: host, id: id)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {",
  "Edge 4: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
  "Edge 5: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n            if (user.id == \"\") {\n                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())\n                return\n            }\n            var brower = Reading(host: host, userID: user.id, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/keep-reading\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {",
  "Edge 6: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
  "Edge 7: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            let user = User(httpContext.request.headers.getFirst(\"Authorization\"))\n            if (user.id == \"\") {\n                httpContext.responseBuilder.status(401).body(\"unauthorized\".toArray())\n                return\n            }\n            var brower = Reading(id, host: host, userID: user.id, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/books/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {",
  "Edge 8: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
  "Edge 9: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Latest(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/books/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {",
  "Edge 10: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
  "Edge 11: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Latest(host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/:id/series/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            let id = httpContext.request.url.toString().split(\"/\")[4]\n            var page = 0\n            match (httpContext.request.url.query) {",
  "Edge 12: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
  "Edge 13: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Series(id, host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n\n    pathMap.add(\n        \"/opds/v2/libraries/series/latest\",\n        {\n            httpContext =>\n            let host = httpContext.request.headers.get(\"host\").toArray()[0]\n            var page = 0\n            match (httpContext.request.url.query) {",
  "Edge 14: [Source] public func pathLoad(): PathMap { ... => [Target] case Some(x) => page = Int64.parse(x.trimStart(\"page=\"))",
  "Edge 15: [Source] public func pathLoad(): PathMap { ... => [Target] case None => ()\n            }\n            var brower = Series(host: host, page: page)\n            httpContext.responseBuilder.header(\"content-type\", \"application/json;charset:utf-8;\")\n            httpContext.responseBuilder.body(brower.toJson())\n        }\n    )\n    return pathMap\n}"
]