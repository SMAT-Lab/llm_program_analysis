[
  "Edge 0: [Source] public func role_type_to_str(role: RoleType): Option<String> { ... => [Target] case RoleType.User => Some(\"user\")",
  "Edge 1: [Source] public func role_type_to_str(role: RoleType): Option<String> { ... => [Target] case RoleType.Assistant => Some(\"assistant\")",
  "Edge 2: [Source] public func role_type_to_str(role: RoleType): Option<String> { ... => [Target] case RoleType.System => Some(\"system\")",
  "Edge 3: [Source] public func role_type_to_str(role: RoleType): Option<String> { ... => [Target] case RoleType.Function => Some(\"function\")",
  "Edge 4: [Source] public func role_type_to_str(role: RoleType): Option<String> { ... => [Target] case RoleType.NULL => None\n  }\n}",
  "Edge 5: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case Some(role_option) => match (role_option) {",
  "Edge 6: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case \"user\" => RoleType.User",
  "Edge 7: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case \"assistant\" => RoleType.Assistant",
  "Edge 8: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case \"system\" => RoleType.System",
  "Edge 9: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case \"function\" => RoleType.Function",
  "Edge 10: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case x => throw Exception(\"unknow enum ${x} for RoleType\");\n      }",
  "Edge 11: [Source] public func str_to_role_type(role_option_str: Option<String>): RoleType { ... => [Target] case None => RoleType.NULL\n  }\n}",
  "Edge 12: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {",
  "Edge 13: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case \"name\" => temp_name = r.readValue<String>();",
  "Edge 14: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case \"arguments\" => temp_arguments = r.readValue<String>();",
  "Edge 15: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;",
  "Edge 16: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case _ => throw Exception(\"can't deserialize for FunctionCall\");\n      }\n    }\n    return FunctionCall(temp_name, temp_arguments);\n  }",
  "Edge 17: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {",
  "Edge 18: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case \"name\" => temp_name = r.readValue<String>();",
  "Edge 19: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case \"arguments\" => temp_arguments = r.readValue<String>();",
  "Edge 20: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;",
  "Edge 21: [Source] public static func fromJson(r: JsonReader): FunctionCall { ... => [Target] case _ => throw Exception(\"can't deserialize for FunctionCall\");\n      }\n    }\n    return FunctionCall(temp_name, temp_arguments);\n  }",
  "Edge 22: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {",
  "Edge 23: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case \"role\" => temp_role = r.readValue<Option<String>>();",
  "Edge 24: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case \"content\" => temp_content = r.readValue<String>();",
  "Edge 25: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();",
  "Edge 26: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;",
  "Edge 27: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case _ => throw Exception(\"can't deserialize for Message\");\n      }\n    }\n    let role_type: RoleType = str_to_role_type(temp_role);\n    return Message(role_type, temp_content);\n  }",
  "Edge 28: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case BeginObject => r.startObject();\n          while(r.peek() != EndObject) {\n              let n = r.readName()\n              match (n) {",
  "Edge 29: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case \"role\" => temp_role = r.readValue<Option<String>>();",
  "Edge 30: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case \"content\" => temp_content = r.readValue<String>();",
  "Edge 31: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case \"function_call\" => temp_functional_call = r.readValue<Option<FunctionCall>>();",
  "Edge 32: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case unkow => println(\"unkow key ${unkow}\");\n              }\n          }\n          r.endObject();\n          break;",
  "Edge 33: [Source] public static func fromJson(r: JsonReader): Message { ... => [Target] case _ => throw Exception(\"can't deserialize for Message\");\n      }\n    }\n    let role_type: RoleType = str_to_role_type(temp_role);\n    return Message(role_type, temp_content);\n  }"
]