{
  "type": "SourceFile",
  "label": "class InputUtil {\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }\n\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n}\n\nexport default new InputUtil()",
  "children": [
    {
      "type": "ClassDeclaration",
      "label": "class InputUtil {\n  isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }\n\n  checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }\n\n  removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "InputUtil",
          "children": []
        },
        {
          "type": "MethodDeclaration",
          "label": "isEmpty(str?: string): boolean {\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isEmpty",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "str?: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "str",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "str == 'undefined' || !str || !new RegExp(\"[^\\\\s]\").test(str)",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "str == 'undefined' || !str",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "str == 'undefined'",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "str",
                                  "children": []
                                },
                                {
                                  "type": "EqualsEqualsToken",
                                  "label": "==",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'undefined'",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "!str",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "PrefixUnaryExpression",
                          "label": "!new RegExp(\"[^\\\\s]\").test(str)",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "new RegExp(\"[^\\\\s]\").test(str)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new RegExp(\"[^\\\\s]\").test",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new RegExp(\"[^\\\\s]\")",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "RegExp",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "\"[^\\\\s]\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "test",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "checkNeedNumberSpace(numText: string) {\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "checkNeedNumberSpace",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "numText: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "numText",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')\n    let isRule: RegExp = new RegExp('^\\\\+.*')\n    if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }\n    return true\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSpace: RegExp = new RegExp('[\\\\+;,#\\\\*]', 'g')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSpace",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "RegExp",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "NewExpression",
                              "label": "new RegExp('[\\\\+;,#\\\\*]', 'g')",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'[\\\\+;,#\\\\*]'",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'g'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isRule: RegExp = new RegExp('^\\\\+.*')",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isRule: RegExp = new RegExp('^\\\\+.*')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isRule: RegExp = new RegExp('^\\\\+.*')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isRule",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "RegExp",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "NewExpression",
                              "label": "new RegExp('^\\\\+.*')",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'^\\\\+.*'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (isSpace.test(numText)) {\n      return isRule.test(numText)\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "isSpace.test(numText)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "isSpace.test",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSpace",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "test",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "numText",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return isRule.test(numText)\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return isRule.test(numText)",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "isRule.test(numText)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "isRule.test",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isRule",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "test",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "numText",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return true",
                  "children": [
                    {
                      "type": "TrueKeyword",
                      "label": "true",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "removeSpace(str: string): string {\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "removeSpace",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "str: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "str",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.isEmpty(str)) {\n      return ''\n    }\n    return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.isEmpty(str)) {\n      return ''\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.isEmpty(str)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.isEmpty",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "isEmpty",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return ''\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return ''",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "''",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "str.replace(new RegExp(\"[\\\\s]\", \"g\"), '')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "str.replace",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "str",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "replace",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "NewExpression",
                          "label": "new RegExp(\"[\\\\s]\", \"g\")",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "RegExp",
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "\"[\\\\s]\"",
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "\"g\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "''",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ExportAssignment",
      "label": "export default new InputUtil()",
      "children": [
        {
          "type": "NewExpression",
          "label": "new InputUtil()",
          "children": [
            {
              "type": "Identifier",
              "label": "InputUtil",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}