{
  "type": "SourceFile",
  "label": "import type { ProcessDataCallback } from './i_idl_service_ext';\nimport type { InsertDataToMapCallback } from './i_idl_service_ext';\nimport type IIdlServiceExt from './i_idl_service_ext';\nimport hilog from '@ohos.hilog';\nimport rpc from '@ohos.rpc';\n\nconst TAG: string = '[IdlServiceExtProxy]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class IdlServiceExtProxy implements IIdlServiceExt {\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n  private proxy;\n\n  constructor(proxy) {\n    this.proxy = proxy;\n  };\n\n  processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n};\n\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import type { ProcessDataCallback } from './i_idl_service_ext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "type { ProcessDataCallback }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ ProcessDataCallback }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "ProcessDataCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ProcessDataCallback",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./i_idl_service_ext'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import type { InsertDataToMapCallback } from './i_idl_service_ext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "type { InsertDataToMapCallback }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ InsertDataToMapCallback }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "InsertDataToMapCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "InsertDataToMapCallback",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./i_idl_service_ext'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import type IIdlServiceExt from './i_idl_service_ext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "type IIdlServiceExt",
          "children": [
            {
              "type": "Identifier",
              "label": "IIdlServiceExt",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./i_idl_service_ext'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import hilog from '@ohos.hilog';",
      "children": [
        {
          "type": "ImportClause",
          "label": "hilog",
          "children": [
            {
              "type": "Identifier",
              "label": "hilog",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.hilog'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import rpc from '@ohos.rpc';",
      "children": [
        {
          "type": "ImportClause",
          "label": "rpc",
          "children": [
            {
              "type": "Identifier",
              "label": "rpc",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.rpc'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG: string = '[IdlServiceExtProxy]';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG: string = '[IdlServiceExtProxy]'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG: string = '[IdlServiceExtProxy]'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'[IdlServiceExtProxy]'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const DOMAIN_NUMBER: number = 0xFF00;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const DOMAIN_NUMBER: number = 0xFF00",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "DOMAIN_NUMBER: number = 0xFF00",
              "children": [
                {
                  "type": "Identifier",
                  "label": "DOMAIN_NUMBER",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "0xFF00",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "export default class IdlServiceExtProxy implements IIdlServiceExt {\n  static readonly COMMAND_PROCESS_DATA = 1;\n  static readonly COMMAND_INSERT_DATA_TO_MAP = 2;\n  private proxy;\n\n  constructor(proxy) {\n    this.proxy = proxy;\n  };\n\n  processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n\n  insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  };\n}",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "DefaultKeyword",
          "label": "default",
          "children": []
        },
        {
          "type": "Identifier",
          "label": "IdlServiceExtProxy",
          "children": []
        },
        {
          "type": "HeritageClause",
          "label": "implements IIdlServiceExt",
          "children": [
            {
              "type": "ExpressionWithTypeArguments",
              "label": "IIdlServiceExt",
              "children": [
                {
                  "type": "Identifier",
                  "label": "IIdlServiceExt",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "static readonly COMMAND_PROCESS_DATA = 1;",
          "children": [
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "COMMAND_PROCESS_DATA",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "1",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "static readonly COMMAND_INSERT_DATA_TO_MAP = 2;",
          "children": [
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "COMMAND_INSERT_DATA_TO_MAP",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "2",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private proxy;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "proxy",
              "children": []
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor(proxy) {\n    this.proxy = proxy;\n  }",
          "children": [
            {
              "type": "Parameter",
              "label": "proxy",
              "children": [
                {
                  "type": "Identifier",
                  "label": "proxy",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.proxy = proxy;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.proxy = proxy;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.proxy = proxy",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.proxy",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "proxy",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "proxy",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "SemicolonClassElement",
          "label": ";",
          "children": []
        },
        {
          "type": "MethodDeclaration",
          "label": "processData(data: number, callback: ProcessDataCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "processData",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "data: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "data",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "callback: ProcessDataCallback",
              "children": [
                {
                  "type": "Identifier",
                  "label": "callback",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "ProcessDataCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ProcessDataCallback",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let option = new rpc.MessageOption();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let option = new rpc.MessageOption()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "option = new rpc.MessageOption()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "option",
                              "children": []
                            },
                            {
                              "type": "NewExpression",
                              "label": "new rpc.MessageOption()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "rpc.MessageOption",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "rpc",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MessageOption",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let dataSequence = rpc.MessageSequence.create();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let dataSequence = rpc.MessageSequence.create()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "dataSequence = rpc.MessageSequence.create()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "dataSequence",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "rpc.MessageSequence.create()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "rpc.MessageSequence.create",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "rpc.MessageSequence",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "rpc",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MessageSequence",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "create",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let replySequence = rpc.MessageSequence.create();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let replySequence = rpc.MessageSequence.create()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "replySequence = rpc.MessageSequence.create()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "replySequence",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "rpc.MessageSequence.create()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "rpc.MessageSequence.create",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "rpc.MessageSequence",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "rpc",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MessageSequence",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "create",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      dataSequence.writeInt(data);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "dataSequence.writeInt(data);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "dataSequence.writeInt(data)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "dataSequence.writeInt",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dataSequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "writeInt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "data",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option).then",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_PROCESS_DATA, dataSequence, replySequence, option)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.proxy.sendMessageRequest",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.proxy",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "proxy",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "sendMessageRequest",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "IdlServiceExtProxy.COMMAND_PROCESS_DATA",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "IdlServiceExtProxy",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "COMMAND_PROCESS_DATA",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "dataSequence",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "replySequence",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "option",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "then",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FunctionExpression",
                                  "label": "function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "result",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "result",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      }",
                                      "children": [
                                        {
                                          "type": "IfStatement",
                                          "label": "if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "result.errCode === 0",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "result.errCode",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "result",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "errCode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "EqualsEqualsEqualsToken",
                                                  "label": "===",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          let errCodeVar = result.reply.readInt();\n          if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }\n          let returnValueVar = result.reply.readInt();\n          callback(errCodeVar, returnValueVar);\n        }",
                                              "children": [
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "let errCodeVar = result.reply.readInt();",
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "let errCodeVar = result.reply.readInt()",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "errCodeVar = result.reply.readInt()",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "errCodeVar",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "result.reply.readInt()",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "result.reply.readInt",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "result.reply",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "result",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "reply",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "readInt",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if (errCodeVar !== 0) {\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "errCodeVar !== 0",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "errCodeVar",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ExclamationEqualsEqualsToken",
                                                          "label": "!==",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "FirstLiteralToken",
                                                          "label": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n            let returnValueVar = undefined;\n            callback(errCodeVar, returnValueVar);\n            return;\n          }",
                                                      "children": [
                                                        {
                                                          "type": "FirstStatement",
                                                          "label": "let returnValueVar = undefined;",
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclarationList",
                                                              "label": "let returnValueVar = undefined",
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "returnValueVar = undefined",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "returnValueVar",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "undefined",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "callback(errCodeVar, returnValueVar);",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "callback(errCodeVar, returnValueVar)",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "callback",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "errCodeVar",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "returnValueVar",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ReturnStatement",
                                                          "label": "return;",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "let returnValueVar = result.reply.readInt();",
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "let returnValueVar = result.reply.readInt()",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "returnValueVar = result.reply.readInt()",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "returnValueVar",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "result.reply.readInt()",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "result.reply.readInt",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "result.reply",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "result",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "reply",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "readInt",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "callback(errCodeVar, returnValueVar);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "callback(errCodeVar, returnValueVar)",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "callback",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "errCodeVar",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "returnValueVar",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "hilog.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "hilog",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DOMAIN_NUMBER",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'sendMessageRequest failed, errCode: ' + result.errCode",
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'sendMessageRequest failed, errCode: '",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PlusToken",
                                                              "label": "+",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "result.errCode",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "result",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "errCode",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "dataSequence.reclaim();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "dataSequence.reclaim()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "dataSequence.reclaim",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dataSequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "reclaim",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "replySequence.reclaim();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "replySequence.reclaim()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "replySequence.reclaim",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "replySequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "reclaim",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "EmptyStatement",
                  "label": ";",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "SemicolonClassElement",
          "label": ";",
          "children": []
        },
        {
          "type": "MethodDeclaration",
          "label": "insertDataToMap(key: string, val: number, callback: InsertDataToMapCallback): void {\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "insertDataToMap",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "key: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "key",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "val: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "val",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "callback: InsertDataToMapCallback",
              "children": [
                {
                  "type": "Identifier",
                  "label": "callback",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "InsertDataToMapCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "InsertDataToMapCallback",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let option = new rpc.MessageOption();\n    let dataSequence = rpc.MessageSequence.create();\n    let replySequence = rpc.MessageSequence.create();\n    try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    };\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let option = new rpc.MessageOption();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let option = new rpc.MessageOption()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "option = new rpc.MessageOption()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "option",
                              "children": []
                            },
                            {
                              "type": "NewExpression",
                              "label": "new rpc.MessageOption()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "rpc.MessageOption",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "rpc",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MessageOption",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let dataSequence = rpc.MessageSequence.create();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let dataSequence = rpc.MessageSequence.create()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "dataSequence = rpc.MessageSequence.create()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "dataSequence",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "rpc.MessageSequence.create()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "rpc.MessageSequence.create",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "rpc.MessageSequence",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "rpc",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MessageSequence",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "create",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let replySequence = rpc.MessageSequence.create();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let replySequence = rpc.MessageSequence.create()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "replySequence = rpc.MessageSequence.create()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "replySequence",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "rpc.MessageSequence.create()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "rpc.MessageSequence.create",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "rpc.MessageSequence",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "rpc",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MessageSequence",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "create",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    } finally {\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      dataSequence.writeString(key);\n      dataSequence.writeInt(val);\n      this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "dataSequence.writeString(key);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "dataSequence.writeString(key)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "dataSequence.writeString",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dataSequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "writeString",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "key",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "dataSequence.writeInt(val);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "dataSequence.writeInt(val)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "dataSequence.writeInt",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dataSequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "writeInt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "val",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then(function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option).then",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.proxy.sendMessageRequest(IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP, dataSequence, replySequence, option)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.proxy.sendMessageRequest",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.proxy",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "proxy",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "sendMessageRequest",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "IdlServiceExtProxy.COMMAND_INSERT_DATA_TO_MAP",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "IdlServiceExtProxy",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "COMMAND_INSERT_DATA_TO_MAP",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "dataSequence",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "replySequence",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "option",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "then",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FunctionExpression",
                                  "label": "function (result) {\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "result",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "result",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }\n      }",
                                      "children": [
                                        {
                                          "type": "IfStatement",
                                          "label": "if (result.errCode === 0) {\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        } else {\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "result.errCode === 0",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "result.errCode",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "result",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "errCode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "EqualsEqualsEqualsToken",
                                                  "label": "===",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          let errCodeVar = result.reply.readInt();\n          callback(errCodeVar);\n        }",
                                              "children": [
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "let errCodeVar = result.reply.readInt();",
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "let errCodeVar = result.reply.readInt()",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "errCodeVar = result.reply.readInt()",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "errCodeVar",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "result.reply.readInt()",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "result.reply.readInt",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "result.reply",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "result",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "reply",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "readInt",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "callback(errCodeVar);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "callback(errCodeVar)",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "callback",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "errCodeVar",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);\n        }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "hilog.info(DOMAIN_NUMBER, TAG, 'sendMessageRequest failed, errCode: ' + result.errCode)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "hilog.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "hilog",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DOMAIN_NUMBER",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'sendMessageRequest failed, errCode: ' + result.errCode",
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'sendMessageRequest failed, errCode: '",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PlusToken",
                                                              "label": "+",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "result.errCode",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "result",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "errCode",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      dataSequence.reclaim();\n      replySequence.reclaim();\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "dataSequence.reclaim();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "dataSequence.reclaim()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "dataSequence.reclaim",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dataSequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "reclaim",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "replySequence.reclaim();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "replySequence.reclaim()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "replySequence.reclaim",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "replySequence",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "reclaim",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "EmptyStatement",
                  "label": ";",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "SemicolonClassElement",
          "label": ";",
          "children": []
        }
      ]
    },
    {
      "type": "EmptyStatement",
      "label": ";",
      "children": []
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}