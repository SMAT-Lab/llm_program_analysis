{
  "type": "SourceFile",
  "label": "import { ValidationError } from \"@lerna/core\";\nimport { FetchConfig, getFetchConfig } from \"./fetch-config\";\nimport { getProfileData } from \"./get-profile-data\";\nexport function getTwoFactorAuthRequired(options: Partial<FetchConfig> = {}): Promise<boolean> {\n  const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });\n  opts.log.info(\"\", \"Checking two-factor auth mode\");\n  return getProfileData(opts).then(success, failure);\n  function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }\n  function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }\n}",
  "start_token": 0,
  "end_token": 202,
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { ValidationError } from \"@lerna/core\";",
      "start_token": 0,
      "end_token": 6,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ ValidationError }",
          "start_token": 1,
          "end_token": 3,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ ValidationError }",
              "start_token": 1,
              "end_token": 3,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "ValidationError",
                  "start_token": 2,
                  "end_token": 2,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ValidationError",
                      "start_token": 2,
                      "end_token": 2,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"@lerna/core\"",
          "start_token": 5,
          "end_token": 5,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { FetchConfig, getFetchConfig } from \"./fetch-config\";",
      "start_token": 7,
      "end_token": 15,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ FetchConfig, getFetchConfig }",
          "start_token": 8,
          "end_token": 12,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ FetchConfig, getFetchConfig }",
              "start_token": 8,
              "end_token": 12,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "FetchConfig",
                  "start_token": 9,
                  "end_token": 9,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "FetchConfig",
                      "start_token": 9,
                      "end_token": 9,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "getFetchConfig",
                  "start_token": 11,
                  "end_token": 11,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getFetchConfig",
                      "start_token": 11,
                      "end_token": 11,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"./fetch-config\"",
          "start_token": 14,
          "end_token": 14,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { getProfileData } from \"./get-profile-data\";",
      "start_token": 16,
      "end_token": 22,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ getProfileData }",
          "start_token": 17,
          "end_token": 19,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ getProfileData }",
              "start_token": 17,
              "end_token": 19,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "getProfileData",
                  "start_token": 18,
                  "end_token": 18,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getProfileData",
                      "start_token": 18,
                      "end_token": 18,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"./get-profile-data\"",
          "start_token": 21,
          "end_token": 21,
          "children": []
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "export function getTwoFactorAuthRequired(options: Partial<FetchConfig> = {}): Promise<boolean> {\n  const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });\n  opts.log.info(\"\", \"Checking two-factor auth mode\");\n  return getProfileData(opts).then(success, failure);\n  function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }\n  function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }\n}",
      "start_token": 23,
      "end_token": 202,
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "start_token": 23,
          "end_token": 23,
          "children": []
        },
        {
          "type": "Identifier",
          "label": "getTwoFactorAuthRequired",
          "start_token": 25,
          "end_token": 25,
          "children": []
        },
        {
          "type": "Parameter",
          "label": "options: Partial<FetchConfig> = {}",
          "start_token": 27,
          "end_token": 35,
          "children": [
            {
              "type": "Identifier",
              "label": "options",
              "start_token": 27,
              "end_token": 27,
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Partial<FetchConfig>",
              "start_token": 29,
              "end_token": 32,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Partial",
                  "start_token": 29,
                  "end_token": 29,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "FetchConfig",
                  "start_token": 31,
                  "end_token": 31,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "FetchConfig",
                      "start_token": 31,
                      "end_token": 31,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{}",
              "start_token": 34,
              "end_token": 35,
              "children": []
            }
          ]
        },
        {
          "type": "TypeReference",
          "label": "Promise<boolean>",
          "start_token": 38,
          "end_token": 41,
          "children": [
            {
              "type": "Identifier",
              "label": "Promise",
              "start_token": 38,
              "end_token": 38,
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "start_token": 40,
              "end_token": 40,
              "children": []
            }
          ]
        },
        {
          "type": "Block",
          "label": "{\n  const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });\n  opts.log.info(\"\", \"Checking two-factor auth mode\");\n  return getProfileData(opts).then(success, failure);\n  function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }\n  function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }\n}",
          "start_token": 42,
          "end_token": 202,
          "children": [
            {
              "type": "FirstStatement",
              "label": "const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  });",
              "start_token": 43,
              "end_token": 58,
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "const opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  })",
                  "start_token": 43,
                  "end_token": 57,
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "opts = getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  })",
                      "start_token": 44,
                      "end_token": 57,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "opts",
                          "start_token": 44,
                          "end_token": 44,
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "getFetchConfig(options, {\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  })",
                          "start_token": 46,
                          "end_token": 57,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "getFetchConfig",
                              "start_token": 46,
                              "end_token": 46,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "options",
                              "start_token": 48,
                              "end_token": 48,
                              "children": []
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n    // don't wait forever for third-party failures to be dealt with\n    fetchRetries: 0,\n  }",
                              "start_token": 50,
                              "end_token": 56,
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "fetchRetries: 0",
                                  "start_token": 52,
                                  "end_token": 54,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fetchRetries",
                                      "start_token": 52,
                                      "end_token": 52,
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "start_token": 54,
                                      "end_token": 54,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "opts.log.info(\"\", \"Checking two-factor auth mode\");",
              "start_token": 59,
              "end_token": 69,
              "children": [
                {
                  "type": "CallExpression",
                  "label": "opts.log.info(\"\", \"Checking two-factor auth mode\")",
                  "start_token": 59,
                  "end_token": 68,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "opts.log.info",
                      "start_token": 59,
                      "end_token": 63,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.log",
                          "start_token": 59,
                          "end_token": 61,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "start_token": 59,
                              "end_token": 59,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "log",
                              "start_token": 61,
                              "end_token": 61,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "info",
                          "start_token": 63,
                          "end_token": 63,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "StringLiteral",
                      "label": "\"\"",
                      "start_token": 65,
                      "end_token": 65,
                      "children": []
                    },
                    {
                      "type": "StringLiteral",
                      "label": "\"Checking two-factor auth mode\"",
                      "start_token": 67,
                      "end_token": 67,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "label": "return getProfileData(opts).then(success, failure);",
              "start_token": 70,
              "end_token": 82,
              "children": [
                {
                  "type": "CallExpression",
                  "label": "getProfileData(opts).then(success, failure)",
                  "start_token": 71,
                  "end_token": 81,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "getProfileData(opts).then",
                      "start_token": 71,
                      "end_token": 76,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "getProfileData(opts)",
                          "start_token": 71,
                          "end_token": 74,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "getProfileData",
                              "start_token": 71,
                              "end_token": 71,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "start_token": 73,
                              "end_token": 73,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "then",
                          "start_token": 76,
                          "end_token": 76,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "success",
                      "start_token": 78,
                      "end_token": 78,
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "failure",
                      "start_token": 80,
                      "end_token": 80,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "FunctionDeclaration",
              "label": "function success(result) {\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }",
              "start_token": 83,
              "end_token": 125,
              "children": [
                {
                  "type": "Identifier",
                  "label": "success",
                  "start_token": 84,
                  "end_token": 84,
                  "children": []
                },
                {
                  "type": "Parameter",
                  "label": "result",
                  "start_token": 86,
                  "end_token": 86,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "result",
                      "start_token": 86,
                      "end_token": 86,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    opts.log.silly(\"2FA\", result.tfa);\n    if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }\n    return result.tfa.mode === \"auth-and-writes\";\n  }",
                  "start_token": 88,
                  "end_token": 125,
                  "children": [
                    {
                      "type": "ExpressionStatement",
                      "label": "opts.log.silly(\"2FA\", result.tfa);",
                      "start_token": 89,
                      "end_token": 101,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "opts.log.silly(\"2FA\", result.tfa)",
                          "start_token": 89,
                          "end_token": 100,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "opts.log.silly",
                              "start_token": 89,
                              "end_token": 93,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "opts.log",
                                  "start_token": 89,
                                  "end_token": 91,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "opts",
                                      "start_token": 89,
                                      "end_token": 89,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "log",
                                      "start_token": 91,
                                      "end_token": 91,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "silly",
                                  "start_token": 93,
                                  "end_token": 93,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "StringLiteral",
                              "label": "\"2FA\"",
                              "start_token": 95,
                              "end_token": 95,
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "result.tfa",
                              "start_token": 97,
                              "end_token": 99,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "result",
                                  "start_token": 97,
                                  "end_token": 97,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "tfa",
                                  "start_token": 99,
                                  "end_token": 99,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "label": "if (result.tfa.pending) {\n      // if 2FA is pending, it is disabled\n      return false;\n    }",
                      "start_token": 102,
                      "end_token": 115,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "result.tfa.pending",
                          "start_token": 104,
                          "end_token": 108,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "result.tfa",
                              "start_token": 104,
                              "end_token": 106,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "result",
                                  "start_token": 104,
                                  "end_token": 104,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "tfa",
                                  "start_token": 106,
                                  "end_token": 106,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "pending",
                              "start_token": 108,
                              "end_token": 108,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      // if 2FA is pending, it is disabled\n      return false;\n    }",
                          "start_token": 110,
                          "end_token": 115,
                          "children": [
                            {
                              "type": "ReturnStatement",
                              "label": "return false;",
                              "start_token": 112,
                              "end_token": 114,
                              "children": [
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "start_token": 113,
                                  "end_token": 113,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ReturnStatement",
                      "label": "return result.tfa.mode === \"auth-and-writes\";",
                      "start_token": 116,
                      "end_token": 124,
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "result.tfa.mode === \"auth-and-writes\"",
                          "start_token": 117,
                          "end_token": 123,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "result.tfa.mode",
                              "start_token": 117,
                              "end_token": 121,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "result.tfa",
                                  "start_token": 117,
                                  "end_token": 119,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "result",
                                      "start_token": 117,
                                      "end_token": 117,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "tfa",
                                      "start_token": 119,
                                      "end_token": 119,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "mode",
                                  "start_token": 121,
                                  "end_token": 121,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "start_token": 122,
                              "end_token": 122,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "\"auth-and-writes\"",
                              "start_token": 123,
                              "end_token": 123,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "FunctionDeclaration",
              "label": "function failure(err) {\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }",
              "start_token": 126,
              "end_token": 201,
              "children": [
                {
                  "type": "Identifier",
                  "label": "failure",
                  "start_token": 127,
                  "end_token": 127,
                  "children": []
                },
                {
                  "type": "Parameter",
                  "label": "err",
                  "start_token": 129,
                  "end_token": 129,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "err",
                      "start_token": 129,
                      "end_token": 129,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    // pass if registry does not support profile endpoint\n    if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }\n    // Log the error cleanly to stderr\n    opts.log.pause();\n    console.error(err.message); // eslint-disable-line no-console\n    opts.log.resume();\n    throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");\n  }",
                  "start_token": 131,
                  "end_token": 201,
                  "children": [
                    {
                      "type": "IfStatement",
                      "label": "if (err.code === \"E500\" || err.code === \"E404\") {\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }",
                      "start_token": 133,
                      "end_token": 164,
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "err.code === \"E500\" || err.code === \"E404\"",
                          "start_token": 135,
                          "end_token": 145,
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "err.code === \"E500\"",
                              "start_token": 135,
                              "end_token": 139,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "err.code",
                                  "start_token": 135,
                                  "end_token": 137,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "start_token": 135,
                                      "end_token": 135,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "code",
                                      "start_token": 137,
                                      "end_token": 137,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "start_token": 138,
                                  "end_token": 138,
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "\"E500\"",
                                  "start_token": 139,
                                  "end_token": 139,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "start_token": 140,
                              "end_token": 140,
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "err.code === \"E404\"",
                              "start_token": 141,
                              "end_token": 145,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "err.code",
                                  "start_token": 141,
                                  "end_token": 143,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "start_token": 141,
                                      "end_token": 141,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "code",
                                      "start_token": 143,
                                      "end_token": 143,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "start_token": 144,
                                  "end_token": 144,
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "\"E404\"",
                                  "start_token": 145,
                                  "end_token": 145,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      // most likely a private registry (npm Enterprise, verdaccio, etc)\n      opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );\n      // don't log redundant errors\n      return false;\n    }",
                          "start_token": 147,
                          "end_token": 164,
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      );",
                              "start_token": 149,
                              "end_token": 159,
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "opts.log.warn(\n        \"EREGISTRY\",\n        `Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`\n      )",
                                  "start_token": 149,
                                  "end_token": 158,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "opts.log.warn",
                                      "start_token": 149,
                                      "end_token": 153,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "opts.log",
                                          "start_token": 149,
                                          "end_token": 151,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "opts",
                                              "start_token": 149,
                                              "end_token": 149,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "log",
                                              "start_token": 151,
                                              "end_token": 151,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "warn",
                                          "start_token": 153,
                                          "end_token": 153,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "\"EREGISTRY\"",
                                      "start_token": 155,
                                      "end_token": 155,
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`Registry \"${opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`",
                                      "start_token": 157,
                                      "end_token": 157,
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`Registry \"${",
                                          "start_token": 157,
                                          "end_token": 157,
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "opts.registry}\" does not support 'npm profile get', skipping two-factor auth check...`",
                                          "start_token": 157,
                                          "end_token": 157,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "opts.registry",
                                              "start_token": 157,
                                              "end_token": 157,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "opts",
                                                  "start_token": 157,
                                                  "end_token": 157,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "registry",
                                                  "start_token": 157,
                                                  "end_token": 157,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}\" does not support 'npm profile get', skipping two-factor auth check...`",
                                              "start_token": 157,
                                              "end_token": 157,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return false;",
                              "start_token": 161,
                              "end_token": 163,
                              "children": [
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "start_token": 162,
                                  "end_token": 162,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "opts.log.pause();",
                      "start_token": 166,
                      "end_token": 173,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "opts.log.pause()",
                          "start_token": 166,
                          "end_token": 172,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "opts.log.pause",
                              "start_token": 166,
                              "end_token": 170,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "opts.log",
                                  "start_token": 166,
                                  "end_token": 168,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "opts",
                                      "start_token": 166,
                                      "end_token": 166,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "log",
                                      "start_token": 168,
                                      "end_token": 168,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "pause",
                                  "start_token": 170,
                                  "end_token": 170,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "console.error(err.message);",
                      "start_token": 174,
                      "end_token": 182,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "console.error(err.message)",
                          "start_token": 174,
                          "end_token": 181,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "console.error",
                              "start_token": 174,
                              "end_token": 176,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "console",
                                  "start_token": 174,
                                  "end_token": 174,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "error",
                                  "start_token": 176,
                                  "end_token": 176,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "err.message",
                              "start_token": 178,
                              "end_token": 180,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "start_token": 178,
                                  "end_token": 178,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "message",
                                  "start_token": 180,
                                  "end_token": 180,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "opts.log.resume();",
                      "start_token": 184,
                      "end_token": 191,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "opts.log.resume()",
                          "start_token": 184,
                          "end_token": 190,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "opts.log.resume",
                              "start_token": 184,
                              "end_token": 188,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "opts.log",
                                  "start_token": 184,
                                  "end_token": 186,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "opts",
                                      "start_token": 184,
                                      "end_token": 184,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "log",
                                      "start_token": 186,
                                      "end_token": 186,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "resume",
                                  "start_token": 188,
                                  "end_token": 188,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ThrowStatement",
                      "label": "throw new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\");",
                      "start_token": 192,
                      "end_token": 200,
                      "children": [
                        {
                          "type": "NewExpression",
                          "label": "new ValidationError(\"ETWOFACTOR\", \"Unable to obtain two-factor auth mode\")",
                          "start_token": 193,
                          "end_token": 199,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "ValidationError",
                              "start_token": 194,
                              "end_token": 194,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "\"ETWOFACTOR\"",
                              "start_token": 196,
                              "end_token": 196,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "\"Unable to obtain two-factor auth mode\"",
                              "start_token": 198,
                              "end_token": 198,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "start_token": -1,
      "end_token": -1,
      "children": []
    }
  ]
}