{
  "type": "SourceFile",
  "label": "import { Log } from './Log';\n\nconst TAG = 'ImageUtil';\nconst MAX_BIT = 30;\nconst BIT_SIXTEEN = 16;\nconst BIT_EIGHT = 8;\nconst BIT_FOUR = 4;\nconst BIT_TWO = 2;\nconst BIT_ONE = 1;\n\nexport function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}\n\nfunction computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}\n\nfunction nextPowerOf2(value: number): number {\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { Log } from './Log';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Log }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Log }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Log",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Log",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./Log'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG = 'ImageUtil';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG = 'ImageUtil'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG = 'ImageUtil'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'ImageUtil'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const MAX_BIT = 30;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const MAX_BIT = 30",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "MAX_BIT = 30",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MAX_BIT",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "30",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const BIT_SIXTEEN = 16;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const BIT_SIXTEEN = 16",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "BIT_SIXTEEN = 16",
              "children": [
                {
                  "type": "Identifier",
                  "label": "BIT_SIXTEEN",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "16",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const BIT_EIGHT = 8;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const BIT_EIGHT = 8",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "BIT_EIGHT = 8",
              "children": [
                {
                  "type": "Identifier",
                  "label": "BIT_EIGHT",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "8",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const BIT_FOUR = 4;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const BIT_FOUR = 4",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "BIT_FOUR = 4",
              "children": [
                {
                  "type": "Identifier",
                  "label": "BIT_FOUR",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "4",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const BIT_TWO = 2;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const BIT_TWO = 2",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "BIT_TWO = 2",
              "children": [
                {
                  "type": "Identifier",
                  "label": "BIT_TWO",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "2",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const BIT_ONE = 1;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const BIT_ONE = 1",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "BIT_ONE = 1",
              "children": [
                {
                  "type": "Identifier",
                  "label": "BIT_ONE",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "1",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "export function computeSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "Identifier",
          "label": "computeSampleSize",
          "children": []
        },
        {
          "type": "Parameter",
          "label": "width: number",
          "children": [
            {
              "type": "Identifier",
              "label": "width",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "Parameter",
          "label": "height: number",
          "children": [
            {
              "type": "Identifier",
              "label": "height",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "Parameter",
          "label": "minSideLength: number",
          "children": [
            {
              "type": "Identifier",
              "label": "minSideLength",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "Parameter",
          "label": "maxNumOfPixels: number",
          "children": [
            {
              "type": "Identifier",
              "label": "maxNumOfPixels",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "NumberKeyword",
          "label": "number",
          "children": []
        },
        {
          "type": "Block",
          "label": "{\n  if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }\n  let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);\n  Log.info(TAG, 'initialSize:  ' + initialSize);\n  return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;\n}",
          "children": [
            {
              "type": "IfStatement",
              "label": "if (width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0) {\n    return 2;\n  }",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "width === 0 || height === 0 || minSideLength === 0 || maxNumOfPixels === 0",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "width === 0 || height === 0 || minSideLength === 0",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "width === 0 || height === 0",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "width === 0",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "width",
                                  "children": []
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "height === 0",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "height",
                                  "children": []
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "minSideLength === 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "minSideLength",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BarBarToken",
                      "label": "||",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "maxNumOfPixels === 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "maxNumOfPixels",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    return 2;\n  }",
                  "children": [
                    {
                      "type": "ReturnStatement",
                      "label": "return 2;",
                      "children": [
                        {
                          "type": "FirstLiteralToken",
                          "label": "2",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "FirstStatement",
              "label": "let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels);",
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "let initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels)",
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "initialSize = computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "initialSize",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "computeInitialSampleSize(width, height, minSideLength, maxNumOfPixels)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "computeInitialSampleSize",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "minSideLength",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "maxNumOfPixels",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "Log.info(TAG, 'initialSize:  ' + initialSize);",
              "children": [
                {
                  "type": "CallExpression",
                  "label": "Log.info(TAG, 'initialSize:  ' + initialSize)",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "Log.info",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Log",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "TAG",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "'initialSize:  ' + initialSize",
                      "children": [
                        {
                          "type": "StringLiteral",
                          "label": "'initialSize:  '",
                          "children": []
                        },
                        {
                          "type": "PlusToken",
                          "label": "+",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "initialSize",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "label": "return initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8;",
              "children": [
                {
                  "type": "ConditionalExpression",
                  "label": "initialSize <= 8 ? nextPowerOf2(initialSize) : Math.floor((initialSize + 8 - 1) / 8) * 8",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "initialSize <= 8",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "initialSize",
                          "children": []
                        },
                        {
                          "type": "LessThanEqualsToken",
                          "label": "<=",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "8",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "QuestionToken",
                      "label": "?",
                      "children": []
                    },
                    {
                      "type": "CallExpression",
                      "label": "nextPowerOf2(initialSize)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "nextPowerOf2",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "initialSize",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "ColonToken",
                      "label": ":",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "Math.floor((initialSize + 8 - 1) / 8) * 8",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "Math.floor((initialSize + 8 - 1) / 8)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Math.floor",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Math",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "floor",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "(initialSize + 8 - 1) / 8",
                              "children": [
                                {
                                  "type": "ParenthesizedExpression",
                                  "label": "(initialSize + 8 - 1)",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "initialSize + 8 - 1",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "initialSize + 8",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "initialSize",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "8",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "MinusToken",
                                          "label": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "SlashToken",
                                  "label": "/",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "8",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "AsteriskToken",
                          "label": "*",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "8",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "function computeInitialSampleSize(width: number, height: number, minSideLength: number, maxNumOfPixels: number): number {\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "computeInitialSampleSize",
          "children": []
        },
        {
          "type": "Parameter",
          "label": "width: number",
          "children": [
            {
              "type": "Identifier",
              "label": "width",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "Parameter",
          "label": "height: number",
          "children": [
            {
              "type": "Identifier",
              "label": "height",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "Parameter",
          "label": "minSideLength: number",
          "children": [
            {
              "type": "Identifier",
              "label": "minSideLength",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "Parameter",
          "label": "maxNumOfPixels: number",
          "children": [
            {
              "type": "Identifier",
              "label": "maxNumOfPixels",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "NumberKeyword",
          "label": "number",
          "children": []
        },
        {
          "type": "Block",
          "label": "{\n  if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }\n  let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));\n  Log.info(TAG, 'lowerBound: ' + lowerBound);\n  if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }\n}",
          "children": [
            {
              "type": "IfStatement",
              "label": "if ((maxNumOfPixels === -1) && (minSideLength === -1)) {\n    return 1;\n  }",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "(maxNumOfPixels === -1) && (minSideLength === -1)",
                  "children": [
                    {
                      "type": "ParenthesizedExpression",
                      "label": "(maxNumOfPixels === -1)",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "maxNumOfPixels === -1",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "maxNumOfPixels",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "-1",
                              "children": [
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "AmpersandAmpersandToken",
                      "label": "&&",
                      "children": []
                    },
                    {
                      "type": "ParenthesizedExpression",
                      "label": "(minSideLength === -1)",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "minSideLength === -1",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "minSideLength",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "-1",
                              "children": [
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    return 1;\n  }",
                  "children": [
                    {
                      "type": "ReturnStatement",
                      "label": "return 1;",
                      "children": [
                        {
                          "type": "FirstLiteralToken",
                          "label": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "FirstStatement",
              "label": "let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels));",
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "let lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels))",
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "lowerBound: number = (maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels))",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "lowerBound",
                          "children": []
                        },
                        {
                          "type": "NumberKeyword",
                          "label": "number",
                          "children": []
                        },
                        {
                          "type": "ConditionalExpression",
                          "label": "(maxNumOfPixels === -1) ? 1 : Math.ceil(Math.sqrt((width * height) / maxNumOfPixels))",
                          "children": [
                            {
                              "type": "ParenthesizedExpression",
                              "label": "(maxNumOfPixels === -1)",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "maxNumOfPixels === -1",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "maxNumOfPixels",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "PrefixUnaryExpression",
                                      "label": "-1",
                                      "children": [
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "QuestionToken",
                              "label": "?",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            },
                            {
                              "type": "ColonToken",
                              "label": ":",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "Math.ceil(Math.sqrt((width * height) / maxNumOfPixels))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Math.ceil",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Math",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "ceil",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "Math.sqrt((width * height) / maxNumOfPixels)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Math.sqrt",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Math",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "sqrt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "(width * height) / maxNumOfPixels",
                                      "children": [
                                        {
                                          "type": "ParenthesizedExpression",
                                          "label": "(width * height)",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "width * height",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "width",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsteriskToken",
                                                  "label": "*",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "height",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "SlashToken",
                                          "label": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "maxNumOfPixels",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "Log.info(TAG, 'lowerBound: ' + lowerBound);",
              "children": [
                {
                  "type": "CallExpression",
                  "label": "Log.info(TAG, 'lowerBound: ' + lowerBound)",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "Log.info",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Log",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "TAG",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "'lowerBound: ' + lowerBound",
                      "children": [
                        {
                          "type": "StringLiteral",
                          "label": "'lowerBound: '",
                          "children": []
                        },
                        {
                          "type": "PlusToken",
                          "label": "+",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "lowerBound",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "IfStatement",
              "label": "if (minSideLength === -1) {\n    return lowerBound;\n  } else {\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "minSideLength === -1",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "minSideLength",
                      "children": []
                    },
                    {
                      "type": "EqualsEqualsEqualsToken",
                      "label": "===",
                      "children": []
                    },
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "-1",
                      "children": [
                        {
                          "type": "FirstLiteralToken",
                          "label": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    return lowerBound;\n  }",
                  "children": [
                    {
                      "type": "ReturnStatement",
                      "label": "return lowerBound;",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "lowerBound",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    let sampleSize = Math.min(width / minSideLength, height / minSideLength);\n    return Math.max(sampleSize, lowerBound);\n  }",
                  "children": [
                    {
                      "type": "FirstStatement",
                      "label": "let sampleSize = Math.min(width / minSideLength, height / minSideLength);",
                      "children": [
                        {
                          "type": "VariableDeclarationList",
                          "label": "let sampleSize = Math.min(width / minSideLength, height / minSideLength)",
                          "children": [
                            {
                              "type": "VariableDeclaration",
                              "label": "sampleSize = Math.min(width / minSideLength, height / minSideLength)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "sampleSize",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "Math.min(width / minSideLength, height / minSideLength)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Math.min",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Math",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "min",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "width / minSideLength",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "width",
                                          "children": []
                                        },
                                        {
                                          "type": "SlashToken",
                                          "label": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "minSideLength",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "height / minSideLength",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "height",
                                          "children": []
                                        },
                                        {
                                          "type": "SlashToken",
                                          "label": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "minSideLength",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ReturnStatement",
                      "label": "return Math.max(sampleSize, lowerBound);",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "Math.max(sampleSize, lowerBound)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Math.max",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Math",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "max",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "sampleSize",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "lowerBound",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "function nextPowerOf2(value: number): number {\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "nextPowerOf2",
          "children": []
        },
        {
          "type": "Parameter",
          "label": "value: number",
          "children": [
            {
              "type": "Identifier",
              "label": "value",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "NumberKeyword",
          "label": "number",
          "children": []
        },
        {
          "type": "Block",
          "label": "{\n  let useValue = value;\n  if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }\n  useValue -= 1;\n  useValue |= useValue >> BIT_SIXTEEN;\n  useValue |= useValue >> BIT_EIGHT;\n  useValue |= useValue >> BIT_FOUR;\n  useValue |= useValue >> BIT_TWO;\n  useValue |= useValue >> BIT_ONE;\n  Log.info(TAG, 'nextPowerOf2:' + useValue);\n  return useValue + 1;\n}",
          "children": [
            {
              "type": "FirstStatement",
              "label": "let useValue = value;",
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "let useValue = value",
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "useValue = value",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "value",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "IfStatement",
              "label": "if (useValue <= 0 || useValue > (1 << MAX_BIT)) {\n  }",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue <= 0 || useValue > (1 << MAX_BIT)",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "useValue <= 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "LessThanEqualsToken",
                          "label": "<=",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BarBarToken",
                      "label": "||",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "useValue > (1 << MAX_BIT)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "GreaterThanToken",
                          "label": ">",
                          "children": []
                        },
                        {
                          "type": "ParenthesizedExpression",
                          "label": "(1 << MAX_BIT)",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "1 << MAX_BIT",
                              "children": [
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                },
                                {
                                  "type": "LessThanLessThanToken",
                                  "label": "<<",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "MAX_BIT",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n  }",
                  "children": []
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "useValue -= 1;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue -= 1",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "MinusEqualsToken",
                      "label": "-=",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "useValue |= useValue >> BIT_SIXTEEN;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue |= useValue >> BIT_SIXTEEN",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "BarEqualsToken",
                      "label": "|=",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "useValue >> BIT_SIXTEEN",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "GreaterThanGreaterThanToken",
                          "label": ">>",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "BIT_SIXTEEN",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "useValue |= useValue >> BIT_EIGHT;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue |= useValue >> BIT_EIGHT",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "BarEqualsToken",
                      "label": "|=",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "useValue >> BIT_EIGHT",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "GreaterThanGreaterThanToken",
                          "label": ">>",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "BIT_EIGHT",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "useValue |= useValue >> BIT_FOUR;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue |= useValue >> BIT_FOUR",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "BarEqualsToken",
                      "label": "|=",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "useValue >> BIT_FOUR",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "GreaterThanGreaterThanToken",
                          "label": ">>",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "BIT_FOUR",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "useValue |= useValue >> BIT_TWO;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue |= useValue >> BIT_TWO",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "BarEqualsToken",
                      "label": "|=",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "useValue >> BIT_TWO",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "GreaterThanGreaterThanToken",
                          "label": ">>",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "BIT_TWO",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "useValue |= useValue >> BIT_ONE;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue |= useValue >> BIT_ONE",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "BarEqualsToken",
                      "label": "|=",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "useValue >> BIT_ONE",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        },
                        {
                          "type": "GreaterThanGreaterThanToken",
                          "label": ">>",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "BIT_ONE",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ExpressionStatement",
              "label": "Log.info(TAG, 'nextPowerOf2:' + useValue);",
              "children": [
                {
                  "type": "CallExpression",
                  "label": "Log.info(TAG, 'nextPowerOf2:' + useValue)",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "Log.info",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Log",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "TAG",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "'nextPowerOf2:' + useValue",
                      "children": [
                        {
                          "type": "StringLiteral",
                          "label": "'nextPowerOf2:'",
                          "children": []
                        },
                        {
                          "type": "PlusToken",
                          "label": "+",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "useValue",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "label": "return useValue + 1;",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "useValue + 1",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "useValue",
                      "children": []
                    },
                    {
                      "type": "PlusToken",
                      "label": "+",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "1",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}