{
  "type": "SourceFile",
  "label": "import { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { userFileModel } from './UserFileModel';\nimport { UserFileObserverCallback } from './UserFileObserverCallback';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\nconst TAG = 'UserFileObserver';\n\nclass UserFileObserver {\n  callbacks: UserFileObserverCallback[] = [];\n  private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';\n  private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';\n  private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';\n  private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';\n  private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';\n\n  registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }\n\n  unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }\n}\n\nexport let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG);\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { stashOrGetObject } from '../utils/SingleInstanceUtils';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ stashOrGetObject }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ stashOrGetObject }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "stashOrGetObject",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "stashOrGetObject",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/SingleInstanceUtils'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Log } from '../utils/Log';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Log }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Log }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Log",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Log",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/Log'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MediaConstants } from '../constants/MediaConstants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MediaConstants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MediaConstants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MediaConstants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MediaConstants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/MediaConstants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { userFileModel } from './UserFileModel';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ userFileModel }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ userFileModel }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "userFileModel",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "userFileModel",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./UserFileModel'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { UserFileObserverCallback } from './UserFileObserverCallback';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ UserFileObserverCallback }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ UserFileObserverCallback }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "UserFileObserverCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "UserFileObserverCallback",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./UserFileObserverCallback'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';",
      "children": [
        {
          "type": "ImportClause",
          "label": "photoAccessHelper",
          "children": [
            {
              "type": "Identifier",
              "label": "photoAccessHelper",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.file.photoAccessHelper'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG = 'UserFileObserver';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG = 'UserFileObserver'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG = 'UserFileObserver'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'UserFileObserver'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "class UserFileObserver {\n  callbacks: UserFileObserverCallback[] = [];\n  private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';\n  private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';\n  private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';\n  private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';\n  private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';\n\n  registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }\n\n  unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "UserFileObserver",
          "children": []
        },
        {
          "type": "PropertyDeclaration",
          "label": "callbacks: UserFileObserverCallback[] = [];",
          "children": [
            {
              "type": "Identifier",
              "label": "callbacks",
              "children": []
            },
            {
              "type": "ArrayType",
              "label": "UserFileObserverCallback[]",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "UserFileObserverCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "UserFileObserverCallback",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ArrayLiteralExpression",
              "label": "[]",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly OBSERVER_IMAGE_CHANGE: string = 'imageChange';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "OBSERVER_IMAGE_CHANGE",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'imageChange'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly OBSERVER_VIDEO_CHANGE: string = 'videoChange';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "OBSERVER_VIDEO_CHANGE",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'videoChange'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly OBSERVER_DEVICE_CHANGE: string = 'deviceChange';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "OBSERVER_DEVICE_CHANGE",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'deviceChange'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly OBSERVER_ALBUM_CHANGE: string = 'albumChange';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "OBSERVER_ALBUM_CHANGE",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'albumChange'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly OBSERVER_REMOTE_FILE_CHANGE: string = 'remoteFileChange';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "OBSERVER_REMOTE_FILE_CHANGE",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'remoteFileChange'",
              "children": []
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "registerObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "registerObserver",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "callback: UserFileObserverCallback | null",
              "children": [
                {
                  "type": "Identifier",
                  "label": "callback",
                  "children": []
                },
                {
                  "type": "UnionType",
                  "label": "UserFileObserverCallback | null",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "UserFileObserverCallback",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "UserFileObserverCallback",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "LiteralType",
                      "label": "null",
                      "children": [
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'registerObserver');\n    if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }\n\n    if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }\n\n    if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'registerObserver');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'registerObserver')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'registerObserver'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (callback == null) {\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "callback == null",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "callback",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'registerObserver with empty callback');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'registerObserver with empty callback');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'registerObserver with empty callback')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'registerObserver with empty callback'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.callbacks.indexOf(callback) < 0) {\n      this.callbacks.push(callback);\n    } else {\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.callbacks.indexOf(callback) < 0",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.callbacks.indexOf(callback)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.callbacks.indexOf",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.callbacks",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "callbacks",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "indexOf",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "callback",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.callbacks.push(callback);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.callbacks.push(callback);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.callbacks.push(callback)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.callbacks.push",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.callbacks",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "callbacks",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "push",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "callback",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'registerObserver already exist');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'registerObserver already exist');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'registerObserver already exist')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'registerObserver already exist'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.callbacks.length === 1) {\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.callbacks.length === 1",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.callbacks.length",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.callbacks",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "callbacks",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "length",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "1",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'registerObserver register media');\n      try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'registerObserver register media');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'registerObserver register media')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'registerObserver register media'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      } catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });\n        userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "userFileModel.getUserFileMgr().registerChange",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "userFileModel.getUserFileMgr()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "userFileModel.getUserFileMgr",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "userFileModel",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getUserFileMgr",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "registerChange",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "photoAccessHelper.DefaultChangeUri",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoAccessHelper",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "DefaultChangeUri",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "DEFAULT_PHOTO_URI",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TrueKeyword",
                                          "label": "true",
                                          "children": []
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(): void => {\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        }",
                                          "children": [
                                            {
                                              "type": "VoidKeyword",
                                              "label": "void",
                                              "children": []
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          Log.info(TAG, 'registerObserver on image');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);\n        }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Log.info(TAG, 'registerObserver on image');",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Log.info(TAG, 'registerObserver on image')",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Log.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Log",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'registerObserver on image'",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.sendNotify(MediaConstants.MEDIA_TYPE_IMAGE)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.sendNotify",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "sendNotify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "MediaConstants.MEDIA_TYPE_IMAGE",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "MediaConstants",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "MEDIA_TYPE_IMAGE",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "userFileModel.getUserFileMgr().registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI, true, (): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "userFileModel.getUserFileMgr().registerChange",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "userFileModel.getUserFileMgr()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "userFileModel.getUserFileMgr",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "userFileModel",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getUserFileMgr",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "registerChange",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoAccessHelper.DefaultChangeUri.DEFAULT_ALBUM_URI",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "photoAccessHelper.DefaultChangeUri",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoAccessHelper",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "DefaultChangeUri",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "DEFAULT_ALBUM_URI",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TrueKeyword",
                                          "label": "true",
                                          "children": []
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(): void => {\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        }",
                                          "children": [
                                            {
                                              "type": "VoidKeyword",
                                              "label": "void",
                                              "children": []
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          Log.info(TAG, 'registerObserver on album');\n          this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);\n        }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Log.info(TAG, 'registerObserver on album');",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Log.info(TAG, 'registerObserver on album')",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Log.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Log",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'registerObserver on album'",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.sendNotify(MediaConstants.MEDIA_TYPE_ALBUM)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.sendNotify",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "sendNotify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "MediaConstants.MEDIA_TYPE_ALBUM",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "MediaConstants",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "MEDIA_TYPE_ALBUM",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (err) {\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "err",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));\n      }",
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err));",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Log.error(TAG, 'registerObserver faild, err: ' + JSON.stringify(err))",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Log.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Log",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "label": "'registerObserver faild, err: ' + JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'registerObserver faild, err: '",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PlusToken",
                                                  "label": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "JSON.stringify(err)",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "JSON.stringify",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "JSON",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stringify",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "err",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "sendNotify(mediaType: string): void {\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "sendNotify",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "mediaType: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "mediaType",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);\n    for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'registerObserver sendNotify size: ' + this.callbacks.length)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'registerObserver sendNotify size: ' + this.callbacks.length",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'registerObserver sendNotify size: '",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.callbacks.length",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.callbacks",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "callbacks",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "length",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ForOfStatement",
                  "label": "for (let callback of this.callbacks) {\n      callback.onChange(mediaType);\n    }",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let callback",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "callback",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "callback",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.callbacks",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "callbacks",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      callback.onChange(mediaType);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "callback.onChange(mediaType);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "callback.onChange(mediaType)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "callback.onChange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "callback",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onChange",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "mediaType",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "unregisterObserver(callback: UserFileObserverCallback | null): void {\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "unregisterObserver",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "callback: UserFileObserverCallback | null",
              "children": [
                {
                  "type": "Identifier",
                  "label": "callback",
                  "children": []
                },
                {
                  "type": "UnionType",
                  "label": "UserFileObserverCallback | null",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "UserFileObserverCallback",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "UserFileObserverCallback",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "LiteralType",
                      "label": "null",
                      "children": [
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'unregisterObserver');\n    const pos = this.callbacks.indexOf(callback);\n    if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'unregisterObserver');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'unregisterObserver')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'unregisterObserver'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const pos = this.callbacks.indexOf(callback);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const pos = this.callbacks.indexOf(callback)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "pos = this.callbacks.indexOf(callback)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "pos",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.callbacks.indexOf(callback)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.callbacks.indexOf",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.callbacks",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "callbacks",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "indexOf",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "callback",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (pos >= 0) {\n      this.callbacks.splice(pos, 1);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "pos >= 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "pos",
                          "children": []
                        },
                        {
                          "type": "GreaterThanEqualsToken",
                          "label": ">=",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.callbacks.splice(pos, 1);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.callbacks.splice(pos, 1);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.callbacks.splice(pos, 1)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.callbacks.splice",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.callbacks",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "callbacks",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "splice",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "pos",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "export let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG);",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "VariableDeclarationList",
          "label": "let userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG)",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "userFileObserver: UserFileObserver = stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG)",
              "children": [
                {
                  "type": "Identifier",
                  "label": "userFileObserver",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "UserFileObserver",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "UserFileObserver",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "CallExpression",
                  "label": "stashOrGetObject<UserFileObserver>(new UserFileObserver(), TAG)",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "stashOrGetObject",
                      "children": []
                    },
                    {
                      "type": "TypeReference",
                      "label": "UserFileObserver",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "UserFileObserver",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "NewExpression",
                      "label": "new UserFileObserver()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "UserFileObserver",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "TAG",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}