{
  "type": "SourceFile",
  "label": "import { readFileSync, writeFileSync } from 'fs';\nimport { ChildProcess, fork, Serializable } from 'child_process';\nimport * as chalk from 'chalk';\nimport { DefaultTasksRunnerOptions } from './default-tasks-runner';\nimport { output } from '../utils/output';\nimport { getCliPath, getPrintableCommandArgsForTask } from './utils';\nimport { Batch } from './tasks-schedule';\nimport { join } from 'path';\nimport {\n  BatchMessage,\n  BatchMessageType,\n  BatchResults,\n} from './batch/batch-messages';\nimport { stripIndents } from '../utils/strip-indents';\nimport { Task, TaskGraph } from '../config/task-graph';\nimport { Transform } from 'stream';\nimport {\n  PseudoTtyProcess,\n  getPseudoTerminal,\n  PseudoTerminal,\n} from './pseudo-terminal';\nimport { signalToCode } from '../utils/exit-codes';\nconst forkScript = join(__dirname, './fork.js');\nconst workerPath = join(__dirname, './batch/run-batch.js');\nexport class ForkedProcessTaskRunner {\n  cliPath = getCliPath();\n  private readonly verbose = process.env.NX_VERBOSE_LOGGING === 'true';\n  private processes = new Set<ChildProcess | PseudoTtyProcess>();\n  private pseudoTerminal: PseudoTerminal | null = PseudoTerminal.isSupported()\n    ? getPseudoTerminal()\n    : null;\n  constructor(private readonly options: DefaultTasksRunnerOptions) {}\n  async init() {\n    if (this.pseudoTerminal) {\n      await this.pseudoTerminal.init();\n    }\n    this.setupProcessEventListeners();\n  }\n  // TODO: vsavkin delegate terminal output printing\n  public forkProcessForBatch(\n    { executorName, taskGraph: batchTaskGraph }: Batch,\n    fullTaskGraph: TaskGraph,\n    env: NodeJS.ProcessEnv\n  ) {\n    return new Promise<BatchResults>((res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }\n  public async forkProcessLegacy(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      pipeOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    return pipeOutput\n      ? await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })\n      : await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        });\n  }\n  public async forkProcess(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n      disablePseudoTerminal,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n      disablePseudoTerminal: boolean;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    const shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true';\n    // streamOutput would be false if we are running multiple targets\n    // there's no point in running the commands in a pty if we are not streaming the output\n    if (\n      !this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput ||\n      shouldPrefix\n    ) {\n      return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    } else {\n      return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }\n  }\n  private async forkProcessWithPseudoTerminal(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    const args = getPrintableCommandArgsForTask(task);\n    if (streamOutput) {\n      output.logCommand(args.join(' '));\n    }\n    const childId = task.id;\n    const p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    });\n    p.send({\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    });\n    this.processes.add(p);\n    let terminalOutput = '';\n    p.onOutput((msg) => {\n      terminalOutput += msg;\n    });\n    return new Promise((res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    });\n  }\n  private forkProcessPipeOutputCapture(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return this.forkProcessWithPrefixAndNotTTY(task, {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    });\n  }\n  private forkProcessWithPrefixAndNotTTY(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }\n  private forkProcessDirectOutputCapture(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }\n  private readTerminalOutput(outputPath: string) {\n    return readFileSync(outputPath).toString();\n  }\n  private writeTerminalOutput(outputPath: string, content: string) {\n    writeFileSync(outputPath, content);\n  }\n  private setupProcessEventListeners() {\n    if (this.pseudoTerminal) {\n      this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });\n    }\n    // When the nx process gets a message, it will be sent into the task's process\n    process.on('message', (message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    });\n    // Terminate any task processes on exit\n    process.on('exit', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    });\n    process.on('SIGINT', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    });\n    process.on('SIGTERM', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n    process.on('SIGHUP', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n  }\n}\nconst colors = [\n  chalk.green,\n  chalk.greenBright,\n  chalk.red,\n  chalk.redBright,\n  chalk.cyan,\n  chalk.cyanBright,\n  chalk.yellow,\n  chalk.yellowBright,\n  chalk.magenta,\n  chalk.magentaBright,\n];\nfunction getColor(projectName: string) {\n  let code = 0;\n  for (let i = 0; i < projectName.length; ++i) {\n    code += projectName.charCodeAt(i);\n  }\n  const colorIndex = code % colors.length;\n  return colors[colorIndex];\n}\nfunction logClearLineToPrefixTransformer(prefix: string) {\n  let prevChunk = null;\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    },\n  });\n}\nfunction addPrefixTransformer(prefix?: string) {\n  const newLineSeparator = process.platform.startsWith('win') ? '\\r\\n' : '\\n';\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    },\n  });\n}",
  "start_token": 0,
  "end_token": 2592,
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { readFileSync, writeFileSync } from 'fs';",
      "start_token": 0,
      "end_token": 8,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ readFileSync, writeFileSync }",
          "start_token": 1,
          "end_token": 5,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ readFileSync, writeFileSync }",
              "start_token": 1,
              "end_token": 5,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "readFileSync",
                  "start_token": 2,
                  "end_token": 2,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "readFileSync",
                      "start_token": 2,
                      "end_token": 2,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "writeFileSync",
                  "start_token": 4,
                  "end_token": 4,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "writeFileSync",
                      "start_token": 4,
                      "end_token": 4,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'fs'",
          "start_token": 7,
          "end_token": 7,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { ChildProcess, fork, Serializable } from 'child_process';",
      "start_token": 9,
      "end_token": 19,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ ChildProcess, fork, Serializable }",
          "start_token": 10,
          "end_token": 16,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ ChildProcess, fork, Serializable }",
              "start_token": 10,
              "end_token": 16,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "ChildProcess",
                  "start_token": 11,
                  "end_token": 11,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ChildProcess",
                      "start_token": 11,
                      "end_token": 11,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "fork",
                  "start_token": 13,
                  "end_token": 13,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "fork",
                      "start_token": 13,
                      "end_token": 13,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "Serializable",
                  "start_token": 15,
                  "end_token": 15,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Serializable",
                      "start_token": 15,
                      "end_token": 15,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'child_process'",
          "start_token": 18,
          "end_token": 18,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import * as chalk from 'chalk';",
      "start_token": 20,
      "end_token": 26,
      "children": [
        {
          "type": "ImportClause",
          "label": "* as chalk",
          "start_token": 21,
          "end_token": 23,
          "children": [
            {
              "type": "NamespaceImport",
              "label": "* as chalk",
              "start_token": 21,
              "end_token": 23,
              "children": [
                {
                  "type": "Identifier",
                  "label": "chalk",
                  "start_token": 23,
                  "end_token": 23,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'chalk'",
          "start_token": 25,
          "end_token": 25,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { DefaultTasksRunnerOptions } from './default-tasks-runner';",
      "start_token": 27,
      "end_token": 33,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ DefaultTasksRunnerOptions }",
          "start_token": 28,
          "end_token": 30,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ DefaultTasksRunnerOptions }",
              "start_token": 28,
              "end_token": 30,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "DefaultTasksRunnerOptions",
                  "start_token": 29,
                  "end_token": 29,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "DefaultTasksRunnerOptions",
                      "start_token": 29,
                      "end_token": 29,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./default-tasks-runner'",
          "start_token": 32,
          "end_token": 32,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { output } from '../utils/output';",
      "start_token": 34,
      "end_token": 40,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ output }",
          "start_token": 35,
          "end_token": 37,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ output }",
              "start_token": 35,
              "end_token": 37,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "output",
                  "start_token": 36,
                  "end_token": 36,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "output",
                      "start_token": 36,
                      "end_token": 36,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/output'",
          "start_token": 39,
          "end_token": 39,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { getCliPath, getPrintableCommandArgsForTask } from './utils';",
      "start_token": 41,
      "end_token": 49,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ getCliPath, getPrintableCommandArgsForTask }",
          "start_token": 42,
          "end_token": 46,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ getCliPath, getPrintableCommandArgsForTask }",
              "start_token": 42,
              "end_token": 46,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "getCliPath",
                  "start_token": 43,
                  "end_token": 43,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getCliPath",
                      "start_token": 43,
                      "end_token": 43,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "getPrintableCommandArgsForTask",
                  "start_token": 45,
                  "end_token": 45,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getPrintableCommandArgsForTask",
                      "start_token": 45,
                      "end_token": 45,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./utils'",
          "start_token": 48,
          "end_token": 48,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Batch } from './tasks-schedule';",
      "start_token": 50,
      "end_token": 56,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Batch }",
          "start_token": 51,
          "end_token": 53,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Batch }",
              "start_token": 51,
              "end_token": 53,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Batch",
                  "start_token": 52,
                  "end_token": 52,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Batch",
                      "start_token": 52,
                      "end_token": 52,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./tasks-schedule'",
          "start_token": 55,
          "end_token": 55,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { join } from 'path';",
      "start_token": 57,
      "end_token": 63,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ join }",
          "start_token": 58,
          "end_token": 60,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ join }",
              "start_token": 58,
              "end_token": 60,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "join",
                  "start_token": 59,
                  "end_token": 59,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "join",
                      "start_token": 59,
                      "end_token": 59,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'path'",
          "start_token": 62,
          "end_token": 62,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {\n  BatchMessage,\n  BatchMessageType,\n  BatchResults,\n} from './batch/batch-messages';",
      "start_token": 64,
      "end_token": 75,
      "children": [
        {
          "type": "ImportClause",
          "label": "{\n  BatchMessage,\n  BatchMessageType,\n  BatchResults,\n}",
          "start_token": 65,
          "end_token": 72,
          "children": [
            {
              "type": "NamedImports",
              "label": "{\n  BatchMessage,\n  BatchMessageType,\n  BatchResults,\n}",
              "start_token": 65,
              "end_token": 72,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "BatchMessage",
                  "start_token": 66,
                  "end_token": 66,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BatchMessage",
                      "start_token": 66,
                      "end_token": 66,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "BatchMessageType",
                  "start_token": 68,
                  "end_token": 68,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BatchMessageType",
                      "start_token": 68,
                      "end_token": 68,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "BatchResults",
                  "start_token": 70,
                  "end_token": 70,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BatchResults",
                      "start_token": 70,
                      "end_token": 70,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./batch/batch-messages'",
          "start_token": 74,
          "end_token": 74,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { stripIndents } from '../utils/strip-indents';",
      "start_token": 76,
      "end_token": 82,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ stripIndents }",
          "start_token": 77,
          "end_token": 79,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ stripIndents }",
              "start_token": 77,
              "end_token": 79,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "stripIndents",
                  "start_token": 78,
                  "end_token": 78,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "stripIndents",
                      "start_token": 78,
                      "end_token": 78,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/strip-indents'",
          "start_token": 81,
          "end_token": 81,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Task, TaskGraph } from '../config/task-graph';",
      "start_token": 83,
      "end_token": 91,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Task, TaskGraph }",
          "start_token": 84,
          "end_token": 88,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Task, TaskGraph }",
              "start_token": 84,
              "end_token": 88,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Task",
                  "start_token": 85,
                  "end_token": 85,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 85,
                      "end_token": 85,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "TaskGraph",
                  "start_token": 87,
                  "end_token": 87,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "TaskGraph",
                      "start_token": 87,
                      "end_token": 87,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../config/task-graph'",
          "start_token": 90,
          "end_token": 90,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Transform } from 'stream';",
      "start_token": 92,
      "end_token": 98,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Transform }",
          "start_token": 93,
          "end_token": 95,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Transform }",
              "start_token": 93,
              "end_token": 95,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Transform",
                  "start_token": 94,
                  "end_token": 94,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Transform",
                      "start_token": 94,
                      "end_token": 94,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'stream'",
          "start_token": 97,
          "end_token": 97,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {\n  PseudoTtyProcess,\n  getPseudoTerminal,\n  PseudoTerminal,\n} from './pseudo-terminal';",
      "start_token": 99,
      "end_token": 110,
      "children": [
        {
          "type": "ImportClause",
          "label": "{\n  PseudoTtyProcess,\n  getPseudoTerminal,\n  PseudoTerminal,\n}",
          "start_token": 100,
          "end_token": 107,
          "children": [
            {
              "type": "NamedImports",
              "label": "{\n  PseudoTtyProcess,\n  getPseudoTerminal,\n  PseudoTerminal,\n}",
              "start_token": 100,
              "end_token": 107,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "PseudoTtyProcess",
                  "start_token": 101,
                  "end_token": 101,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "PseudoTtyProcess",
                      "start_token": 101,
                      "end_token": 101,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "getPseudoTerminal",
                  "start_token": 103,
                  "end_token": 103,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getPseudoTerminal",
                      "start_token": 103,
                      "end_token": 103,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "PseudoTerminal",
                  "start_token": 105,
                  "end_token": 105,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "PseudoTerminal",
                      "start_token": 105,
                      "end_token": 105,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./pseudo-terminal'",
          "start_token": 109,
          "end_token": 109,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { signalToCode } from '../utils/exit-codes';",
      "start_token": 111,
      "end_token": 117,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ signalToCode }",
          "start_token": 112,
          "end_token": 114,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ signalToCode }",
              "start_token": 112,
              "end_token": 114,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "signalToCode",
                  "start_token": 113,
                  "end_token": 113,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "signalToCode",
                      "start_token": 113,
                      "end_token": 113,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/exit-codes'",
          "start_token": 116,
          "end_token": 116,
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const forkScript = join(__dirname, './fork.js');",
      "start_token": 118,
      "end_token": 127,
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const forkScript = join(__dirname, './fork.js')",
          "start_token": 118,
          "end_token": 126,
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "forkScript = join(__dirname, './fork.js')",
              "start_token": 119,
              "end_token": 126,
              "children": [
                {
                  "type": "Identifier",
                  "label": "forkScript",
                  "start_token": 119,
                  "end_token": 119,
                  "children": []
                },
                {
                  "type": "CallExpression",
                  "label": "join(__dirname, './fork.js')",
                  "start_token": 121,
                  "end_token": 126,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "join",
                      "start_token": 121,
                      "end_token": 121,
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "__dirname",
                      "start_token": 123,
                      "end_token": 123,
                      "children": []
                    },
                    {
                      "type": "StringLiteral",
                      "label": "'./fork.js'",
                      "start_token": 125,
                      "end_token": 125,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const workerPath = join(__dirname, './batch/run-batch.js');",
      "start_token": 128,
      "end_token": 137,
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const workerPath = join(__dirname, './batch/run-batch.js')",
          "start_token": 128,
          "end_token": 136,
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "workerPath = join(__dirname, './batch/run-batch.js')",
              "start_token": 129,
              "end_token": 136,
              "children": [
                {
                  "type": "Identifier",
                  "label": "workerPath",
                  "start_token": 129,
                  "end_token": 129,
                  "children": []
                },
                {
                  "type": "CallExpression",
                  "label": "join(__dirname, './batch/run-batch.js')",
                  "start_token": 131,
                  "end_token": 136,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "join",
                      "start_token": 131,
                      "end_token": 131,
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "__dirname",
                      "start_token": 133,
                      "end_token": 133,
                      "children": []
                    },
                    {
                      "type": "StringLiteral",
                      "label": "'./batch/run-batch.js'",
                      "start_token": 135,
                      "end_token": 135,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "export class ForkedProcessTaskRunner {\n  cliPath = getCliPath();\n  private readonly verbose = process.env.NX_VERBOSE_LOGGING === 'true';\n  private processes = new Set<ChildProcess | PseudoTtyProcess>();\n  private pseudoTerminal: PseudoTerminal | null = PseudoTerminal.isSupported()\n    ? getPseudoTerminal()\n    : null;\n  constructor(private readonly options: DefaultTasksRunnerOptions) {}\n  async init() {\n    if (this.pseudoTerminal) {\n      await this.pseudoTerminal.init();\n    }\n    this.setupProcessEventListeners();\n  }\n  // TODO: vsavkin delegate terminal output printing\n  public forkProcessForBatch(\n    { executorName, taskGraph: batchTaskGraph }: Batch,\n    fullTaskGraph: TaskGraph,\n    env: NodeJS.ProcessEnv\n  ) {\n    return new Promise<BatchResults>((res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }\n  public async forkProcessLegacy(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      pipeOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    return pipeOutput\n      ? await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })\n      : await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        });\n  }\n  public async forkProcess(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n      disablePseudoTerminal,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n      disablePseudoTerminal: boolean;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    const shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true';\n    // streamOutput would be false if we are running multiple targets\n    // there's no point in running the commands in a pty if we are not streaming the output\n    if (\n      !this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput ||\n      shouldPrefix\n    ) {\n      return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    } else {\n      return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }\n  }\n  private async forkProcessWithPseudoTerminal(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    const args = getPrintableCommandArgsForTask(task);\n    if (streamOutput) {\n      output.logCommand(args.join(' '));\n    }\n    const childId = task.id;\n    const p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    });\n    p.send({\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    });\n    this.processes.add(p);\n    let terminalOutput = '';\n    p.onOutput((msg) => {\n      terminalOutput += msg;\n    });\n    return new Promise((res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    });\n  }\n  private forkProcessPipeOutputCapture(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return this.forkProcessWithPrefixAndNotTTY(task, {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    });\n  }\n  private forkProcessWithPrefixAndNotTTY(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }\n  private forkProcessDirectOutputCapture(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }\n  private readTerminalOutput(outputPath: string) {\n    return readFileSync(outputPath).toString();\n  }\n  private writeTerminalOutput(outputPath: string, content: string) {\n    writeFileSync(outputPath, content);\n  }\n  private setupProcessEventListeners() {\n    if (this.pseudoTerminal) {\n      this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });\n    }\n    // When the nx process gets a message, it will be sent into the task's process\n    process.on('message', (message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    });\n    // Terminate any task processes on exit\n    process.on('exit', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    });\n    process.on('SIGINT', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    });\n    process.on('SIGTERM', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n    process.on('SIGHUP', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n  }\n}",
      "start_token": 138,
      "end_token": 2290,
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "start_token": 138,
          "end_token": 138,
          "children": []
        },
        {
          "type": "Identifier",
          "label": "ForkedProcessTaskRunner",
          "start_token": 140,
          "end_token": 140,
          "children": []
        },
        {
          "type": "PropertyDeclaration",
          "label": "cliPath = getCliPath();",
          "start_token": 142,
          "end_token": 147,
          "children": [
            {
              "type": "Identifier",
              "label": "cliPath",
              "start_token": 142,
              "end_token": 142,
              "children": []
            },
            {
              "type": "CallExpression",
              "label": "getCliPath()",
              "start_token": 144,
              "end_token": 146,
              "children": [
                {
                  "type": "Identifier",
                  "label": "getCliPath",
                  "start_token": 144,
                  "end_token": 144,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private readonly verbose = process.env.NX_VERBOSE_LOGGING === 'true';",
          "start_token": 148,
          "end_token": 159,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 148,
              "end_token": 148,
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "start_token": 149,
              "end_token": 149,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "verbose",
              "start_token": 150,
              "end_token": 150,
              "children": []
            },
            {
              "type": "BinaryExpression",
              "label": "process.env.NX_VERBOSE_LOGGING === 'true'",
              "start_token": 152,
              "end_token": 158,
              "children": [
                {
                  "type": "PropertyAccessExpression",
                  "label": "process.env.NX_VERBOSE_LOGGING",
                  "start_token": 152,
                  "end_token": 156,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "process.env",
                      "start_token": 152,
                      "end_token": 154,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "process",
                          "start_token": 152,
                          "end_token": 152,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 154,
                          "end_token": 154,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "NX_VERBOSE_LOGGING",
                      "start_token": 156,
                      "end_token": 156,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "EqualsEqualsEqualsToken",
                  "label": "===",
                  "start_token": 157,
                  "end_token": 157,
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'true'",
                  "start_token": 158,
                  "end_token": 158,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private processes = new Set<ChildProcess | PseudoTtyProcess>();",
          "start_token": 160,
          "end_token": 172,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 160,
              "end_token": 160,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "processes",
              "start_token": 161,
              "end_token": 161,
              "children": []
            },
            {
              "type": "NewExpression",
              "label": "new Set<ChildProcess | PseudoTtyProcess>()",
              "start_token": 163,
              "end_token": 171,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Set",
                  "start_token": 164,
                  "end_token": 164,
                  "children": []
                },
                {
                  "type": "UnionType",
                  "label": "ChildProcess | PseudoTtyProcess",
                  "start_token": 166,
                  "end_token": 168,
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "ChildProcess",
                      "start_token": 166,
                      "end_token": 166,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "ChildProcess",
                          "start_token": 166,
                          "end_token": 166,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "TypeReference",
                      "label": "PseudoTtyProcess",
                      "start_token": 168,
                      "end_token": 168,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "PseudoTtyProcess",
                          "start_token": 168,
                          "end_token": 168,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private pseudoTerminal: PseudoTerminal | null = PseudoTerminal.isSupported()\n    ? getPseudoTerminal()\n    : null;",
          "start_token": 173,
          "end_token": 191,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 173,
              "end_token": 173,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "pseudoTerminal",
              "start_token": 174,
              "end_token": 174,
              "children": []
            },
            {
              "type": "UnionType",
              "label": "PseudoTerminal | null",
              "start_token": 176,
              "end_token": 178,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "PseudoTerminal",
                  "start_token": 176,
                  "end_token": 176,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "PseudoTerminal",
                      "start_token": 176,
                      "end_token": 176,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "null",
                  "start_token": 178,
                  "end_token": 178,
                  "children": [
                    {
                      "type": "NullKeyword",
                      "label": "null",
                      "start_token": 178,
                      "end_token": 178,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ConditionalExpression",
              "label": "PseudoTerminal.isSupported()\n    ? getPseudoTerminal()\n    : null",
              "start_token": 180,
              "end_token": 190,
              "children": [
                {
                  "type": "CallExpression",
                  "label": "PseudoTerminal.isSupported()",
                  "start_token": 180,
                  "end_token": 184,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "PseudoTerminal.isSupported",
                      "start_token": 180,
                      "end_token": 182,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "PseudoTerminal",
                          "start_token": 180,
                          "end_token": 180,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "isSupported",
                          "start_token": 182,
                          "end_token": 182,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "start_token": 185,
                  "end_token": 185,
                  "children": []
                },
                {
                  "type": "CallExpression",
                  "label": "getPseudoTerminal()",
                  "start_token": 186,
                  "end_token": 188,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getPseudoTerminal",
                      "start_token": 186,
                      "end_token": 186,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ColonToken",
                  "label": ":",
                  "start_token": 189,
                  "end_token": 189,
                  "children": []
                },
                {
                  "type": "NullKeyword",
                  "label": "null",
                  "start_token": 190,
                  "end_token": 190,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor(private readonly options: DefaultTasksRunnerOptions) {}",
          "start_token": 192,
          "end_token": 201,
          "children": [
            {
              "type": "Parameter",
              "label": "private readonly options: DefaultTasksRunnerOptions",
              "start_token": 194,
              "end_token": 198,
              "children": [
                {
                  "type": "PrivateKeyword",
                  "label": "private",
                  "start_token": 194,
                  "end_token": 194,
                  "children": []
                },
                {
                  "type": "ReadonlyKeyword",
                  "label": "readonly",
                  "start_token": 195,
                  "end_token": 195,
                  "children": []
                },
                {
                  "type": "Identifier",
                  "label": "options",
                  "start_token": 196,
                  "end_token": 196,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "DefaultTasksRunnerOptions",
                  "start_token": 198,
                  "end_token": 198,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "DefaultTasksRunnerOptions",
                      "start_token": 198,
                      "end_token": 198,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{}",
              "start_token": 200,
              "end_token": 201,
              "children": []
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async init() {\n    if (this.pseudoTerminal) {\n      await this.pseudoTerminal.init();\n    }\n    this.setupProcessEventListeners();\n  }",
          "start_token": 202,
          "end_token": 230,
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "start_token": 202,
              "end_token": 202,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "init",
              "start_token": 203,
              "end_token": 203,
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.pseudoTerminal) {\n      await this.pseudoTerminal.init();\n    }\n    this.setupProcessEventListeners();\n  }",
              "start_token": 206,
              "end_token": 230,
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.pseudoTerminal) {\n      await this.pseudoTerminal.init();\n    }",
                  "start_token": 207,
                  "end_token": 223,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.pseudoTerminal",
                      "start_token": 209,
                      "end_token": 211,
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "start_token": 209,
                          "end_token": 209,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "pseudoTerminal",
                          "start_token": 211,
                          "end_token": 211,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      await this.pseudoTerminal.init();\n    }",
                      "start_token": 213,
                      "end_token": 223,
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.pseudoTerminal.init();",
                          "start_token": 214,
                          "end_token": 222,
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.pseudoTerminal.init()",
                              "start_token": 214,
                              "end_token": 221,
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.pseudoTerminal.init()",
                                  "start_token": 215,
                                  "end_token": 221,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.pseudoTerminal.init",
                                      "start_token": 215,
                                      "end_token": 219,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.pseudoTerminal",
                                          "start_token": 215,
                                          "end_token": 217,
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "start_token": 215,
                                              "end_token": 215,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "pseudoTerminal",
                                              "start_token": 217,
                                              "end_token": 217,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "init",
                                          "start_token": 219,
                                          "end_token": 219,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.setupProcessEventListeners();",
                  "start_token": 224,
                  "end_token": 229,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.setupProcessEventListeners()",
                      "start_token": 224,
                      "end_token": 228,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.setupProcessEventListeners",
                          "start_token": 224,
                          "end_token": 226,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 224,
                              "end_token": 224,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setupProcessEventListeners",
                              "start_token": 226,
                              "end_token": 226,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public forkProcessForBatch(\n    { executorName, taskGraph: batchTaskGraph }: Batch,\n    fullTaskGraph: TaskGraph,\n    env: NodeJS.ProcessEnv\n  ) {\n    return new Promise<BatchResults>((res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }",
          "start_token": 232,
          "end_token": 563,
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "start_token": 232,
              "end_token": 232,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcessForBatch",
              "start_token": 233,
              "end_token": 233,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "{ executorName, taskGraph: batchTaskGraph }: Batch",
              "start_token": 235,
              "end_token": 243,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{ executorName, taskGraph: batchTaskGraph }",
                  "start_token": 235,
                  "end_token": 241,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "executorName",
                      "start_token": 236,
                      "end_token": 236,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "executorName",
                          "start_token": 236,
                          "end_token": 236,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph: batchTaskGraph",
                      "start_token": 238,
                      "end_token": 240,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 238,
                          "end_token": 238,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "batchTaskGraph",
                          "start_token": 240,
                          "end_token": 240,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeReference",
                  "label": "Batch",
                  "start_token": 243,
                  "end_token": 243,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Batch",
                      "start_token": 243,
                      "end_token": 243,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "fullTaskGraph: TaskGraph",
              "start_token": 245,
              "end_token": 247,
              "children": [
                {
                  "type": "Identifier",
                  "label": "fullTaskGraph",
                  "start_token": 245,
                  "end_token": 245,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "TaskGraph",
                  "start_token": 247,
                  "end_token": 247,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "TaskGraph",
                      "start_token": 247,
                      "end_token": 247,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "env: NodeJS.ProcessEnv",
              "start_token": 249,
              "end_token": 253,
              "children": [
                {
                  "type": "Identifier",
                  "label": "env",
                  "start_token": 249,
                  "end_token": 249,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "NodeJS.ProcessEnv",
                  "start_token": 251,
                  "end_token": 253,
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "NodeJS.ProcessEnv",
                      "start_token": 251,
                      "end_token": 253,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "NodeJS",
                          "start_token": 251,
                          "end_token": 251,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ProcessEnv",
                          "start_token": 253,
                          "end_token": 253,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return new Promise<BatchResults>((res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }",
              "start_token": 255,
              "end_token": 563,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return new Promise<BatchResults>((res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    });",
                  "start_token": 256,
                  "end_token": 562,
                  "children": [
                    {
                      "type": "NewExpression",
                      "label": "new Promise<BatchResults>((res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    })",
                      "start_token": 257,
                      "end_token": 561,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Promise",
                          "start_token": 258,
                          "end_token": 258,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "BatchResults",
                          "start_token": 260,
                          "end_token": 260,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "BatchResults",
                              "start_token": 260,
                              "end_token": 260,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(res, rej) => {\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    }",
                          "start_token": 263,
                          "end_token": 560,
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "res",
                              "start_token": 264,
                              "end_token": 264,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "start_token": 264,
                                  "end_token": 264,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "rej",
                              "start_token": 266,
                              "end_token": 266,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "rej",
                                  "start_token": 266,
                                  "end_token": 266,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 268,
                              "end_token": 268,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }\n    }",
                              "start_token": 269,
                              "end_token": 560,
                              "children": [
                                {
                                  "type": "TryStatement",
                                  "label": "try {\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      } catch (e) {\n        rej(e);\n      }",
                                  "start_token": 270,
                                  "end_token": 559,
                                  "children": [
                                    {
                                      "type": "Block",
                                      "label": "{\n        const count = Object.keys(batchTaskGraph.tasks).length;\n        if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });\n        p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });\n        // Start the tasks\n        p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });\n      }",
                                      "start_token": 271,
                                      "end_token": 548,
                                      "children": [
                                        {
                                          "type": "FirstStatement",
                                          "label": "const count = Object.keys(batchTaskGraph.tasks).length;",
                                          "start_token": 272,
                                          "end_token": 285,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const count = Object.keys(batchTaskGraph.tasks).length",
                                              "start_token": 272,
                                              "end_token": 284,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "count = Object.keys(batchTaskGraph.tasks).length",
                                                  "start_token": 273,
                                                  "end_token": 284,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "count",
                                                      "start_token": 273,
                                                      "end_token": 273,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "Object.keys(batchTaskGraph.tasks).length",
                                                      "start_token": 275,
                                                      "end_token": 284,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "Object.keys(batchTaskGraph.tasks)",
                                                          "start_token": 275,
                                                          "end_token": 282,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "Object.keys",
                                                              "start_token": 275,
                                                              "end_token": 277,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "Object",
                                                                  "start_token": 275,
                                                                  "end_token": 275,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "keys",
                                                                  "start_token": 277,
                                                                  "end_token": 277,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "batchTaskGraph.tasks",
                                                              "start_token": 279,
                                                              "end_token": 281,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "batchTaskGraph",
                                                                  "start_token": 279,
                                                                  "end_token": 279,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "tasks",
                                                                  "start_token": 281,
                                                                  "end_token": 281,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "length",
                                                          "start_token": 284,
                                                          "end_token": 284,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "IfStatement",
                                          "label": "if (count > 1) {\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        } else {\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }",
                                          "start_token": 286,
                                          "end_token": 333,
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "count > 1",
                                              "start_token": 288,
                                              "end_token": 290,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "count",
                                                  "start_token": 288,
                                                  "end_token": 288,
                                                  "children": []
                                                },
                                                {
                                                  "type": "GreaterThanToken",
                                                  "label": ">",
                                                  "start_token": 289,
                                                  "end_token": 289,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "1",
                                                  "start_token": 290,
                                                  "end_token": 290,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );\n        }",
                                              "start_token": 292,
                                              "end_token": 300,
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          );",
                                                  "start_token": 293,
                                                  "end_token": 299,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "output.logSingleLine(\n            `Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`\n          )",
                                                      "start_token": 293,
                                                      "end_token": 298,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "output.logSingleLine",
                                                          "start_token": 293,
                                                          "end_token": 295,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "output",
                                                              "start_token": 293,
                                                              "end_token": 293,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "logSingleLine",
                                                              "start_token": 295,
                                                              "end_token": 295,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`Running ${output.bold(count)} ${output.bold(\n              'tasks'\n            )} with ${output.bold(executorName)}`",
                                                          "start_token": 297,
                                                          "end_token": 297,
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`Running ${",
                                                              "start_token": 297,
                                                              "end_token": 297,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "output.bold(count)} ${",
                                                              "start_token": 297,
                                                              "end_token": 297,
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "output.bold(count)",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "output.bold",
                                                                      "start_token": 297,
                                                                      "end_token": 297,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "output",
                                                                          "start_token": 297,
                                                                          "end_token": 297,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "bold",
                                                                          "start_token": 297,
                                                                          "end_token": 297,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "count",
                                                                      "start_token": 297,
                                                                      "end_token": 297,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "TemplateMiddle",
                                                                  "label": "} ${",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "output.bold(\n              'tasks'\n            )} with ${",
                                                              "start_token": 297,
                                                              "end_token": 297,
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "output.bold(\n              'tasks'\n            )",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "output.bold",
                                                                      "start_token": 297,
                                                                      "end_token": 297,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "output",
                                                                          "start_token": 297,
                                                                          "end_token": 297,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "bold",
                                                                          "start_token": 297,
                                                                          "end_token": 297,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'tasks'",
                                                                      "start_token": 297,
                                                                      "end_token": 297,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "TemplateMiddle",
                                                                  "label": "} with ${",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "output.bold(executorName)}`",
                                                              "start_token": 297,
                                                              "end_token": 297,
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "output.bold(executorName)",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "output.bold",
                                                                      "start_token": 297,
                                                                      "end_token": 297,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "output",
                                                                          "start_token": 297,
                                                                          "end_token": 297,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "bold",
                                                                          "start_token": 297,
                                                                          "end_token": 297,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "executorName",
                                                                      "start_token": 297,
                                                                      "end_token": 297,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "}`",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );\n          output.logCommand(args.join(' '));\n        }",
                                              "start_token": 302,
                                              "end_token": 333,
                                              "children": [
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          );",
                                                  "start_token": 303,
                                                  "end_token": 320,
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "const args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          )",
                                                      "start_token": 303,
                                                      "end_token": 319,
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "args = getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          )",
                                                          "start_token": 304,
                                                          "end_token": 319,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "args",
                                                              "start_token": 304,
                                                              "end_token": 304,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "getPrintableCommandArgsForTask(\n            Object.values(batchTaskGraph.tasks)[0]\n          )",
                                                              "start_token": 306,
                                                              "end_token": 319,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "getPrintableCommandArgsForTask",
                                                                  "start_token": 306,
                                                                  "end_token": 306,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ElementAccessExpression",
                                                                  "label": "Object.values(batchTaskGraph.tasks)[0]",
                                                                  "start_token": 308,
                                                                  "end_token": 318,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "Object.values(batchTaskGraph.tasks)",
                                                                      "start_token": 308,
                                                                      "end_token": 315,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "Object.values",
                                                                          "start_token": 308,
                                                                          "end_token": 310,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "Object",
                                                                              "start_token": 308,
                                                                              "end_token": 308,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "values",
                                                                              "start_token": 310,
                                                                              "end_token": 310,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "batchTaskGraph.tasks",
                                                                          "start_token": 312,
                                                                          "end_token": 314,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "batchTaskGraph",
                                                                              "start_token": 312,
                                                                              "end_token": 312,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "tasks",
                                                                              "start_token": 314,
                                                                              "end_token": 314,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "FirstLiteralToken",
                                                                      "label": "0",
                                                                      "start_token": 317,
                                                                      "end_token": 317,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "output.logCommand(args.join(' '));",
                                                  "start_token": 321,
                                                  "end_token": 332,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "output.logCommand(args.join(' '))",
                                                      "start_token": 321,
                                                      "end_token": 331,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "output.logCommand",
                                                          "start_token": 321,
                                                          "end_token": 323,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "output",
                                                              "start_token": 321,
                                                              "end_token": 321,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "logCommand",
                                                              "start_token": 323,
                                                              "end_token": 323,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "args.join(' ')",
                                                          "start_token": 325,
                                                          "end_token": 330,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "args.join",
                                                              "start_token": 325,
                                                              "end_token": 327,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "args",
                                                                  "start_token": 325,
                                                                  "end_token": 325,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "join",
                                                                  "start_token": 327,
                                                                  "end_token": 327,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "' '",
                                                              "start_token": 329,
                                                              "end_token": 329,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstStatement",
                                          "label": "const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });",
                                          "start_token": 334,
                                          "end_token": 358,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        })",
                                              "start_token": 334,
                                              "end_token": 357,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "p = fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        })",
                                                  "start_token": 335,
                                                  "end_token": 357,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 335,
                                                      "end_token": 335,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "fork(workerPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        })",
                                                      "start_token": 337,
                                                      "end_token": 357,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "fork",
                                                          "start_token": 337,
                                                          "end_token": 337,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "workerPath",
                                                          "start_token": 339,
                                                          "end_token": 339,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        }",
                                                          "start_token": 341,
                                                          "end_token": 356,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "stdio: ['inherit', 'inherit', 'inherit', 'ipc']",
                                                              "start_token": 342,
                                                              "end_token": 352,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "stdio",
                                                                  "start_token": 342,
                                                                  "end_token": 342,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ArrayLiteralExpression",
                                                                  "label": "['inherit', 'inherit', 'inherit', 'ipc']",
                                                                  "start_token": 344,
                                                                  "end_token": 352,
                                                                  "children": [
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 345,
                                                                      "end_token": 345,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 347,
                                                                      "end_token": 347,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 349,
                                                                      "end_token": 349,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'ipc'",
                                                                      "start_token": 351,
                                                                      "end_token": 351,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ShorthandPropertyAssignment",
                                                              "label": "env",
                                                              "start_token": 354,
                                                              "end_token": 354,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "env",
                                                                  "start_token": 354,
                                                                  "end_token": 354,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.processes.add(p);",
                                          "start_token": 359,
                                          "end_token": 367,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.processes.add(p)",
                                              "start_token": 359,
                                              "end_token": 366,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.processes.add",
                                                  "start_token": 359,
                                                  "end_token": 363,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.processes",
                                                      "start_token": 359,
                                                      "end_token": 361,
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "start_token": 359,
                                                          "end_token": 359,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "processes",
                                                          "start_token": 361,
                                                          "end_token": 361,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "add",
                                                      "start_token": 363,
                                                      "end_token": 363,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 365,
                                                  "end_token": 365,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        });",
                                          "start_token": 368,
                                          "end_token": 457,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.once('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        })",
                                              "start_token": 368,
                                              "end_token": 456,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.once",
                                                  "start_token": 368,
                                                  "end_token": 370,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 368,
                                                      "end_token": 368,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "once",
                                                      "start_token": 370,
                                                      "end_token": 370,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'exit'",
                                                  "start_token": 372,
                                                  "end_token": 372,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        }",
                                                  "start_token": 374,
                                                  "end_token": 455,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "code",
                                                      "start_token": 375,
                                                      "end_token": 375,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "start_token": 375,
                                                          "end_token": 375,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Parameter",
                                                      "label": "signal",
                                                      "start_token": 377,
                                                      "end_token": 377,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "signal",
                                                          "start_token": 377,
                                                          "end_token": 377,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 379,
                                                      "end_token": 379,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }\n        }",
                                                      "start_token": 380,
                                                      "end_token": 455,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "this.processes.delete(p);",
                                                          "start_token": 381,
                                                          "end_token": 389,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "this.processes.delete(p)",
                                                              "start_token": 381,
                                                              "end_token": 388,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.processes.delete",
                                                                  "start_token": 381,
                                                                  "end_token": 385,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.processes",
                                                                      "start_token": 381,
                                                                      "end_token": 383,
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "start_token": 381,
                                                                          "end_token": 381,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "processes",
                                                                          "start_token": 383,
                                                                          "end_token": 383,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "delete",
                                                                      "start_token": 385,
                                                                      "end_token": 385,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "p",
                                                                  "start_token": 387,
                                                                  "end_token": 387,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (code === null) code = signalToCode(signal);",
                                                          "start_token": 390,
                                                          "end_token": 402,
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "code === null",
                                                              "start_token": 392,
                                                              "end_token": 394,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "code",
                                                                  "start_token": 392,
                                                                  "end_token": 392,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "start_token": 393,
                                                                  "end_token": 393,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "NullKeyword",
                                                                  "label": "null",
                                                                  "start_token": 394,
                                                                  "end_token": 394,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "label": "code = signalToCode(signal);",
                                                              "start_token": 396,
                                                              "end_token": 402,
                                                              "children": [
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "code = signalToCode(signal)",
                                                                  "start_token": 396,
                                                                  "end_token": 401,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "code",
                                                                      "start_token": 396,
                                                                      "end_token": 396,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "FirstAssignment",
                                                                      "label": "=",
                                                                      "start_token": 397,
                                                                      "end_token": 397,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "signalToCode(signal)",
                                                                      "start_token": 398,
                                                                      "end_token": 401,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "signalToCode",
                                                                          "start_token": 398,
                                                                          "end_token": 398,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "signal",
                                                                          "start_token": 400,
                                                                          "end_token": 400,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (code !== 0) {\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }",
                                                          "start_token": 403,
                                                          "end_token": 454,
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "code !== 0",
                                                              "start_token": 405,
                                                              "end_token": 407,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "code",
                                                                  "start_token": 405,
                                                                  "end_token": 405,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ExclamationEqualsEqualsToken",
                                                                  "label": "!==",
                                                                  "start_token": 406,
                                                                  "end_token": 406,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "0",
                                                                  "start_token": 407,
                                                                  "end_token": 407,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            const results: BatchResults = {};\n            for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }\n            rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );\n          }",
                                                              "start_token": 409,
                                                              "end_token": 454,
                                                              "children": [
                                                                {
                                                                  "type": "FirstStatement",
                                                                  "label": "const results: BatchResults = {};",
                                                                  "start_token": 410,
                                                                  "end_token": 417,
                                                                  "children": [
                                                                    {
                                                                      "type": "VariableDeclarationList",
                                                                      "label": "const results: BatchResults = {}",
                                                                      "start_token": 410,
                                                                      "end_token": 416,
                                                                      "children": [
                                                                        {
                                                                          "type": "VariableDeclaration",
                                                                          "label": "results: BatchResults = {}",
                                                                          "start_token": 411,
                                                                          "end_token": 416,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "results",
                                                                              "start_token": 411,
                                                                              "end_token": 411,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "TypeReference",
                                                                              "label": "BatchResults",
                                                                              "start_token": 413,
                                                                              "end_token": 413,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "BatchResults",
                                                                                  "start_token": 413,
                                                                                  "end_token": 413,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "ObjectLiteralExpression",
                                                                              "label": "{}",
                                                                              "start_token": 415,
                                                                              "end_token": 416,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ForOfStatement",
                                                                  "label": "for (const rootTaskId of batchTaskGraph.roots) {\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }",
                                                                  "start_token": 418,
                                                                  "end_token": 444,
                                                                  "children": [
                                                                    {
                                                                      "type": "VariableDeclarationList",
                                                                      "label": "const rootTaskId",
                                                                      "start_token": 420,
                                                                      "end_token": 421,
                                                                      "children": [
                                                                        {
                                                                          "type": "VariableDeclaration",
                                                                          "label": "rootTaskId",
                                                                          "start_token": 421,
                                                                          "end_token": 421,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "rootTaskId",
                                                                              "start_token": 421,
                                                                              "end_token": 421,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "batchTaskGraph.roots",
                                                                      "start_token": 423,
                                                                      "end_token": 425,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "batchTaskGraph",
                                                                          "start_token": 423,
                                                                          "end_token": 423,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "roots",
                                                                          "start_token": 425,
                                                                          "end_token": 425,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Block",
                                                                      "label": "{\n              results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };\n            }",
                                                                      "start_token": 427,
                                                                      "end_token": 444,
                                                                      "children": [
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "label": "results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              };",
                                                                          "start_token": 428,
                                                                          "end_token": 443,
                                                                          "children": [
                                                                            {
                                                                              "type": "BinaryExpression",
                                                                              "label": "results[rootTaskId] = {\n                success: false,\n                terminalOutput: '',\n              }",
                                                                              "start_token": 428,
                                                                              "end_token": 442,
                                                                              "children": [
                                                                                {
                                                                                  "type": "ElementAccessExpression",
                                                                                  "label": "results[rootTaskId]",
                                                                                  "start_token": 428,
                                                                                  "end_token": 431,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "results",
                                                                                      "start_token": 428,
                                                                                      "end_token": 428,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "rootTaskId",
                                                                                      "start_token": 430,
                                                                                      "end_token": 430,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "FirstAssignment",
                                                                                  "label": "=",
                                                                                  "start_token": 432,
                                                                                  "end_token": 432,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "ObjectLiteralExpression",
                                                                                  "label": "{\n                success: false,\n                terminalOutput: '',\n              }",
                                                                                  "start_token": 433,
                                                                                  "end_token": 442,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAssignment",
                                                                                      "label": "success: false",
                                                                                      "start_token": 434,
                                                                                      "end_token": 436,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "success",
                                                                                          "start_token": 434,
                                                                                          "end_token": 434,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "FalseKeyword",
                                                                                          "label": "false",
                                                                                          "start_token": 436,
                                                                                          "end_token": 436,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "PropertyAssignment",
                                                                                      "label": "terminalOutput: ''",
                                                                                      "start_token": 438,
                                                                                      "end_token": 440,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "terminalOutput",
                                                                                          "start_token": 438,
                                                                                          "end_token": 438,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "StringLiteral",
                                                                                          "label": "''",
                                                                                          "start_token": 440,
                                                                                          "end_token": 440,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            );",
                                                                  "start_token": 445,
                                                                  "end_token": 453,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "rej(\n              new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )\n            )",
                                                                      "start_token": 445,
                                                                      "end_token": 452,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "rej",
                                                                          "start_token": 445,
                                                                          "end_token": 445,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "NewExpression",
                                                                          "label": "new Error(\n                `\"${executorName}\" exited unexpectedly with code: ${code}`\n              )",
                                                                          "start_token": 447,
                                                                          "end_token": 451,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "Error",
                                                                              "start_token": 448,
                                                                              "end_token": 448,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "TemplateExpression",
                                                                              "label": "`\"${executorName}\" exited unexpectedly with code: ${code}`",
                                                                              "start_token": 450,
                                                                              "end_token": 450,
                                                                              "children": [
                                                                                {
                                                                                  "type": "TemplateHead",
                                                                                  "label": "`\"${",
                                                                                  "start_token": 450,
                                                                                  "end_token": 450,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "TemplateSpan",
                                                                                  "label": "executorName}\" exited unexpectedly with code: ${",
                                                                                  "start_token": 450,
                                                                                  "end_token": 450,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "executorName",
                                                                                      "start_token": 450,
                                                                                      "end_token": 450,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "TemplateMiddle",
                                                                                      "label": "}\" exited unexpectedly with code: ${",
                                                                                      "start_token": 450,
                                                                                      "end_token": 450,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "TemplateSpan",
                                                                                  "label": "code}`",
                                                                                  "start_token": 450,
                                                                                  "end_token": 450,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "code",
                                                                                      "start_token": 450,
                                                                                      "end_token": 450,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "LastTemplateToken",
                                                                                      "label": "}`",
                                                                                      "start_token": 450,
                                                                                      "end_token": 450,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        });",
                                          "start_token": 458,
                                          "end_token": 526,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.on('message', (message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        })",
                                              "start_token": 458,
                                              "end_token": 525,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.on",
                                                  "start_token": 458,
                                                  "end_token": 460,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 458,
                                                      "end_token": 458,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 460,
                                                      "end_token": 460,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'message'",
                                                  "start_token": 462,
                                                  "end_token": 462,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(message: BatchMessage) => {\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        }",
                                                  "start_token": 464,
                                                  "end_token": 524,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "message: BatchMessage",
                                                      "start_token": 465,
                                                      "end_token": 467,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "message",
                                                          "start_token": 465,
                                                          "end_token": 465,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TypeReference",
                                                          "label": "BatchMessage",
                                                          "start_token": 467,
                                                          "end_token": 467,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "BatchMessage",
                                                              "start_token": 467,
                                                              "end_token": 467,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 469,
                                                      "end_token": 469,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }\n        }",
                                                      "start_token": 470,
                                                      "end_token": 524,
                                                      "children": [
                                                        {
                                                          "type": "SwitchStatement",
                                                          "label": "switch (message.type) {\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }",
                                                          "start_token": 471,
                                                          "end_token": 523,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "message.type",
                                                              "start_token": 473,
                                                              "end_token": 475,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "message",
                                                                  "start_token": 473,
                                                                  "end_token": 473,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "type",
                                                                  "start_token": 475,
                                                                  "end_token": 475,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "CaseBlock",
                                                              "label": "{\n            case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }\n            case BatchMessageType.RunTasks: {\n              break;\n            }\n            default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }\n          }",
                                                              "start_token": 477,
                                                              "end_token": 523,
                                                              "children": [
                                                                {
                                                                  "type": "CaseClause",
                                                                  "label": "case BatchMessageType.CompleteBatchExecution: {\n              res(message.results);\n              break;\n            }",
                                                                  "start_token": 478,
                                                                  "end_token": 493,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "BatchMessageType.CompleteBatchExecution",
                                                                      "start_token": 479,
                                                                      "end_token": 481,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "BatchMessageType",
                                                                          "start_token": 479,
                                                                          "end_token": 479,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "CompleteBatchExecution",
                                                                          "start_token": 481,
                                                                          "end_token": 481,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Block",
                                                                      "label": "{\n              res(message.results);\n              break;\n            }",
                                                                      "start_token": 483,
                                                                      "end_token": 493,
                                                                      "children": [
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "label": "res(message.results);",
                                                                          "start_token": 484,
                                                                          "end_token": 490,
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "res(message.results)",
                                                                              "start_token": 484,
                                                                              "end_token": 489,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "res",
                                                                                  "start_token": 484,
                                                                                  "end_token": 484,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "message.results",
                                                                                  "start_token": 486,
                                                                                  "end_token": 488,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "message",
                                                                                      "start_token": 486,
                                                                                      "end_token": 486,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "results",
                                                                                      "start_token": 488,
                                                                                      "end_token": 488,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "BreakStatement",
                                                                          "label": "break;",
                                                                          "start_token": 491,
                                                                          "end_token": 492,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "CaseClause",
                                                                  "label": "case BatchMessageType.RunTasks: {\n              break;\n            }",
                                                                  "start_token": 494,
                                                                  "end_token": 502,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "BatchMessageType.RunTasks",
                                                                      "start_token": 495,
                                                                      "end_token": 497,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "BatchMessageType",
                                                                          "start_token": 495,
                                                                          "end_token": 495,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "RunTasks",
                                                                          "start_token": 497,
                                                                          "end_token": 497,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Block",
                                                                      "label": "{\n              break;\n            }",
                                                                      "start_token": 499,
                                                                      "end_token": 502,
                                                                      "children": [
                                                                        {
                                                                          "type": "BreakStatement",
                                                                          "label": "break;",
                                                                          "start_token": 500,
                                                                          "end_token": 501,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "DefaultClause",
                                                                  "label": "default: {\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }",
                                                                  "start_token": 503,
                                                                  "end_token": 522,
                                                                  "children": [
                                                                    {
                                                                      "type": "Block",
                                                                      "label": "{\n              // Re-emit any non-batch messages from the task process\n              if (process.send) {\n                process.send(message);\n              }\n            }",
                                                                      "start_token": 505,
                                                                      "end_token": 522,
                                                                      "children": [
                                                                        {
                                                                          "type": "IfStatement",
                                                                          "label": "if (process.send) {\n                process.send(message);\n              }",
                                                                          "start_token": 507,
                                                                          "end_token": 521,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "process.send",
                                                                              "start_token": 509,
                                                                              "end_token": 511,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "process",
                                                                                  "start_token": 509,
                                                                                  "end_token": 509,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "send",
                                                                                  "start_token": 511,
                                                                                  "end_token": 511,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Block",
                                                                              "label": "{\n                process.send(message);\n              }",
                                                                              "start_token": 513,
                                                                              "end_token": 521,
                                                                              "children": [
                                                                                {
                                                                                  "type": "ExpressionStatement",
                                                                                  "label": "process.send(message);",
                                                                                  "start_token": 514,
                                                                                  "end_token": 520,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "CallExpression",
                                                                                      "label": "process.send(message)",
                                                                                      "start_token": 514,
                                                                                      "end_token": 519,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "process.send",
                                                                                          "start_token": 514,
                                                                                          "end_token": 516,
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "process",
                                                                                              "start_token": 514,
                                                                                              "end_token": 514,
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "send",
                                                                                              "start_token": 516,
                                                                                              "end_token": 516,
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "message",
                                                                                          "start_token": 518,
                                                                                          "end_token": 518,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        });",
                                          "start_token": 528,
                                          "end_token": 547,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.send({\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        })",
                                              "start_token": 528,
                                              "end_token": 546,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.send",
                                                  "start_token": 528,
                                                  "end_token": 530,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 528,
                                                      "end_token": 528,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "send",
                                                      "start_token": 530,
                                                      "end_token": 530,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ObjectLiteralExpression",
                                                  "label": "{\n          type: BatchMessageType.RunTasks,\n          executorName,\n          batchTaskGraph,\n          fullTaskGraph,\n        }",
                                                  "start_token": 532,
                                                  "end_token": 545,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "type: BatchMessageType.RunTasks",
                                                      "start_token": 533,
                                                      "end_token": 537,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "type",
                                                          "start_token": 533,
                                                          "end_token": 533,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "BatchMessageType.RunTasks",
                                                          "start_token": 535,
                                                          "end_token": 537,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "BatchMessageType",
                                                              "start_token": 535,
                                                              "end_token": 535,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "RunTasks",
                                                              "start_token": 537,
                                                              "end_token": 537,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ShorthandPropertyAssignment",
                                                      "label": "executorName",
                                                      "start_token": 539,
                                                      "end_token": 539,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "executorName",
                                                          "start_token": 539,
                                                          "end_token": 539,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ShorthandPropertyAssignment",
                                                      "label": "batchTaskGraph",
                                                      "start_token": 541,
                                                      "end_token": 541,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "batchTaskGraph",
                                                          "start_token": 541,
                                                          "end_token": 541,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ShorthandPropertyAssignment",
                                                      "label": "fullTaskGraph",
                                                      "start_token": 543,
                                                      "end_token": 543,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "fullTaskGraph",
                                                          "start_token": 543,
                                                          "end_token": 543,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CatchClause",
                                      "label": "catch (e) {\n        rej(e);\n      }",
                                      "start_token": 549,
                                      "end_token": 559,
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "e",
                                          "start_token": 551,
                                          "end_token": 551,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "e",
                                              "start_token": 551,
                                              "end_token": 551,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n        rej(e);\n      }",
                                          "start_token": 553,
                                          "end_token": 559,
                                          "children": [
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "rej(e);",
                                              "start_token": 554,
                                              "end_token": 558,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "rej(e)",
                                                  "start_token": 554,
                                                  "end_token": 557,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "rej",
                                                      "start_token": 554,
                                                      "end_token": 554,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "e",
                                                      "start_token": 556,
                                                      "end_token": 556,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public async forkProcessLegacy(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      pipeOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    return pipeOutput\n      ? await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })\n      : await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        });\n  }",
          "start_token": 564,
          "end_token": 665,
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "start_token": 564,
              "end_token": 564,
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "start_token": 565,
              "end_token": 565,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcessLegacy",
              "start_token": 566,
              "end_token": 566,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "task: Task",
              "start_token": 568,
              "end_token": 570,
              "children": [
                {
                  "type": "Identifier",
                  "label": "task",
                  "start_token": 568,
                  "end_token": 568,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Task",
                  "start_token": 570,
                  "end_token": 570,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 570,
                      "end_token": 570,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "{\n      temporaryOutputPath,\n      streamOutput,\n      pipeOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
              "start_token": 572,
              "end_token": 608,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{\n      temporaryOutputPath,\n      streamOutput,\n      pipeOutput,\n      taskGraph,\n      env,\n    }",
                  "start_token": 572,
                  "end_token": 583,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "temporaryOutputPath",
                      "start_token": 573,
                      "end_token": 573,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 573,
                          "end_token": 573,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "streamOutput",
                      "start_token": 575,
                      "end_token": 575,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 575,
                          "end_token": 575,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "pipeOutput",
                      "start_token": 577,
                      "end_token": 577,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "pipeOutput",
                          "start_token": 577,
                          "end_token": 577,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph",
                      "start_token": 579,
                      "end_token": 579,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 579,
                          "end_token": 579,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "env",
                      "start_token": 581,
                      "end_token": 581,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 581,
                          "end_token": 581,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeLiteral",
                  "label": "{\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
                  "start_token": 585,
                  "end_token": 608,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "temporaryOutputPath: string;",
                      "start_token": 586,
                      "end_token": 589,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 586,
                          "end_token": 586,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 588,
                          "end_token": 588,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "streamOutput: boolean;",
                      "start_token": 590,
                      "end_token": 593,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 590,
                          "end_token": 590,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 592,
                          "end_token": 592,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "pipeOutput: boolean;",
                      "start_token": 594,
                      "end_token": 597,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "pipeOutput",
                          "start_token": 594,
                          "end_token": 594,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 596,
                          "end_token": 596,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "taskGraph: TaskGraph;",
                      "start_token": 598,
                      "end_token": 601,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 598,
                          "end_token": 598,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "TaskGraph",
                          "start_token": 600,
                          "end_token": 600,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "TaskGraph",
                              "start_token": 600,
                              "end_token": 600,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "env: NodeJS.ProcessEnv;",
                      "start_token": 602,
                      "end_token": 607,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 602,
                          "end_token": 602,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "NodeJS.ProcessEnv",
                          "start_token": 604,
                          "end_token": 606,
                          "children": [
                            {
                              "type": "FirstNode",
                              "label": "NodeJS.ProcessEnv",
                              "start_token": 604,
                              "end_token": 606,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "NodeJS",
                                  "start_token": 604,
                                  "end_token": 604,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ProcessEnv",
                                  "start_token": 606,
                                  "end_token": 606,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<{ code: number; terminalOutput: string }>",
              "start_token": 611,
              "end_token": 622,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "start_token": 611,
                  "end_token": 611,
                  "children": []
                },
                {
                  "type": "TypeLiteral",
                  "label": "{ code: number; terminalOutput: string }",
                  "start_token": 613,
                  "end_token": 621,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "code: number;",
                      "start_token": 614,
                      "end_token": 617,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "code",
                          "start_token": 614,
                          "end_token": 614,
                          "children": []
                        },
                        {
                          "type": "NumberKeyword",
                          "label": "number",
                          "start_token": 616,
                          "end_token": 616,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "terminalOutput: string",
                      "start_token": 618,
                      "end_token": 620,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "terminalOutput",
                          "start_token": 618,
                          "end_token": 618,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 620,
                          "end_token": 620,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return pipeOutput\n      ? await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })\n      : await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        });\n  }",
              "start_token": 623,
              "end_token": 665,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return pipeOutput\n      ? await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })\n      : await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        });",
                  "start_token": 624,
                  "end_token": 664,
                  "children": [
                    {
                      "type": "ConditionalExpression",
                      "label": "pipeOutput\n      ? await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })\n      : await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })",
                      "start_token": 625,
                      "end_token": 663,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "pipeOutput",
                          "start_token": 625,
                          "end_token": 625,
                          "children": []
                        },
                        {
                          "type": "QuestionToken",
                          "label": "?",
                          "start_token": 626,
                          "end_token": 626,
                          "children": []
                        },
                        {
                          "type": "AwaitExpression",
                          "label": "await this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })",
                          "start_token": 627,
                          "end_token": 644,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.forkProcessPipeOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })",
                              "start_token": 628,
                              "end_token": 644,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.forkProcessPipeOutputCapture",
                                  "start_token": 628,
                                  "end_token": 630,
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "start_token": 628,
                                      "end_token": 628,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forkProcessPipeOutputCapture",
                                      "start_token": 630,
                                      "end_token": 630,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "task",
                                  "start_token": 632,
                                  "end_token": 632,
                                  "children": []
                                },
                                {
                                  "type": "ObjectLiteralExpression",
                                  "label": "{\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        }",
                                  "start_token": 634,
                                  "end_token": 643,
                                  "children": [
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "temporaryOutputPath",
                                      "start_token": 635,
                                      "end_token": 635,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "temporaryOutputPath",
                                          "start_token": 635,
                                          "end_token": 635,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "streamOutput",
                                      "start_token": 637,
                                      "end_token": 637,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "streamOutput",
                                          "start_token": 637,
                                          "end_token": 637,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "taskGraph",
                                      "start_token": 639,
                                      "end_token": 639,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "taskGraph",
                                          "start_token": 639,
                                          "end_token": 639,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "env",
                                      "start_token": 641,
                                      "end_token": 641,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "env",
                                          "start_token": 641,
                                          "end_token": 641,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ColonToken",
                          "label": ":",
                          "start_token": 645,
                          "end_token": 645,
                          "children": []
                        },
                        {
                          "type": "AwaitExpression",
                          "label": "await this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })",
                          "start_token": 646,
                          "end_token": 663,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.forkProcessDirectOutputCapture(task, {\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        })",
                              "start_token": 647,
                              "end_token": 663,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.forkProcessDirectOutputCapture",
                                  "start_token": 647,
                                  "end_token": 649,
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "start_token": 647,
                                      "end_token": 647,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forkProcessDirectOutputCapture",
                                      "start_token": 649,
                                      "end_token": 649,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "task",
                                  "start_token": 651,
                                  "end_token": 651,
                                  "children": []
                                },
                                {
                                  "type": "ObjectLiteralExpression",
                                  "label": "{\n          temporaryOutputPath,\n          streamOutput,\n          taskGraph,\n          env,\n        }",
                                  "start_token": 653,
                                  "end_token": 662,
                                  "children": [
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "temporaryOutputPath",
                                      "start_token": 654,
                                      "end_token": 654,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "temporaryOutputPath",
                                          "start_token": 654,
                                          "end_token": 654,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "streamOutput",
                                      "start_token": 656,
                                      "end_token": 656,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "streamOutput",
                                          "start_token": 656,
                                          "end_token": 656,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "taskGraph",
                                      "start_token": 658,
                                      "end_token": 658,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "taskGraph",
                                          "start_token": 658,
                                          "end_token": 658,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "env",
                                      "start_token": 660,
                                      "end_token": 660,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "env",
                                          "start_token": 660,
                                          "end_token": 660,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public async forkProcess(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n      disablePseudoTerminal,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n      disablePseudoTerminal: boolean;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    const shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true';\n    // streamOutput would be false if we are running multiple targets\n    // there's no point in running the commands in a pty if we are not streaming the output\n    if (\n      !this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput ||\n      shouldPrefix\n    ) {\n      return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    } else {\n      return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }\n  }",
          "start_token": 666,
          "end_token": 802,
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "start_token": 666,
              "end_token": 666,
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "start_token": 667,
              "end_token": 667,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcess",
              "start_token": 668,
              "end_token": 668,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "task: Task",
              "start_token": 670,
              "end_token": 672,
              "children": [
                {
                  "type": "Identifier",
                  "label": "task",
                  "start_token": 670,
                  "end_token": 670,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Task",
                  "start_token": 672,
                  "end_token": 672,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 672,
                      "end_token": 672,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "{\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n      disablePseudoTerminal,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n      disablePseudoTerminal: boolean;\n    }",
              "start_token": 674,
              "end_token": 714,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n      disablePseudoTerminal,\n    }",
                  "start_token": 674,
                  "end_token": 685,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "temporaryOutputPath",
                      "start_token": 675,
                      "end_token": 675,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 675,
                          "end_token": 675,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "streamOutput",
                      "start_token": 677,
                      "end_token": 677,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 677,
                          "end_token": 677,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph",
                      "start_token": 679,
                      "end_token": 679,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 679,
                          "end_token": 679,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "env",
                      "start_token": 681,
                      "end_token": 681,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 681,
                          "end_token": 681,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "disablePseudoTerminal",
                      "start_token": 683,
                      "end_token": 683,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "disablePseudoTerminal",
                          "start_token": 683,
                          "end_token": 683,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeLiteral",
                  "label": "{\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      pipeOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n      disablePseudoTerminal: boolean;\n    }",
                  "start_token": 687,
                  "end_token": 714,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "temporaryOutputPath: string;",
                      "start_token": 688,
                      "end_token": 691,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 688,
                          "end_token": 688,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 690,
                          "end_token": 690,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "streamOutput: boolean;",
                      "start_token": 692,
                      "end_token": 695,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 692,
                          "end_token": 692,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 694,
                          "end_token": 694,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "pipeOutput: boolean;",
                      "start_token": 696,
                      "end_token": 699,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "pipeOutput",
                          "start_token": 696,
                          "end_token": 696,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 698,
                          "end_token": 698,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "taskGraph: TaskGraph;",
                      "start_token": 700,
                      "end_token": 703,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 700,
                          "end_token": 700,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "TaskGraph",
                          "start_token": 702,
                          "end_token": 702,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "TaskGraph",
                              "start_token": 702,
                              "end_token": 702,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "env: NodeJS.ProcessEnv;",
                      "start_token": 704,
                      "end_token": 709,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 704,
                          "end_token": 704,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "NodeJS.ProcessEnv",
                          "start_token": 706,
                          "end_token": 708,
                          "children": [
                            {
                              "type": "FirstNode",
                              "label": "NodeJS.ProcessEnv",
                              "start_token": 706,
                              "end_token": 708,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "NodeJS",
                                  "start_token": 706,
                                  "end_token": 706,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ProcessEnv",
                                  "start_token": 708,
                                  "end_token": 708,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "disablePseudoTerminal: boolean;",
                      "start_token": 710,
                      "end_token": 713,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "disablePseudoTerminal",
                          "start_token": 710,
                          "end_token": 710,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 712,
                          "end_token": 712,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<{ code: number; terminalOutput: string }>",
              "start_token": 717,
              "end_token": 728,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "start_token": 717,
                  "end_token": 717,
                  "children": []
                },
                {
                  "type": "TypeLiteral",
                  "label": "{ code: number; terminalOutput: string }",
                  "start_token": 719,
                  "end_token": 727,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "code: number;",
                      "start_token": 720,
                      "end_token": 723,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "code",
                          "start_token": 720,
                          "end_token": 720,
                          "children": []
                        },
                        {
                          "type": "NumberKeyword",
                          "label": "number",
                          "start_token": 722,
                          "end_token": 722,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "terminalOutput: string",
                      "start_token": 724,
                      "end_token": 726,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "terminalOutput",
                          "start_token": 724,
                          "end_token": 724,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 726,
                          "end_token": 726,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    const shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true';\n    // streamOutput would be false if we are running multiple targets\n    // there's no point in running the commands in a pty if we are not streaming the output\n    if (\n      !this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput ||\n      shouldPrefix\n    ) {\n      return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    } else {\n      return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }\n  }",
              "start_token": 729,
              "end_token": 802,
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "const shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true';",
                  "start_token": 730,
                  "end_token": 742,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true'",
                      "start_token": 730,
                      "end_token": 741,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "shouldPrefix =\n      streamOutput && process.env.NX_PREFIX_OUTPUT === 'true'",
                          "start_token": 731,
                          "end_token": 741,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "shouldPrefix",
                              "start_token": 731,
                              "end_token": 731,
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "streamOutput && process.env.NX_PREFIX_OUTPUT === 'true'",
                              "start_token": 733,
                              "end_token": 741,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "streamOutput",
                                  "start_token": 733,
                                  "end_token": 733,
                                  "children": []
                                },
                                {
                                  "type": "AmpersandAmpersandToken",
                                  "label": "&&",
                                  "start_token": 734,
                                  "end_token": 734,
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "process.env.NX_PREFIX_OUTPUT === 'true'",
                                  "start_token": 735,
                                  "end_token": 741,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "process.env.NX_PREFIX_OUTPUT",
                                      "start_token": 735,
                                      "end_token": 739,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "process.env",
                                          "start_token": 735,
                                          "end_token": 737,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "process",
                                              "start_token": 735,
                                              "end_token": 735,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "env",
                                              "start_token": 737,
                                              "end_token": 737,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NX_PREFIX_OUTPUT",
                                          "start_token": 739,
                                          "end_token": 739,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "start_token": 740,
                                      "end_token": 740,
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'true'",
                                      "start_token": 741,
                                      "end_token": 741,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (\n      !this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput ||\n      shouldPrefix\n    ) {\n      return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    } else {\n      return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }",
                  "start_token": 745,
                  "end_token": 801,
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "!this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput ||\n      shouldPrefix",
                      "start_token": 747,
                      "end_token": 757,
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "!this.pseudoTerminal ||\n      disablePseudoTerminal ||\n      !streamOutput",
                          "start_token": 747,
                          "end_token": 755,
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "!this.pseudoTerminal ||\n      disablePseudoTerminal",
                              "start_token": 747,
                              "end_token": 752,
                              "children": [
                                {
                                  "type": "PrefixUnaryExpression",
                                  "label": "!this.pseudoTerminal",
                                  "start_token": 747,
                                  "end_token": 750,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.pseudoTerminal",
                                      "start_token": 748,
                                      "end_token": 750,
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "start_token": 748,
                                          "end_token": 748,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "pseudoTerminal",
                                          "start_token": 750,
                                          "end_token": 750,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "start_token": 751,
                                  "end_token": 751,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "disablePseudoTerminal",
                                  "start_token": 752,
                                  "end_token": 752,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "start_token": 753,
                              "end_token": 753,
                              "children": []
                            },
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "!streamOutput",
                              "start_token": 754,
                              "end_token": 755,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "streamOutput",
                                  "start_token": 755,
                                  "end_token": 755,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "start_token": 756,
                          "end_token": 756,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "shouldPrefix",
                          "start_token": 757,
                          "end_token": 757,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }",
                      "start_token": 759,
                      "end_token": 779,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });",
                          "start_token": 760,
                          "end_token": 778,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.forkProcessWithPrefixAndNotTTY(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      })",
                              "start_token": 761,
                              "end_token": 777,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.forkProcessWithPrefixAndNotTTY",
                                  "start_token": 761,
                                  "end_token": 763,
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "start_token": 761,
                                      "end_token": 761,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forkProcessWithPrefixAndNotTTY",
                                      "start_token": 763,
                                      "end_token": 763,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "task",
                                  "start_token": 765,
                                  "end_token": 765,
                                  "children": []
                                },
                                {
                                  "type": "ObjectLiteralExpression",
                                  "label": "{\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      }",
                                  "start_token": 767,
                                  "end_token": 776,
                                  "children": [
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "temporaryOutputPath",
                                      "start_token": 768,
                                      "end_token": 768,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "temporaryOutputPath",
                                          "start_token": 768,
                                          "end_token": 768,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "streamOutput",
                                      "start_token": 770,
                                      "end_token": 770,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "streamOutput",
                                          "start_token": 770,
                                          "end_token": 770,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "taskGraph",
                                      "start_token": 772,
                                      "end_token": 772,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "taskGraph",
                                          "start_token": 772,
                                          "end_token": 772,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "env",
                                      "start_token": 774,
                                      "end_token": 774,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "env",
                                          "start_token": 774,
                                          "end_token": 774,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });\n    }",
                      "start_token": 781,
                      "end_token": 801,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      });",
                          "start_token": 782,
                          "end_token": 800,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.forkProcessWithPseudoTerminal(task, {\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      })",
                              "start_token": 783,
                              "end_token": 799,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.forkProcessWithPseudoTerminal",
                                  "start_token": 783,
                                  "end_token": 785,
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "start_token": 783,
                                      "end_token": 783,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forkProcessWithPseudoTerminal",
                                      "start_token": 785,
                                      "end_token": 785,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "task",
                                  "start_token": 787,
                                  "end_token": 787,
                                  "children": []
                                },
                                {
                                  "type": "ObjectLiteralExpression",
                                  "label": "{\n        temporaryOutputPath,\n        streamOutput,\n        taskGraph,\n        env,\n      }",
                                  "start_token": 789,
                                  "end_token": 798,
                                  "children": [
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "temporaryOutputPath",
                                      "start_token": 790,
                                      "end_token": 790,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "temporaryOutputPath",
                                          "start_token": 790,
                                          "end_token": 790,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "streamOutput",
                                      "start_token": 792,
                                      "end_token": 792,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "streamOutput",
                                          "start_token": 792,
                                          "end_token": 792,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "taskGraph",
                                      "start_token": 794,
                                      "end_token": 794,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "taskGraph",
                                          "start_token": 794,
                                          "end_token": 794,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ShorthandPropertyAssignment",
                                      "label": "env",
                                      "start_token": 796,
                                      "end_token": 796,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "env",
                                          "start_token": 796,
                                          "end_token": 796,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async forkProcessWithPseudoTerminal(\n    task: Task,\n    {\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ): Promise<{ code: number; terminalOutput: string }> {\n    const args = getPrintableCommandArgsForTask(task);\n    if (streamOutput) {\n      output.logCommand(args.join(' '));\n    }\n    const childId = task.id;\n    const p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    });\n    p.send({\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    });\n    this.processes.add(p);\n    let terminalOutput = '';\n    p.onOutput((msg) => {\n      terminalOutput += msg;\n    });\n    return new Promise((res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    });\n  }",
          "start_token": 803,
          "end_token": 1050,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 803,
              "end_token": 803,
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "start_token": 804,
              "end_token": 804,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcessWithPseudoTerminal",
              "start_token": 805,
              "end_token": 805,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "task: Task",
              "start_token": 807,
              "end_token": 809,
              "children": [
                {
                  "type": "Identifier",
                  "label": "task",
                  "start_token": 807,
                  "end_token": 807,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Task",
                  "start_token": 809,
                  "end_token": 809,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 809,
                      "end_token": 809,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "{\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n    }: {\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
              "start_token": 811,
              "end_token": 841,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{\n      temporaryOutputPath,\n      streamOutput,\n      taskGraph,\n      env,\n    }",
                  "start_token": 811,
                  "end_token": 820,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "temporaryOutputPath",
                      "start_token": 812,
                      "end_token": 812,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 812,
                          "end_token": 812,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "streamOutput",
                      "start_token": 814,
                      "end_token": 814,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 814,
                          "end_token": 814,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph",
                      "start_token": 816,
                      "end_token": 816,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 816,
                          "end_token": 816,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "env",
                      "start_token": 818,
                      "end_token": 818,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 818,
                          "end_token": 818,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeLiteral",
                  "label": "{\n      temporaryOutputPath: string;\n      streamOutput: boolean;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
                  "start_token": 822,
                  "end_token": 841,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "temporaryOutputPath: string;",
                      "start_token": 823,
                      "end_token": 826,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 823,
                          "end_token": 823,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 825,
                          "end_token": 825,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "streamOutput: boolean;",
                      "start_token": 827,
                      "end_token": 830,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 827,
                          "end_token": 827,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 829,
                          "end_token": 829,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "taskGraph: TaskGraph;",
                      "start_token": 831,
                      "end_token": 834,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 831,
                          "end_token": 831,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "TaskGraph",
                          "start_token": 833,
                          "end_token": 833,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "TaskGraph",
                              "start_token": 833,
                              "end_token": 833,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "env: NodeJS.ProcessEnv;",
                      "start_token": 835,
                      "end_token": 840,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 835,
                          "end_token": 835,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "NodeJS.ProcessEnv",
                          "start_token": 837,
                          "end_token": 839,
                          "children": [
                            {
                              "type": "FirstNode",
                              "label": "NodeJS.ProcessEnv",
                              "start_token": 837,
                              "end_token": 839,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "NodeJS",
                                  "start_token": 837,
                                  "end_token": 837,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ProcessEnv",
                                  "start_token": 839,
                                  "end_token": 839,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<{ code: number; terminalOutput: string }>",
              "start_token": 844,
              "end_token": 855,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "start_token": 844,
                  "end_token": 844,
                  "children": []
                },
                {
                  "type": "TypeLiteral",
                  "label": "{ code: number; terminalOutput: string }",
                  "start_token": 846,
                  "end_token": 854,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "code: number;",
                      "start_token": 847,
                      "end_token": 850,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "code",
                          "start_token": 847,
                          "end_token": 847,
                          "children": []
                        },
                        {
                          "type": "NumberKeyword",
                          "label": "number",
                          "start_token": 849,
                          "end_token": 849,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "terminalOutput: string",
                      "start_token": 851,
                      "end_token": 853,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "terminalOutput",
                          "start_token": 851,
                          "end_token": 851,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 853,
                          "end_token": 853,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    const args = getPrintableCommandArgsForTask(task);\n    if (streamOutput) {\n      output.logCommand(args.join(' '));\n    }\n    const childId = task.id;\n    const p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    });\n    p.send({\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    });\n    this.processes.add(p);\n    let terminalOutput = '';\n    p.onOutput((msg) => {\n      terminalOutput += msg;\n    });\n    return new Promise((res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    });\n  }",
              "start_token": 856,
              "end_token": 1050,
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "const args = getPrintableCommandArgsForTask(task);",
                  "start_token": 857,
                  "end_token": 864,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const args = getPrintableCommandArgsForTask(task)",
                      "start_token": 857,
                      "end_token": 863,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "args = getPrintableCommandArgsForTask(task)",
                          "start_token": 858,
                          "end_token": 863,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "args",
                              "start_token": 858,
                              "end_token": 858,
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "getPrintableCommandArgsForTask(task)",
                              "start_token": 860,
                              "end_token": 863,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "getPrintableCommandArgsForTask",
                                  "start_token": 860,
                                  "end_token": 860,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "task",
                                  "start_token": 862,
                                  "end_token": 862,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (streamOutput) {\n      output.logCommand(args.join(' '));\n    }",
                  "start_token": 865,
                  "end_token": 882,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "streamOutput",
                      "start_token": 867,
                      "end_token": 867,
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      output.logCommand(args.join(' '));\n    }",
                      "start_token": 869,
                      "end_token": 882,
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "output.logCommand(args.join(' '));",
                          "start_token": 870,
                          "end_token": 881,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "output.logCommand(args.join(' '))",
                              "start_token": 870,
                              "end_token": 880,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "output.logCommand",
                                  "start_token": 870,
                                  "end_token": 872,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "output",
                                      "start_token": 870,
                                      "end_token": 870,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "logCommand",
                                      "start_token": 872,
                                      "end_token": 872,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "args.join(' ')",
                                  "start_token": 874,
                                  "end_token": 879,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "args.join",
                                      "start_token": 874,
                                      "end_token": 876,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "args",
                                          "start_token": 874,
                                          "end_token": 874,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "join",
                                          "start_token": 876,
                                          "end_token": 876,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "' '",
                                      "start_token": 878,
                                      "end_token": 878,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const childId = task.id;",
                  "start_token": 883,
                  "end_token": 889,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const childId = task.id",
                      "start_token": 883,
                      "end_token": 888,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "childId = task.id",
                          "start_token": 884,
                          "end_token": 888,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "childId",
                              "start_token": 884,
                              "end_token": 884,
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "task.id",
                              "start_token": 886,
                              "end_token": 888,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "task",
                                  "start_token": 886,
                                  "end_token": 886,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "id",
                                  "start_token": 888,
                                  "end_token": 888,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    });",
                  "start_token": 890,
                  "end_token": 930,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    })",
                      "start_token": 890,
                      "end_token": 929,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "p = await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    })",
                          "start_token": 891,
                          "end_token": 929,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "p",
                              "start_token": 891,
                              "end_token": 891,
                              "children": []
                            },
                            {
                              "type": "AwaitExpression",
                              "label": "await this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    })",
                              "start_token": 893,
                              "end_token": 929,
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.pseudoTerminal.fork(childId, forkScript, {\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    })",
                                  "start_token": 894,
                                  "end_token": 929,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.pseudoTerminal.fork",
                                      "start_token": 894,
                                      "end_token": 898,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.pseudoTerminal",
                                          "start_token": 894,
                                          "end_token": 896,
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "start_token": 894,
                                              "end_token": 894,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "pseudoTerminal",
                                              "start_token": 896,
                                              "end_token": 896,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "fork",
                                          "start_token": 898,
                                          "end_token": 898,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "childId",
                                      "start_token": 900,
                                      "end_token": 900,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forkScript",
                                      "start_token": 902,
                                      "end_token": 902,
                                      "children": []
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n      cwd: process.cwd(),\n      execArgv: process.execArgv,\n      jsEnv: env,\n      quiet: !streamOutput,\n    }",
                                      "start_token": 904,
                                      "end_token": 928,
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "cwd: process.cwd()",
                                          "start_token": 905,
                                          "end_token": 911,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "cwd",
                                              "start_token": 905,
                                              "end_token": 905,
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "process.cwd()",
                                              "start_token": 907,
                                              "end_token": 911,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "process.cwd",
                                                  "start_token": 907,
                                                  "end_token": 909,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "process",
                                                      "start_token": 907,
                                                      "end_token": 907,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "cwd",
                                                      "start_token": 909,
                                                      "end_token": 909,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "execArgv: process.execArgv",
                                          "start_token": 913,
                                          "end_token": 917,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "execArgv",
                                              "start_token": 913,
                                              "end_token": 913,
                                              "children": []
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "process.execArgv",
                                              "start_token": 915,
                                              "end_token": 917,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "process",
                                                  "start_token": 915,
                                                  "end_token": 915,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "execArgv",
                                                  "start_token": 917,
                                                  "end_token": 917,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "jsEnv: env",
                                          "start_token": 919,
                                          "end_token": 921,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "jsEnv",
                                              "start_token": 919,
                                              "end_token": 919,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "env",
                                              "start_token": 921,
                                              "end_token": 921,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "quiet: !streamOutput",
                                          "start_token": 923,
                                          "end_token": 926,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "quiet",
                                              "start_token": 923,
                                              "end_token": 923,
                                              "children": []
                                            },
                                            {
                                              "type": "PrefixUnaryExpression",
                                              "label": "!streamOutput",
                                              "start_token": 925,
                                              "end_token": 926,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "streamOutput",
                                                  "start_token": 926,
                                                  "end_token": 926,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "p.send({\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    });",
                  "start_token": 931,
                  "end_token": 958,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "p.send({\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    })",
                      "start_token": 931,
                      "end_token": 957,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "p.send",
                          "start_token": 931,
                          "end_token": 933,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "p",
                              "start_token": 931,
                              "end_token": 931,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "send",
                              "start_token": 933,
                              "end_token": 933,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ObjectLiteralExpression",
                          "label": "{\n      targetDescription: task.target,\n      overrides: task.overrides,\n      taskGraph,\n      isVerbose: this.verbose,\n    }",
                          "start_token": 935,
                          "end_token": 956,
                          "children": [
                            {
                              "type": "PropertyAssignment",
                              "label": "targetDescription: task.target",
                              "start_token": 936,
                              "end_token": 940,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "targetDescription",
                                  "start_token": 936,
                                  "end_token": 936,
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "task.target",
                                  "start_token": 938,
                                  "end_token": 940,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "task",
                                      "start_token": 938,
                                      "end_token": 938,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "target",
                                      "start_token": 940,
                                      "end_token": 940,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAssignment",
                              "label": "overrides: task.overrides",
                              "start_token": 942,
                              "end_token": 946,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "overrides",
                                  "start_token": 942,
                                  "end_token": 942,
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "task.overrides",
                                  "start_token": 944,
                                  "end_token": 946,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "task",
                                      "start_token": 944,
                                      "end_token": 944,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "overrides",
                                      "start_token": 946,
                                      "end_token": 946,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ShorthandPropertyAssignment",
                              "label": "taskGraph",
                              "start_token": 948,
                              "end_token": 948,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "taskGraph",
                                  "start_token": 948,
                                  "end_token": 948,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAssignment",
                              "label": "isVerbose: this.verbose",
                              "start_token": 950,
                              "end_token": 954,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isVerbose",
                                  "start_token": 950,
                                  "end_token": 950,
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.verbose",
                                  "start_token": 952,
                                  "end_token": 954,
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "start_token": 952,
                                      "end_token": 952,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "verbose",
                                      "start_token": 954,
                                      "end_token": 954,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.processes.add(p);",
                  "start_token": 959,
                  "end_token": 967,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.processes.add(p)",
                      "start_token": 959,
                      "end_token": 966,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.processes.add",
                          "start_token": 959,
                          "end_token": 963,
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.processes",
                              "start_token": 959,
                              "end_token": 961,
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "start_token": 959,
                                  "end_token": 959,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "processes",
                                  "start_token": 961,
                                  "end_token": 961,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "add",
                              "start_token": 963,
                              "end_token": 963,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "p",
                          "start_token": 965,
                          "end_token": 965,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let terminalOutput = '';",
                  "start_token": 968,
                  "end_token": 972,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let terminalOutput = ''",
                      "start_token": 968,
                      "end_token": 971,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "terminalOutput = ''",
                          "start_token": 969,
                          "end_token": 971,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "terminalOutput",
                              "start_token": 969,
                              "end_token": 969,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "''",
                              "start_token": 971,
                              "end_token": 971,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "p.onOutput((msg) => {\n      terminalOutput += msg;\n    });",
                  "start_token": 973,
                  "end_token": 989,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "p.onOutput((msg) => {\n      terminalOutput += msg;\n    })",
                      "start_token": 973,
                      "end_token": 988,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "p.onOutput",
                          "start_token": 973,
                          "end_token": 975,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "p",
                              "start_token": 973,
                              "end_token": 973,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "onOutput",
                              "start_token": 975,
                              "end_token": 975,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(msg) => {\n      terminalOutput += msg;\n    }",
                          "start_token": 977,
                          "end_token": 987,
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "msg",
                              "start_token": 978,
                              "end_token": 978,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "msg",
                                  "start_token": 978,
                                  "end_token": 978,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 980,
                              "end_token": 980,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      terminalOutput += msg;\n    }",
                              "start_token": 981,
                              "end_token": 987,
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "terminalOutput += msg;",
                                  "start_token": 982,
                                  "end_token": 986,
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "terminalOutput += msg",
                                      "start_token": 982,
                                      "end_token": 985,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "terminalOutput",
                                          "start_token": 982,
                                          "end_token": 982,
                                          "children": []
                                        },
                                        {
                                          "type": "FirstCompoundAssignment",
                                          "label": "+=",
                                          "start_token": 983,
                                          "end_token": 984,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "msg",
                                          "start_token": 985,
                                          "end_token": 985,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return new Promise((res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    });",
                  "start_token": 990,
                  "end_token": 1049,
                  "children": [
                    {
                      "type": "NewExpression",
                      "label": "new Promise((res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    })",
                      "start_token": 991,
                      "end_token": 1048,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Promise",
                          "start_token": 992,
                          "end_token": 992,
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(res) => {\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    }",
                          "start_token": 994,
                          "end_token": 1047,
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "res",
                              "start_token": 995,
                              "end_token": 995,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "start_token": 995,
                                  "end_token": 995,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 997,
                              "end_token": 997,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });\n    }",
                              "start_token": 998,
                              "end_token": 1047,
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      });",
                                  "start_token": 999,
                                  "end_token": 1046,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "p.onExit((code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      })",
                                      "start_token": 999,
                                      "end_token": 1045,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "p.onExit",
                                          "start_token": 999,
                                          "end_token": 1001,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "p",
                                              "start_token": 999,
                                              "end_token": 999,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "onExit",
                                              "start_token": 1001,
                                              "end_token": 1001,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(code) => {\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      }",
                                          "start_token": 1003,
                                          "end_token": 1044,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "code",
                                              "start_token": 1004,
                                              "end_token": 1004,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "code",
                                                  "start_token": 1004,
                                                  "end_token": 1004,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 1006,
                                              "end_token": 1006,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        // If the exit code is greater than 128, it's a special exit code for a signal\n        if (code >= 128) {\n          process.exit(code);\n        }\n        this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n        res({\n          code,\n          terminalOutput,\n        });\n      }",
                                              "start_token": 1007,
                                              "end_token": 1044,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if (code >= 128) {\n          process.exit(code);\n        }",
                                                  "start_token": 1009,
                                                  "end_token": 1024,
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "code >= 128",
                                                      "start_token": 1011,
                                                      "end_token": 1014,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "start_token": 1011,
                                                          "end_token": 1011,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "GreaterThanEqualsToken",
                                                          "label": ">=",
                                                          "start_token": 1012,
                                                          "end_token": 1013,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "FirstLiteralToken",
                                                          "label": "128",
                                                          "start_token": 1014,
                                                          "end_token": 1014,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          process.exit(code);\n        }",
                                                      "start_token": 1016,
                                                      "end_token": 1024,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "process.exit(code);",
                                                          "start_token": 1017,
                                                          "end_token": 1023,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "process.exit(code)",
                                                              "start_token": 1017,
                                                              "end_token": 1022,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "process.exit",
                                                                  "start_token": 1017,
                                                                  "end_token": 1019,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "process",
                                                                      "start_token": 1017,
                                                                      "end_token": 1017,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "exit",
                                                                      "start_token": 1019,
                                                                      "end_token": 1019,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "code",
                                                                  "start_token": 1021,
                                                                  "end_token": 1021,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "this.writeTerminalOutput(temporaryOutputPath, terminalOutput);",
                                                  "start_token": 1025,
                                                  "end_token": 1033,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.writeTerminalOutput(temporaryOutputPath, terminalOutput)",
                                                      "start_token": 1025,
                                                      "end_token": 1032,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.writeTerminalOutput",
                                                          "start_token": 1025,
                                                          "end_token": 1027,
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "start_token": 1025,
                                                              "end_token": 1025,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "writeTerminalOutput",
                                                              "start_token": 1027,
                                                              "end_token": 1027,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "temporaryOutputPath",
                                                          "start_token": 1029,
                                                          "end_token": 1029,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "terminalOutput",
                                                          "start_token": 1031,
                                                          "end_token": 1031,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "res({\n          code,\n          terminalOutput,\n        });",
                                                  "start_token": 1034,
                                                  "end_token": 1043,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "res({\n          code,\n          terminalOutput,\n        })",
                                                      "start_token": 1034,
                                                      "end_token": 1042,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "res",
                                                          "start_token": 1034,
                                                          "end_token": 1034,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{\n          code,\n          terminalOutput,\n        }",
                                                          "start_token": 1036,
                                                          "end_token": 1041,
                                                          "children": [
                                                            {
                                                              "type": "ShorthandPropertyAssignment",
                                                              "label": "code",
                                                              "start_token": 1037,
                                                              "end_token": 1037,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "code",
                                                                  "start_token": 1037,
                                                                  "end_token": 1037,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ShorthandPropertyAssignment",
                                                              "label": "terminalOutput",
                                                              "start_token": 1039,
                                                              "end_token": 1039,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "terminalOutput",
                                                                  "start_token": 1039,
                                                                  "end_token": 1039,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private forkProcessPipeOutputCapture(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return this.forkProcessWithPrefixAndNotTTY(task, {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    });\n  }",
          "start_token": 1051,
          "end_token": 1110,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 1051,
              "end_token": 1051,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcessPipeOutputCapture",
              "start_token": 1052,
              "end_token": 1052,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "task: Task",
              "start_token": 1054,
              "end_token": 1056,
              "children": [
                {
                  "type": "Identifier",
                  "label": "task",
                  "start_token": 1054,
                  "end_token": 1054,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Task",
                  "start_token": 1056,
                  "end_token": 1056,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 1056,
                      "end_token": 1056,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
              "start_token": 1058,
              "end_token": 1088,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }",
                  "start_token": 1058,
                  "end_token": 1067,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "streamOutput",
                      "start_token": 1059,
                      "end_token": 1059,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 1059,
                          "end_token": 1059,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "temporaryOutputPath",
                      "start_token": 1061,
                      "end_token": 1061,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 1061,
                          "end_token": 1061,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph",
                      "start_token": 1063,
                      "end_token": 1063,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 1063,
                          "end_token": 1063,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "env",
                      "start_token": 1065,
                      "end_token": 1065,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 1065,
                          "end_token": 1065,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeLiteral",
                  "label": "{\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
                  "start_token": 1069,
                  "end_token": 1088,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "streamOutput: boolean;",
                      "start_token": 1070,
                      "end_token": 1073,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 1070,
                          "end_token": 1070,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 1072,
                          "end_token": 1072,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "temporaryOutputPath: string;",
                      "start_token": 1074,
                      "end_token": 1077,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 1074,
                          "end_token": 1074,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 1076,
                          "end_token": 1076,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "taskGraph: TaskGraph;",
                      "start_token": 1078,
                      "end_token": 1081,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 1078,
                          "end_token": 1078,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "TaskGraph",
                          "start_token": 1080,
                          "end_token": 1080,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "TaskGraph",
                              "start_token": 1080,
                              "end_token": 1080,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "env: NodeJS.ProcessEnv;",
                      "start_token": 1082,
                      "end_token": 1087,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 1082,
                          "end_token": 1082,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "NodeJS.ProcessEnv",
                          "start_token": 1084,
                          "end_token": 1086,
                          "children": [
                            {
                              "type": "FirstNode",
                              "label": "NodeJS.ProcessEnv",
                              "start_token": 1084,
                              "end_token": 1086,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "NodeJS",
                                  "start_token": 1084,
                                  "end_token": 1084,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ProcessEnv",
                                  "start_token": 1086,
                                  "end_token": 1086,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return this.forkProcessWithPrefixAndNotTTY(task, {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    });\n  }",
              "start_token": 1090,
              "end_token": 1110,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return this.forkProcessWithPrefixAndNotTTY(task, {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    });",
                  "start_token": 1091,
                  "end_token": 1109,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.forkProcessWithPrefixAndNotTTY(task, {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    })",
                      "start_token": 1092,
                      "end_token": 1108,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.forkProcessWithPrefixAndNotTTY",
                          "start_token": 1092,
                          "end_token": 1094,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 1092,
                              "end_token": 1092,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forkProcessWithPrefixAndNotTTY",
                              "start_token": 1094,
                              "end_token": 1094,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "task",
                          "start_token": 1096,
                          "end_token": 1096,
                          "children": []
                        },
                        {
                          "type": "ObjectLiteralExpression",
                          "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }",
                          "start_token": 1098,
                          "end_token": 1107,
                          "children": [
                            {
                              "type": "ShorthandPropertyAssignment",
                              "label": "streamOutput",
                              "start_token": 1099,
                              "end_token": 1099,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "streamOutput",
                                  "start_token": 1099,
                                  "end_token": 1099,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ShorthandPropertyAssignment",
                              "label": "temporaryOutputPath",
                              "start_token": 1101,
                              "end_token": 1101,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "temporaryOutputPath",
                                  "start_token": 1101,
                                  "end_token": 1101,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ShorthandPropertyAssignment",
                              "label": "taskGraph",
                              "start_token": 1103,
                              "end_token": 1103,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "taskGraph",
                                  "start_token": 1103,
                                  "end_token": 1103,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ShorthandPropertyAssignment",
                              "label": "env",
                              "start_token": 1105,
                              "end_token": 1105,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "env",
                                  "start_token": 1105,
                                  "end_token": 1105,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private forkProcessWithPrefixAndNotTTY(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }",
          "start_token": 1111,
          "end_token": 1622,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 1111,
              "end_token": 1111,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcessWithPrefixAndNotTTY",
              "start_token": 1112,
              "end_token": 1112,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "task: Task",
              "start_token": 1114,
              "end_token": 1116,
              "children": [
                {
                  "type": "Identifier",
                  "label": "task",
                  "start_token": 1114,
                  "end_token": 1114,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Task",
                  "start_token": 1116,
                  "end_token": 1116,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 1116,
                      "end_token": 1116,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
              "start_token": 1118,
              "end_token": 1148,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }",
                  "start_token": 1118,
                  "end_token": 1127,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "streamOutput",
                      "start_token": 1119,
                      "end_token": 1119,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 1119,
                          "end_token": 1119,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "temporaryOutputPath",
                      "start_token": 1121,
                      "end_token": 1121,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 1121,
                          "end_token": 1121,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph",
                      "start_token": 1123,
                      "end_token": 1123,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 1123,
                          "end_token": 1123,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "env",
                      "start_token": 1125,
                      "end_token": 1125,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 1125,
                          "end_token": 1125,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeLiteral",
                  "label": "{\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
                  "start_token": 1129,
                  "end_token": 1148,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "streamOutput: boolean;",
                      "start_token": 1130,
                      "end_token": 1133,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 1130,
                          "end_token": 1130,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 1132,
                          "end_token": 1132,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "temporaryOutputPath: string;",
                      "start_token": 1134,
                      "end_token": 1137,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 1134,
                          "end_token": 1134,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 1136,
                          "end_token": 1136,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "taskGraph: TaskGraph;",
                      "start_token": 1138,
                      "end_token": 1141,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 1138,
                          "end_token": 1138,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "TaskGraph",
                          "start_token": 1140,
                          "end_token": 1140,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "TaskGraph",
                              "start_token": 1140,
                              "end_token": 1140,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "env: NodeJS.ProcessEnv;",
                      "start_token": 1142,
                      "end_token": 1147,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 1142,
                          "end_token": 1142,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "NodeJS.ProcessEnv",
                          "start_token": 1144,
                          "end_token": 1146,
                          "children": [
                            {
                              "type": "FirstNode",
                              "label": "NodeJS.ProcessEnv",
                              "start_token": 1144,
                              "end_token": 1146,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "NodeJS",
                                  "start_token": 1144,
                                  "end_token": 1144,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ProcessEnv",
                                  "start_token": 1146,
                                  "end_token": 1146,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }",
              "start_token": 1150,
              "end_token": 1622,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });",
                  "start_token": 1151,
                  "end_token": 1621,
                  "children": [
                    {
                      "type": "NewExpression",
                      "label": "new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    })",
                      "start_token": 1152,
                      "end_token": 1620,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Promise",
                          "start_token": 1153,
                          "end_token": 1153,
                          "children": []
                        },
                        {
                          "type": "TypeLiteral",
                          "label": "{ code: number; terminalOutput: string }",
                          "start_token": 1155,
                          "end_token": 1163,
                          "children": [
                            {
                              "type": "PropertySignature",
                              "label": "code: number;",
                              "start_token": 1156,
                              "end_token": 1159,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "code",
                                  "start_token": 1156,
                                  "end_token": 1156,
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "start_token": 1158,
                                  "end_token": 1158,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertySignature",
                              "label": "terminalOutput: string",
                              "start_token": 1160,
                              "end_token": 1162,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "terminalOutput",
                                  "start_token": 1160,
                                  "end_token": 1160,
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "start_token": 1162,
                                  "end_token": 1162,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    }",
                          "start_token": 1166,
                          "end_token": 1619,
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "res",
                              "start_token": 1167,
                              "end_token": 1167,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "start_token": 1167,
                                  "end_token": 1167,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "rej",
                              "start_token": 1169,
                              "end_token": 1169,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "rej",
                                  "start_token": 1169,
                                  "end_token": 1169,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 1171,
                              "end_token": 1171,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    }",
                              "start_token": 1172,
                              "end_token": 1619,
                              "children": [
                                {
                                  "type": "TryStatement",
                                  "label": "try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }",
                                  "start_token": 1173,
                                  "end_token": 1618,
                                  "children": [
                                    {
                                      "type": "Block",
                                      "label": "{\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }\n        let outWithErr = [];\n        p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });\n        p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });\n      }",
                                      "start_token": 1174,
                                      "end_token": 1600,
                                      "children": [
                                        {
                                          "type": "FirstStatement",
                                          "label": "const args = getPrintableCommandArgsForTask(task);",
                                          "start_token": 1175,
                                          "end_token": 1182,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const args = getPrintableCommandArgsForTask(task)",
                                              "start_token": 1175,
                                              "end_token": 1181,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "args = getPrintableCommandArgsForTask(task)",
                                                  "start_token": 1176,
                                                  "end_token": 1181,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "args",
                                                      "start_token": 1176,
                                                      "end_token": 1176,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "getPrintableCommandArgsForTask(task)",
                                                      "start_token": 1178,
                                                      "end_token": 1181,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "getPrintableCommandArgsForTask",
                                                          "start_token": 1178,
                                                          "end_token": 1178,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "task",
                                                          "start_token": 1180,
                                                          "end_token": 1180,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "IfStatement",
                                          "label": "if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }",
                                          "start_token": 1183,
                                          "end_token": 1200,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "streamOutput",
                                              "start_token": 1185,
                                              "end_token": 1185,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          output.logCommand(args.join(' '));\n        }",
                                              "start_token": 1187,
                                              "end_token": 1200,
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "output.logCommand(args.join(' '));",
                                                  "start_token": 1188,
                                                  "end_token": 1199,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "output.logCommand(args.join(' '))",
                                                      "start_token": 1188,
                                                      "end_token": 1198,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "output.logCommand",
                                                          "start_token": 1188,
                                                          "end_token": 1190,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "output",
                                                              "start_token": 1188,
                                                              "end_token": 1188,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "logCommand",
                                                              "start_token": 1190,
                                                              "end_token": 1190,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "args.join(' ')",
                                                          "start_token": 1192,
                                                          "end_token": 1197,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "args.join",
                                                              "start_token": 1192,
                                                              "end_token": 1194,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "args",
                                                                  "start_token": 1192,
                                                                  "end_token": 1192,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "join",
                                                                  "start_token": 1194,
                                                                  "end_token": 1194,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "' '",
                                                              "start_token": 1196,
                                                              "end_token": 1196,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstStatement",
                                          "label": "const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        });",
                                          "start_token": 1201,
                                          "end_token": 1227,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        })",
                                              "start_token": 1201,
                                              "end_token": 1226,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "p = fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        })",
                                                  "start_token": 1202,
                                                  "end_token": 1226,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1202,
                                                      "end_token": 1202,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "fork(this.cliPath, {\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        })",
                                                      "start_token": 1204,
                                                      "end_token": 1226,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "fork",
                                                          "start_token": 1204,
                                                          "end_token": 1204,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.cliPath",
                                                          "start_token": 1206,
                                                          "end_token": 1208,
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "start_token": 1206,
                                                              "end_token": 1206,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "cliPath",
                                                              "start_token": 1208,
                                                              "end_token": 1208,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{\n          stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\n          env,\n        }",
                                                          "start_token": 1210,
                                                          "end_token": 1225,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "stdio: ['inherit', 'pipe', 'pipe', 'ipc']",
                                                              "start_token": 1211,
                                                              "end_token": 1221,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "stdio",
                                                                  "start_token": 1211,
                                                                  "end_token": 1211,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ArrayLiteralExpression",
                                                                  "label": "['inherit', 'pipe', 'pipe', 'ipc']",
                                                                  "start_token": 1213,
                                                                  "end_token": 1221,
                                                                  "children": [
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 1214,
                                                                      "end_token": 1214,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'pipe'",
                                                                      "start_token": 1216,
                                                                      "end_token": 1216,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'pipe'",
                                                                      "start_token": 1218,
                                                                      "end_token": 1218,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'ipc'",
                                                                      "start_token": 1220,
                                                                      "end_token": 1220,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ShorthandPropertyAssignment",
                                                              "label": "env",
                                                              "start_token": 1223,
                                                              "end_token": 1223,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "env",
                                                                  "start_token": 1223,
                                                                  "end_token": 1223,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.processes.add(p);",
                                          "start_token": 1228,
                                          "end_token": 1236,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.processes.add(p)",
                                              "start_token": 1228,
                                              "end_token": 1235,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.processes.add",
                                                  "start_token": 1228,
                                                  "end_token": 1232,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.processes",
                                                      "start_token": 1228,
                                                      "end_token": 1230,
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "start_token": 1228,
                                                          "end_token": 1228,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "processes",
                                                          "start_token": 1230,
                                                          "end_token": 1230,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "add",
                                                      "start_token": 1232,
                                                      "end_token": 1232,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 1234,
                                                  "end_token": 1234,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });",
                                          "start_token": 1238,
                                          "end_token": 1266,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        })",
                                              "start_token": 1238,
                                              "end_token": 1265,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.on",
                                                  "start_token": 1238,
                                                  "end_token": 1240,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1238,
                                                      "end_token": 1238,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 1240,
                                                      "end_token": 1240,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'message'",
                                                  "start_token": 1242,
                                                  "end_token": 1242,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        }",
                                                  "start_token": 1244,
                                                  "end_token": 1264,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "message",
                                                      "start_token": 1245,
                                                      "end_token": 1245,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "message",
                                                          "start_token": 1245,
                                                          "end_token": 1245,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 1247,
                                                      "end_token": 1247,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          if (process.send) {\n            process.send(message);\n          }\n        }",
                                                      "start_token": 1248,
                                                      "end_token": 1264,
                                                      "children": [
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (process.send) {\n            process.send(message);\n          }",
                                                          "start_token": 1249,
                                                          "end_token": 1263,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "process.send",
                                                              "start_token": 1251,
                                                              "end_token": 1253,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "process",
                                                                  "start_token": 1251,
                                                                  "end_token": 1251,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "send",
                                                                  "start_token": 1253,
                                                                  "end_token": 1253,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            process.send(message);\n          }",
                                                              "start_token": 1255,
                                                              "end_token": 1263,
                                                              "children": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "process.send(message);",
                                                                  "start_token": 1256,
                                                                  "end_token": 1262,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "process.send(message)",
                                                                      "start_token": 1256,
                                                                      "end_token": 1261,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "process.send",
                                                                          "start_token": 1256,
                                                                          "end_token": 1258,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "process",
                                                                              "start_token": 1256,
                                                                              "end_token": 1256,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "send",
                                                                              "start_token": 1258,
                                                                              "end_token": 1258,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "message",
                                                                          "start_token": 1260,
                                                                          "end_token": 1260,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });",
                                          "start_token": 1268,
                                          "end_token": 1295,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        })",
                                              "start_token": 1268,
                                              "end_token": 1294,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.send",
                                                  "start_token": 1268,
                                                  "end_token": 1270,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1268,
                                                      "end_token": 1268,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "send",
                                                      "start_token": 1270,
                                                      "end_token": 1270,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ObjectLiteralExpression",
                                                  "label": "{\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        }",
                                                  "start_token": 1272,
                                                  "end_token": 1293,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "targetDescription: task.target",
                                                      "start_token": 1273,
                                                      "end_token": 1277,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "targetDescription",
                                                          "start_token": 1273,
                                                          "end_token": 1273,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "task.target",
                                                          "start_token": 1275,
                                                          "end_token": 1277,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "task",
                                                              "start_token": 1275,
                                                              "end_token": 1275,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "target",
                                                              "start_token": 1277,
                                                              "end_token": 1277,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "overrides: task.overrides",
                                                      "start_token": 1279,
                                                      "end_token": 1283,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "overrides",
                                                          "start_token": 1279,
                                                          "end_token": 1279,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "task.overrides",
                                                          "start_token": 1281,
                                                          "end_token": 1283,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "task",
                                                              "start_token": 1281,
                                                              "end_token": 1281,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "overrides",
                                                              "start_token": 1283,
                                                              "end_token": 1283,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ShorthandPropertyAssignment",
                                                      "label": "taskGraph",
                                                      "start_token": 1285,
                                                      "end_token": 1285,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "taskGraph",
                                                          "start_token": 1285,
                                                          "end_token": 1285,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "isVerbose: this.verbose",
                                                      "start_token": 1287,
                                                      "end_token": 1291,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "isVerbose",
                                                          "start_token": 1287,
                                                          "end_token": 1287,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.verbose",
                                                          "start_token": 1289,
                                                          "end_token": 1291,
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "start_token": 1289,
                                                              "end_token": 1289,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "verbose",
                                                              "start_token": 1291,
                                                              "end_token": 1291,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "IfStatement",
                                          "label": "if (streamOutput) {\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }",
                                          "start_token": 1296,
                                          "end_token": 1443,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "streamOutput",
                                              "start_token": 1298,
                                              "end_token": 1298,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }\n        }",
                                              "start_token": 1300,
                                              "end_token": 1443,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if (process.env.NX_PREFIX_OUTPUT === 'true') {\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          } else {\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }",
                                                  "start_token": 1301,
                                                  "end_token": 1442,
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "process.env.NX_PREFIX_OUTPUT === 'true'",
                                                      "start_token": 1303,
                                                      "end_token": 1309,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "process.env.NX_PREFIX_OUTPUT",
                                                          "start_token": 1303,
                                                          "end_token": 1307,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "process.env",
                                                              "start_token": 1303,
                                                              "end_token": 1305,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "process",
                                                                  "start_token": 1303,
                                                                  "end_token": 1303,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "env",
                                                                  "start_token": 1305,
                                                                  "end_token": 1305,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "NX_PREFIX_OUTPUT",
                                                              "start_token": 1307,
                                                              "end_token": 1307,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "EqualsEqualsEqualsToken",
                                                          "label": "===",
                                                          "start_token": 1308,
                                                          "end_token": 1308,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'true'",
                                                          "start_token": 1309,
                                                          "end_token": 1309,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n            const color = getColor(task.target.project);\n            const prefixText = `${task.target.project}:`;\n            p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);\n            p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);\n          }",
                                                      "start_token": 1311,
                                                      "end_token": 1403,
                                                      "children": [
                                                        {
                                                          "type": "FirstStatement",
                                                          "label": "const color = getColor(task.target.project);",
                                                          "start_token": 1312,
                                                          "end_token": 1323,
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclarationList",
                                                              "label": "const color = getColor(task.target.project)",
                                                              "start_token": 1312,
                                                              "end_token": 1322,
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "color = getColor(task.target.project)",
                                                                  "start_token": 1313,
                                                                  "end_token": 1322,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "color",
                                                                      "start_token": 1313,
                                                                      "end_token": 1313,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "getColor(task.target.project)",
                                                                      "start_token": 1315,
                                                                      "end_token": 1322,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "getColor",
                                                                          "start_token": 1315,
                                                                          "end_token": 1315,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "task.target.project",
                                                                          "start_token": 1317,
                                                                          "end_token": 1321,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "task.target",
                                                                              "start_token": 1317,
                                                                              "end_token": 1319,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "task",
                                                                                  "start_token": 1317,
                                                                                  "end_token": 1317,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "target",
                                                                                  "start_token": 1319,
                                                                                  "end_token": 1319,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "project",
                                                                              "start_token": 1321,
                                                                              "end_token": 1321,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "FirstStatement",
                                                          "label": "const prefixText = `${task.target.project}:`;",
                                                          "start_token": 1324,
                                                          "end_token": 1328,
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclarationList",
                                                              "label": "const prefixText = `${task.target.project}:`",
                                                              "start_token": 1324,
                                                              "end_token": 1327,
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "prefixText = `${task.target.project}:`",
                                                                  "start_token": 1325,
                                                                  "end_token": 1327,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "prefixText",
                                                                      "start_token": 1325,
                                                                      "end_token": 1325,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TemplateExpression",
                                                                      "label": "`${task.target.project}:`",
                                                                      "start_token": 1327,
                                                                      "end_token": 1327,
                                                                      "children": [
                                                                        {
                                                                          "type": "TemplateHead",
                                                                          "label": "`${",
                                                                          "start_token": 1327,
                                                                          "end_token": 1327,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "TemplateSpan",
                                                                          "label": "task.target.project}:`",
                                                                          "start_token": 1327,
                                                                          "end_token": 1327,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "task.target.project",
                                                                              "start_token": 1327,
                                                                              "end_token": 1327,
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "task.target",
                                                                                  "start_token": 1327,
                                                                                  "end_token": 1327,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "task",
                                                                                      "start_token": 1327,
                                                                                      "end_token": 1327,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "target",
                                                                                      "start_token": 1327,
                                                                                      "end_token": 1327,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "project",
                                                                                  "start_token": 1327,
                                                                                  "end_token": 1327,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "LastTemplateToken",
                                                                              "label": "}:`",
                                                                              "start_token": 1327,
                                                                              "end_token": 1327,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout);",
                                                          "start_token": 1329,
                                                          "end_token": 1367,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe(process.stdout)",
                                                              "start_token": 1329,
                                                              "end_token": 1366,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))\n              .pipe",
                                                                  "start_token": 1329,
                                                                  "end_token": 1361,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe(addPrefixTransformer(color.bold(prefixText)))",
                                                                      "start_token": 1329,
                                                                      "end_token": 1359,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )\n              .pipe",
                                                                          "start_token": 1329,
                                                                          "end_token": 1348,
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "p.stdout\n              .pipe(\n                logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')\n              )",
                                                                              "start_token": 1329,
                                                                              "end_token": 1346,
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "p.stdout\n              .pipe",
                                                                                  "start_token": 1329,
                                                                                  "end_token": 1333,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "p.stdout",
                                                                                      "start_token": 1329,
                                                                                      "end_token": 1331,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "p",
                                                                                          "start_token": 1329,
                                                                                          "end_token": 1329,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "stdout",
                                                                                          "start_token": 1331,
                                                                                          "end_token": 1331,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "pipe",
                                                                                      "start_token": 1333,
                                                                                      "end_token": 1333,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "CallExpression",
                                                                                  "label": "logClearLineToPrefixTransformer(color.bold(prefixText) + ' ')",
                                                                                  "start_token": 1335,
                                                                                  "end_token": 1345,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "logClearLineToPrefixTransformer",
                                                                                      "start_token": 1335,
                                                                                      "end_token": 1335,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "BinaryExpression",
                                                                                      "label": "color.bold(prefixText) + ' '",
                                                                                      "start_token": 1337,
                                                                                      "end_token": 1344,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "CallExpression",
                                                                                          "label": "color.bold(prefixText)",
                                                                                          "start_token": 1337,
                                                                                          "end_token": 1342,
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "PropertyAccessExpression",
                                                                                              "label": "color.bold",
                                                                                              "start_token": 1337,
                                                                                              "end_token": 1339,
                                                                                              "children": [
                                                                                                {
                                                                                                  "type": "Identifier",
                                                                                                  "label": "color",
                                                                                                  "start_token": 1337,
                                                                                                  "end_token": 1337,
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "type": "Identifier",
                                                                                                  "label": "bold",
                                                                                                  "start_token": 1339,
                                                                                                  "end_token": 1339,
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "prefixText",
                                                                                              "start_token": 1341,
                                                                                              "end_token": 1341,
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "PlusToken",
                                                                                          "label": "+",
                                                                                          "start_token": 1343,
                                                                                          "end_token": 1343,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "StringLiteral",
                                                                                          "label": "' '",
                                                                                          "start_token": 1344,
                                                                                          "end_token": 1344,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "pipe",
                                                                              "start_token": 1348,
                                                                              "end_token": 1348,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "addPrefixTransformer(color.bold(prefixText))",
                                                                          "start_token": 1350,
                                                                          "end_token": 1358,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "addPrefixTransformer",
                                                                              "start_token": 1350,
                                                                              "end_token": 1350,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "color.bold(prefixText)",
                                                                              "start_token": 1352,
                                                                              "end_token": 1357,
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "color.bold",
                                                                                  "start_token": 1352,
                                                                                  "end_token": 1354,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "color",
                                                                                      "start_token": 1352,
                                                                                      "end_token": 1352,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "bold",
                                                                                      "start_token": 1354,
                                                                                      "end_token": 1354,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "prefixText",
                                                                                  "start_token": 1356,
                                                                                  "end_token": 1356,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "pipe",
                                                                      "start_token": 1361,
                                                                      "end_token": 1361,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "process.stdout",
                                                                  "start_token": 1363,
                                                                  "end_token": 1365,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "process",
                                                                      "start_token": 1363,
                                                                      "end_token": 1363,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "stdout",
                                                                      "start_token": 1365,
                                                                      "end_token": 1365,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr);",
                                                          "start_token": 1368,
                                                          "end_token": 1402,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe(process.stderr)",
                                                              "start_token": 1368,
                                                              "end_token": 1401,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))\n              .pipe",
                                                                  "start_token": 1368,
                                                                  "end_token": 1396,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe(addPrefixTransformer(color(prefixText)))",
                                                                      "start_token": 1368,
                                                                      "end_token": 1394,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))\n              .pipe",
                                                                          "start_token": 1368,
                                                                          "end_token": 1385,
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "p.stderr\n              .pipe(logClearLineToPrefixTransformer(color(prefixText) + ' '))",
                                                                              "start_token": 1368,
                                                                              "end_token": 1383,
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "p.stderr\n              .pipe",
                                                                                  "start_token": 1368,
                                                                                  "end_token": 1372,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "p.stderr",
                                                                                      "start_token": 1368,
                                                                                      "end_token": 1370,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "p",
                                                                                          "start_token": 1368,
                                                                                          "end_token": 1368,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "stderr",
                                                                                          "start_token": 1370,
                                                                                          "end_token": 1370,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "pipe",
                                                                                      "start_token": 1372,
                                                                                      "end_token": 1372,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "CallExpression",
                                                                                  "label": "logClearLineToPrefixTransformer(color(prefixText) + ' ')",
                                                                                  "start_token": 1374,
                                                                                  "end_token": 1382,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "logClearLineToPrefixTransformer",
                                                                                      "start_token": 1374,
                                                                                      "end_token": 1374,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "BinaryExpression",
                                                                                      "label": "color(prefixText) + ' '",
                                                                                      "start_token": 1376,
                                                                                      "end_token": 1381,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "CallExpression",
                                                                                          "label": "color(prefixText)",
                                                                                          "start_token": 1376,
                                                                                          "end_token": 1379,
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "color",
                                                                                              "start_token": 1376,
                                                                                              "end_token": 1376,
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "prefixText",
                                                                                              "start_token": 1378,
                                                                                              "end_token": 1378,
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "PlusToken",
                                                                                          "label": "+",
                                                                                          "start_token": 1380,
                                                                                          "end_token": 1380,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "StringLiteral",
                                                                                          "label": "' '",
                                                                                          "start_token": 1381,
                                                                                          "end_token": 1381,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "pipe",
                                                                              "start_token": 1385,
                                                                              "end_token": 1385,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "addPrefixTransformer(color(prefixText))",
                                                                          "start_token": 1387,
                                                                          "end_token": 1393,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "addPrefixTransformer",
                                                                              "start_token": 1387,
                                                                              "end_token": 1387,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "color(prefixText)",
                                                                              "start_token": 1389,
                                                                              "end_token": 1392,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "color",
                                                                                  "start_token": 1389,
                                                                                  "end_token": 1389,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "prefixText",
                                                                                  "start_token": 1391,
                                                                                  "end_token": 1391,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "pipe",
                                                                      "start_token": 1396,
                                                                      "end_token": 1396,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "process.stderr",
                                                                  "start_token": 1398,
                                                                  "end_token": 1400,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "process",
                                                                      "start_token": 1398,
                                                                      "end_token": 1398,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "stderr",
                                                                      "start_token": 1400,
                                                                      "end_token": 1400,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n            p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);\n            p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);\n          }",
                                                      "start_token": 1405,
                                                      "end_token": 1442,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout);",
                                                          "start_token": 1406,
                                                          "end_token": 1423,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.stdout.pipe(addPrefixTransformer()).pipe(process.stdout)",
                                                              "start_token": 1406,
                                                              "end_token": 1422,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.stdout.pipe(addPrefixTransformer()).pipe",
                                                                  "start_token": 1406,
                                                                  "end_token": 1417,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "p.stdout.pipe(addPrefixTransformer())",
                                                                      "start_token": 1406,
                                                                      "end_token": 1415,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "p.stdout.pipe",
                                                                          "start_token": 1406,
                                                                          "end_token": 1410,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "p.stdout",
                                                                              "start_token": 1406,
                                                                              "end_token": 1408,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "p",
                                                                                  "start_token": 1406,
                                                                                  "end_token": 1406,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "stdout",
                                                                                  "start_token": 1408,
                                                                                  "end_token": 1408,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "pipe",
                                                                              "start_token": 1410,
                                                                              "end_token": 1410,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "addPrefixTransformer()",
                                                                          "start_token": 1412,
                                                                          "end_token": 1414,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "addPrefixTransformer",
                                                                              "start_token": 1412,
                                                                              "end_token": 1412,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "pipe",
                                                                      "start_token": 1417,
                                                                      "end_token": 1417,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "process.stdout",
                                                                  "start_token": 1419,
                                                                  "end_token": 1421,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "process",
                                                                      "start_token": 1419,
                                                                      "end_token": 1419,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "stdout",
                                                                      "start_token": 1421,
                                                                      "end_token": 1421,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr);",
                                                          "start_token": 1424,
                                                          "end_token": 1441,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.stderr.pipe(addPrefixTransformer()).pipe(process.stderr)",
                                                              "start_token": 1424,
                                                              "end_token": 1440,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.stderr.pipe(addPrefixTransformer()).pipe",
                                                                  "start_token": 1424,
                                                                  "end_token": 1435,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "p.stderr.pipe(addPrefixTransformer())",
                                                                      "start_token": 1424,
                                                                      "end_token": 1433,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "p.stderr.pipe",
                                                                          "start_token": 1424,
                                                                          "end_token": 1428,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "p.stderr",
                                                                              "start_token": 1424,
                                                                              "end_token": 1426,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "p",
                                                                                  "start_token": 1424,
                                                                                  "end_token": 1424,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "stderr",
                                                                                  "start_token": 1426,
                                                                                  "end_token": 1426,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "pipe",
                                                                              "start_token": 1428,
                                                                              "end_token": 1428,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "addPrefixTransformer()",
                                                                          "start_token": 1430,
                                                                          "end_token": 1432,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "addPrefixTransformer",
                                                                              "start_token": 1430,
                                                                              "end_token": 1430,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "pipe",
                                                                      "start_token": 1435,
                                                                      "end_token": 1435,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "process.stderr",
                                                                  "start_token": 1437,
                                                                  "end_token": 1439,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "process",
                                                                      "start_token": 1437,
                                                                      "end_token": 1437,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "stderr",
                                                                      "start_token": 1439,
                                                                      "end_token": 1439,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstStatement",
                                          "label": "let outWithErr = [];",
                                          "start_token": 1444,
                                          "end_token": 1449,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "let outWithErr = []",
                                              "start_token": 1444,
                                              "end_token": 1448,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "outWithErr = []",
                                                  "start_token": 1445,
                                                  "end_token": 1448,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "outWithErr",
                                                      "start_token": 1445,
                                                      "end_token": 1445,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ArrayLiteralExpression",
                                                      "label": "[]",
                                                      "start_token": 1447,
                                                      "end_token": 1448,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });",
                                          "start_token": 1450,
                                          "end_token": 1476,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.stdout.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        })",
                                              "start_token": 1450,
                                              "end_token": 1475,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.stdout.on",
                                                  "start_token": 1450,
                                                  "end_token": 1454,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "p.stdout",
                                                      "start_token": 1450,
                                                      "end_token": 1452,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "p",
                                                          "start_token": 1450,
                                                          "end_token": 1450,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stdout",
                                                          "start_token": 1452,
                                                          "end_token": 1452,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 1454,
                                                      "end_token": 1454,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'data'",
                                                  "start_token": 1456,
                                                  "end_token": 1456,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(chunk) => {\n          outWithErr.push(chunk.toString());\n        }",
                                                  "start_token": 1458,
                                                  "end_token": 1474,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "chunk",
                                                      "start_token": 1459,
                                                      "end_token": 1459,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "chunk",
                                                          "start_token": 1459,
                                                          "end_token": 1459,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 1461,
                                                      "end_token": 1461,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          outWithErr.push(chunk.toString());\n        }",
                                                      "start_token": 1462,
                                                      "end_token": 1474,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "outWithErr.push(chunk.toString());",
                                                          "start_token": 1463,
                                                          "end_token": 1473,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "outWithErr.push(chunk.toString())",
                                                              "start_token": 1463,
                                                              "end_token": 1472,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "outWithErr.push",
                                                                  "start_token": 1463,
                                                                  "end_token": 1465,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "outWithErr",
                                                                      "start_token": 1463,
                                                                      "end_token": 1463,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "push",
                                                                      "start_token": 1465,
                                                                      "end_token": 1465,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "chunk.toString()",
                                                                  "start_token": 1467,
                                                                  "end_token": 1471,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "chunk.toString",
                                                                      "start_token": 1467,
                                                                      "end_token": 1469,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "chunk",
                                                                          "start_token": 1467,
                                                                          "end_token": 1467,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "toString",
                                                                          "start_token": 1469,
                                                                          "end_token": 1469,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        });",
                                          "start_token": 1477,
                                          "end_token": 1503,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.stderr.on('data', (chunk) => {\n          outWithErr.push(chunk.toString());\n        })",
                                              "start_token": 1477,
                                              "end_token": 1502,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.stderr.on",
                                                  "start_token": 1477,
                                                  "end_token": 1481,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "p.stderr",
                                                      "start_token": 1477,
                                                      "end_token": 1479,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "p",
                                                          "start_token": 1477,
                                                          "end_token": 1477,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stderr",
                                                          "start_token": 1479,
                                                          "end_token": 1479,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 1481,
                                                      "end_token": 1481,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'data'",
                                                  "start_token": 1483,
                                                  "end_token": 1483,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(chunk) => {\n          outWithErr.push(chunk.toString());\n        }",
                                                  "start_token": 1485,
                                                  "end_token": 1501,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "chunk",
                                                      "start_token": 1486,
                                                      "end_token": 1486,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "chunk",
                                                          "start_token": 1486,
                                                          "end_token": 1486,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 1488,
                                                      "end_token": 1488,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          outWithErr.push(chunk.toString());\n        }",
                                                      "start_token": 1489,
                                                      "end_token": 1501,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "outWithErr.push(chunk.toString());",
                                                          "start_token": 1490,
                                                          "end_token": 1500,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "outWithErr.push(chunk.toString())",
                                                              "start_token": 1490,
                                                              "end_token": 1499,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "outWithErr.push",
                                                                  "start_token": 1490,
                                                                  "end_token": 1492,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "outWithErr",
                                                                      "start_token": 1490,
                                                                      "end_token": 1490,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "push",
                                                                      "start_token": 1492,
                                                                      "end_token": 1492,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "chunk.toString()",
                                                                  "start_token": 1494,
                                                                  "end_token": 1498,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "chunk.toString",
                                                                      "start_token": 1494,
                                                                      "end_token": 1496,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "chunk",
                                                                          "start_token": 1494,
                                                                          "end_token": 1494,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "toString",
                                                                          "start_token": 1496,
                                                                          "end_token": 1496,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        });",
                                          "start_token": 1504,
                                          "end_token": 1599,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.on('exit', (code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        })",
                                              "start_token": 1504,
                                              "end_token": 1598,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.on",
                                                  "start_token": 1504,
                                                  "end_token": 1506,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1504,
                                                      "end_token": 1504,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 1506,
                                                      "end_token": 1506,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'exit'",
                                                  "start_token": 1508,
                                                  "end_token": 1508,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(code, signal) => {\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        }",
                                                  "start_token": 1510,
                                                  "end_token": 1597,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "code",
                                                      "start_token": 1511,
                                                      "end_token": 1511,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "start_token": 1511,
                                                          "end_token": 1511,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Parameter",
                                                      "label": "signal",
                                                      "start_token": 1513,
                                                      "end_token": 1513,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "signal",
                                                          "start_token": 1513,
                                                          "end_token": 1513,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 1515,
                                                      "end_token": 1515,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          this.processes.delete(p);\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output|\n          const terminalOutput = outWithErr.join('');\n          if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }\n          this.writeTerminalOutput(temporaryOutputPath, terminalOutput);\n          res({ code, terminalOutput });\n        }",
                                                      "start_token": 1516,
                                                      "end_token": 1597,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "this.processes.delete(p);",
                                                          "start_token": 1517,
                                                          "end_token": 1525,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "this.processes.delete(p)",
                                                              "start_token": 1517,
                                                              "end_token": 1524,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.processes.delete",
                                                                  "start_token": 1517,
                                                                  "end_token": 1521,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.processes",
                                                                      "start_token": 1517,
                                                                      "end_token": 1519,
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "start_token": 1517,
                                                                          "end_token": 1517,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "processes",
                                                                          "start_token": 1519,
                                                                          "end_token": 1519,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "delete",
                                                                      "start_token": 1521,
                                                                      "end_token": 1521,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "p",
                                                                  "start_token": 1523,
                                                                  "end_token": 1523,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (code === null) code = signalToCode(signal);",
                                                          "start_token": 1526,
                                                          "end_token": 1538,
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "code === null",
                                                              "start_token": 1528,
                                                              "end_token": 1530,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "code",
                                                                  "start_token": 1528,
                                                                  "end_token": 1528,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "start_token": 1529,
                                                                  "end_token": 1529,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "NullKeyword",
                                                                  "label": "null",
                                                                  "start_token": 1530,
                                                                  "end_token": 1530,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "label": "code = signalToCode(signal);",
                                                              "start_token": 1532,
                                                              "end_token": 1538,
                                                              "children": [
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "code = signalToCode(signal)",
                                                                  "start_token": 1532,
                                                                  "end_token": 1537,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "code",
                                                                      "start_token": 1532,
                                                                      "end_token": 1532,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "FirstAssignment",
                                                                      "label": "=",
                                                                      "start_token": 1533,
                                                                      "end_token": 1533,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "signalToCode(signal)",
                                                                      "start_token": 1534,
                                                                      "end_token": 1537,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "signalToCode",
                                                                          "start_token": 1534,
                                                                          "end_token": 1534,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "signal",
                                                                          "start_token": 1536,
                                                                          "end_token": 1536,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "FirstStatement",
                                                          "label": "const terminalOutput = outWithErr.join('');",
                                                          "start_token": 1541,
                                                          "end_token": 1550,
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclarationList",
                                                              "label": "const terminalOutput = outWithErr.join('')",
                                                              "start_token": 1541,
                                                              "end_token": 1549,
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "terminalOutput = outWithErr.join('')",
                                                                  "start_token": 1542,
                                                                  "end_token": 1549,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "terminalOutput",
                                                                      "start_token": 1542,
                                                                      "end_token": 1542,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "outWithErr.join('')",
                                                                      "start_token": 1544,
                                                                      "end_token": 1549,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "outWithErr.join",
                                                                          "start_token": 1544,
                                                                          "end_token": 1546,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "outWithErr",
                                                                              "start_token": 1544,
                                                                              "end_token": 1544,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "join",
                                                                              "start_token": 1546,
                                                                              "end_token": 1546,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "StringLiteral",
                                                                          "label": "''",
                                                                          "start_token": 1548,
                                                                          "end_token": 1548,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (!streamOutput) {\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }",
                                                          "start_token": 1551,
                                                          "end_token": 1578,
                                                          "children": [
                                                            {
                                                              "type": "PrefixUnaryExpression",
                                                              "label": "!streamOutput",
                                                              "start_token": 1553,
                                                              "end_token": 1554,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "streamOutput",
                                                                  "start_token": 1554,
                                                                  "end_token": 1554,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );\n          }",
                                                              "start_token": 1556,
                                                              "end_token": 1578,
                                                              "children": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            );",
                                                                  "start_token": 1557,
                                                                  "end_token": 1577,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "this.options.lifeCycle.printTaskTerminalOutput(\n              task,\n              code === 0 ? 'success' : 'failure',\n              terminalOutput\n            )",
                                                                      "start_token": 1557,
                                                                      "end_token": 1576,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.options.lifeCycle.printTaskTerminalOutput",
                                                                          "start_token": 1557,
                                                                          "end_token": 1563,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.options.lifeCycle",
                                                                              "start_token": 1557,
                                                                              "end_token": 1561,
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "this.options",
                                                                                  "start_token": 1557,
                                                                                  "end_token": 1559,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "ThisKeyword",
                                                                                      "label": "this",
                                                                                      "start_token": 1557,
                                                                                      "end_token": 1557,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "options",
                                                                                      "start_token": 1559,
                                                                                      "end_token": 1559,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "lifeCycle",
                                                                                  "start_token": 1561,
                                                                                  "end_token": 1561,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "printTaskTerminalOutput",
                                                                              "start_token": 1563,
                                                                              "end_token": 1563,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "task",
                                                                          "start_token": 1565,
                                                                          "end_token": 1565,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "ConditionalExpression",
                                                                          "label": "code === 0 ? 'success' : 'failure'",
                                                                          "start_token": 1567,
                                                                          "end_token": 1573,
                                                                          "children": [
                                                                            {
                                                                              "type": "BinaryExpression",
                                                                              "label": "code === 0",
                                                                              "start_token": 1567,
                                                                              "end_token": 1569,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "code",
                                                                                  "start_token": 1567,
                                                                                  "end_token": 1567,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "EqualsEqualsEqualsToken",
                                                                                  "label": "===",
                                                                                  "start_token": 1568,
                                                                                  "end_token": 1568,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "FirstLiteralToken",
                                                                                  "label": "0",
                                                                                  "start_token": 1569,
                                                                                  "end_token": 1569,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "QuestionToken",
                                                                              "label": "?",
                                                                              "start_token": 1570,
                                                                              "end_token": 1570,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "'success'",
                                                                              "start_token": 1571,
                                                                              "end_token": 1571,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "ColonToken",
                                                                              "label": ":",
                                                                              "start_token": 1572,
                                                                              "end_token": 1572,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "'failure'",
                                                                              "start_token": 1573,
                                                                              "end_token": 1573,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "terminalOutput",
                                                                          "start_token": 1575,
                                                                          "end_token": 1575,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "this.writeTerminalOutput(temporaryOutputPath, terminalOutput);",
                                                          "start_token": 1579,
                                                          "end_token": 1587,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "this.writeTerminalOutput(temporaryOutputPath, terminalOutput)",
                                                              "start_token": 1579,
                                                              "end_token": 1586,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.writeTerminalOutput",
                                                                  "start_token": 1579,
                                                                  "end_token": 1581,
                                                                  "children": [
                                                                    {
                                                                      "type": "ThisKeyword",
                                                                      "label": "this",
                                                                      "start_token": 1579,
                                                                      "end_token": 1579,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "writeTerminalOutput",
                                                                      "start_token": 1581,
                                                                      "end_token": 1581,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "temporaryOutputPath",
                                                                  "start_token": 1583,
                                                                  "end_token": 1583,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "terminalOutput",
                                                                  "start_token": 1585,
                                                                  "end_token": 1585,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "res({ code, terminalOutput });",
                                                          "start_token": 1588,
                                                          "end_token": 1596,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "res({ code, terminalOutput })",
                                                              "start_token": 1588,
                                                              "end_token": 1595,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "res",
                                                                  "start_token": 1588,
                                                                  "end_token": 1588,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ObjectLiteralExpression",
                                                                  "label": "{ code, terminalOutput }",
                                                                  "start_token": 1590,
                                                                  "end_token": 1594,
                                                                  "children": [
                                                                    {
                                                                      "type": "ShorthandPropertyAssignment",
                                                                      "label": "code",
                                                                      "start_token": 1591,
                                                                      "end_token": 1591,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "code",
                                                                          "start_token": 1591,
                                                                          "end_token": 1591,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "ShorthandPropertyAssignment",
                                                                      "label": "terminalOutput",
                                                                      "start_token": 1593,
                                                                      "end_token": 1593,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "terminalOutput",
                                                                          "start_token": 1593,
                                                                          "end_token": 1593,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CatchClause",
                                      "label": "catch (e) {\n        console.error(e);\n        rej(e);\n      }",
                                      "start_token": 1601,
                                      "end_token": 1618,
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "e",
                                          "start_token": 1603,
                                          "end_token": 1603,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "e",
                                              "start_token": 1603,
                                              "end_token": 1603,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n        console.error(e);\n        rej(e);\n      }",
                                          "start_token": 1605,
                                          "end_token": 1618,
                                          "children": [
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "console.error(e);",
                                              "start_token": 1606,
                                              "end_token": 1612,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "console.error(e)",
                                                  "start_token": 1606,
                                                  "end_token": 1611,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "console.error",
                                                      "start_token": 1606,
                                                      "end_token": 1608,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "console",
                                                          "start_token": 1606,
                                                          "end_token": 1606,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "error",
                                                          "start_token": 1608,
                                                          "end_token": 1608,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "e",
                                                      "start_token": 1610,
                                                      "end_token": 1610,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "rej(e);",
                                              "start_token": 1613,
                                              "end_token": 1617,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "rej(e)",
                                                  "start_token": 1613,
                                                  "end_token": 1616,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "rej",
                                                      "start_token": 1613,
                                                      "end_token": 1613,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "e",
                                                      "start_token": 1615,
                                                      "end_token": 1615,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private forkProcessDirectOutputCapture(\n    task: Task,\n    {\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }\n  ) {\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }",
          "start_token": 1623,
          "end_token": 1930,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 1623,
              "end_token": 1623,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "forkProcessDirectOutputCapture",
              "start_token": 1624,
              "end_token": 1624,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "task: Task",
              "start_token": 1626,
              "end_token": 1628,
              "children": [
                {
                  "type": "Identifier",
                  "label": "task",
                  "start_token": 1626,
                  "end_token": 1626,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Task",
                  "start_token": 1628,
                  "end_token": 1628,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Task",
                      "start_token": 1628,
                      "end_token": 1628,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }: {\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
              "start_token": 1630,
              "end_token": 1660,
              "children": [
                {
                  "type": "ObjectBindingPattern",
                  "label": "{\n      streamOutput,\n      temporaryOutputPath,\n      taskGraph,\n      env,\n    }",
                  "start_token": 1630,
                  "end_token": 1639,
                  "children": [
                    {
                      "type": "BindingElement",
                      "label": "streamOutput",
                      "start_token": 1631,
                      "end_token": 1631,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 1631,
                          "end_token": 1631,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "temporaryOutputPath",
                      "start_token": 1633,
                      "end_token": 1633,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 1633,
                          "end_token": 1633,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "taskGraph",
                      "start_token": 1635,
                      "end_token": 1635,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 1635,
                          "end_token": 1635,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BindingElement",
                      "label": "env",
                      "start_token": 1637,
                      "end_token": 1637,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 1637,
                          "end_token": 1637,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeLiteral",
                  "label": "{\n      streamOutput: boolean;\n      temporaryOutputPath: string;\n      taskGraph: TaskGraph;\n      env: NodeJS.ProcessEnv;\n    }",
                  "start_token": 1641,
                  "end_token": 1660,
                  "children": [
                    {
                      "type": "PropertySignature",
                      "label": "streamOutput: boolean;",
                      "start_token": 1642,
                      "end_token": 1645,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "streamOutput",
                          "start_token": 1642,
                          "end_token": 1642,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 1644,
                          "end_token": 1644,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "temporaryOutputPath: string;",
                      "start_token": 1646,
                      "end_token": 1649,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "temporaryOutputPath",
                          "start_token": 1646,
                          "end_token": 1646,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 1648,
                          "end_token": 1648,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "taskGraph: TaskGraph;",
                      "start_token": 1650,
                      "end_token": 1653,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "taskGraph",
                          "start_token": 1650,
                          "end_token": 1650,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "TaskGraph",
                          "start_token": 1652,
                          "end_token": 1652,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "TaskGraph",
                              "start_token": 1652,
                              "end_token": 1652,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertySignature",
                      "label": "env: NodeJS.ProcessEnv;",
                      "start_token": 1654,
                      "end_token": 1659,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "env",
                          "start_token": 1654,
                          "end_token": 1654,
                          "children": []
                        },
                        {
                          "type": "TypeReference",
                          "label": "NodeJS.ProcessEnv",
                          "start_token": 1656,
                          "end_token": 1658,
                          "children": [
                            {
                              "type": "FirstNode",
                              "label": "NodeJS.ProcessEnv",
                              "start_token": 1656,
                              "end_token": 1658,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "NodeJS",
                                  "start_token": 1656,
                                  "end_token": 1656,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ProcessEnv",
                                  "start_token": 1658,
                                  "end_token": 1658,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });\n  }",
              "start_token": 1662,
              "end_token": 1930,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    });",
                  "start_token": 1663,
                  "end_token": 1929,
                  "children": [
                    {
                      "type": "NewExpression",
                      "label": "new Promise<{ code: number; terminalOutput: string }>((res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    })",
                      "start_token": 1664,
                      "end_token": 1928,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Promise",
                          "start_token": 1665,
                          "end_token": 1665,
                          "children": []
                        },
                        {
                          "type": "TypeLiteral",
                          "label": "{ code: number; terminalOutput: string }",
                          "start_token": 1667,
                          "end_token": 1675,
                          "children": [
                            {
                              "type": "PropertySignature",
                              "label": "code: number;",
                              "start_token": 1668,
                              "end_token": 1671,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "code",
                                  "start_token": 1668,
                                  "end_token": 1668,
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "start_token": 1670,
                                  "end_token": 1670,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertySignature",
                              "label": "terminalOutput: string",
                              "start_token": 1672,
                              "end_token": 1674,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "terminalOutput",
                                  "start_token": 1672,
                                  "end_token": 1672,
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "start_token": 1674,
                                  "end_token": 1674,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(res, rej) => {\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    }",
                          "start_token": 1678,
                          "end_token": 1927,
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "res",
                              "start_token": 1679,
                              "end_token": 1679,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "start_token": 1679,
                                  "end_token": 1679,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "rej",
                              "start_token": 1681,
                              "end_token": 1681,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "rej",
                                  "start_token": 1681,
                                  "end_token": 1681,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 1683,
                              "end_token": 1683,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }\n    }",
                              "start_token": 1684,
                              "end_token": 1927,
                              "children": [
                                {
                                  "type": "TryStatement",
                                  "label": "try {\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        rej(e);\n      }",
                                  "start_token": 1685,
                                  "end_token": 1926,
                                  "children": [
                                    {
                                      "type": "Block",
                                      "label": "{\n        const args = getPrintableCommandArgsForTask(task);\n        if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }\n        const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });\n        this.processes.add(p);\n        // Re-emit any messages from the task process\n        p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });\n        // Send message to run the executor\n        p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });\n        p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });\n      }",
                                      "start_token": 1686,
                                      "end_token": 1908,
                                      "children": [
                                        {
                                          "type": "FirstStatement",
                                          "label": "const args = getPrintableCommandArgsForTask(task);",
                                          "start_token": 1687,
                                          "end_token": 1694,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const args = getPrintableCommandArgsForTask(task)",
                                              "start_token": 1687,
                                              "end_token": 1693,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "args = getPrintableCommandArgsForTask(task)",
                                                  "start_token": 1688,
                                                  "end_token": 1693,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "args",
                                                      "start_token": 1688,
                                                      "end_token": 1688,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "getPrintableCommandArgsForTask(task)",
                                                      "start_token": 1690,
                                                      "end_token": 1693,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "getPrintableCommandArgsForTask",
                                                          "start_token": 1690,
                                                          "end_token": 1690,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "task",
                                                          "start_token": 1692,
                                                          "end_token": 1692,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "IfStatement",
                                          "label": "if (streamOutput) {\n          output.logCommand(args.join(' '));\n        }",
                                          "start_token": 1695,
                                          "end_token": 1712,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "streamOutput",
                                              "start_token": 1697,
                                              "end_token": 1697,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          output.logCommand(args.join(' '));\n        }",
                                              "start_token": 1699,
                                              "end_token": 1712,
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "output.logCommand(args.join(' '));",
                                                  "start_token": 1700,
                                                  "end_token": 1711,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "output.logCommand(args.join(' '))",
                                                      "start_token": 1700,
                                                      "end_token": 1710,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "output.logCommand",
                                                          "start_token": 1700,
                                                          "end_token": 1702,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "output",
                                                              "start_token": 1700,
                                                              "end_token": 1700,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "logCommand",
                                                              "start_token": 1702,
                                                              "end_token": 1702,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "args.join(' ')",
                                                          "start_token": 1704,
                                                          "end_token": 1709,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "args.join",
                                                              "start_token": 1704,
                                                              "end_token": 1706,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "args",
                                                                  "start_token": 1704,
                                                                  "end_token": 1704,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "join",
                                                                  "start_token": 1706,
                                                                  "end_token": 1706,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "' '",
                                                              "start_token": 1708,
                                                              "end_token": 1708,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstStatement",
                                          "label": "const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        });",
                                          "start_token": 1713,
                                          "end_token": 1739,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        })",
                                              "start_token": 1713,
                                              "end_token": 1738,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "p = fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        })",
                                                  "start_token": 1714,
                                                  "end_token": 1738,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1714,
                                                      "end_token": 1714,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "fork(this.cliPath, {\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        })",
                                                      "start_token": 1716,
                                                      "end_token": 1738,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "fork",
                                                          "start_token": 1716,
                                                          "end_token": 1716,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.cliPath",
                                                          "start_token": 1718,
                                                          "end_token": 1720,
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "start_token": 1718,
                                                              "end_token": 1718,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "cliPath",
                                                              "start_token": 1720,
                                                              "end_token": 1720,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{\n          stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n          env,\n        }",
                                                          "start_token": 1722,
                                                          "end_token": 1737,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "stdio: ['inherit', 'inherit', 'inherit', 'ipc']",
                                                              "start_token": 1723,
                                                              "end_token": 1733,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "stdio",
                                                                  "start_token": 1723,
                                                                  "end_token": 1723,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ArrayLiteralExpression",
                                                                  "label": "['inherit', 'inherit', 'inherit', 'ipc']",
                                                                  "start_token": 1725,
                                                                  "end_token": 1733,
                                                                  "children": [
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 1726,
                                                                      "end_token": 1726,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 1728,
                                                                      "end_token": 1728,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'inherit'",
                                                                      "start_token": 1730,
                                                                      "end_token": 1730,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'ipc'",
                                                                      "start_token": 1732,
                                                                      "end_token": 1732,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ShorthandPropertyAssignment",
                                                              "label": "env",
                                                              "start_token": 1735,
                                                              "end_token": 1735,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "env",
                                                                  "start_token": 1735,
                                                                  "end_token": 1735,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.processes.add(p);",
                                          "start_token": 1740,
                                          "end_token": 1748,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.processes.add(p)",
                                              "start_token": 1740,
                                              "end_token": 1747,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.processes.add",
                                                  "start_token": 1740,
                                                  "end_token": 1744,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.processes",
                                                      "start_token": 1740,
                                                      "end_token": 1742,
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "start_token": 1740,
                                                          "end_token": 1740,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "processes",
                                                          "start_token": 1742,
                                                          "end_token": 1742,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "add",
                                                      "start_token": 1744,
                                                      "end_token": 1744,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 1746,
                                                  "end_token": 1746,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        });",
                                          "start_token": 1750,
                                          "end_token": 1778,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.on('message', (message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        })",
                                              "start_token": 1750,
                                              "end_token": 1777,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.on",
                                                  "start_token": 1750,
                                                  "end_token": 1752,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1750,
                                                      "end_token": 1750,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 1752,
                                                      "end_token": 1752,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'message'",
                                                  "start_token": 1754,
                                                  "end_token": 1754,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(message) => {\n          if (process.send) {\n            process.send(message);\n          }\n        }",
                                                  "start_token": 1756,
                                                  "end_token": 1776,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "message",
                                                      "start_token": 1757,
                                                      "end_token": 1757,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "message",
                                                          "start_token": 1757,
                                                          "end_token": 1757,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 1759,
                                                      "end_token": 1759,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          if (process.send) {\n            process.send(message);\n          }\n        }",
                                                      "start_token": 1760,
                                                      "end_token": 1776,
                                                      "children": [
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (process.send) {\n            process.send(message);\n          }",
                                                          "start_token": 1761,
                                                          "end_token": 1775,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "process.send",
                                                              "start_token": 1763,
                                                              "end_token": 1765,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "process",
                                                                  "start_token": 1763,
                                                                  "end_token": 1763,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "send",
                                                                  "start_token": 1765,
                                                                  "end_token": 1765,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            process.send(message);\n          }",
                                                              "start_token": 1767,
                                                              "end_token": 1775,
                                                              "children": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "process.send(message);",
                                                                  "start_token": 1768,
                                                                  "end_token": 1774,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "process.send(message)",
                                                                      "start_token": 1768,
                                                                      "end_token": 1773,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "process.send",
                                                                          "start_token": 1768,
                                                                          "end_token": 1770,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "process",
                                                                              "start_token": 1768,
                                                                              "end_token": 1768,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "send",
                                                                              "start_token": 1770,
                                                                              "end_token": 1770,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "message",
                                                                          "start_token": 1772,
                                                                          "end_token": 1772,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        });",
                                          "start_token": 1780,
                                          "end_token": 1807,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.send({\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        })",
                                              "start_token": 1780,
                                              "end_token": 1806,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.send",
                                                  "start_token": 1780,
                                                  "end_token": 1782,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1780,
                                                      "end_token": 1780,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "send",
                                                      "start_token": 1782,
                                                      "end_token": 1782,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ObjectLiteralExpression",
                                                  "label": "{\n          targetDescription: task.target,\n          overrides: task.overrides,\n          taskGraph,\n          isVerbose: this.verbose,\n        }",
                                                  "start_token": 1784,
                                                  "end_token": 1805,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "targetDescription: task.target",
                                                      "start_token": 1785,
                                                      "end_token": 1789,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "targetDescription",
                                                          "start_token": 1785,
                                                          "end_token": 1785,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "task.target",
                                                          "start_token": 1787,
                                                          "end_token": 1789,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "task",
                                                              "start_token": 1787,
                                                              "end_token": 1787,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "target",
                                                              "start_token": 1789,
                                                              "end_token": 1789,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "overrides: task.overrides",
                                                      "start_token": 1791,
                                                      "end_token": 1795,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "overrides",
                                                          "start_token": 1791,
                                                          "end_token": 1791,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "task.overrides",
                                                          "start_token": 1793,
                                                          "end_token": 1795,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "task",
                                                              "start_token": 1793,
                                                              "end_token": 1793,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "overrides",
                                                              "start_token": 1795,
                                                              "end_token": 1795,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ShorthandPropertyAssignment",
                                                      "label": "taskGraph",
                                                      "start_token": 1797,
                                                      "end_token": 1797,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "taskGraph",
                                                          "start_token": 1797,
                                                          "end_token": 1797,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "isVerbose: this.verbose",
                                                      "start_token": 1799,
                                                      "end_token": 1803,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "isVerbose",
                                                          "start_token": 1799,
                                                          "end_token": 1799,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.verbose",
                                                          "start_token": 1801,
                                                          "end_token": 1803,
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "start_token": 1801,
                                                              "end_token": 1801,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "verbose",
                                                              "start_token": 1803,
                                                              "end_token": 1803,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        });",
                                          "start_token": 1808,
                                          "end_token": 1907,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "p.on('exit', (code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        })",
                                              "start_token": 1808,
                                              "end_token": 1906,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "p.on",
                                                  "start_token": 1808,
                                                  "end_token": 1810,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "p",
                                                      "start_token": 1808,
                                                      "end_token": 1808,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "on",
                                                      "start_token": 1810,
                                                      "end_token": 1810,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'exit'",
                                                  "start_token": 1812,
                                                  "end_token": 1812,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(code, signal) => {\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        }",
                                                  "start_token": 1814,
                                                  "end_token": 1905,
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "code",
                                                      "start_token": 1815,
                                                      "end_token": 1815,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "start_token": 1815,
                                                          "end_token": 1815,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Parameter",
                                                      "label": "signal",
                                                      "start_token": 1817,
                                                      "end_token": 1817,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "signal",
                                                          "start_token": 1817,
                                                          "end_token": 1817,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "start_token": 1819,
                                                      "end_token": 1819,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          if (code === null) code = signalToCode(signal);\n          // we didn't print any output as we were running the command\n          // print all the collected output\n          let terminalOutput = '';\n          try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }\n          res({\n            code,\n            terminalOutput,\n          });\n        }",
                                                      "start_token": 1820,
                                                      "end_token": 1905,
                                                      "children": [
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (code === null) code = signalToCode(signal);",
                                                          "start_token": 1821,
                                                          "end_token": 1833,
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "code === null",
                                                              "start_token": 1823,
                                                              "end_token": 1825,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "code",
                                                                  "start_token": 1823,
                                                                  "end_token": 1823,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "start_token": 1824,
                                                                  "end_token": 1824,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "NullKeyword",
                                                                  "label": "null",
                                                                  "start_token": 1825,
                                                                  "end_token": 1825,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "label": "code = signalToCode(signal);",
                                                              "start_token": 1827,
                                                              "end_token": 1833,
                                                              "children": [
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "code = signalToCode(signal)",
                                                                  "start_token": 1827,
                                                                  "end_token": 1832,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "code",
                                                                      "start_token": 1827,
                                                                      "end_token": 1827,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "FirstAssignment",
                                                                      "label": "=",
                                                                      "start_token": 1828,
                                                                      "end_token": 1828,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "signalToCode(signal)",
                                                                      "start_token": 1829,
                                                                      "end_token": 1832,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "signalToCode",
                                                                          "start_token": 1829,
                                                                          "end_token": 1829,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "signal",
                                                                          "start_token": 1831,
                                                                          "end_token": 1831,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "FirstStatement",
                                                          "label": "let terminalOutput = '';",
                                                          "start_token": 1836,
                                                          "end_token": 1840,
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclarationList",
                                                              "label": "let terminalOutput = ''",
                                                              "start_token": 1836,
                                                              "end_token": 1839,
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "terminalOutput = ''",
                                                                  "start_token": 1837,
                                                                  "end_token": 1839,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "terminalOutput",
                                                                      "start_token": 1837,
                                                                      "end_token": 1837,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "''",
                                                                      "start_token": 1839,
                                                                      "end_token": 1839,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "TryStatement",
                                                          "label": "try {\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          } catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }",
                                                          "start_token": 1841,
                                                          "end_token": 1894,
                                                          "children": [
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            terminalOutput = this.readTerminalOutput(temporaryOutputPath);\n            if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }\n          }",
                                                              "start_token": 1842,
                                                              "end_token": 1880,
                                                              "children": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "terminalOutput = this.readTerminalOutput(temporaryOutputPath);",
                                                                  "start_token": 1843,
                                                                  "end_token": 1851,
                                                                  "children": [
                                                                    {
                                                                      "type": "BinaryExpression",
                                                                      "label": "terminalOutput = this.readTerminalOutput(temporaryOutputPath)",
                                                                      "start_token": 1843,
                                                                      "end_token": 1850,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "terminalOutput",
                                                                          "start_token": 1843,
                                                                          "end_token": 1843,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "FirstAssignment",
                                                                          "label": "=",
                                                                          "start_token": 1844,
                                                                          "end_token": 1844,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "this.readTerminalOutput(temporaryOutputPath)",
                                                                          "start_token": 1845,
                                                                          "end_token": 1850,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.readTerminalOutput",
                                                                              "start_token": 1845,
                                                                              "end_token": 1847,
                                                                              "children": [
                                                                                {
                                                                                  "type": "ThisKeyword",
                                                                                  "label": "this",
                                                                                  "start_token": 1845,
                                                                                  "end_token": 1845,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "readTerminalOutput",
                                                                                  "start_token": 1847,
                                                                                  "end_token": 1847,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "temporaryOutputPath",
                                                                              "start_token": 1849,
                                                                              "end_token": 1849,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "IfStatement",
                                                                  "label": "if (!streamOutput) {\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }",
                                                                  "start_token": 1852,
                                                                  "end_token": 1879,
                                                                  "children": [
                                                                    {
                                                                      "type": "PrefixUnaryExpression",
                                                                      "label": "!streamOutput",
                                                                      "start_token": 1854,
                                                                      "end_token": 1855,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "streamOutput",
                                                                          "start_token": 1855,
                                                                          "end_token": 1855,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Block",
                                                                      "label": "{\n              this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );\n            }",
                                                                      "start_token": 1857,
                                                                      "end_token": 1879,
                                                                      "children": [
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "label": "this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              );",
                                                                          "start_token": 1858,
                                                                          "end_token": 1878,
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "this.options.lifeCycle.printTaskTerminalOutput(\n                task,\n                code === 0 ? 'success' : 'failure',\n                terminalOutput\n              )",
                                                                              "start_token": 1858,
                                                                              "end_token": 1877,
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "this.options.lifeCycle.printTaskTerminalOutput",
                                                                                  "start_token": 1858,
                                                                                  "end_token": 1864,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "this.options.lifeCycle",
                                                                                      "start_token": 1858,
                                                                                      "end_token": 1862,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "this.options",
                                                                                          "start_token": 1858,
                                                                                          "end_token": 1860,
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "ThisKeyword",
                                                                                              "label": "this",
                                                                                              "start_token": 1858,
                                                                                              "end_token": 1858,
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "options",
                                                                                              "start_token": 1860,
                                                                                              "end_token": 1860,
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "lifeCycle",
                                                                                          "start_token": 1862,
                                                                                          "end_token": 1862,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "printTaskTerminalOutput",
                                                                                      "start_token": 1864,
                                                                                      "end_token": 1864,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "task",
                                                                                  "start_token": 1866,
                                                                                  "end_token": 1866,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "ConditionalExpression",
                                                                                  "label": "code === 0 ? 'success' : 'failure'",
                                                                                  "start_token": 1868,
                                                                                  "end_token": 1874,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "BinaryExpression",
                                                                                      "label": "code === 0",
                                                                                      "start_token": 1868,
                                                                                      "end_token": 1870,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "code",
                                                                                          "start_token": 1868,
                                                                                          "end_token": 1868,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "EqualsEqualsEqualsToken",
                                                                                          "label": "===",
                                                                                          "start_token": 1869,
                                                                                          "end_token": 1869,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "FirstLiteralToken",
                                                                                          "label": "0",
                                                                                          "start_token": 1870,
                                                                                          "end_token": 1870,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "QuestionToken",
                                                                                      "label": "?",
                                                                                      "start_token": 1871,
                                                                                      "end_token": 1871,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "StringLiteral",
                                                                                      "label": "'success'",
                                                                                      "start_token": 1872,
                                                                                      "end_token": 1872,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "ColonToken",
                                                                                      "label": ":",
                                                                                      "start_token": 1873,
                                                                                      "end_token": 1873,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "StringLiteral",
                                                                                      "label": "'failure'",
                                                                                      "start_token": 1874,
                                                                                      "end_token": 1874,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "terminalOutput",
                                                                                  "start_token": 1876,
                                                                                  "end_token": 1876,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "CatchClause",
                                                              "label": "catch (e) {\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }",
                                                              "start_token": 1881,
                                                              "end_token": 1894,
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "e",
                                                                  "start_token": 1883,
                                                                  "end_token": 1883,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "e",
                                                                      "start_token": 1883,
                                                                      "end_token": 1883,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Block",
                                                                  "label": "{\n            console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);\n          }",
                                                                  "start_token": 1885,
                                                                  "end_token": 1894,
                                                                  "children": [
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "label": "console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `);",
                                                                      "start_token": 1886,
                                                                      "end_token": 1893,
                                                                      "children": [
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "console.log(stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `)",
                                                                          "start_token": 1886,
                                                                          "end_token": 1892,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "console.log",
                                                                              "start_token": 1886,
                                                                              "end_token": 1888,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "console",
                                                                                  "start_token": 1886,
                                                                                  "end_token": 1886,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "log",
                                                                                  "start_token": 1888,
                                                                                  "end_token": 1888,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "TaggedTemplateExpression",
                                                                              "label": "stripIndents`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `",
                                                                              "start_token": 1890,
                                                                              "end_token": 1891,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "stripIndents",
                                                                                  "start_token": 1890,
                                                                                  "end_token": 1890,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "TemplateExpression",
                                                                                  "label": "`\n              Unable to print terminal output for Task \"${task.id}\".\n              Task failed with Exit Code ${code} and Signal \"${signal}\".\n              Received error message:\n              ${e.message}\n            `",
                                                                                  "start_token": 1891,
                                                                                  "end_token": 1891,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "TemplateHead",
                                                                                      "label": "`\n              Unable to print terminal output for Task \"${",
                                                                                      "start_token": 1891,
                                                                                      "end_token": 1891,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "TemplateSpan",
                                                                                      "label": "task.id}\".\n              Task failed with Exit Code ${",
                                                                                      "start_token": 1891,
                                                                                      "end_token": 1891,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "task.id",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "task",
                                                                                              "start_token": 1891,
                                                                                              "end_token": 1891,
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "id",
                                                                                              "start_token": 1891,
                                                                                              "end_token": 1891,
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "TemplateMiddle",
                                                                                          "label": "}\".\n              Task failed with Exit Code ${",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "TemplateSpan",
                                                                                      "label": "code} and Signal \"${",
                                                                                      "start_token": 1891,
                                                                                      "end_token": 1891,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "code",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "TemplateMiddle",
                                                                                          "label": "} and Signal \"${",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "TemplateSpan",
                                                                                      "label": "signal}\".\n              Received error message:\n              ${",
                                                                                      "start_token": 1891,
                                                                                      "end_token": 1891,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "signal",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "TemplateMiddle",
                                                                                          "label": "}\".\n              Received error message:\n              ${",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "TemplateSpan",
                                                                                      "label": "e.message}\n            `",
                                                                                      "start_token": 1891,
                                                                                      "end_token": 1891,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "e.message",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "e",
                                                                                              "start_token": 1891,
                                                                                              "end_token": 1891,
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "message",
                                                                                              "start_token": 1891,
                                                                                              "end_token": 1891,
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "LastTemplateToken",
                                                                                          "label": "}\n            `",
                                                                                          "start_token": 1891,
                                                                                          "end_token": 1891,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "res({\n            code,\n            terminalOutput,\n          });",
                                                          "start_token": 1895,
                                                          "end_token": 1904,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "res({\n            code,\n            terminalOutput,\n          })",
                                                              "start_token": 1895,
                                                              "end_token": 1903,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "res",
                                                                  "start_token": 1895,
                                                                  "end_token": 1895,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ObjectLiteralExpression",
                                                                  "label": "{\n            code,\n            terminalOutput,\n          }",
                                                                  "start_token": 1897,
                                                                  "end_token": 1902,
                                                                  "children": [
                                                                    {
                                                                      "type": "ShorthandPropertyAssignment",
                                                                      "label": "code",
                                                                      "start_token": 1898,
                                                                      "end_token": 1898,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "code",
                                                                          "start_token": 1898,
                                                                          "end_token": 1898,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "ShorthandPropertyAssignment",
                                                                      "label": "terminalOutput",
                                                                      "start_token": 1900,
                                                                      "end_token": 1900,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "terminalOutput",
                                                                          "start_token": 1900,
                                                                          "end_token": 1900,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CatchClause",
                                      "label": "catch (e) {\n        console.error(e);\n        rej(e);\n      }",
                                      "start_token": 1909,
                                      "end_token": 1926,
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "e",
                                          "start_token": 1911,
                                          "end_token": 1911,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "e",
                                              "start_token": 1911,
                                              "end_token": 1911,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n        console.error(e);\n        rej(e);\n      }",
                                          "start_token": 1913,
                                          "end_token": 1926,
                                          "children": [
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "console.error(e);",
                                              "start_token": 1914,
                                              "end_token": 1920,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "console.error(e)",
                                                  "start_token": 1914,
                                                  "end_token": 1919,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "console.error",
                                                      "start_token": 1914,
                                                      "end_token": 1916,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "console",
                                                          "start_token": 1914,
                                                          "end_token": 1914,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "error",
                                                          "start_token": 1916,
                                                          "end_token": 1916,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "e",
                                                      "start_token": 1918,
                                                      "end_token": 1918,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "rej(e);",
                                              "start_token": 1921,
                                              "end_token": 1925,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "rej(e)",
                                                  "start_token": 1921,
                                                  "end_token": 1924,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "rej",
                                                      "start_token": 1921,
                                                      "end_token": 1921,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "e",
                                                      "start_token": 1923,
                                                      "end_token": 1923,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private readTerminalOutput(outputPath: string) {\n    return readFileSync(outputPath).toString();\n  }",
          "start_token": 1931,
          "end_token": 1949,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 1931,
              "end_token": 1931,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "readTerminalOutput",
              "start_token": 1932,
              "end_token": 1932,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "outputPath: string",
              "start_token": 1934,
              "end_token": 1936,
              "children": [
                {
                  "type": "Identifier",
                  "label": "outputPath",
                  "start_token": 1934,
                  "end_token": 1934,
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "start_token": 1936,
                  "end_token": 1936,
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return readFileSync(outputPath).toString();\n  }",
              "start_token": 1938,
              "end_token": 1949,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return readFileSync(outputPath).toString();",
                  "start_token": 1939,
                  "end_token": 1948,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "readFileSync(outputPath).toString()",
                      "start_token": 1940,
                      "end_token": 1947,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "readFileSync(outputPath).toString",
                          "start_token": 1940,
                          "end_token": 1945,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "readFileSync(outputPath)",
                              "start_token": 1940,
                              "end_token": 1943,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "readFileSync",
                                  "start_token": 1940,
                                  "end_token": 1940,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "outputPath",
                                  "start_token": 1942,
                                  "end_token": 1942,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "toString",
                              "start_token": 1945,
                              "end_token": 1945,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private writeTerminalOutput(outputPath: string, content: string) {\n    writeFileSync(outputPath, content);\n  }",
          "start_token": 1950,
          "end_token": 1969,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 1950,
              "end_token": 1950,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "writeTerminalOutput",
              "start_token": 1951,
              "end_token": 1951,
              "children": []
            },
            {
              "type": "Parameter",
              "label": "outputPath: string",
              "start_token": 1953,
              "end_token": 1955,
              "children": [
                {
                  "type": "Identifier",
                  "label": "outputPath",
                  "start_token": 1953,
                  "end_token": 1953,
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "start_token": 1955,
                  "end_token": 1955,
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "content: string",
              "start_token": 1957,
              "end_token": 1959,
              "children": [
                {
                  "type": "Identifier",
                  "label": "content",
                  "start_token": 1957,
                  "end_token": 1957,
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "start_token": 1959,
                  "end_token": 1959,
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    writeFileSync(outputPath, content);\n  }",
              "start_token": 1961,
              "end_token": 1969,
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "writeFileSync(outputPath, content);",
                  "start_token": 1962,
                  "end_token": 1968,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "writeFileSync(outputPath, content)",
                      "start_token": 1962,
                      "end_token": 1967,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "writeFileSync",
                          "start_token": 1962,
                          "end_token": 1962,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "outputPath",
                          "start_token": 1964,
                          "end_token": 1964,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "content",
                          "start_token": 1966,
                          "end_token": 1966,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private setupProcessEventListeners() {\n    if (this.pseudoTerminal) {\n      this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });\n    }\n    // When the nx process gets a message, it will be sent into the task's process\n    process.on('message', (message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    });\n    // Terminate any task processes on exit\n    process.on('exit', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    });\n    process.on('SIGINT', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    });\n    process.on('SIGTERM', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n    process.on('SIGHUP', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n  }",
          "start_token": 1970,
          "end_token": 2289,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 1970,
              "end_token": 1970,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "setupProcessEventListeners",
              "start_token": 1971,
              "end_token": 1971,
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.pseudoTerminal) {\n      this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });\n    }\n    // When the nx process gets a message, it will be sent into the task's process\n    process.on('message', (message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    });\n    // Terminate any task processes on exit\n    process.on('exit', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    });\n    process.on('SIGINT', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    });\n    process.on('SIGTERM', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n    process.on('SIGHUP', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });\n  }",
              "start_token": 1974,
              "end_token": 2289,
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.pseudoTerminal) {\n      this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });\n    }",
                  "start_token": 1975,
                  "end_token": 2005,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.pseudoTerminal",
                      "start_token": 1977,
                      "end_token": 1979,
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "start_token": 1977,
                          "end_token": 1977,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "pseudoTerminal",
                          "start_token": 1979,
                          "end_token": 1979,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });\n    }",
                      "start_token": 1981,
                      "end_token": 2005,
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      });",
                          "start_token": 1982,
                          "end_token": 2004,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.pseudoTerminal.onMessageFromChildren((message: Serializable) => {\n        process.send(message);\n      })",
                              "start_token": 1982,
                              "end_token": 2003,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.pseudoTerminal.onMessageFromChildren",
                                  "start_token": 1982,
                                  "end_token": 1986,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.pseudoTerminal",
                                      "start_token": 1982,
                                      "end_token": 1984,
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "start_token": 1982,
                                          "end_token": 1982,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "pseudoTerminal",
                                          "start_token": 1984,
                                          "end_token": 1984,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onMessageFromChildren",
                                      "start_token": 1986,
                                      "end_token": 1986,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(message: Serializable) => {\n        process.send(message);\n      }",
                                  "start_token": 1988,
                                  "end_token": 2002,
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "message: Serializable",
                                      "start_token": 1989,
                                      "end_token": 1991,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "message",
                                          "start_token": 1989,
                                          "end_token": 1989,
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "Serializable",
                                          "start_token": 1991,
                                          "end_token": 1991,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Serializable",
                                              "start_token": 1991,
                                              "end_token": 1991,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "start_token": 1993,
                                      "end_token": 1993,
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        process.send(message);\n      }",
                                      "start_token": 1994,
                                      "end_token": 2002,
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "process.send(message);",
                                          "start_token": 1995,
                                          "end_token": 2001,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "process.send(message)",
                                              "start_token": 1995,
                                              "end_token": 2000,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "process.send",
                                                  "start_token": 1995,
                                                  "end_token": 1997,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "process",
                                                      "start_token": 1995,
                                                      "end_token": 1995,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "send",
                                                      "start_token": 1997,
                                                      "end_token": 1997,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "message",
                                                  "start_token": 1999,
                                                  "end_token": 1999,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "process.on('message', (message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    });",
                  "start_token": 2007,
                  "end_token": 2073,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "process.on('message', (message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    })",
                      "start_token": 2007,
                      "end_token": 2072,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "process.on",
                          "start_token": 2007,
                          "end_token": 2009,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "process",
                              "start_token": 2007,
                              "end_token": 2007,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "start_token": 2009,
                              "end_token": 2009,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'message'",
                          "start_token": 2011,
                          "end_token": 2011,
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(message: Serializable) => {\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    }",
                          "start_token": 2013,
                          "end_token": 2071,
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "message: Serializable",
                              "start_token": 2014,
                              "end_token": 2016,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "message",
                                  "start_token": 2014,
                                  "end_token": 2014,
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "Serializable",
                                  "start_token": 2016,
                                  "end_token": 2016,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Serializable",
                                      "start_token": 2016,
                                      "end_token": 2016,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 2018,
                              "end_token": 2018,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      // this.publisher.publish(message.toString());\n      if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }\n      this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });\n    }",
                              "start_token": 2019,
                              "end_token": 2071,
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.pseudoTerminal) {\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }",
                                  "start_token": 2021,
                                  "end_token": 2037,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.pseudoTerminal",
                                      "start_token": 2023,
                                      "end_token": 2025,
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "start_token": 2023,
                                          "end_token": 2023,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "pseudoTerminal",
                                          "start_token": 2025,
                                          "end_token": 2025,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        this.pseudoTerminal.sendMessageToChildren(message);\n      }",
                                      "start_token": 2027,
                                      "end_token": 2037,
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.pseudoTerminal.sendMessageToChildren(message);",
                                          "start_token": 2028,
                                          "end_token": 2036,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.pseudoTerminal.sendMessageToChildren(message)",
                                              "start_token": 2028,
                                              "end_token": 2035,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.pseudoTerminal.sendMessageToChildren",
                                                  "start_token": 2028,
                                                  "end_token": 2032,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.pseudoTerminal",
                                                      "start_token": 2028,
                                                      "end_token": 2030,
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "start_token": 2028,
                                                          "end_token": 2028,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "pseudoTerminal",
                                                          "start_token": 2030,
                                                          "end_token": 2030,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "sendMessageToChildren",
                                                      "start_token": 2032,
                                                      "end_token": 2032,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "message",
                                                  "start_token": 2034,
                                                  "end_token": 2034,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      });",
                                  "start_token": 2038,
                                  "end_token": 2070,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.processes.forEach((p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      })",
                                      "start_token": 2038,
                                      "end_token": 2069,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.processes.forEach",
                                          "start_token": 2038,
                                          "end_token": 2042,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.processes",
                                              "start_token": 2038,
                                              "end_token": 2040,
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "start_token": 2038,
                                                  "end_token": 2038,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "processes",
                                                  "start_token": 2040,
                                                  "end_token": 2040,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "start_token": 2042,
                                              "end_token": 2042,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(p) => {\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      }",
                                          "start_token": 2044,
                                          "end_token": 2068,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "p",
                                              "start_token": 2045,
                                              "end_token": 2045,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 2045,
                                                  "end_token": 2045,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 2047,
                                              "end_token": 2047,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        if ('connected' in p && p.connected) {\n          p.send(message);\n        }\n      }",
                                              "start_token": 2048,
                                              "end_token": 2068,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if ('connected' in p && p.connected) {\n          p.send(message);\n        }",
                                                  "start_token": 2049,
                                                  "end_token": 2067,
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "'connected' in p && p.connected",
                                                      "start_token": 2051,
                                                      "end_token": 2057,
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'connected' in p",
                                                          "start_token": 2051,
                                                          "end_token": 2053,
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'connected'",
                                                              "start_token": 2051,
                                                              "end_token": 2051,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "InKeyword",
                                                              "label": "in",
                                                              "start_token": 2052,
                                                              "end_token": 2052,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2053,
                                                              "end_token": 2053,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "start_token": 2054,
                                                          "end_token": 2054,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.connected",
                                                          "start_token": 2055,
                                                          "end_token": 2057,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2055,
                                                              "end_token": 2055,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "connected",
                                                              "start_token": 2057,
                                                              "end_token": 2057,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          p.send(message);\n        }",
                                                      "start_token": 2059,
                                                      "end_token": 2067,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.send(message);",
                                                          "start_token": 2060,
                                                          "end_token": 2066,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.send(message)",
                                                              "start_token": 2060,
                                                              "end_token": 2065,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.send",
                                                                  "start_token": 2060,
                                                                  "end_token": 2062,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "p",
                                                                      "start_token": 2060,
                                                                      "end_token": 2060,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "send",
                                                                      "start_token": 2062,
                                                                      "end_token": 2062,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "message",
                                                                  "start_token": 2064,
                                                                  "end_token": 2064,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "process.on('exit', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    });",
                  "start_token": 2075,
                  "end_token": 2123,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "process.on('exit', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    })",
                      "start_token": 2075,
                      "end_token": 2122,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "process.on",
                          "start_token": 2075,
                          "end_token": 2077,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "process",
                              "start_token": 2075,
                              "end_token": 2075,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "start_token": 2077,
                              "end_token": 2077,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'exit'",
                          "start_token": 2079,
                          "end_token": 2079,
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "() => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    }",
                          "start_token": 2081,
                          "end_token": 2121,
                          "children": [
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 2083,
                              "end_token": 2083,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });\n    }",
                              "start_token": 2084,
                              "end_token": 2121,
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      });",
                                  "start_token": 2085,
                                  "end_token": 2120,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      })",
                                      "start_token": 2085,
                                      "end_token": 2119,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.processes.forEach",
                                          "start_token": 2085,
                                          "end_token": 2089,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.processes",
                                              "start_token": 2085,
                                              "end_token": 2087,
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "start_token": 2085,
                                                  "end_token": 2085,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "processes",
                                                  "start_token": 2087,
                                                  "end_token": 2087,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "start_token": 2089,
                                              "end_token": 2089,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      }",
                                          "start_token": 2091,
                                          "end_token": 2118,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "p",
                                              "start_token": 2092,
                                              "end_token": 2092,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 2092,
                                                  "end_token": 2092,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 2094,
                                              "end_token": 2094,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }\n      }",
                                              "start_token": 2095,
                                              "end_token": 2118,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill();\n        }",
                                                  "start_token": 2096,
                                                  "end_token": 2117,
                                                  "children": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "'connected' in p ? p.connected : p.isAlive",
                                                      "start_token": 2098,
                                                      "end_token": 2108,
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'connected' in p",
                                                          "start_token": 2098,
                                                          "end_token": 2100,
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'connected'",
                                                              "start_token": 2098,
                                                              "end_token": 2098,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "InKeyword",
                                                              "label": "in",
                                                              "start_token": 2099,
                                                              "end_token": 2099,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2100,
                                                              "end_token": 2100,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "start_token": 2101,
                                                          "end_token": 2101,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.connected",
                                                          "start_token": 2102,
                                                          "end_token": 2104,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2102,
                                                              "end_token": 2102,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "connected",
                                                              "start_token": 2104,
                                                              "end_token": 2104,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "start_token": 2105,
                                                          "end_token": 2105,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.isAlive",
                                                          "start_token": 2106,
                                                          "end_token": 2108,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2106,
                                                              "end_token": 2106,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "isAlive",
                                                              "start_token": 2108,
                                                              "end_token": 2108,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          p.kill();\n        }",
                                                      "start_token": 2110,
                                                      "end_token": 2117,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.kill();",
                                                          "start_token": 2111,
                                                          "end_token": 2116,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.kill()",
                                                              "start_token": 2111,
                                                              "end_token": 2115,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.kill",
                                                                  "start_token": 2111,
                                                                  "end_token": 2113,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "p",
                                                                      "start_token": 2111,
                                                                      "end_token": 2111,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "kill",
                                                                      "start_token": 2113,
                                                                      "end_token": 2113,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "process.on('SIGINT', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    });",
                  "start_token": 2124,
                  "end_token": 2184,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "process.on('SIGINT', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    })",
                      "start_token": 2124,
                      "end_token": 2183,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "process.on",
                          "start_token": 2124,
                          "end_token": 2126,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "process",
                              "start_token": 2124,
                              "end_token": 2124,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "start_token": 2126,
                              "end_token": 2126,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'SIGINT'",
                          "start_token": 2128,
                          "end_token": 2128,
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "() => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    }",
                          "start_token": 2130,
                          "end_token": 2182,
                          "children": [
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 2132,
                              "end_token": 2132,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // we exit here because we don't need to write anything to cache.\n      process.exit(signalToCode('SIGINT'));\n    }",
                              "start_token": 2133,
                              "end_token": 2182,
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });",
                                  "start_token": 2134,
                                  "end_token": 2170,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      })",
                                      "start_token": 2134,
                                      "end_token": 2169,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.processes.forEach",
                                          "start_token": 2134,
                                          "end_token": 2138,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.processes",
                                              "start_token": 2134,
                                              "end_token": 2136,
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "start_token": 2134,
                                                  "end_token": 2134,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "processes",
                                                  "start_token": 2136,
                                                  "end_token": 2136,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "start_token": 2138,
                                              "end_token": 2138,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      }",
                                          "start_token": 2140,
                                          "end_token": 2168,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "p",
                                              "start_token": 2141,
                                              "end_token": 2141,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 2141,
                                                  "end_token": 2141,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 2143,
                                              "end_token": 2143,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      }",
                                              "start_token": 2144,
                                              "end_token": 2168,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }",
                                                  "start_token": 2145,
                                                  "end_token": 2167,
                                                  "children": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "'connected' in p ? p.connected : p.isAlive",
                                                      "start_token": 2147,
                                                      "end_token": 2157,
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'connected' in p",
                                                          "start_token": 2147,
                                                          "end_token": 2149,
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'connected'",
                                                              "start_token": 2147,
                                                              "end_token": 2147,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "InKeyword",
                                                              "label": "in",
                                                              "start_token": 2148,
                                                              "end_token": 2148,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2149,
                                                              "end_token": 2149,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "start_token": 2150,
                                                          "end_token": 2150,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.connected",
                                                          "start_token": 2151,
                                                          "end_token": 2153,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2151,
                                                              "end_token": 2151,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "connected",
                                                              "start_token": 2153,
                                                              "end_token": 2153,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "start_token": 2154,
                                                          "end_token": 2154,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.isAlive",
                                                          "start_token": 2155,
                                                          "end_token": 2157,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2155,
                                                              "end_token": 2155,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "isAlive",
                                                              "start_token": 2157,
                                                              "end_token": 2157,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          p.kill('SIGTERM');\n        }",
                                                      "start_token": 2159,
                                                      "end_token": 2167,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.kill('SIGTERM');",
                                                          "start_token": 2160,
                                                          "end_token": 2166,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.kill('SIGTERM')",
                                                              "start_token": 2160,
                                                              "end_token": 2165,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.kill",
                                                                  "start_token": 2160,
                                                                  "end_token": 2162,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "p",
                                                                      "start_token": 2160,
                                                                      "end_token": 2160,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "kill",
                                                                      "start_token": 2162,
                                                                      "end_token": 2162,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'SIGTERM'",
                                                                  "start_token": 2164,
                                                                  "end_token": 2164,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "process.exit(signalToCode('SIGINT'));",
                                  "start_token": 2172,
                                  "end_token": 2181,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "process.exit(signalToCode('SIGINT'))",
                                      "start_token": 2172,
                                      "end_token": 2180,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "process.exit",
                                          "start_token": 2172,
                                          "end_token": 2174,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "process",
                                              "start_token": 2172,
                                              "end_token": 2172,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "exit",
                                              "start_token": 2174,
                                              "end_token": 2174,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "signalToCode('SIGINT')",
                                          "start_token": 2176,
                                          "end_token": 2179,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "signalToCode",
                                              "start_token": 2176,
                                              "end_token": 2176,
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'SIGINT'",
                                              "start_token": 2178,
                                              "end_token": 2178,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "process.on('SIGTERM', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });",
                  "start_token": 2185,
                  "end_token": 2236,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "process.on('SIGTERM', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    })",
                      "start_token": 2185,
                      "end_token": 2235,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "process.on",
                          "start_token": 2185,
                          "end_token": 2187,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "process",
                              "start_token": 2185,
                              "end_token": 2185,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "start_token": 2187,
                              "end_token": 2187,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'SIGTERM'",
                          "start_token": 2189,
                          "end_token": 2189,
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "() => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    }",
                          "start_token": 2191,
                          "end_token": 2234,
                          "children": [
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 2193,
                              "end_token": 2193,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    }",
                              "start_token": 2194,
                              "end_token": 2234,
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });",
                                  "start_token": 2195,
                                  "end_token": 2231,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      })",
                                      "start_token": 2195,
                                      "end_token": 2230,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.processes.forEach",
                                          "start_token": 2195,
                                          "end_token": 2199,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.processes",
                                              "start_token": 2195,
                                              "end_token": 2197,
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "start_token": 2195,
                                                  "end_token": 2195,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "processes",
                                                  "start_token": 2197,
                                                  "end_token": 2197,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "start_token": 2199,
                                              "end_token": 2199,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      }",
                                          "start_token": 2201,
                                          "end_token": 2229,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "p",
                                              "start_token": 2202,
                                              "end_token": 2202,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 2202,
                                                  "end_token": 2202,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 2204,
                                              "end_token": 2204,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      }",
                                              "start_token": 2205,
                                              "end_token": 2229,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }",
                                                  "start_token": 2206,
                                                  "end_token": 2228,
                                                  "children": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "'connected' in p ? p.connected : p.isAlive",
                                                      "start_token": 2208,
                                                      "end_token": 2218,
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'connected' in p",
                                                          "start_token": 2208,
                                                          "end_token": 2210,
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'connected'",
                                                              "start_token": 2208,
                                                              "end_token": 2208,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "InKeyword",
                                                              "label": "in",
                                                              "start_token": 2209,
                                                              "end_token": 2209,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2210,
                                                              "end_token": 2210,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "start_token": 2211,
                                                          "end_token": 2211,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.connected",
                                                          "start_token": 2212,
                                                          "end_token": 2214,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2212,
                                                              "end_token": 2212,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "connected",
                                                              "start_token": 2214,
                                                              "end_token": 2214,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "start_token": 2215,
                                                          "end_token": 2215,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.isAlive",
                                                          "start_token": 2216,
                                                          "end_token": 2218,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2216,
                                                              "end_token": 2216,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "isAlive",
                                                              "start_token": 2218,
                                                              "end_token": 2218,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          p.kill('SIGTERM');\n        }",
                                                      "start_token": 2220,
                                                      "end_token": 2228,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.kill('SIGTERM');",
                                                          "start_token": 2221,
                                                          "end_token": 2227,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.kill('SIGTERM')",
                                                              "start_token": 2221,
                                                              "end_token": 2226,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.kill",
                                                                  "start_token": 2221,
                                                                  "end_token": 2223,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "p",
                                                                      "start_token": 2221,
                                                                      "end_token": 2221,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "kill",
                                                                      "start_token": 2223,
                                                                      "end_token": 2223,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'SIGTERM'",
                                                                  "start_token": 2225,
                                                                  "end_token": 2225,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "process.on('SIGHUP', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    });",
                  "start_token": 2237,
                  "end_token": 2288,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "process.on('SIGHUP', () => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    })",
                      "start_token": 2237,
                      "end_token": 2287,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "process.on",
                          "start_token": 2237,
                          "end_token": 2239,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "process",
                              "start_token": 2237,
                              "end_token": 2237,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "start_token": 2239,
                              "end_token": 2239,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'SIGHUP'",
                          "start_token": 2241,
                          "end_token": 2241,
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "() => {\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    }",
                          "start_token": 2243,
                          "end_token": 2286,
                          "children": [
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "start_token": 2245,
                              "end_token": 2245,
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });\n      // no exit here because we expect child processes to terminate which\n      // will store results to the cache and will terminate this process\n    }",
                              "start_token": 2246,
                              "end_token": 2286,
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      });",
                                  "start_token": 2247,
                                  "end_token": 2283,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.processes.forEach((p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      })",
                                      "start_token": 2247,
                                      "end_token": 2282,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.processes.forEach",
                                          "start_token": 2247,
                                          "end_token": 2251,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.processes",
                                              "start_token": 2247,
                                              "end_token": 2249,
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "start_token": 2247,
                                                  "end_token": 2247,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "processes",
                                                  "start_token": 2249,
                                                  "end_token": 2249,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "start_token": 2251,
                                              "end_token": 2251,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(p) => {\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      }",
                                          "start_token": 2253,
                                          "end_token": 2281,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "p",
                                              "start_token": 2254,
                                              "end_token": 2254,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "p",
                                                  "start_token": 2254,
                                                  "end_token": 2254,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 2256,
                                              "end_token": 2256,
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }\n      }",
                                              "start_token": 2257,
                                              "end_token": 2281,
                                              "children": [
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if ('connected' in p ? p.connected : p.isAlive) {\n          p.kill('SIGTERM');\n        }",
                                                  "start_token": 2258,
                                                  "end_token": 2280,
                                                  "children": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "'connected' in p ? p.connected : p.isAlive",
                                                      "start_token": 2260,
                                                      "end_token": 2270,
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "'connected' in p",
                                                          "start_token": 2260,
                                                          "end_token": 2262,
                                                          "children": [
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'connected'",
                                                              "start_token": 2260,
                                                              "end_token": 2260,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "InKeyword",
                                                              "label": "in",
                                                              "start_token": 2261,
                                                              "end_token": 2261,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2262,
                                                              "end_token": 2262,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "start_token": 2263,
                                                          "end_token": 2263,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.connected",
                                                          "start_token": 2264,
                                                          "end_token": 2266,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2264,
                                                              "end_token": 2264,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "connected",
                                                              "start_token": 2266,
                                                              "end_token": 2266,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "start_token": 2267,
                                                          "end_token": 2267,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "p.isAlive",
                                                          "start_token": 2268,
                                                          "end_token": 2270,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "p",
                                                              "start_token": 2268,
                                                              "end_token": 2268,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "isAlive",
                                                              "start_token": 2270,
                                                              "end_token": 2270,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          p.kill('SIGTERM');\n        }",
                                                      "start_token": 2272,
                                                      "end_token": 2280,
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "p.kill('SIGTERM');",
                                                          "start_token": 2273,
                                                          "end_token": 2279,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "p.kill('SIGTERM')",
                                                              "start_token": 2273,
                                                              "end_token": 2278,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "p.kill",
                                                                  "start_token": 2273,
                                                                  "end_token": 2275,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "p",
                                                                      "start_token": 2273,
                                                                      "end_token": 2273,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "kill",
                                                                      "start_token": 2275,
                                                                      "end_token": 2275,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'SIGTERM'",
                                                                  "start_token": 2277,
                                                                  "end_token": 2277,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const colors = [\n  chalk.green,\n  chalk.greenBright,\n  chalk.red,\n  chalk.redBright,\n  chalk.cyan,\n  chalk.cyanBright,\n  chalk.yellow,\n  chalk.yellowBright,\n  chalk.magenta,\n  chalk.magentaBright,\n];",
      "start_token": 2291,
      "end_token": 2336,
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const colors = [\n  chalk.green,\n  chalk.greenBright,\n  chalk.red,\n  chalk.redBright,\n  chalk.cyan,\n  chalk.cyanBright,\n  chalk.yellow,\n  chalk.yellowBright,\n  chalk.magenta,\n  chalk.magentaBright,\n]",
          "start_token": 2291,
          "end_token": 2335,
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "colors = [\n  chalk.green,\n  chalk.greenBright,\n  chalk.red,\n  chalk.redBright,\n  chalk.cyan,\n  chalk.cyanBright,\n  chalk.yellow,\n  chalk.yellowBright,\n  chalk.magenta,\n  chalk.magentaBright,\n]",
              "start_token": 2292,
              "end_token": 2335,
              "children": [
                {
                  "type": "Identifier",
                  "label": "colors",
                  "start_token": 2292,
                  "end_token": 2292,
                  "children": []
                },
                {
                  "type": "ArrayLiteralExpression",
                  "label": "[\n  chalk.green,\n  chalk.greenBright,\n  chalk.red,\n  chalk.redBright,\n  chalk.cyan,\n  chalk.cyanBright,\n  chalk.yellow,\n  chalk.yellowBright,\n  chalk.magenta,\n  chalk.magentaBright,\n]",
                  "start_token": 2294,
                  "end_token": 2335,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.green",
                      "start_token": 2295,
                      "end_token": 2297,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2295,
                          "end_token": 2295,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "green",
                          "start_token": 2297,
                          "end_token": 2297,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.greenBright",
                      "start_token": 2299,
                      "end_token": 2301,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2299,
                          "end_token": 2299,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "greenBright",
                          "start_token": 2301,
                          "end_token": 2301,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.red",
                      "start_token": 2303,
                      "end_token": 2305,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2303,
                          "end_token": 2303,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "red",
                          "start_token": 2305,
                          "end_token": 2305,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.redBright",
                      "start_token": 2307,
                      "end_token": 2309,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2307,
                          "end_token": 2307,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "redBright",
                          "start_token": 2309,
                          "end_token": 2309,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.cyan",
                      "start_token": 2311,
                      "end_token": 2313,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2311,
                          "end_token": 2311,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cyan",
                          "start_token": 2313,
                          "end_token": 2313,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.cyanBright",
                      "start_token": 2315,
                      "end_token": 2317,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2315,
                          "end_token": 2315,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cyanBright",
                          "start_token": 2317,
                          "end_token": 2317,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.yellow",
                      "start_token": 2319,
                      "end_token": 2321,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2319,
                          "end_token": 2319,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "yellow",
                          "start_token": 2321,
                          "end_token": 2321,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.yellowBright",
                      "start_token": 2323,
                      "end_token": 2325,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2323,
                          "end_token": 2323,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "yellowBright",
                          "start_token": 2325,
                          "end_token": 2325,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.magenta",
                      "start_token": 2327,
                      "end_token": 2329,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2327,
                          "end_token": 2327,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "magenta",
                          "start_token": 2329,
                          "end_token": 2329,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "chalk.magentaBright",
                      "start_token": 2331,
                      "end_token": 2333,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "chalk",
                          "start_token": 2331,
                          "end_token": 2331,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "magentaBright",
                          "start_token": 2333,
                          "end_token": 2333,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "function getColor(projectName: string) {\n  let code = 0;\n  for (let i = 0; i < projectName.length; ++i) {\n    code += projectName.charCodeAt(i);\n  }\n  const colorIndex = code % colors.length;\n  return colors[colorIndex];\n}",
      "start_token": 2337,
      "end_token": 2393,
      "children": [
        {
          "type": "Identifier",
          "label": "getColor",
          "start_token": 2338,
          "end_token": 2338,
          "children": []
        },
        {
          "type": "Parameter",
          "label": "projectName: string",
          "start_token": 2340,
          "end_token": 2342,
          "children": [
            {
              "type": "Identifier",
              "label": "projectName",
              "start_token": 2340,
              "end_token": 2340,
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "start_token": 2342,
              "end_token": 2342,
              "children": []
            }
          ]
        },
        {
          "type": "Block",
          "label": "{\n  let code = 0;\n  for (let i = 0; i < projectName.length; ++i) {\n    code += projectName.charCodeAt(i);\n  }\n  const colorIndex = code % colors.length;\n  return colors[colorIndex];\n}",
          "start_token": 2344,
          "end_token": 2393,
          "children": [
            {
              "type": "FirstStatement",
              "label": "let code = 0;",
              "start_token": 2345,
              "end_token": 2349,
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "let code = 0",
                  "start_token": 2345,
                  "end_token": 2348,
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "code = 0",
                      "start_token": 2346,
                      "end_token": 2348,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "code",
                          "start_token": 2346,
                          "end_token": 2346,
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "start_token": 2348,
                          "end_token": 2348,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ForStatement",
              "label": "for (let i = 0; i < projectName.length; ++i) {\n    code += projectName.charCodeAt(i);\n  }",
              "start_token": 2350,
              "end_token": 2378,
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "let i = 0",
                  "start_token": 2352,
                  "end_token": 2355,
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "i = 0",
                      "start_token": 2353,
                      "end_token": 2355,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "start_token": 2353,
                          "end_token": 2353,
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "start_token": 2355,
                          "end_token": 2355,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BinaryExpression",
                  "label": "i < projectName.length",
                  "start_token": 2357,
                  "end_token": 2361,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "i",
                      "start_token": 2357,
                      "end_token": 2357,
                      "children": []
                    },
                    {
                      "type": "FirstBinaryOperator",
                      "label": "<",
                      "start_token": 2358,
                      "end_token": 2358,
                      "children": []
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "projectName.length",
                      "start_token": 2359,
                      "end_token": 2361,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "projectName",
                          "start_token": 2359,
                          "end_token": 2359,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "length",
                          "start_token": 2361,
                          "end_token": 2361,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "PrefixUnaryExpression",
                  "label": "++i",
                  "start_token": 2363,
                  "end_token": 2365,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "i",
                      "start_token": 2365,
                      "end_token": 2365,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    code += projectName.charCodeAt(i);\n  }",
                  "start_token": 2367,
                  "end_token": 2378,
                  "children": [
                    {
                      "type": "ExpressionStatement",
                      "label": "code += projectName.charCodeAt(i);",
                      "start_token": 2368,
                      "end_token": 2377,
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "code += projectName.charCodeAt(i)",
                          "start_token": 2368,
                          "end_token": 2376,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "code",
                              "start_token": 2368,
                              "end_token": 2368,
                              "children": []
                            },
                            {
                              "type": "FirstCompoundAssignment",
                              "label": "+=",
                              "start_token": 2369,
                              "end_token": 2370,
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "projectName.charCodeAt(i)",
                              "start_token": 2371,
                              "end_token": 2376,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "projectName.charCodeAt",
                                  "start_token": 2371,
                                  "end_token": 2373,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "projectName",
                                      "start_token": 2371,
                                      "end_token": 2371,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "charCodeAt",
                                      "start_token": 2373,
                                      "end_token": 2373,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "start_token": 2375,
                                  "end_token": 2375,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "FirstStatement",
              "label": "const colorIndex = code % colors.length;",
              "start_token": 2379,
              "end_token": 2386,
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "const colorIndex = code % colors.length",
                  "start_token": 2379,
                  "end_token": 2385,
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "colorIndex = code % colors.length",
                      "start_token": 2380,
                      "end_token": 2385,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "colorIndex",
                          "start_token": 2380,
                          "end_token": 2380,
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "code % colors.length",
                          "start_token": 2382,
                          "end_token": 2385,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "code",
                              "start_token": 2382,
                              "end_token": 2382,
                              "children": []
                            },
                            {
                              "type": "PercentToken",
                              "label": "%",
                              "start_token": -1,
                              "end_token": -1,
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "colors.length",
                              "start_token": 2383,
                              "end_token": 2385,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "colors",
                                  "start_token": 2383,
                                  "end_token": 2383,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "length",
                                  "start_token": 2385,
                                  "end_token": 2385,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "label": "return colors[colorIndex];",
              "start_token": 2387,
              "end_token": 2392,
              "children": [
                {
                  "type": "ElementAccessExpression",
                  "label": "colors[colorIndex]",
                  "start_token": 2388,
                  "end_token": 2391,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "colors",
                      "start_token": 2388,
                      "end_token": 2388,
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "colorIndex",
                      "start_token": 2390,
                      "end_token": 2390,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "function logClearLineToPrefixTransformer(prefix: string) {\n  let prevChunk = null;\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    },\n  });\n}",
      "start_token": 2394,
      "end_token": 2482,
      "children": [
        {
          "type": "Identifier",
          "label": "logClearLineToPrefixTransformer",
          "start_token": 2395,
          "end_token": 2395,
          "children": []
        },
        {
          "type": "Parameter",
          "label": "prefix: string",
          "start_token": 2397,
          "end_token": 2399,
          "children": [
            {
              "type": "Identifier",
              "label": "prefix",
              "start_token": 2397,
              "end_token": 2397,
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "start_token": 2399,
              "end_token": 2399,
              "children": []
            }
          ]
        },
        {
          "type": "Block",
          "label": "{\n  let prevChunk = null;\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    },\n  });\n}",
          "start_token": 2401,
          "end_token": 2482,
          "children": [
            {
              "type": "FirstStatement",
              "label": "let prevChunk = null;",
              "start_token": 2402,
              "end_token": 2406,
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "let prevChunk = null",
                  "start_token": 2402,
                  "end_token": 2405,
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "prevChunk = null",
                      "start_token": 2403,
                      "end_token": 2405,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "prevChunk",
                          "start_token": 2403,
                          "end_token": 2403,
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "start_token": 2405,
                          "end_token": 2405,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "label": "return new Transform({\n    transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    },\n  });",
              "start_token": 2407,
              "end_token": 2481,
              "children": [
                {
                  "type": "NewExpression",
                  "label": "new Transform({\n    transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    },\n  })",
                  "start_token": 2408,
                  "end_token": 2480,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Transform",
                      "start_token": 2409,
                      "end_token": 2409,
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n    transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    },\n  }",
                      "start_token": 2411,
                      "end_token": 2479,
                      "children": [
                        {
                          "type": "MethodDeclaration",
                          "label": "transform(chunk, _encoding, callback) {\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    }",
                          "start_token": 2412,
                          "end_token": 2477,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "transform",
                              "start_token": 2412,
                              "end_token": 2412,
                              "children": []
                            },
                            {
                              "type": "Parameter",
                              "label": "chunk",
                              "start_token": 2414,
                              "end_token": 2414,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "chunk",
                                  "start_token": 2414,
                                  "end_token": 2414,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "_encoding",
                              "start_token": 2416,
                              "end_token": 2416,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "_encoding",
                                  "start_token": 2416,
                                  "end_token": 2416,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "callback",
                              "start_token": 2418,
                              "end_token": 2418,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "callback",
                                  "start_token": 2418,
                                  "end_token": 2418,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n      if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }\n      this.push(chunk);\n      prevChunk = chunk;\n      callback();\n    }",
                              "start_token": 2420,
                              "end_token": 2477,
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (prevChunk && prevChunk.toString() === '\\x1b[2K') {\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }",
                                  "start_token": 2421,
                                  "end_token": 2461,
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "prevChunk && prevChunk.toString() === '\\x1b[2K'",
                                      "start_token": 2423,
                                      "end_token": 2431,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "prevChunk",
                                          "start_token": 2423,
                                          "end_token": 2423,
                                          "children": []
                                        },
                                        {
                                          "type": "AmpersandAmpersandToken",
                                          "label": "&&",
                                          "start_token": 2424,
                                          "end_token": 2424,
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "prevChunk.toString() === '\\x1b[2K'",
                                          "start_token": 2425,
                                          "end_token": 2431,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "prevChunk.toString()",
                                              "start_token": 2425,
                                              "end_token": 2429,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "prevChunk.toString",
                                                  "start_token": 2425,
                                                  "end_token": 2427,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "prevChunk",
                                                      "start_token": 2425,
                                                      "end_token": 2425,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "toString",
                                                      "start_token": 2427,
                                                      "end_token": 2427,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsEqualsEqualsToken",
                                              "label": "===",
                                              "start_token": 2430,
                                              "end_token": 2430,
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'\\x1b[2K'",
                                              "start_token": 2431,
                                              "end_token": 2431,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);\n      }",
                                      "start_token": 2433,
                                      "end_token": 2461,
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix);",
                                          "start_token": 2434,
                                          "end_token": 2460,
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "chunk = chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix)",
                                              "start_token": 2434,
                                              "end_token": 2459,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "chunk",
                                                  "start_token": 2434,
                                                  "end_token": 2434,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstAssignment",
                                                  "label": "=",
                                                  "start_token": 2435,
                                                  "end_token": 2435,
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "chunk.toString().replace(/\\x1b\\[1G/g, (m) => m + prefix)",
                                                  "start_token": 2436,
                                                  "end_token": 2459,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "chunk.toString().replace",
                                                      "start_token": 2436,
                                                      "end_token": 2442,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "chunk.toString()",
                                                          "start_token": 2436,
                                                          "end_token": 2440,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "chunk.toString",
                                                              "start_token": 2436,
                                                              "end_token": 2438,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "chunk",
                                                                  "start_token": 2436,
                                                                  "end_token": 2436,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toString",
                                                                  "start_token": 2438,
                                                                  "end_token": 2438,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "replace",
                                                          "start_token": 2442,
                                                          "end_token": 2442,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "RegularExpressionLiteral",
                                                      "label": "/\\x1b\\[1G/g",
                                                      "start_token": 2444,
                                                      "end_token": 2450,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ArrowFunction",
                                                      "label": "(m) => m + prefix",
                                                      "start_token": 2452,
                                                      "end_token": 2458,
                                                      "children": [
                                                        {
                                                          "type": "Parameter",
                                                          "label": "m",
                                                          "start_token": 2453,
                                                          "end_token": 2453,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "m",
                                                              "start_token": 2453,
                                                              "end_token": 2453,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "EqualsGreaterThanToken",
                                                          "label": "=>",
                                                          "start_token": 2455,
                                                          "end_token": 2455,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "m + prefix",
                                                          "start_token": 2456,
                                                          "end_token": 2458,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "m",
                                                              "start_token": 2456,
                                                              "end_token": 2456,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PlusToken",
                                                              "label": "+",
                                                              "start_token": 2457,
                                                              "end_token": 2457,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "prefix",
                                                              "start_token": 2458,
                                                              "end_token": 2458,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.push(chunk);",
                                  "start_token": 2462,
                                  "end_token": 2468,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.push(chunk)",
                                      "start_token": 2462,
                                      "end_token": 2467,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.push",
                                          "start_token": 2462,
                                          "end_token": 2464,
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "start_token": 2462,
                                              "end_token": 2462,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "push",
                                              "start_token": 2464,
                                              "end_token": 2464,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "chunk",
                                          "start_token": 2466,
                                          "end_token": 2466,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "prevChunk = chunk;",
                                  "start_token": 2469,
                                  "end_token": 2472,
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "prevChunk = chunk",
                                      "start_token": 2469,
                                      "end_token": 2471,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "prevChunk",
                                          "start_token": 2469,
                                          "end_token": 2469,
                                          "children": []
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "start_token": 2470,
                                          "end_token": 2470,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "chunk",
                                          "start_token": 2471,
                                          "end_token": 2471,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "callback();",
                                  "start_token": 2473,
                                  "end_token": 2476,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "callback()",
                                      "start_token": 2473,
                                      "end_token": 2475,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "callback",
                                          "start_token": 2473,
                                          "end_token": 2473,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "function addPrefixTransformer(prefix?: string) {\n  const newLineSeparator = process.platform.startsWith('win') ? '\\r\\n' : '\\n';\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    },\n  });\n}",
      "start_token": 2483,
      "end_token": 2592,
      "children": [
        {
          "type": "Identifier",
          "label": "addPrefixTransformer",
          "start_token": 2484,
          "end_token": 2484,
          "children": []
        },
        {
          "type": "Parameter",
          "label": "prefix?: string",
          "start_token": 2486,
          "end_token": 2489,
          "children": [
            {
              "type": "Identifier",
              "label": "prefix",
              "start_token": 2486,
              "end_token": 2486,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 2487,
              "end_token": 2487,
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "start_token": 2489,
              "end_token": 2489,
              "children": []
            }
          ]
        },
        {
          "type": "Block",
          "label": "{\n  const newLineSeparator = process.platform.startsWith('win') ? '\\r\\n' : '\\n';\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    },\n  });\n}",
          "start_token": 2491,
          "end_token": 2592,
          "children": [
            {
              "type": "FirstStatement",
              "label": "const newLineSeparator = process.platform.startsWith('win') ? '\\r\\n' : '\\n';",
              "start_token": 2492,
              "end_token": 2507,
              "children": [
                {
                  "type": "VariableDeclarationList",
                  "label": "const newLineSeparator = process.platform.startsWith('win') ? '\\r\\n' : '\\n'",
                  "start_token": 2492,
                  "end_token": 2506,
                  "children": [
                    {
                      "type": "VariableDeclaration",
                      "label": "newLineSeparator = process.platform.startsWith('win') ? '\\r\\n' : '\\n'",
                      "start_token": 2493,
                      "end_token": 2506,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "newLineSeparator",
                          "start_token": 2493,
                          "end_token": 2493,
                          "children": []
                        },
                        {
                          "type": "ConditionalExpression",
                          "label": "process.platform.startsWith('win') ? '\\r\\n' : '\\n'",
                          "start_token": 2495,
                          "end_token": 2506,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "process.platform.startsWith('win')",
                              "start_token": 2495,
                              "end_token": 2502,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "process.platform.startsWith",
                                  "start_token": 2495,
                                  "end_token": 2499,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "process.platform",
                                      "start_token": 2495,
                                      "end_token": 2497,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "process",
                                          "start_token": 2495,
                                          "end_token": 2495,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "platform",
                                          "start_token": 2497,
                                          "end_token": 2497,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "startsWith",
                                      "start_token": 2499,
                                      "end_token": 2499,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'win'",
                                  "start_token": 2501,
                                  "end_token": 2501,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "QuestionToken",
                              "label": "?",
                              "start_token": 2503,
                              "end_token": 2503,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'\\r\\n'",
                              "start_token": 2504,
                              "end_token": 2504,
                              "children": []
                            },
                            {
                              "type": "ColonToken",
                              "label": ":",
                              "start_token": 2505,
                              "end_token": 2505,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'\\n'",
                              "start_token": 2506,
                              "end_token": 2506,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "label": "return new Transform({\n    transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    },\n  });",
              "start_token": 2508,
              "end_token": 2591,
              "children": [
                {
                  "type": "NewExpression",
                  "label": "new Transform({\n    transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    },\n  })",
                  "start_token": 2509,
                  "end_token": 2590,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Transform",
                      "start_token": 2510,
                      "end_token": 2510,
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n    transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    },\n  }",
                      "start_token": 2512,
                      "end_token": 2589,
                      "children": [
                        {
                          "type": "MethodDeclaration",
                          "label": "transform(chunk, _encoding, callback) {\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    }",
                          "start_token": 2513,
                          "end_token": 2587,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "transform",
                              "start_token": 2513,
                              "end_token": 2513,
                              "children": []
                            },
                            {
                              "type": "Parameter",
                              "label": "chunk",
                              "start_token": 2515,
                              "end_token": 2515,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "chunk",
                                  "start_token": 2515,
                                  "end_token": 2515,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "_encoding",
                              "start_token": 2517,
                              "end_token": 2517,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "_encoding",
                                  "start_token": 2517,
                                  "end_token": 2517,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "callback",
                              "start_token": 2519,
                              "end_token": 2519,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "callback",
                                  "start_token": 2519,
                                  "end_token": 2519,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n      const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n      list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );\n      callback();\n    }",
                              "start_token": 2521,
                              "end_token": 2587,
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);",
                                  "start_token": 2522,
                                  "end_token": 2549,
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "const list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g)",
                                      "start_token": 2522,
                                      "end_token": 2548,
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "list = chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g)",
                                          "start_token": 2523,
                                          "end_token": 2548,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "list",
                                              "start_token": 2523,
                                              "end_token": 2523,
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "chunk.toString().split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g)",
                                              "start_token": 2525,
                                              "end_token": 2548,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "chunk.toString().split",
                                                  "start_token": 2525,
                                                  "end_token": 2531,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "chunk.toString()",
                                                      "start_token": 2525,
                                                      "end_token": 2529,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "chunk.toString",
                                                          "start_token": 2525,
                                                          "end_token": 2527,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "chunk",
                                                              "start_token": 2525,
                                                              "end_token": 2525,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "toString",
                                                              "start_token": 2527,
                                                              "end_token": 2527,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "split",
                                                      "start_token": 2531,
                                                      "end_token": 2531,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "RegularExpressionLiteral",
                                                  "label": "/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g",
                                                  "start_token": 2533,
                                                  "end_token": 2547,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        );",
                                  "start_token": 2550,
                                  "end_token": 2582,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "list\n        .filter(Boolean)\n        .forEach((m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )\n        )",
                                      "start_token": 2550,
                                      "end_token": 2581,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "list\n        .filter(Boolean)\n        .forEach",
                                          "start_token": 2550,
                                          "end_token": 2557,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "list\n        .filter(Boolean)",
                                              "start_token": 2550,
                                              "end_token": 2555,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "list\n        .filter",
                                                  "start_token": 2550,
                                                  "end_token": 2552,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "list",
                                                      "start_token": 2550,
                                                      "end_token": 2550,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "filter",
                                                      "start_token": 2552,
                                                      "end_token": 2552,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "Boolean",
                                                  "start_token": 2554,
                                                  "end_token": 2554,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "start_token": 2557,
                                              "end_token": 2557,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(m) =>\n          this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )",
                                          "start_token": 2559,
                                          "end_token": 2580,
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "m",
                                              "start_token": 2560,
                                              "end_token": 2560,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "m",
                                                  "start_token": 2560,
                                                  "end_token": 2560,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "start_token": 2562,
                                              "end_token": 2562,
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.push(\n            prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator\n          )",
                                              "start_token": 2563,
                                              "end_token": 2580,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.push",
                                                  "start_token": 2563,
                                                  "end_token": 2565,
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "start_token": 2563,
                                                      "end_token": 2563,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "push",
                                                      "start_token": 2565,
                                                      "end_token": 2565,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ConditionalExpression",
                                                  "label": "prefix ? prefix + ' ' + m + newLineSeparator : m + newLineSeparator",
                                                  "start_token": 2567,
                                                  "end_token": 2579,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "prefix",
                                                      "start_token": 2567,
                                                      "end_token": 2567,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "QuestionToken",
                                                      "label": "?",
                                                      "start_token": 2568,
                                                      "end_token": 2568,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "prefix + ' ' + m + newLineSeparator",
                                                      "start_token": 2569,
                                                      "end_token": 2575,
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "prefix + ' ' + m",
                                                          "start_token": 2569,
                                                          "end_token": 2573,
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "prefix + ' '",
                                                              "start_token": 2569,
                                                              "end_token": 2571,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "prefix",
                                                                  "start_token": 2569,
                                                                  "end_token": 2569,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PlusToken",
                                                                  "label": "+",
                                                                  "start_token": 2570,
                                                                  "end_token": 2570,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "' '",
                                                                  "start_token": 2571,
                                                                  "end_token": 2571,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "PlusToken",
                                                              "label": "+",
                                                              "start_token": 2572,
                                                              "end_token": 2572,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "m",
                                                              "start_token": 2573,
                                                              "end_token": 2573,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "PlusToken",
                                                          "label": "+",
                                                          "start_token": 2574,
                                                          "end_token": 2574,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "newLineSeparator",
                                                          "start_token": 2575,
                                                          "end_token": 2575,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ColonToken",
                                                      "label": ":",
                                                      "start_token": 2576,
                                                      "end_token": 2576,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "m + newLineSeparator",
                                                      "start_token": 2577,
                                                      "end_token": 2579,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "m",
                                                          "start_token": 2577,
                                                          "end_token": 2577,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PlusToken",
                                                          "label": "+",
                                                          "start_token": 2578,
                                                          "end_token": 2578,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "newLineSeparator",
                                                          "start_token": 2579,
                                                          "end_token": 2579,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "callback();",
                                  "start_token": 2583,
                                  "end_token": 2586,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "callback()",
                                      "start_token": 2583,
                                      "end_token": 2585,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "callback",
                                          "start_token": 2583,
                                          "end_token": 2583,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "start_token": -1,
      "end_token": -1,
      "children": []
    }
  ]
}