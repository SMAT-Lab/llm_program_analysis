{
  "type": "SourceFile",
  "label": "import router from '@system.router';\nimport { RouterOptions } from '@system.router';\nimport { Log } from '../utils/Log';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { JumpSourceToMain } from '../models/JumpSourceToMain';\nimport { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';\nimport { showToast } from '../utils/UiUtil';\nimport { userFileModel } from '../base/UserFileModel';\nimport { AlbumDataItem } from '../common/AlbumDataItem';\nimport { LazyItem } from '../common/ItemDataSource';\nimport { MediaConstants } from '../constants/MediaConstants';\nimport { AlbumsDataSource } from '../common/AlbumsDataSource';\n\nconst TAG = 'AlbumSetNewMenuOperation';\n\nexport class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }\n\n  private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }\n\n  private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }\n\n  onCompleted(): void {\n    this.onCompletedBindImpl();\n  }\n\n  private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }\n\n  private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }\n}\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import router from '@system.router';",
      "children": [
        {
          "type": "ImportClause",
          "label": "router",
          "children": [
            {
              "type": "Identifier",
              "label": "router",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@system.router'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { RouterOptions } from '@system.router';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ RouterOptions }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ RouterOptions }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "RouterOptions",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "RouterOptions",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@system.router'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Log } from '../utils/Log';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Log }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Log }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Log",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Log",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/Log'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { getResourceString } from '../utils/ResourceUtils';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ getResourceString }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ getResourceString }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "getResourceString",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getResourceString",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/ResourceUtils'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { BroadcastConstants } from '../constants/BroadcastConstants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ BroadcastConstants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ BroadcastConstants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "BroadcastConstants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BroadcastConstants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/BroadcastConstants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MenuOperationCallback } from './MenuOperationCallback';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MenuOperationCallback }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MenuOperationCallback }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MenuOperationCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuOperationCallback",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./MenuOperationCallback'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MenuOperation } from './MenuOperation';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MenuOperation }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MenuOperation }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MenuOperation",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuOperation",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./MenuOperation'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MenuContext } from './MenuContext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MenuContext }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MenuContext }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MenuContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuContext",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./MenuContext'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { JumpSourceToMain } from '../models/JumpSourceToMain';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ JumpSourceToMain }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ JumpSourceToMain }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "JumpSourceToMain",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "JumpSourceToMain",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../models/JumpSourceToMain'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { SimpleAlbumDataItem } from '../common/SimpleAlbumDataItem';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ SimpleAlbumDataItem }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ SimpleAlbumDataItem }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "SimpleAlbumDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SimpleAlbumDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/SimpleAlbumDataItem'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { showToast } from '../utils/UiUtil';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ showToast }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ showToast }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "showToast",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "showToast",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/UiUtil'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { userFileModel } from '../base/UserFileModel';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ userFileModel }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ userFileModel }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "userFileModel",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "userFileModel",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../base/UserFileModel'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { AlbumDataItem } from '../common/AlbumDataItem';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ AlbumDataItem }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ AlbumDataItem }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "AlbumDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "AlbumDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/AlbumDataItem'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { LazyItem } from '../common/ItemDataSource';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ LazyItem }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ LazyItem }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "LazyItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "LazyItem",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/ItemDataSource'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MediaConstants } from '../constants/MediaConstants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MediaConstants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MediaConstants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MediaConstants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MediaConstants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/MediaConstants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { AlbumsDataSource } from '../common/AlbumsDataSource';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ AlbumsDataSource }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ AlbumsDataSource }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "AlbumsDataSource",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "AlbumsDataSource",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/AlbumsDataSource'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG = 'AlbumSetNewMenuOperation';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG = 'AlbumSetNewMenuOperation'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG = 'AlbumSetNewMenuOperation'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'AlbumSetNewMenuOperation'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "export class AlbumSetNewMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n  private onOperationEnd: Function;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }\n\n  private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }\n\n  private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }\n\n  private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }\n\n  onCompleted(): void {\n    this.onCompletedBindImpl();\n  }\n\n  private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }\n\n  private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }\n\n  private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }\n}",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "Identifier",
          "label": "AlbumSetNewMenuOperation",
          "children": []
        },
        {
          "type": "HeritageClause",
          "label": "implements MenuOperation, MenuOperationCallback",
          "children": [
            {
              "type": "ExpressionWithTypeArguments",
              "label": "MenuOperation",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MenuOperation",
                  "children": []
                }
              ]
            },
            {
              "type": "ExpressionWithTypeArguments",
              "label": "MenuOperationCallback",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MenuOperationCallback",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private menuContext: MenuContext;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "menuContext",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "MenuContext",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MenuContext",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private onOperationEnd: Function;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "onOperationEnd",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Function",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Function",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }",
          "children": [
            {
              "type": "Parameter",
              "label": "menuContext: MenuContext",
              "children": [
                {
                  "type": "Identifier",
                  "label": "menuContext",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "MenuContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuContext",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.menuContext = menuContext;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.menuContext = menuContext;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.menuContext = menuContext",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "menuContext",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "menuContext",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "doAction",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.menuContext == null",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "menuContext",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'menuContext is null, return');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'menuContext is null, return')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'menuContext is null, return'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "getResourceString($r('app.string.album_new_album')).then<void, void>((name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "getResourceString($r('app.string.album_new_album')).then",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "getResourceString($r('app.string.album_new_album'))",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "getResourceString",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "$r('app.string.album_new_album')",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "$r",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'app.string.album_new_album'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "then",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "VoidKeyword",
                          "label": "void",
                          "children": []
                        },
                        {
                          "type": "VoidKeyword",
                          "label": "void",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(name: string): void => {\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "name: string",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "name",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Log.info(TAG, 'The display name is ' + name);\n      let newAlbumDisplayName = this.getNewAlbumDefaultName(name);\n      Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);\n      this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);\n      this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n\n      this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Log.info(TAG, 'The display name is ' + name);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Log.info(TAG, 'The display name is ' + name)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Log.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Log",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'The display name is ' + name",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'The display name is '",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstStatement",
                                  "label": "let newAlbumDisplayName = this.getNewAlbumDefaultName(name);",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let newAlbumDisplayName = this.getNewAlbumDefaultName(name)",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "newAlbumDisplayName = this.getNewAlbumDefaultName(name)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "newAlbumDisplayName",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.getNewAlbumDefaultName(name)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getNewAlbumDefaultName",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getNewAlbumDefaultName",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "name",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Log.info(TAG, `The display name of new album is ${newAlbumDisplayName}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Log.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Log",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`The display name of new album is ${newAlbumDisplayName}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`The display name of new album is ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "newAlbumDisplayName}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "newAlbumDisplayName",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName);",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.confirmCallback = (displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.confirmCallback",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "confirmCallback",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(displayName: string): Promise<void> => this.confirmCallbackBindImpl(displayName)",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "displayName: string",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "displayName",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringKeyword",
                                                  "label": "string",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Promise<void>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Promise",
                                                  "children": []
                                                },
                                                {
                                                  "type": "VoidKeyword",
                                                  "label": "void",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.confirmCallbackBindImpl(displayName)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.confirmCallbackBindImpl",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "confirmCallbackBindImpl",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "displayName",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.cancelCallback = (): void => this.cancelCallbackBindImpl();",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.cancelCallback = (): void => this.cancelCallbackBindImpl()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cancelCallback",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cancelCallback",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(): void => this.cancelCallbackBindImpl()",
                                          "children": [
                                            {
                                              "type": "VoidKeyword",
                                              "label": "void",
                                              "children": []
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.cancelCallbackBindImpl()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.cancelCallbackBindImpl",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "cancelCallbackBindImpl",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback]);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.menuContext.broadCast.emit(BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG,\n          [newAlbumDisplayName, this.confirmCallback, this.cancelCallback])",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.menuContext.broadCast.emit",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.menuContext.broadCast",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.menuContext",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "menuContext",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "broadCast",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "emit",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "BroadcastConstants.SHOW_NEW_ALBUM_PHOTO_DIALOG",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "BroadcastConstants",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SHOW_NEW_ALBUM_PHOTO_DIALOG",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrayLiteralExpression",
                                          "label": "[newAlbumDisplayName, this.confirmCallback, this.cancelCallback]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "newAlbumDisplayName",
                                              "children": []
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.confirmCallback",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "confirmCallback",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cancelCallback",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cancelCallback",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async confirmCallback(displayName: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(displayName);\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "confirmCallback",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "displayName: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "displayName",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return await this.confirmCallbackBindImpl(displayName);\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return await this.confirmCallbackBindImpl(displayName);",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.confirmCallbackBindImpl(displayName)",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.confirmCallbackBindImpl(displayName)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.confirmCallbackBindImpl",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "confirmCallbackBindImpl",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "displayName",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async confirmCallbackBindImpl(displayName: string): Promise<void> {\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "confirmCallbackBindImpl",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "displayName: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "displayName",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);\n    let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);\n    if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }\n    this.onOperationEnd = this.menuContext.onOperationEnd;\n    let onOperationStart: Function = this.menuContext.onOperationStart;\n    if (onOperationStart != null) onOperationStart();\n\n    if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'AlbumSet new album confirm and the new name is: ' + displayName)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'AlbumSet new album confirm and the new name is: ' + displayName",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'AlbumSet new album confirm and the new name is: '",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "displayName",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "simpleAlbumDataItem: SimpleAlbumDataItem = new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "simpleAlbumDataItem",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "SimpleAlbumDataItem",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "SimpleAlbumDataItem",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "NewExpression",
                              "label": "new SimpleAlbumDataItem('', displayName, '', '', '', -1, -1)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "SimpleAlbumDataItem",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "''",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "displayName",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "''",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "''",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "''",
                                  "children": []
                                },
                                {
                                  "type": "PrefixUnaryExpression",
                                  "label": "-1",
                                  "children": [
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PrefixUnaryExpression",
                                  "label": "-1",
                                  "children": [
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (displayName != undefined && displayName != null) {\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "displayName != undefined && displayName != null",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "displayName != undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "displayName",
                              "children": []
                            },
                            {
                              "type": "ExclamationEqualsToken",
                              "label": "!=",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "AmpersandAmpersandToken",
                          "label": "&&",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "displayName != null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "displayName",
                              "children": []
                            },
                            {
                              "type": "ExclamationEqualsToken",
                              "label": "!=",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let isExit = await this.checkAlbumExit(simpleAlbumDataItem);\n      if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let isExit = await this.checkAlbumExit(simpleAlbumDataItem);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let isExit = await this.checkAlbumExit(simpleAlbumDataItem)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "isExit = await this.checkAlbumExit(simpleAlbumDataItem)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isExit",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.checkAlbumExit(simpleAlbumDataItem)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.checkAlbumExit(simpleAlbumDataItem)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.checkAlbumExit",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "checkAlbumExit",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "simpleAlbumDataItem",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (isExit) {\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isExit",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n        getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })\n        return;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n            showToast(message);\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "getResourceString($r('app.string.name_already_use')).then",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "getResourceString($r('app.string.name_already_use'))",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "getResourceString",
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "$r('app.string.name_already_use')",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "$r",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "'app.string.name_already_use'",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "then",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "VoidKeyword",
                                          "label": "void",
                                          "children": []
                                        },
                                        {
                                          "type": "VoidKeyword",
                                          "label": "void",
                                          "children": []
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(message: string): void => {\n            showToast(message);\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "message: string",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "message",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringKeyword",
                                                  "label": "string",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "VoidKeyword",
                                              "label": "void",
                                              "children": []
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n            showToast(message);\n        }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "showToast(message);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "showToast(message)",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "showToast",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "message",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ReturnStatement",
                                  "label": "return;",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.onOperationEnd = this.menuContext.onOperationEnd;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.onOperationEnd = this.menuContext.onOperationEnd",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.onOperationEnd",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "onOperationEnd",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext.onOperationEnd",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.menuContext",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "menuContext",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "onOperationEnd",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let onOperationStart: Function = this.menuContext.onOperationStart;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let onOperationStart: Function = this.menuContext.onOperationStart",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "onOperationStart: Function = this.menuContext.onOperationStart",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "onOperationStart",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Function",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Function",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.menuContext.onOperationStart",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.menuContext",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "menuContext",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "onOperationStart",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (onOperationStart != null) onOperationStart();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "onOperationStart != null",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "onOperationStart",
                          "children": []
                        },
                        {
                          "type": "ExclamationEqualsToken",
                          "label": "!=",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "onOperationStart();",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "onOperationStart()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "onOperationStart",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM) {\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    } else {\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.menuContext.jumpSourceToMain === JumpSourceToMain.ALBUM",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext.jumpSourceToMain",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.menuContext",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "menuContext",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "jumpSourceToMain",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "JumpSourceToMain.ALBUM",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "JumpSourceToMain",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "ALBUM",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'go back to photo grid');\n      this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'go back to photo grid');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'go back to photo grid')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'go back to photo grid'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.menuContext.broadCast.emit(BroadcastConstants.MEDIA_OPERATION, [simpleAlbumDataItem, (): void => this.onCompletedBindImpl()])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.menuContext.broadCast.emit",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.menuContext.broadCast",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.menuContext",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "menuContext",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "broadCast",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "emit",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "BroadcastConstants.MEDIA_OPERATION",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BroadcastConstants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MEDIA_OPERATION",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrayLiteralExpression",
                                  "label": "[simpleAlbumDataItem, (): void => this.onCompletedBindImpl()]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "simpleAlbumDataItem",
                                      "children": []
                                    },
                                    {
                                      "type": "ArrowFunction",
                                      "label": "(): void => this.onCompletedBindImpl()",
                                      "children": [
                                        {
                                          "type": "VoidKeyword",
                                          "label": "void",
                                          "children": []
                                        },
                                        {
                                          "type": "EqualsGreaterThanToken",
                                          "label": "=>",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "this.onCompletedBindImpl()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.onCompletedBindImpl",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "onCompletedBindImpl",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };\n      let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };\n      router.push(routerOptions);\n      this.onCompleted();\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      };",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "params: Object = {\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "params",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Object",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Object",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n        albumInfo: JSON.stringify(simpleAlbumDataItem),\n        isNewAlbum: true\n      }",
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "albumInfo: JSON.stringify(simpleAlbumDataItem)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "albumInfo",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(simpleAlbumDataItem)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "simpleAlbumDataItem",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "isNewAlbum: true",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isNewAlbum",
                                              "children": []
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      };",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "routerOptions: RouterOptions = {\n        uri: 'pages/AlbumSelect',\n        params: params\n      }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "routerOptions",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "RouterOptions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "RouterOptions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n        uri: 'pages/AlbumSelect',\n        params: params\n      }",
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "uri: 'pages/AlbumSelect'",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "uri",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'pages/AlbumSelect'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "params: params",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "params",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "params",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "router.push(routerOptions);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "router.push(routerOptions)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "router.push",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "router",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "push",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "routerOptions",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCompleted();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCompleted()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCompleted",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCompleted",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async checkAlbumExit(simpleAlbumDataItem: SimpleAlbumDataItem): Promise<boolean> {\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "checkAlbumExit",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "simpleAlbumDataItem: SimpleAlbumDataItem",
              "children": [
                {
                  "type": "Identifier",
                  "label": "simpleAlbumDataItem",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "SimpleAlbumDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SimpleAlbumDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<boolean>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "BooleanKeyword",
                  "label": "boolean",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName) > 0",
                      "children": [
                        {
                          "type": "AwaitExpression",
                          "label": "await userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName)",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "userFileModel.getUserAlbumCountByName(simpleAlbumDataItem.displayName)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "userFileModel.getUserAlbumCountByName",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "userFileModel",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getUserAlbumCountByName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "simpleAlbumDataItem.displayName",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "simpleAlbumDataItem",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "displayName",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "GreaterThanToken",
                          "label": ">",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cancelCallback",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.cancelCallbackBindImpl();\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.cancelCallbackBindImpl();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.cancelCallbackBindImpl()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cancelCallbackBindImpl",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cancelCallbackBindImpl",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cancelCallbackBindImpl",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'AlbumSet new album cancel');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'AlbumSet new album cancel');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'AlbumSet new album cancel')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'AlbumSet new album cancel'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onCompleted(): void {\n    this.onCompletedBindImpl();\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onCompleted",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.onCompletedBindImpl();\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.onCompletedBindImpl();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.onCompletedBindImpl()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.onCompletedBindImpl",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "onCompletedBindImpl",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private onCompletedBindImpl(): void {\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "onCompletedBindImpl",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'new album data succeed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'new album data succeed!');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'new album data succeed!')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'new album data succeed!'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.onOperationEnd != null) this.onOperationEnd();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.onOperationEnd != null",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.onOperationEnd",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "onOperationEnd",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ExclamationEqualsToken",
                          "label": "!=",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "this.onOperationEnd();",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.onOperationEnd()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.onOperationEnd",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "onOperationEnd",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onError(): void {\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onError",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.error(TAG, 'new album data failed!');\n    if (this.onOperationEnd != null) this.onOperationEnd();\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.error(TAG, 'new album data failed!');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.error(TAG, 'new album data failed!')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'new album data failed!'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.onOperationEnd != null) this.onOperationEnd();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.onOperationEnd != null",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.onOperationEnd",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "onOperationEnd",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ExclamationEqualsToken",
                          "label": "!=",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "this.onOperationEnd();",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.onOperationEnd()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.onOperationEnd",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "onOperationEnd",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private checkAndAddNumber(albumInfo: AlbumDataItem, prefixName: string, numbers: number[]): void {\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "checkAndAddNumber",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "albumInfo: AlbumDataItem",
              "children": [
                {
                  "type": "Identifier",
                  "label": "albumInfo",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "AlbumDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "AlbumDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "prefixName: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "prefixName",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "numbers: number[]",
              "children": [
                {
                  "type": "Identifier",
                  "label": "numbers",
                  "children": []
                },
                {
                  "type": "ArrayType",
                  "label": "number[]",
                  "children": [
                    {
                      "type": "NumberKeyword",
                      "label": "number",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));\n    Log.info(TAG, `check name res ${res}`);\n    if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'));",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'))",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "res = albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'))",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "res",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "albumInfo.displayName.match(new RegExp('^' + prefixName + '[1-9][0-9]*$'))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "albumInfo.displayName.match",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "albumInfo.displayName",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "albumInfo",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "displayName",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "match",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "NewExpression",
                                  "label": "new RegExp('^' + prefixName + '[1-9][0-9]*$')",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "RegExp",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'^' + prefixName + '[1-9][0-9]*$'",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'^' + prefixName",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'^'",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "prefixName",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'[1-9][0-9]*$'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, `check name res ${res}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, `check name res ${res}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`check name res ${res}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`check name res ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "res}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (res) {\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "res",
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let number = res[0].match(new RegExp(`[1-9][0-9]*`));\n      numbers.push(parseInt(number[0]));\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let number = res[0].match(new RegExp(`[1-9][0-9]*`));",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let number = res[0].match(new RegExp(`[1-9][0-9]*`))",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "number = res[0].match(new RegExp(`[1-9][0-9]*`))",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "number",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "res[0].match(new RegExp(`[1-9][0-9]*`))",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "res[0].match",
                                          "children": [
                                            {
                                              "type": "ElementAccessExpression",
                                              "label": "res[0]",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "res",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "match",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "NewExpression",
                                          "label": "new RegExp(`[1-9][0-9]*`)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "RegExp",
                                              "children": []
                                            },
                                            {
                                              "type": "FirstTemplateToken",
                                              "label": "`[1-9][0-9]*`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "numbers.push(parseInt(number[0]));",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "numbers.push(parseInt(number[0]))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "numbers.push",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "numbers",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "push",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "parseInt(number[0])",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "parseInt",
                                      "children": []
                                    },
                                    {
                                      "type": "ElementAccessExpression",
                                      "label": "number[0]",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "number",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private getNewAlbumDefaultName(prefixName: string): string {\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getNewAlbumDefaultName",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "prefixName: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "prefixName",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let numbers: number[] = [];\n    for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }\n\n    Log.debug(TAG, `${JSON.stringify(numbers)}`);\n\n    if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }\n\n    numbers.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }\n\n    for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }\n    return `${prefixName}${numbers[numbers.length - 1] + 1}`;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let numbers: number[] = [];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let numbers: number[] = []",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "numbers: number[] = []",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "numbers",
                              "children": []
                            },
                            {
                              "type": "ArrayType",
                              "label": "number[]",
                              "children": [
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrayLiteralExpression",
                              "label": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ForStatement",
                  "label": "for (let i = 0; i < this.menuContext.dataSource.totalCount(); i++) {\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let i = 0",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "i = 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "i",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "i < this.menuContext.dataSource.totalCount()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "this.menuContext.dataSource.totalCount()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.menuContext.dataSource.totalCount",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.menuContext.dataSource",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.menuContext",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "menuContext",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "dataSource",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "totalCount",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PostfixUnaryExpression",
                      "label": "i++",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let album = this.menuContext.dataSource as AlbumsDataSource;\n      this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let album = this.menuContext.dataSource as AlbumsDataSource;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let album = this.menuContext.dataSource as AlbumsDataSource",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "album = this.menuContext.dataSource as AlbumsDataSource",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "album",
                                      "children": []
                                    },
                                    {
                                      "type": "AsExpression",
                                      "label": "this.menuContext.dataSource as AlbumsDataSource",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.menuContext.dataSource",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.menuContext",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "menuContext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "dataSource",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "AlbumsDataSource",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AlbumsDataSource",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.checkAndAddNumber(album.getDataByIndex(i), prefixName, numbers)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.checkAndAddNumber",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "checkAndAddNumber",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "album.getDataByIndex(i)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "album.getDataByIndex",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "album",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getDataByIndex",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "prefixName",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "numbers",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, `${JSON.stringify(numbers)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, `${JSON.stringify(numbers)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`${JSON.stringify(numbers)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(numbers)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(numbers)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "numbers",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (numbers.length <= 0) {\n      return `${prefixName}1`;\n    } else if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "numbers.length <= 0",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "numbers.length",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "numbers",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "length",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "LessThanEqualsToken",
                          "label": "<=",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return `${prefixName}1`;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return `${prefixName}1`;",
                          "children": [
                            {
                              "type": "TemplateExpression",
                              "label": "`${prefixName}1`",
                              "children": [
                                {
                                  "type": "TemplateHead",
                                  "label": "`${",
                                  "children": []
                                },
                                {
                                  "type": "TemplateSpan",
                                  "label": "prefixName}1`",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "prefixName",
                                      "children": []
                                    },
                                    {
                                      "type": "LastTemplateToken",
                                      "label": "}1`",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "label": "if (numbers.length === 1) {\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "numbers.length === 1",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "numbers.length",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "numbers",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "length",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }\n    }",
                          "children": [
                            {
                              "type": "IfStatement",
                              "label": "if (numbers[0] - 1 > 0) {\n        return `${prefixName}1`;\n      } else {\n        return `${prefixName}${numbers[0] + 1}`;\n      }",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "numbers[0] - 1 > 0",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "numbers[0] - 1",
                                      "children": [
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "numbers[0]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "numbers",
                                              "children": []
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "MinusToken",
                                          "label": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "GreaterThanToken",
                                      "label": ">",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        return `${prefixName}1`;\n      }",
                                  "children": [
                                    {
                                      "type": "ReturnStatement",
                                      "label": "return `${prefixName}1`;",
                                      "children": [
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`${prefixName}1`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "prefixName}1`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "prefixName",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}1`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        return `${prefixName}${numbers[0] + 1}`;\n      }",
                                  "children": [
                                    {
                                      "type": "ReturnStatement",
                                      "label": "return `${prefixName}${numbers[0] + 1}`;",
                                      "children": [
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`${prefixName}${numbers[0] + 1}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "prefixName}${",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "prefixName",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "}${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "numbers[0] + 1}`",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "numbers[0] + 1",
                                                  "children": [
                                                    {
                                                      "type": "ElementAccessExpression",
                                                      "label": "numbers[0]",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "numbers",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "FirstLiteralToken",
                                                          "label": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PlusToken",
                                                      "label": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "numbers.sort(function (a, b) {\n      return a - b;\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "numbers.sort(function (a, b) {\n      return a - b;\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "numbers.sort",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "numbers",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "sort",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FunctionExpression",
                          "label": "function (a, b) {\n      return a - b;\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "a",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "a",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "b",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "b",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n      return a - b;\n    }",
                              "children": [
                                {
                                  "type": "ReturnStatement",
                                  "label": "return a - b;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "a - b",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "a",
                                          "children": []
                                        },
                                        {
                                          "type": "MinusToken",
                                          "label": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "b",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (numbers[0] - 1 > 0) {\n      return `${prefixName}1`;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "numbers[0] - 1 > 0",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "numbers[0] - 1",
                          "children": [
                            {
                              "type": "ElementAccessExpression",
                              "label": "numbers[0]",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "numbers",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "MinusToken",
                              "label": "-",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "GreaterThanToken",
                          "label": ">",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return `${prefixName}1`;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return `${prefixName}1`;",
                          "children": [
                            {
                              "type": "TemplateExpression",
                              "label": "`${prefixName}1`",
                              "children": [
                                {
                                  "type": "TemplateHead",
                                  "label": "`${",
                                  "children": []
                                },
                                {
                                  "type": "TemplateSpan",
                                  "label": "prefixName}1`",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "prefixName",
                                      "children": []
                                    },
                                    {
                                      "type": "LastTemplateToken",
                                      "label": "}1`",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ForStatement",
                  "label": "for (let i = 1; i < numbers.length; i++) {\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let i = 1",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "i = 1",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "i",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "i < numbers.length",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "numbers.length",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "numbers",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "length",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PostfixUnaryExpression",
                      "label": "i++",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let res = numbers[i - 1] + 1;\n      if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let res = numbers[i - 1] + 1;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let res = numbers[i - 1] + 1",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "res = numbers[i - 1] + 1",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "res",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "numbers[i - 1] + 1",
                                      "children": [
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "numbers[i - 1]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "numbers",
                                              "children": []
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "label": "i - 1",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "i",
                                                  "children": []
                                                },
                                                {
                                                  "type": "MinusToken",
                                                  "label": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (res < numbers[i]) {\n        return `${prefixName}${res}`;\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "res < numbers[i]",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "children": []
                                },
                                {
                                  "type": "FirstBinaryOperator",
                                  "label": "<",
                                  "children": []
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "numbers[i]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "numbers",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        return `${prefixName}${res}`;\n      }",
                              "children": [
                                {
                                  "type": "ReturnStatement",
                                  "label": "return `${prefixName}${res}`;",
                                  "children": [
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`${prefixName}${res}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "prefixName}${",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "prefixName",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateMiddle",
                                              "label": "}${",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "res}`",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "res",
                                              "children": []
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return `${prefixName}${numbers[numbers.length - 1] + 1}`;",
                  "children": [
                    {
                      "type": "TemplateExpression",
                      "label": "`${prefixName}${numbers[numbers.length - 1] + 1}`",
                      "children": [
                        {
                          "type": "TemplateHead",
                          "label": "`${",
                          "children": []
                        },
                        {
                          "type": "TemplateSpan",
                          "label": "prefixName}${",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "prefixName",
                              "children": []
                            },
                            {
                              "type": "TemplateMiddle",
                              "label": "}${",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "TemplateSpan",
                          "label": "numbers[numbers.length - 1] + 1}`",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "numbers[numbers.length - 1] + 1",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "numbers[numbers.length - 1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "numbers",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "numbers.length - 1",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "numbers.length",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "numbers",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "length",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "MinusToken",
                                          "label": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "LastTemplateToken",
                              "label": "}`",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}