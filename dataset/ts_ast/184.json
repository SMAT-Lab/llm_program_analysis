{
  "type": "SourceFile",
  "label": "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";\nimport {\n  SsrSiteArgs,\n  createKvStorage,\n  createRouter,\n  prepare,\n  validatePlan,\n} from \"./ssr-site.js\";\nimport { Component } from \"../component.js\";\nimport { Hint } from \"../hint.js\";\nimport { Link } from \"../link.js\";\nimport { Kv } from \"./kv.js\";\nimport { buildApp } from \"../base/base-ssr-site.js\";\nimport { Worker } from \"./worker.js\";\nimport { Plugin } from \"esbuild\";\nimport { pathToRegexp } from \"../../util/path-to-regex.js\";\nexport interface RemixArgs extends SsrSiteArgs {\n  assets?: SsrSiteArgs[\"assets\"];\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  domain?: SsrSiteArgs[\"domain\"];\n  environment?: SsrSiteArgs[\"environment\"];\n  link?: SsrSiteArgs[\"link\"];\n  path?: SsrSiteArgs[\"path\"];\n}\nexport class Remix extends Component implements Link.Linkable {\n  private assets: Kv;\n  private router: Output<Worker>;\n  private server: Output<Worker>;\n  constructor(\n    name: string,\n    args: RemixArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const parent = this;\n    const { sitePath } = prepare(args);\n    const isUsingVite = checkIsUsingVite();\n    const storage = createKvStorage(parent, name, args);\n    const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);\n    const { buildMeta } = loadBuildOutput();\n    const plan = buildPlan();\n    const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    );\n    this.assets = storage;\n    this.router = router;\n    this.server = server;\n    if (!$dev) {\n      Hint.register(this.urn, this.url as Output<string>);\n    }\n    this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    });\n    function checkIsUsingVite() {\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }\n    function loadBuildOutput() {\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }\n    function loadBuildMetadata() {\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }\n    function loadBuildMetadataPlaceholder() {\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }\n    function buildPlan() {\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }\n    function createServerLambdaBundle(\n      isUsingVite: boolean,\n      outputPath: string,\n    ) {\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }\n  }\n  public get url() {\n    return this.router.url;\n  }\n  public get nodes() {\n    return {\n      server: this.server,\n      assets: this.assets,\n    };\n  }\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}\nconst __pulumiType = \"sst:cloudflare:Remix\";\n// @ts-expect-error\nRemix.__pulumiType = __pulumiType;",
  "start_token": 0,
  "end_token": 1063,
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import fs from \"fs\";",
      "start_token": 0,
      "end_token": 4,
      "children": [
        {
          "type": "ImportClause",
          "label": "fs",
          "start_token": 1,
          "end_token": 1,
          "children": [
            {
              "type": "Identifier",
              "label": "fs",
              "start_token": 1,
              "end_token": 1,
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"fs\"",
          "start_token": 3,
          "end_token": 3,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import path from \"path\";",
      "start_token": 5,
      "end_token": 9,
      "children": [
        {
          "type": "ImportClause",
          "label": "path",
          "start_token": 6,
          "end_token": 6,
          "children": [
            {
              "type": "Identifier",
              "label": "path",
              "start_token": 6,
              "end_token": 6,
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"path\"",
          "start_token": 8,
          "end_token": 8,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";",
      "start_token": 10,
      "end_token": 20,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ ComponentResourceOptions, Output, all }",
          "start_token": 11,
          "end_token": 17,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ ComponentResourceOptions, Output, all }",
              "start_token": 11,
              "end_token": 17,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "ComponentResourceOptions",
                  "start_token": 12,
                  "end_token": 12,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ComponentResourceOptions",
                      "start_token": 12,
                      "end_token": 12,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "Output",
                  "start_token": 14,
                  "end_token": 14,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Output",
                      "start_token": 14,
                      "end_token": 14,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "all",
                  "start_token": 16,
                  "end_token": 16,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "all",
                      "start_token": 16,
                      "end_token": 16,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"@pulumi/pulumi\"",
          "start_token": 19,
          "end_token": 19,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {\n  SsrSiteArgs,\n  createKvStorage,\n  createRouter,\n  prepare,\n  validatePlan,\n} from \"./ssr-site.js\";",
      "start_token": 21,
      "end_token": 36,
      "children": [
        {
          "type": "ImportClause",
          "label": "{\n  SsrSiteArgs,\n  createKvStorage,\n  createRouter,\n  prepare,\n  validatePlan,\n}",
          "start_token": 22,
          "end_token": 33,
          "children": [
            {
              "type": "NamedImports",
              "label": "{\n  SsrSiteArgs,\n  createKvStorage,\n  createRouter,\n  prepare,\n  validatePlan,\n}",
              "start_token": 22,
              "end_token": 33,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "SsrSiteArgs",
                  "start_token": 23,
                  "end_token": 23,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 23,
                      "end_token": 23,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "createKvStorage",
                  "start_token": 25,
                  "end_token": 25,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "createKvStorage",
                      "start_token": 25,
                      "end_token": 25,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "createRouter",
                  "start_token": 27,
                  "end_token": 27,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "createRouter",
                      "start_token": 27,
                      "end_token": 27,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "prepare",
                  "start_token": 29,
                  "end_token": 29,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "prepare",
                      "start_token": 29,
                      "end_token": 29,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "validatePlan",
                  "start_token": 31,
                  "end_token": 31,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "validatePlan",
                      "start_token": 31,
                      "end_token": 31,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"./ssr-site.js\"",
          "start_token": 35,
          "end_token": 35,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Component } from \"../component.js\";",
      "start_token": 37,
      "end_token": 43,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Component }",
          "start_token": 38,
          "end_token": 40,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Component }",
              "start_token": 38,
              "end_token": 40,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Component",
                  "start_token": 39,
                  "end_token": 39,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Component",
                      "start_token": 39,
                      "end_token": 39,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"../component.js\"",
          "start_token": 42,
          "end_token": 42,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Hint } from \"../hint.js\";",
      "start_token": 44,
      "end_token": 50,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Hint }",
          "start_token": 45,
          "end_token": 47,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Hint }",
              "start_token": 45,
              "end_token": 47,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Hint",
                  "start_token": 46,
                  "end_token": 46,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Hint",
                      "start_token": 46,
                      "end_token": 46,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"../hint.js\"",
          "start_token": 49,
          "end_token": 49,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Link } from \"../link.js\";",
      "start_token": 51,
      "end_token": 57,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Link }",
          "start_token": 52,
          "end_token": 54,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Link }",
              "start_token": 52,
              "end_token": 54,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Link",
                  "start_token": 53,
                  "end_token": 53,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Link",
                      "start_token": 53,
                      "end_token": 53,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"../link.js\"",
          "start_token": 56,
          "end_token": 56,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Kv } from \"./kv.js\";",
      "start_token": 58,
      "end_token": 64,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Kv }",
          "start_token": 59,
          "end_token": 61,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Kv }",
              "start_token": 59,
              "end_token": 61,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Kv",
                  "start_token": 60,
                  "end_token": 60,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Kv",
                      "start_token": 60,
                      "end_token": 60,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"./kv.js\"",
          "start_token": 63,
          "end_token": 63,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { buildApp } from \"../base/base-ssr-site.js\";",
      "start_token": 65,
      "end_token": 71,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ buildApp }",
          "start_token": 66,
          "end_token": 68,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ buildApp }",
              "start_token": 66,
              "end_token": 68,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "buildApp",
                  "start_token": 67,
                  "end_token": 67,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "buildApp",
                      "start_token": 67,
                      "end_token": 67,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"../base/base-ssr-site.js\"",
          "start_token": 70,
          "end_token": 70,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Worker } from \"./worker.js\";",
      "start_token": 72,
      "end_token": 78,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Worker }",
          "start_token": 73,
          "end_token": 75,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Worker }",
              "start_token": 73,
              "end_token": 75,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Worker",
                  "start_token": 74,
                  "end_token": 74,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Worker",
                      "start_token": 74,
                      "end_token": 74,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"./worker.js\"",
          "start_token": 77,
          "end_token": 77,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Plugin } from \"esbuild\";",
      "start_token": 79,
      "end_token": 85,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Plugin }",
          "start_token": 80,
          "end_token": 82,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Plugin }",
              "start_token": 80,
              "end_token": 82,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Plugin",
                  "start_token": 81,
                  "end_token": 81,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Plugin",
                      "start_token": 81,
                      "end_token": 81,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"esbuild\"",
          "start_token": 84,
          "end_token": 84,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { pathToRegexp } from \"../../util/path-to-regex.js\";",
      "start_token": 86,
      "end_token": 92,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ pathToRegexp }",
          "start_token": 87,
          "end_token": 89,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ pathToRegexp }",
              "start_token": 87,
              "end_token": 89,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "pathToRegexp",
                  "start_token": 88,
                  "end_token": 88,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "pathToRegexp",
                      "start_token": 88,
                      "end_token": 88,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "\"../../util/path-to-regex.js\"",
          "start_token": 91,
          "end_token": 91,
          "children": []
        }
      ]
    },
    {
      "type": "InterfaceDeclaration",
      "label": "export interface RemixArgs extends SsrSiteArgs {\n  assets?: SsrSiteArgs[\"assets\"];\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  domain?: SsrSiteArgs[\"domain\"];\n  environment?: SsrSiteArgs[\"environment\"];\n  link?: SsrSiteArgs[\"link\"];\n  path?: SsrSiteArgs[\"path\"];\n}",
      "start_token": 93,
      "end_token": 147,
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "start_token": 93,
          "end_token": 93,
          "children": []
        },
        {
          "type": "Identifier",
          "label": "RemixArgs",
          "start_token": 95,
          "end_token": 95,
          "children": []
        },
        {
          "type": "HeritageClause",
          "label": "extends SsrSiteArgs",
          "start_token": 96,
          "end_token": 97,
          "children": [
            {
              "type": "ExpressionWithTypeArguments",
              "label": "SsrSiteArgs",
              "start_token": 97,
              "end_token": 97,
              "children": [
                {
                  "type": "Identifier",
                  "label": "SsrSiteArgs",
                  "start_token": 97,
                  "end_token": 97,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "assets?: SsrSiteArgs[\"assets\"];",
          "start_token": 99,
          "end_token": 106,
          "children": [
            {
              "type": "Identifier",
              "label": "assets",
              "start_token": 99,
              "end_token": 99,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 100,
              "end_token": 100,
              "children": []
            },
            {
              "type": "IndexedAccessType",
              "label": "SsrSiteArgs[\"assets\"]",
              "start_token": 102,
              "end_token": 105,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "SsrSiteArgs",
                  "start_token": 102,
                  "end_token": 102,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 102,
                      "end_token": 102,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "\"assets\"",
                  "start_token": 104,
                  "end_token": 104,
                  "children": [
                    {
                      "type": "StringLiteral",
                      "label": "\"assets\"",
                      "start_token": 104,
                      "end_token": 104,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "buildCommand?: SsrSiteArgs[\"buildCommand\"];",
          "start_token": 107,
          "end_token": 114,
          "children": [
            {
              "type": "Identifier",
              "label": "buildCommand",
              "start_token": 107,
              "end_token": 107,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 108,
              "end_token": 108,
              "children": []
            },
            {
              "type": "IndexedAccessType",
              "label": "SsrSiteArgs[\"buildCommand\"]",
              "start_token": 110,
              "end_token": 113,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "SsrSiteArgs",
                  "start_token": 110,
                  "end_token": 110,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 110,
                      "end_token": 110,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "\"buildCommand\"",
                  "start_token": 112,
                  "end_token": 112,
                  "children": [
                    {
                      "type": "StringLiteral",
                      "label": "\"buildCommand\"",
                      "start_token": 112,
                      "end_token": 112,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "domain?: SsrSiteArgs[\"domain\"];",
          "start_token": 115,
          "end_token": 122,
          "children": [
            {
              "type": "Identifier",
              "label": "domain",
              "start_token": 115,
              "end_token": 115,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 116,
              "end_token": 116,
              "children": []
            },
            {
              "type": "IndexedAccessType",
              "label": "SsrSiteArgs[\"domain\"]",
              "start_token": 118,
              "end_token": 121,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "SsrSiteArgs",
                  "start_token": 118,
                  "end_token": 118,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 118,
                      "end_token": 118,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "\"domain\"",
                  "start_token": 120,
                  "end_token": 120,
                  "children": [
                    {
                      "type": "StringLiteral",
                      "label": "\"domain\"",
                      "start_token": 120,
                      "end_token": 120,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "environment?: SsrSiteArgs[\"environment\"];",
          "start_token": 123,
          "end_token": 130,
          "children": [
            {
              "type": "Identifier",
              "label": "environment",
              "start_token": 123,
              "end_token": 123,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 124,
              "end_token": 124,
              "children": []
            },
            {
              "type": "IndexedAccessType",
              "label": "SsrSiteArgs[\"environment\"]",
              "start_token": 126,
              "end_token": 129,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "SsrSiteArgs",
                  "start_token": 126,
                  "end_token": 126,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 126,
                      "end_token": 126,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "\"environment\"",
                  "start_token": 128,
                  "end_token": 128,
                  "children": [
                    {
                      "type": "StringLiteral",
                      "label": "\"environment\"",
                      "start_token": 128,
                      "end_token": 128,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "link?: SsrSiteArgs[\"link\"];",
          "start_token": 131,
          "end_token": 138,
          "children": [
            {
              "type": "Identifier",
              "label": "link",
              "start_token": 131,
              "end_token": 131,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 132,
              "end_token": 132,
              "children": []
            },
            {
              "type": "IndexedAccessType",
              "label": "SsrSiteArgs[\"link\"]",
              "start_token": 134,
              "end_token": 137,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "SsrSiteArgs",
                  "start_token": 134,
                  "end_token": 134,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 134,
                      "end_token": 134,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "\"link\"",
                  "start_token": 136,
                  "end_token": 136,
                  "children": [
                    {
                      "type": "StringLiteral",
                      "label": "\"link\"",
                      "start_token": 136,
                      "end_token": 136,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "path?: SsrSiteArgs[\"path\"];",
          "start_token": 139,
          "end_token": 146,
          "children": [
            {
              "type": "Identifier",
              "label": "path",
              "start_token": 139,
              "end_token": 139,
              "children": []
            },
            {
              "type": "QuestionToken",
              "label": "?",
              "start_token": 140,
              "end_token": 140,
              "children": []
            },
            {
              "type": "IndexedAccessType",
              "label": "SsrSiteArgs[\"path\"]",
              "start_token": 142,
              "end_token": 145,
              "children": [
                {
                  "type": "TypeReference",
                  "label": "SsrSiteArgs",
                  "start_token": 142,
                  "end_token": 142,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "SsrSiteArgs",
                      "start_token": 142,
                      "end_token": 142,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "LiteralType",
                  "label": "\"path\"",
                  "start_token": 144,
                  "end_token": 144,
                  "children": [
                    {
                      "type": "StringLiteral",
                      "label": "\"path\"",
                      "start_token": 144,
                      "end_token": 144,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "export class Remix extends Component implements Link.Linkable {\n  private assets: Kv;\n  private router: Output<Worker>;\n  private server: Output<Worker>;\n  constructor(\n    name: string,\n    args: RemixArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const parent = this;\n    const { sitePath } = prepare(args);\n    const isUsingVite = checkIsUsingVite();\n    const storage = createKvStorage(parent, name, args);\n    const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);\n    const { buildMeta } = loadBuildOutput();\n    const plan = buildPlan();\n    const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    );\n    this.assets = storage;\n    this.router = router;\n    this.server = server;\n    if (!$dev) {\n      Hint.register(this.urn, this.url as Output<string>);\n    }\n    this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    });\n    function checkIsUsingVite() {\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }\n    function loadBuildOutput() {\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }\n    function loadBuildMetadata() {\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }\n    function loadBuildMetadataPlaceholder() {\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }\n    function buildPlan() {\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }\n    function createServerLambdaBundle(\n      isUsingVite: boolean,\n      outputPath: string,\n    ) {\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }\n  }\n  public get url() {\n    return this.router.url;\n  }\n  public get nodes() {\n    return {\n      server: this.server,\n      assets: this.assets,\n    };\n  }\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}",
      "start_token": 148,
      "end_token": 1051,
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "start_token": 148,
          "end_token": 148,
          "children": []
        },
        {
          "type": "Identifier",
          "label": "Remix",
          "start_token": 150,
          "end_token": 150,
          "children": []
        },
        {
          "type": "HeritageClause",
          "label": "extends Component",
          "start_token": 151,
          "end_token": 152,
          "children": [
            {
              "type": "ExpressionWithTypeArguments",
              "label": "Component",
              "start_token": 152,
              "end_token": 152,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Component",
                  "start_token": 152,
                  "end_token": 152,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "HeritageClause",
          "label": "implements Link.Linkable",
          "start_token": 153,
          "end_token": 156,
          "children": [
            {
              "type": "ExpressionWithTypeArguments",
              "label": "Link.Linkable",
              "start_token": 154,
              "end_token": 156,
              "children": [
                {
                  "type": "PropertyAccessExpression",
                  "label": "Link.Linkable",
                  "start_token": 154,
                  "end_token": 156,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Link",
                      "start_token": 154,
                      "end_token": 154,
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "Linkable",
                      "start_token": 156,
                      "end_token": 156,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private assets: Kv;",
          "start_token": 158,
          "end_token": 162,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 158,
              "end_token": 158,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "assets",
              "start_token": 159,
              "end_token": 159,
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Kv",
              "start_token": 161,
              "end_token": 161,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Kv",
                  "start_token": 161,
                  "end_token": 161,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private router: Output<Worker>;",
          "start_token": 163,
          "end_token": 170,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 163,
              "end_token": 163,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "router",
              "start_token": 164,
              "end_token": 164,
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Output<Worker>",
              "start_token": 166,
              "end_token": 169,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Output",
                  "start_token": 166,
                  "end_token": 166,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Worker",
                  "start_token": 168,
                  "end_token": 168,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Worker",
                      "start_token": 168,
                      "end_token": 168,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private server: Output<Worker>;",
          "start_token": 171,
          "end_token": 178,
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "start_token": 171,
              "end_token": 171,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "server",
              "start_token": 172,
              "end_token": 172,
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Output<Worker>",
              "start_token": 174,
              "end_token": 177,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Output",
                  "start_token": 174,
                  "end_token": 174,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Worker",
                  "start_token": 176,
                  "end_token": 176,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Worker",
                      "start_token": 176,
                      "end_token": 176,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor(\n    name: string,\n    args: RemixArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const parent = this;\n    const { sitePath } = prepare(args);\n    const isUsingVite = checkIsUsingVite();\n    const storage = createKvStorage(parent, name, args);\n    const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);\n    const { buildMeta } = loadBuildOutput();\n    const plan = buildPlan();\n    const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    );\n    this.assets = storage;\n    this.router = router;\n    this.server = server;\n    if (!$dev) {\n      Hint.register(this.urn, this.url as Output<string>);\n    }\n    this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    });\n    function checkIsUsingVite() {\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }\n    function loadBuildOutput() {\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }\n    function loadBuildMetadata() {\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }\n    function loadBuildMetadataPlaceholder() {\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }\n    function buildPlan() {\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }\n    function createServerLambdaBundle(\n      isUsingVite: boolean,\n      outputPath: string,\n    ) {\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }\n  }",
          "start_token": 179,
          "end_token": 992,
          "children": [
            {
              "type": "Parameter",
              "label": "name: string",
              "start_token": 181,
              "end_token": 183,
              "children": [
                {
                  "type": "Identifier",
                  "label": "name",
                  "start_token": 181,
                  "end_token": 181,
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "start_token": 183,
                  "end_token": 183,
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "args: RemixArgs = {}",
              "start_token": 185,
              "end_token": 190,
              "children": [
                {
                  "type": "Identifier",
                  "label": "args",
                  "start_token": 185,
                  "end_token": 185,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "RemixArgs",
                  "start_token": 187,
                  "end_token": 187,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "RemixArgs",
                      "start_token": 187,
                      "end_token": 187,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ObjectLiteralExpression",
                  "label": "{}",
                  "start_token": 189,
                  "end_token": 190,
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "opts: ComponentResourceOptions = {}",
              "start_token": 192,
              "end_token": 197,
              "children": [
                {
                  "type": "Identifier",
                  "label": "opts",
                  "start_token": 192,
                  "end_token": 192,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "ComponentResourceOptions",
                  "start_token": 194,
                  "end_token": 194,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ComponentResourceOptions",
                      "start_token": 194,
                      "end_token": 194,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ObjectLiteralExpression",
                  "label": "{}",
                  "start_token": 196,
                  "end_token": 197,
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    super(__pulumiType, name, args, opts);\n    const parent = this;\n    const { sitePath } = prepare(args);\n    const isUsingVite = checkIsUsingVite();\n    const storage = createKvStorage(parent, name, args);\n    const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);\n    const { buildMeta } = loadBuildOutput();\n    const plan = buildPlan();\n    const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    );\n    this.assets = storage;\n    this.router = router;\n    this.server = server;\n    if (!$dev) {\n      Hint.register(this.urn, this.url as Output<string>);\n    }\n    this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    });\n    function checkIsUsingVite() {\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }\n    function loadBuildOutput() {\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }\n    function loadBuildMetadata() {\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }\n    function loadBuildMetadataPlaceholder() {\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }\n    function buildPlan() {\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }\n    function createServerLambdaBundle(\n      isUsingVite: boolean,\n      outputPath: string,\n    ) {\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }\n  }",
              "start_token": 200,
              "end_token": 992,
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "super(__pulumiType, name, args, opts);",
                  "start_token": 201,
                  "end_token": 211,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "super(__pulumiType, name, args, opts)",
                      "start_token": 201,
                      "end_token": 210,
                      "children": [
                        {
                          "type": "SuperKeyword",
                          "label": "super",
                          "start_token": 201,
                          "end_token": 201,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "__pulumiType",
                          "start_token": 203,
                          "end_token": 203,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "name",
                          "start_token": 205,
                          "end_token": 205,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "args",
                          "start_token": 207,
                          "end_token": 207,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "opts",
                          "start_token": 209,
                          "end_token": 209,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const parent = this;",
                  "start_token": 212,
                  "end_token": 216,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const parent = this",
                      "start_token": 212,
                      "end_token": 215,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "parent = this",
                          "start_token": 213,
                          "end_token": 215,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "parent",
                              "start_token": 213,
                              "end_token": 213,
                              "children": []
                            },
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 215,
                              "end_token": 215,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const { sitePath } = prepare(args);",
                  "start_token": 217,
                  "end_token": 226,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const { sitePath } = prepare(args)",
                      "start_token": 217,
                      "end_token": 225,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "{ sitePath } = prepare(args)",
                          "start_token": 218,
                          "end_token": 225,
                          "children": [
                            {
                              "type": "ObjectBindingPattern",
                              "label": "{ sitePath }",
                              "start_token": 218,
                              "end_token": 220,
                              "children": [
                                {
                                  "type": "BindingElement",
                                  "label": "sitePath",
                                  "start_token": 219,
                                  "end_token": 219,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "sitePath",
                                      "start_token": 219,
                                      "end_token": 219,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "prepare(args)",
                              "start_token": 222,
                              "end_token": 225,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "prepare",
                                  "start_token": 222,
                                  "end_token": 222,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "args",
                                  "start_token": 224,
                                  "end_token": 224,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const isUsingVite = checkIsUsingVite();",
                  "start_token": 227,
                  "end_token": 233,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const isUsingVite = checkIsUsingVite()",
                      "start_token": 227,
                      "end_token": 232,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isUsingVite = checkIsUsingVite()",
                          "start_token": 228,
                          "end_token": 232,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isUsingVite",
                              "start_token": 228,
                              "end_token": 228,
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "checkIsUsingVite()",
                              "start_token": 230,
                              "end_token": 232,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "checkIsUsingVite",
                                  "start_token": 230,
                                  "end_token": 230,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const storage = createKvStorage(parent, name, args);",
                  "start_token": 234,
                  "end_token": 245,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const storage = createKvStorage(parent, name, args)",
                      "start_token": 234,
                      "end_token": 244,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "storage = createKvStorage(parent, name, args)",
                          "start_token": 235,
                          "end_token": 244,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "storage",
                              "start_token": 235,
                              "end_token": 235,
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "createKvStorage(parent, name, args)",
                              "start_token": 237,
                              "end_token": 244,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "createKvStorage",
                                  "start_token": 237,
                                  "end_token": 237,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "parent",
                                  "start_token": 239,
                                  "end_token": 239,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "name",
                                  "start_token": 241,
                                  "end_token": 241,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "args",
                                  "start_token": 243,
                                  "end_token": 243,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath);",
                  "start_token": 246,
                  "end_token": 263,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath)",
                      "start_token": 246,
                      "end_token": 262,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "outputPath = $dev ? sitePath : buildApp(parent, name, args, sitePath)",
                          "start_token": 247,
                          "end_token": 262,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "outputPath",
                              "start_token": 247,
                              "end_token": 247,
                              "children": []
                            },
                            {
                              "type": "ConditionalExpression",
                              "label": "$dev ? sitePath : buildApp(parent, name, args, sitePath)",
                              "start_token": 249,
                              "end_token": 262,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "$dev",
                                  "start_token": 249,
                                  "end_token": 249,
                                  "children": []
                                },
                                {
                                  "type": "QuestionToken",
                                  "label": "?",
                                  "start_token": 250,
                                  "end_token": 250,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "sitePath",
                                  "start_token": 251,
                                  "end_token": 251,
                                  "children": []
                                },
                                {
                                  "type": "ColonToken",
                                  "label": ":",
                                  "start_token": 252,
                                  "end_token": 252,
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "buildApp(parent, name, args, sitePath)",
                                  "start_token": 253,
                                  "end_token": 262,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "buildApp",
                                      "start_token": 253,
                                      "end_token": 253,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "parent",
                                      "start_token": 255,
                                      "end_token": 255,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "name",
                                      "start_token": 257,
                                      "end_token": 257,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "args",
                                      "start_token": 259,
                                      "end_token": 259,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "sitePath",
                                      "start_token": 261,
                                      "end_token": 261,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const { buildMeta } = loadBuildOutput();",
                  "start_token": 264,
                  "end_token": 272,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const { buildMeta } = loadBuildOutput()",
                      "start_token": 264,
                      "end_token": 271,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "{ buildMeta } = loadBuildOutput()",
                          "start_token": 265,
                          "end_token": 271,
                          "children": [
                            {
                              "type": "ObjectBindingPattern",
                              "label": "{ buildMeta }",
                              "start_token": 265,
                              "end_token": 267,
                              "children": [
                                {
                                  "type": "BindingElement",
                                  "label": "buildMeta",
                                  "start_token": 266,
                                  "end_token": 266,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "buildMeta",
                                      "start_token": 266,
                                      "end_token": 266,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "loadBuildOutput()",
                              "start_token": 269,
                              "end_token": 271,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "loadBuildOutput",
                                  "start_token": 269,
                                  "end_token": 269,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const plan = buildPlan();",
                  "start_token": 273,
                  "end_token": 279,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const plan = buildPlan()",
                      "start_token": 273,
                      "end_token": 278,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "plan = buildPlan()",
                          "start_token": 274,
                          "end_token": 278,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "plan",
                              "start_token": 274,
                              "end_token": 274,
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "buildPlan()",
                              "start_token": 276,
                              "end_token": 278,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "buildPlan",
                                  "start_token": 276,
                                  "end_token": 276,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    );",
                  "start_token": 280,
                  "end_token": 302,
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const { router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    )",
                      "start_token": 280,
                      "end_token": 301,
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "{ router, server } = createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    )",
                          "start_token": 281,
                          "end_token": 301,
                          "children": [
                            {
                              "type": "ObjectBindingPattern",
                              "label": "{ router, server }",
                              "start_token": 281,
                              "end_token": 285,
                              "children": [
                                {
                                  "type": "BindingElement",
                                  "label": "router",
                                  "start_token": 282,
                                  "end_token": 282,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "router",
                                      "start_token": 282,
                                      "end_token": 282,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BindingElement",
                                  "label": "server",
                                  "start_token": 284,
                                  "end_token": 284,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "server",
                                      "start_token": 284,
                                      "end_token": 284,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "createRouter(\n      parent,\n      name,\n      args,\n      outputPath,\n      storage,\n      plan,\n    )",
                              "start_token": 287,
                              "end_token": 301,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "createRouter",
                                  "start_token": 287,
                                  "end_token": 287,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "parent",
                                  "start_token": 289,
                                  "end_token": 289,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "name",
                                  "start_token": 291,
                                  "end_token": 291,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "args",
                                  "start_token": 293,
                                  "end_token": 293,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "outputPath",
                                  "start_token": 295,
                                  "end_token": 295,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "storage",
                                  "start_token": 297,
                                  "end_token": 297,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "plan",
                                  "start_token": 299,
                                  "end_token": 299,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.assets = storage;",
                  "start_token": 303,
                  "end_token": 308,
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.assets = storage",
                      "start_token": 303,
                      "end_token": 307,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.assets",
                          "start_token": 303,
                          "end_token": 305,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 303,
                              "end_token": 303,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "assets",
                              "start_token": 305,
                              "end_token": 305,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "start_token": 306,
                          "end_token": 306,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "storage",
                          "start_token": 307,
                          "end_token": 307,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.router = router;",
                  "start_token": 309,
                  "end_token": 314,
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.router = router",
                      "start_token": 309,
                      "end_token": 313,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.router",
                          "start_token": 309,
                          "end_token": 311,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 309,
                              "end_token": 309,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "router",
                              "start_token": 311,
                              "end_token": 311,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "start_token": 312,
                          "end_token": 312,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "router",
                          "start_token": 313,
                          "end_token": 313,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.server = server;",
                  "start_token": 315,
                  "end_token": 320,
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.server = server",
                      "start_token": 315,
                      "end_token": 319,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.server",
                          "start_token": 315,
                          "end_token": 317,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 315,
                              "end_token": 315,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "server",
                              "start_token": 317,
                              "end_token": 317,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "start_token": 318,
                          "end_token": 318,
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "server",
                          "start_token": 319,
                          "end_token": 319,
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!$dev) {\n      Hint.register(this.urn, this.url as Output<string>);\n    }",
                  "start_token": 321,
                  "end_token": 345,
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!$dev",
                      "start_token": 323,
                      "end_token": 324,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "$dev",
                          "start_token": 324,
                          "end_token": 324,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Hint.register(this.urn, this.url as Output<string>);\n    }",
                      "start_token": 326,
                      "end_token": 345,
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Hint.register(this.urn, this.url as Output<string>);",
                          "start_token": 327,
                          "end_token": 344,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Hint.register(this.urn, this.url as Output<string>)",
                              "start_token": 327,
                              "end_token": 343,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Hint.register",
                                  "start_token": 327,
                                  "end_token": 329,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Hint",
                                      "start_token": 327,
                                      "end_token": 327,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "register",
                                      "start_token": 329,
                                      "end_token": 329,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.urn",
                                  "start_token": 331,
                                  "end_token": 333,
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "start_token": 331,
                                      "end_token": 331,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "urn",
                                      "start_token": 333,
                                      "end_token": 333,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "AsExpression",
                                  "label": "this.url as Output<string>",
                                  "start_token": 335,
                                  "end_token": 342,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.url",
                                      "start_token": 335,
                                      "end_token": 337,
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "start_token": 335,
                                          "end_token": 335,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "url",
                                          "start_token": 337,
                                          "end_token": 337,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Output<string>",
                                      "start_token": 339,
                                      "end_token": 342,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Output",
                                          "start_token": 339,
                                          "end_token": 339,
                                          "children": []
                                        },
                                        {
                                          "type": "StringKeyword",
                                          "label": "string",
                                          "start_token": 341,
                                          "end_token": 341,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    });",
                  "start_token": 346,
                  "end_token": 376,
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.registerOutputs({\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    })",
                      "start_token": 346,
                      "end_token": 375,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.registerOutputs",
                          "start_token": 346,
                          "end_token": 348,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 346,
                              "end_token": 346,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "registerOutputs",
                              "start_token": 348,
                              "end_token": 348,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ObjectLiteralExpression",
                          "label": "{\n      _metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      },\n    }",
                          "start_token": 350,
                          "end_token": 374,
                          "children": [
                            {
                              "type": "PropertyAssignment",
                              "label": "_metadata: {\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      }",
                              "start_token": 351,
                              "end_token": 372,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "_metadata",
                                  "start_token": 351,
                                  "end_token": 351,
                                  "children": []
                                },
                                {
                                  "type": "ObjectLiteralExpression",
                                  "label": "{\n        mode: $dev ? \"placeholder\" : \"deployed\",\n        path: sitePath,\n        url: this.url,\n      }",
                                  "start_token": 353,
                                  "end_token": 372,
                                  "children": [
                                    {
                                      "type": "PropertyAssignment",
                                      "label": "mode: $dev ? \"placeholder\" : \"deployed\"",
                                      "start_token": 354,
                                      "end_token": 360,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "mode",
                                          "start_token": 354,
                                          "end_token": 354,
                                          "children": []
                                        },
                                        {
                                          "type": "ConditionalExpression",
                                          "label": "$dev ? \"placeholder\" : \"deployed\"",
                                          "start_token": 356,
                                          "end_token": 360,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "$dev",
                                              "start_token": 356,
                                              "end_token": 356,
                                              "children": []
                                            },
                                            {
                                              "type": "QuestionToken",
                                              "label": "?",
                                              "start_token": 357,
                                              "end_token": 357,
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "\"placeholder\"",
                                              "start_token": 358,
                                              "end_token": 358,
                                              "children": []
                                            },
                                            {
                                              "type": "ColonToken",
                                              "label": ":",
                                              "start_token": 359,
                                              "end_token": 359,
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "\"deployed\"",
                                              "start_token": 360,
                                              "end_token": 360,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAssignment",
                                      "label": "path: sitePath",
                                      "start_token": 362,
                                      "end_token": 364,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "path",
                                          "start_token": 362,
                                          "end_token": 362,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "sitePath",
                                          "start_token": 364,
                                          "end_token": 364,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAssignment",
                                      "label": "url: this.url",
                                      "start_token": 366,
                                      "end_token": 370,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "url",
                                          "start_token": 366,
                                          "end_token": 366,
                                          "children": []
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.url",
                                          "start_token": 368,
                                          "end_token": 370,
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "start_token": 368,
                                              "end_token": 368,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "url",
                                              "start_token": 370,
                                              "end_token": 370,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FunctionDeclaration",
                  "label": "function checkIsUsingVite() {\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }",
                  "start_token": 377,
                  "end_token": 421,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "checkIsUsingVite",
                      "start_token": 378,
                      "end_token": 378,
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );\n    }",
                      "start_token": 381,
                      "end_token": 421,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      );",
                          "start_token": 382,
                          "end_token": 420,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "sitePath.apply(\n        (sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\")),\n      )",
                              "start_token": 383,
                              "end_token": 419,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "sitePath.apply",
                                  "start_token": 383,
                                  "end_token": 385,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "sitePath",
                                      "start_token": 383,
                                      "end_token": 383,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "apply",
                                      "start_token": 385,
                                      "end_token": 385,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(sitePath) =>\n          fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\"))",
                                  "start_token": 387,
                                  "end_token": 417,
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "sitePath",
                                      "start_token": 388,
                                      "end_token": 388,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "sitePath",
                                          "start_token": 388,
                                          "end_token": 388,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "start_token": 390,
                                      "end_token": 390,
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "fs.existsSync(path.join(sitePath, \"vite.config.ts\")) ||\n          fs.existsSync(path.join(sitePath, \"vite.config.js\"))",
                                      "start_token": 391,
                                      "end_token": 417,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "fs.existsSync(path.join(sitePath, \"vite.config.ts\"))",
                                          "start_token": 391,
                                          "end_token": 403,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "fs.existsSync",
                                              "start_token": 391,
                                              "end_token": 393,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "fs",
                                                  "start_token": 391,
                                                  "end_token": 391,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "existsSync",
                                                  "start_token": 393,
                                                  "end_token": 393,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "path.join(sitePath, \"vite.config.ts\")",
                                              "start_token": 395,
                                              "end_token": 402,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "path.join",
                                                  "start_token": 395,
                                                  "end_token": 397,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "path",
                                                      "start_token": 395,
                                                      "end_token": 395,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "join",
                                                      "start_token": 397,
                                                      "end_token": 397,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "sitePath",
                                                  "start_token": 399,
                                                  "end_token": 399,
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "\"vite.config.ts\"",
                                                  "start_token": 401,
                                                  "end_token": 401,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "BarBarToken",
                                          "label": "||",
                                          "start_token": 404,
                                          "end_token": 404,
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "fs.existsSync(path.join(sitePath, \"vite.config.js\"))",
                                          "start_token": 405,
                                          "end_token": 417,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "fs.existsSync",
                                              "start_token": 405,
                                              "end_token": 407,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "fs",
                                                  "start_token": 405,
                                                  "end_token": 405,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "existsSync",
                                                  "start_token": 407,
                                                  "end_token": 407,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "path.join(sitePath, \"vite.config.js\")",
                                              "start_token": 409,
                                              "end_token": 416,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "path.join",
                                                  "start_token": 409,
                                                  "end_token": 411,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "path",
                                                      "start_token": 409,
                                                      "end_token": 409,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "join",
                                                      "start_token": 411,
                                                      "end_token": 411,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "sitePath",
                                                  "start_token": 413,
                                                  "end_token": 413,
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "\"vite.config.js\"",
                                                  "start_token": 415,
                                                  "end_token": 415,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FunctionDeclaration",
                  "label": "function loadBuildOutput() {\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }",
                  "start_token": 422,
                  "end_token": 443,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "loadBuildOutput",
                      "start_token": 423,
                      "end_token": 423,
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };\n    }",
                      "start_token": 426,
                      "end_token": 443,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return {\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      };",
                          "start_token": 427,
                          "end_token": 442,
                          "children": [
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n        buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata(),\n      }",
                              "start_token": 428,
                              "end_token": 441,
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "buildMeta: $dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata()",
                                  "start_token": 429,
                                  "end_token": 439,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "buildMeta",
                                      "start_token": 429,
                                      "end_token": 429,
                                      "children": []
                                    },
                                    {
                                      "type": "ConditionalExpression",
                                      "label": "$dev ? loadBuildMetadataPlaceholder() : loadBuildMetadata()",
                                      "start_token": 431,
                                      "end_token": 439,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "$dev",
                                          "start_token": 431,
                                          "end_token": 431,
                                          "children": []
                                        },
                                        {
                                          "type": "QuestionToken",
                                          "label": "?",
                                          "start_token": 432,
                                          "end_token": 432,
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "loadBuildMetadataPlaceholder()",
                                          "start_token": 433,
                                          "end_token": 435,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "loadBuildMetadataPlaceholder",
                                              "start_token": 433,
                                              "end_token": 433,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ColonToken",
                                          "label": ":",
                                          "start_token": 436,
                                          "end_token": 436,
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "loadBuildMetadata()",
                                          "start_token": 437,
                                          "end_token": 439,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "loadBuildMetadata",
                                              "start_token": 437,
                                              "end_token": 437,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FunctionDeclaration",
                  "label": "function loadBuildMetadata() {\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }",
                  "start_token": 444,
                  "end_token": 554,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "loadBuildMetadata",
                      "start_token": 445,
                      "end_token": 445,
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );\n    }",
                      "start_token": 448,
                      "end_token": 554,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      );",
                          "start_token": 449,
                          "end_token": 553,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "all([outputPath, isUsingVite]).apply(\n        ([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        },\n      )",
                              "start_token": 450,
                              "end_token": 552,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "all([outputPath, isUsingVite]).apply",
                                  "start_token": 450,
                                  "end_token": 459,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "all([outputPath, isUsingVite])",
                                      "start_token": 450,
                                      "end_token": 457,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "all",
                                          "start_token": 450,
                                          "end_token": 450,
                                          "children": []
                                        },
                                        {
                                          "type": "ArrayLiteralExpression",
                                          "label": "[outputPath, isUsingVite]",
                                          "start_token": 452,
                                          "end_token": 456,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "outputPath",
                                              "start_token": 453,
                                              "end_token": 453,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "isUsingVite",
                                              "start_token": 455,
                                              "end_token": 455,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "apply",
                                      "start_token": 459,
                                      "end_token": 459,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "([outputPath, isUsingVite]) => {\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        }",
                                  "start_token": 461,
                                  "end_token": 550,
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "[outputPath, isUsingVite]",
                                      "start_token": 462,
                                      "end_token": 466,
                                      "children": [
                                        {
                                          "type": "ArrayBindingPattern",
                                          "label": "[outputPath, isUsingVite]",
                                          "start_token": 462,
                                          "end_token": 466,
                                          "children": [
                                            {
                                              "type": "BindingElement",
                                              "label": "outputPath",
                                              "start_token": 463,
                                              "end_token": 463,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "outputPath",
                                                  "start_token": 463,
                                                  "end_token": 463,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "BindingElement",
                                              "label": "isUsingVite",
                                              "start_token": 465,
                                              "end_token": 465,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "isUsingVite",
                                                  "start_token": 465,
                                                  "end_token": 465,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "start_token": 468,
                                      "end_token": 468,
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          // The path for all files that need to be in the \"/\" directory (static assets)\n          // is different when using Vite. These will be located in the \"build/client\"\n          // path of the output. It will be the \"public\" folder when using remix config.\n          const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";\n          const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";\n          return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };\n        }",
                                      "start_token": 469,
                                      "end_token": 550,
                                      "children": [
                                        {
                                          "type": "FirstStatement",
                                          "label": "const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\";",
                                          "start_token": 473,
                                          "end_token": 488,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\"",
                                              "start_token": 473,
                                              "end_token": 487,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "assetsPath = isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\"",
                                                  "start_token": 474,
                                                  "end_token": 487,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "assetsPath",
                                                      "start_token": 474,
                                                      "end_token": 474,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "isUsingVite\n            ? path.join(\"build\", \"client\")\n            : \"public\"",
                                                      "start_token": 476,
                                                      "end_token": 487,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "isUsingVite",
                                                          "start_token": 476,
                                                          "end_token": 476,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "start_token": 477,
                                                          "end_token": 477,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "path.join(\"build\", \"client\")",
                                                          "start_token": 478,
                                                          "end_token": 485,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "path.join",
                                                              "start_token": 478,
                                                              "end_token": 480,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "path",
                                                                  "start_token": 478,
                                                                  "end_token": 478,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "join",
                                                                  "start_token": 480,
                                                                  "end_token": 480,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "\"build\"",
                                                              "start_token": 482,
                                                              "end_token": 482,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "\"client\"",
                                                              "start_token": 484,
                                                              "end_token": 484,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "start_token": 486,
                                                          "end_token": 486,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "\"public\"",
                                                          "start_token": 487,
                                                          "end_token": 487,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstStatement",
                                          "label": "const assetsVersionedSubDir = isUsingVite ? undefined : \"build\";",
                                          "start_token": 489,
                                          "end_token": 497,
                                          "children": [
                                            {
                                              "type": "VariableDeclarationList",
                                              "label": "const assetsVersionedSubDir = isUsingVite ? undefined : \"build\"",
                                              "start_token": 489,
                                              "end_token": 496,
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "assetsVersionedSubDir = isUsingVite ? undefined : \"build\"",
                                                  "start_token": 490,
                                                  "end_token": 496,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "assetsVersionedSubDir",
                                                      "start_token": 490,
                                                      "end_token": 490,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "isUsingVite ? undefined : \"build\"",
                                                      "start_token": 492,
                                                      "end_token": 496,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "isUsingVite",
                                                          "start_token": 492,
                                                          "end_token": 492,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "start_token": 493,
                                                          "end_token": 493,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "undefined",
                                                          "start_token": 494,
                                                          "end_token": 494,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "start_token": 495,
                                                          "end_token": 495,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "\"build\"",
                                                          "start_token": 496,
                                                          "end_token": 496,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ReturnStatement",
                                          "label": "return {\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          };",
                                          "start_token": 498,
                                          "end_token": 549,
                                          "children": [
                                            {
                                              "type": "ObjectLiteralExpression",
                                              "label": "{\n            assetsPath,\n            assetsVersionedSubDir,\n            // create 1 behaviour for each top level asset file/folder\n            staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              ),\n          }",
                                              "start_token": 499,
                                              "end_token": 548,
                                              "children": [
                                                {
                                                  "type": "ShorthandPropertyAssignment",
                                                  "label": "assetsPath",
                                                  "start_token": 500,
                                                  "end_token": 500,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "assetsPath",
                                                      "start_token": 500,
                                                      "end_token": 500,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ShorthandPropertyAssignment",
                                                  "label": "assetsVersionedSubDir",
                                                  "start_token": 502,
                                                  "end_token": 502,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "assetsVersionedSubDir",
                                                      "start_token": 502,
                                                      "end_token": 502,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "staticRoutes: fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              )",
                                                  "start_token": 505,
                                                  "end_token": 546,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "staticRoutes",
                                                      "start_token": 505,
                                                      "end_token": 505,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map((item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name,\n              )",
                                                      "start_token": 507,
                                                      "end_token": 546,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })\n              .map",
                                                          "start_token": 507,
                                                          "end_token": 528,
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "fs\n              .readdirSync(path.join(outputPath, assetsPath), {\n                withFileTypes: true,\n              })",
                                                              "start_token": 507,
                                                              "end_token": 526,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "fs\n              .readdirSync",
                                                                  "start_token": 507,
                                                                  "end_token": 509,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "fs",
                                                                      "start_token": 507,
                                                                      "end_token": 507,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "readdirSync",
                                                                      "start_token": 509,
                                                                      "end_token": 509,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "path.join(outputPath, assetsPath)",
                                                                  "start_token": 511,
                                                                  "end_token": 518,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "path.join",
                                                                      "start_token": 511,
                                                                      "end_token": 513,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "path",
                                                                          "start_token": 511,
                                                                          "end_token": 511,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "join",
                                                                          "start_token": 513,
                                                                          "end_token": 513,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "outputPath",
                                                                      "start_token": 515,
                                                                      "end_token": 515,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "assetsPath",
                                                                      "start_token": 517,
                                                                      "end_token": 517,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ObjectLiteralExpression",
                                                                  "label": "{\n                withFileTypes: true,\n              }",
                                                                  "start_token": 520,
                                                                  "end_token": 525,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAssignment",
                                                                      "label": "withFileTypes: true",
                                                                      "start_token": 521,
                                                                      "end_token": 523,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "withFileTypes",
                                                                          "start_token": 521,
                                                                          "end_token": 521,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "TrueKeyword",
                                                                          "label": "true",
                                                                          "start_token": 523,
                                                                          "end_token": 523,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "map",
                                                              "start_token": 528,
                                                              "end_token": 528,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ArrowFunction",
                                                          "label": "(item) =>\n                item.isDirectory() ? `${item.name}/(.*)` : item.name",
                                                          "start_token": 530,
                                                          "end_token": 544,
                                                          "children": [
                                                            {
                                                              "type": "Parameter",
                                                              "label": "item",
                                                              "start_token": 531,
                                                              "end_token": 531,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "item",
                                                                  "start_token": 531,
                                                                  "end_token": 531,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsGreaterThanToken",
                                                              "label": "=>",
                                                              "start_token": 533,
                                                              "end_token": 533,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "ConditionalExpression",
                                                              "label": "item.isDirectory() ? `${item.name}/(.*)` : item.name",
                                                              "start_token": 534,
                                                              "end_token": 544,
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "item.isDirectory()",
                                                                  "start_token": 534,
                                                                  "end_token": 538,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "item.isDirectory",
                                                                      "start_token": 534,
                                                                      "end_token": 536,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "item",
                                                                          "start_token": 534,
                                                                          "end_token": 534,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "isDirectory",
                                                                          "start_token": 536,
                                                                          "end_token": 536,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "QuestionToken",
                                                                  "label": "?",
                                                                  "start_token": 539,
                                                                  "end_token": 539,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "TemplateExpression",
                                                                  "label": "`${item.name}/(.*)`",
                                                                  "start_token": 540,
                                                                  "end_token": 540,
                                                                  "children": [
                                                                    {
                                                                      "type": "TemplateHead",
                                                                      "label": "`${",
                                                                      "start_token": 540,
                                                                      "end_token": 540,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TemplateSpan",
                                                                      "label": "item.name}/(.*)`",
                                                                      "start_token": 540,
                                                                      "end_token": 540,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "item.name",
                                                                          "start_token": 540,
                                                                          "end_token": 540,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "item",
                                                                              "start_token": 540,
                                                                              "end_token": 540,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "name",
                                                                              "start_token": 540,
                                                                              "end_token": 540,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "LastTemplateToken",
                                                                          "label": "}/(.*)`",
                                                                          "start_token": 540,
                                                                          "end_token": 540,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ColonToken",
                                                                  "label": ":",
                                                                  "start_token": 541,
                                                                  "end_token": 541,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "item.name",
                                                                  "start_token": 542,
                                                                  "end_token": 544,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "item",
                                                                      "start_token": 542,
                                                                      "end_token": 542,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "name",
                                                                      "start_token": 544,
                                                                      "end_token": 544,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FunctionDeclaration",
                  "label": "function loadBuildMetadataPlaceholder() {\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }",
                  "start_token": 555,
                  "end_token": 577,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "loadBuildMetadataPlaceholder",
                      "start_token": 556,
                      "end_token": 556,
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };\n    }",
                      "start_token": 559,
                      "end_token": 577,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return {\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      };",
                          "start_token": 560,
                          "end_token": 576,
                          "children": [
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n        assetsPath: \"placeholder\",\n        assetsVersionedSubDir: undefined,\n        staticRoutes: [],\n      }",
                              "start_token": 561,
                              "end_token": 575,
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "assetsPath: \"placeholder\"",
                                  "start_token": 562,
                                  "end_token": 564,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "assetsPath",
                                      "start_token": 562,
                                      "end_token": 562,
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "\"placeholder\"",
                                      "start_token": 564,
                                      "end_token": 564,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "assetsVersionedSubDir: undefined",
                                  "start_token": 566,
                                  "end_token": 568,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "assetsVersionedSubDir",
                                      "start_token": 566,
                                      "end_token": 566,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "undefined",
                                      "start_token": 568,
                                      "end_token": 568,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "staticRoutes: []",
                                  "start_token": 570,
                                  "end_token": 573,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "staticRoutes",
                                      "start_token": 570,
                                      "end_token": 570,
                                      "children": []
                                    },
                                    {
                                      "type": "ArrayLiteralExpression",
                                      "label": "[]",
                                      "start_token": 572,
                                      "end_token": 573,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FunctionDeclaration",
                  "label": "function buildPlan() {\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }",
                  "start_token": 578,
                  "end_token": 704,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "buildPlan",
                      "start_token": 579,
                      "end_token": 579,
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );\n    }",
                      "start_token": 582,
                      "end_token": 704,
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      );",
                          "start_token": 583,
                          "end_token": 703,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "all([isUsingVite, outputPath, buildMeta]).apply(\n        ([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        },\n      )",
                              "start_token": 584,
                              "end_token": 702,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "all([isUsingVite, outputPath, buildMeta]).apply",
                                  "start_token": 584,
                                  "end_token": 595,
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "all([isUsingVite, outputPath, buildMeta])",
                                      "start_token": 584,
                                      "end_token": 593,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "all",
                                          "start_token": 584,
                                          "end_token": 584,
                                          "children": []
                                        },
                                        {
                                          "type": "ArrayLiteralExpression",
                                          "label": "[isUsingVite, outputPath, buildMeta]",
                                          "start_token": 586,
                                          "end_token": 592,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isUsingVite",
                                              "start_token": 587,
                                              "end_token": 587,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "outputPath",
                                              "start_token": 589,
                                              "end_token": 589,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "buildMeta",
                                              "start_token": 591,
                                              "end_token": 591,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "apply",
                                      "start_token": 595,
                                      "end_token": 595,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "([isUsingVite, outputPath, buildMeta]) => {\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        }",
                                  "start_token": 597,
                                  "end_token": 700,
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "[isUsingVite, outputPath, buildMeta]",
                                      "start_token": 598,
                                      "end_token": 604,
                                      "children": [
                                        {
                                          "type": "ArrayBindingPattern",
                                          "label": "[isUsingVite, outputPath, buildMeta]",
                                          "start_token": 598,
                                          "end_token": 604,
                                          "children": [
                                            {
                                              "type": "BindingElement",
                                              "label": "isUsingVite",
                                              "start_token": 599,
                                              "end_token": 599,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "isUsingVite",
                                                  "start_token": 599,
                                                  "end_token": 599,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "BindingElement",
                                              "label": "outputPath",
                                              "start_token": 601,
                                              "end_token": 601,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "outputPath",
                                                  "start_token": 601,
                                                  "end_token": 601,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "BindingElement",
                                              "label": "buildMeta",
                                              "start_token": 603,
                                              "end_token": 603,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "buildMeta",
                                                  "start_token": 603,
                                                  "end_token": 603,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "start_token": 606,
                                      "end_token": 606,
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });\n        }",
                                      "start_token": 607,
                                      "end_token": 700,
                                      "children": [
                                        {
                                          "type": "ReturnStatement",
                                          "label": "return validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          });",
                                          "start_token": 608,
                                          "end_token": 699,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "validatePlan({\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          })",
                                              "start_token": 609,
                                              "end_token": 698,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "validatePlan",
                                                  "start_token": 609,
                                                  "end_token": 609,
                                                  "children": []
                                                },
                                                {
                                                  "type": "ObjectLiteralExpression",
                                                  "label": "{\n            server: createServerLambdaBundle(isUsingVite, outputPath),\n            assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            },\n            routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ],\n          }",
                                                  "start_token": 611,
                                                  "end_token": 697,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "server: createServerLambdaBundle(isUsingVite, outputPath)",
                                                      "start_token": 612,
                                                      "end_token": 619,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "server",
                                                          "start_token": 612,
                                                          "end_token": 612,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "createServerLambdaBundle(isUsingVite, outputPath)",
                                                          "start_token": 614,
                                                          "end_token": 619,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "createServerLambdaBundle",
                                                              "start_token": 614,
                                                              "end_token": 614,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "isUsingVite",
                                                              "start_token": 616,
                                                              "end_token": 616,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "outputPath",
                                                              "start_token": 618,
                                                              "end_token": 618,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "assets: {\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            }",
                                                      "start_token": 621,
                                                      "end_token": 652,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "assets",
                                                          "start_token": 621,
                                                          "end_token": 621,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{\n              copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ],\n            }",
                                                          "start_token": 623,
                                                          "end_token": 652,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "copy: [\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ]",
                                                              "start_token": 624,
                                                              "end_token": 650,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "copy",
                                                                  "start_token": 624,
                                                                  "end_token": 624,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ArrayLiteralExpression",
                                                                  "label": "[\n                {\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                },\n              ]",
                                                                  "start_token": 626,
                                                                  "end_token": 650,
                                                                  "children": [
                                                                    {
                                                                      "type": "ObjectLiteralExpression",
                                                                      "label": "{\n                  from: buildMeta.assetsPath,\n                  to: \"\",\n                  cached: true,\n                  versionedSubDir: buildMeta.assetsVersionedSubDir,\n                }",
                                                                      "start_token": 627,
                                                                      "end_token": 648,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "from: buildMeta.assetsPath",
                                                                          "start_token": 628,
                                                                          "end_token": 632,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "from",
                                                                              "start_token": 628,
                                                                              "end_token": 628,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "buildMeta.assetsPath",
                                                                              "start_token": 630,
                                                                              "end_token": 632,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "buildMeta",
                                                                                  "start_token": 630,
                                                                                  "end_token": 630,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "assetsPath",
                                                                                  "start_token": 632,
                                                                                  "end_token": 632,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "to: \"\"",
                                                                          "start_token": 634,
                                                                          "end_token": 636,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "to",
                                                                              "start_token": 634,
                                                                              "end_token": 634,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "\"\"",
                                                                              "start_token": 636,
                                                                              "end_token": 636,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "cached: true",
                                                                          "start_token": 638,
                                                                          "end_token": 640,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "cached",
                                                                              "start_token": 638,
                                                                              "end_token": 638,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "TrueKeyword",
                                                                              "label": "true",
                                                                              "start_token": 640,
                                                                              "end_token": 640,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "versionedSubDir: buildMeta.assetsVersionedSubDir",
                                                                          "start_token": 642,
                                                                          "end_token": 646,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "versionedSubDir",
                                                                              "start_token": 642,
                                                                              "end_token": 642,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "buildMeta.assetsVersionedSubDir",
                                                                              "start_token": 644,
                                                                              "end_token": 646,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "buildMeta",
                                                                                  "start_token": 644,
                                                                                  "end_token": 644,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "assetsVersionedSubDir",
                                                                                  "start_token": 646,
                                                                                  "end_token": 646,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PropertyAssignment",
                                                      "label": "routes: [\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ]",
                                                      "start_token": 654,
                                                      "end_token": 695,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "routes",
                                                          "start_token": 654,
                                                          "end_token": 654,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ArrayLiteralExpression",
                                                          "label": "[\n              {\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              },\n              {\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              },\n            ]",
                                                          "start_token": 656,
                                                          "end_token": 695,
                                                          "children": [
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{\n                regex: pathToRegexp(buildMeta.staticRoutes).source,\n                origin: \"assets\" as const,\n              }",
                                                              "start_token": 657,
                                                              "end_token": 675,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "regex: pathToRegexp(buildMeta.staticRoutes).source",
                                                                  "start_token": 658,
                                                                  "end_token": 667,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "regex",
                                                                      "start_token": 658,
                                                                      "end_token": 658,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "pathToRegexp(buildMeta.staticRoutes).source",
                                                                      "start_token": 660,
                                                                      "end_token": 667,
                                                                      "children": [
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "pathToRegexp(buildMeta.staticRoutes)",
                                                                          "start_token": 660,
                                                                          "end_token": 665,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "pathToRegexp",
                                                                              "start_token": 660,
                                                                              "end_token": 660,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "buildMeta.staticRoutes",
                                                                              "start_token": 662,
                                                                              "end_token": 664,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "buildMeta",
                                                                                  "start_token": 662,
                                                                                  "end_token": 662,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "staticRoutes",
                                                                                  "start_token": 664,
                                                                                  "end_token": 664,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "source",
                                                                          "start_token": 667,
                                                                          "end_token": 667,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "origin: \"assets\" as const",
                                                                  "start_token": 669,
                                                                  "end_token": 673,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "origin",
                                                                      "start_token": 669,
                                                                      "end_token": 669,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "AsExpression",
                                                                      "label": "\"assets\" as const",
                                                                      "start_token": 671,
                                                                      "end_token": 673,
                                                                      "children": [
                                                                        {
                                                                          "type": "StringLiteral",
                                                                          "label": "\"assets\"",
                                                                          "start_token": 671,
                                                                          "end_token": 671,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "TypeReference",
                                                                          "label": "const",
                                                                          "start_token": 673,
                                                                          "end_token": 673,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "const",
                                                                              "start_token": 673,
                                                                              "end_token": 673,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{\n                regex: pathToRegexp(\"(.*)\").source,\n                origin: \"server\" as const,\n              }",
                                                              "start_token": 677,
                                                              "end_token": 693,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "regex: pathToRegexp(\"(.*)\").source",
                                                                  "start_token": 678,
                                                                  "end_token": 685,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "regex",
                                                                      "start_token": 678,
                                                                      "end_token": 678,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "pathToRegexp(\"(.*)\").source",
                                                                      "start_token": 680,
                                                                      "end_token": 685,
                                                                      "children": [
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "pathToRegexp(\"(.*)\")",
                                                                          "start_token": 680,
                                                                          "end_token": 683,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "pathToRegexp",
                                                                              "start_token": 680,
                                                                              "end_token": 680,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "\"(.*)\"",
                                                                              "start_token": 682,
                                                                              "end_token": 682,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "source",
                                                                          "start_token": 685,
                                                                          "end_token": 685,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "origin: \"server\" as const",
                                                                  "start_token": 687,
                                                                  "end_token": 691,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "origin",
                                                                      "start_token": 687,
                                                                      "end_token": 687,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "AsExpression",
                                                                      "label": "\"server\" as const",
                                                                      "start_token": 689,
                                                                      "end_token": 691,
                                                                      "children": [
                                                                        {
                                                                          "type": "StringLiteral",
                                                                          "label": "\"server\"",
                                                                          "start_token": 689,
                                                                          "end_token": 689,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "TypeReference",
                                                                          "label": "const",
                                                                          "start_token": 691,
                                                                          "end_token": 691,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "const",
                                                                              "start_token": 691,
                                                                              "end_token": 691,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FunctionDeclaration",
                  "label": "function createServerLambdaBundle(\n      isUsingVite: boolean,\n      outputPath: string,\n    ) {\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }",
                  "start_token": 705,
                  "end_token": 991,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "createServerLambdaBundle",
                      "start_token": 706,
                      "end_token": 706,
                      "children": []
                    },
                    {
                      "type": "Parameter",
                      "label": "isUsingVite: boolean",
                      "start_token": 708,
                      "end_token": 710,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isUsingVite",
                          "start_token": 708,
                          "end_token": 708,
                          "children": []
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "start_token": 710,
                          "end_token": 710,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Parameter",
                      "label": "outputPath: string",
                      "start_token": 712,
                      "end_token": 714,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "outputPath",
                          "start_token": 712,
                          "end_token": 712,
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "start_token": 714,
                          "end_token": 714,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      // Create a Lambda@Edge handler for the Remix server bundle.\n      //\n      // Note: Remix does perform their own internal ESBuild process, but it\n      // doesn't bundle 3rd party dependencies by default. In the interest of\n      // keeping deployments seamless for users we will create a server bundle\n      // with all dependencies included. We will still need to consider how to\n      // address any need for external dependencies, although I think we should\n      // possibly consider this at a later date.\n      // In this path we are assuming that the Remix build only outputs the\n      // \"core server build\". We can safely assume this as we have guarded the\n      // remix.config.js to ensure it matches our expectations for the build\n      // configuration.\n      // We need to ensure that the \"core server build\" is wrapped with an\n      // appropriate Lambda@Edge handler. We will utilise an internal asset\n      // template to create this wrapper within the \"core server build\" output\n      // directory.\n      // Ensure build directory exists\n      const buildPath = path.join(outputPath, \"build\");\n      fs.mkdirSync(buildPath, { recursive: true });\n      // Copy the server lambda handler and pre-append the build injection based\n      // on the config file used.\n      const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");\n      fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);\n      const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };\n      return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };\n    }",
                      "start_token": 717,
                      "end_token": 991,
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "const buildPath = path.join(outputPath, \"build\");",
                          "start_token": 735,
                          "end_token": 746,
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const buildPath = path.join(outputPath, \"build\")",
                              "start_token": 735,
                              "end_token": 745,
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "buildPath = path.join(outputPath, \"build\")",
                                  "start_token": 736,
                                  "end_token": 745,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "buildPath",
                                      "start_token": 736,
                                      "end_token": 736,
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "path.join(outputPath, \"build\")",
                                      "start_token": 738,
                                      "end_token": 745,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "path.join",
                                          "start_token": 738,
                                          "end_token": 740,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "path",
                                              "start_token": 738,
                                              "end_token": 738,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "join",
                                              "start_token": 740,
                                              "end_token": 740,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "outputPath",
                                          "start_token": 742,
                                          "end_token": 742,
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "\"build\"",
                                          "start_token": 744,
                                          "end_token": 744,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "fs.mkdirSync(buildPath, { recursive: true });",
                          "start_token": 747,
                          "end_token": 759,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "fs.mkdirSync(buildPath, { recursive: true })",
                              "start_token": 747,
                              "end_token": 758,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "fs.mkdirSync",
                                  "start_token": 747,
                                  "end_token": 749,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fs",
                                      "start_token": 747,
                                      "end_token": 747,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "mkdirSync",
                                      "start_token": 749,
                                      "end_token": 749,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "buildPath",
                                  "start_token": 751,
                                  "end_token": 751,
                                  "children": []
                                },
                                {
                                  "type": "ObjectLiteralExpression",
                                  "label": "{ recursive: true }",
                                  "start_token": 753,
                                  "end_token": 757,
                                  "children": [
                                    {
                                      "type": "PropertyAssignment",
                                      "label": "recursive: true",
                                      "start_token": 754,
                                      "end_token": 756,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "recursive",
                                          "start_token": 754,
                                          "end_token": 754,
                                          "children": []
                                        },
                                        {
                                          "type": "TrueKeyword",
                                          "label": "true",
                                          "start_token": 756,
                                          "end_token": 756,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\");",
                          "start_token": 762,
                          "end_token": 810,
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\")",
                              "start_token": 762,
                              "end_token": 809,
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "content = [\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\")",
                                  "start_token": 763,
                                  "end_token": 809,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "content",
                                      "start_token": 763,
                                      "end_token": 763,
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "[\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join(\"\\n\")",
                                      "start_token": 765,
                                      "end_token": 809,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "[\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ].join",
                                          "start_token": 765,
                                          "end_token": 806,
                                          "children": [
                                            {
                                              "type": "ArrayLiteralExpression",
                                              "label": "[\n        // When using Vite config, the output build will be \"server/index.js\"\n        // and when using Remix config it will be `server.js`.\n        //isUsingVite\n        //  ? `import * as remixServerBuild from \"./server/index.js\";`\n        //  : `import * as remixServerBuild from \"./index.js\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`import * as remixServerBuild from \"./server\";`,\n        //`import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        //`export default {`,\n        //`  async fetch(request) {`,\n        //`    const requestHandler = createRequestHandler(remixServerBuild);`,\n        //`    return await requestHandler(request);`,\n        //`  },`,\n        //`};`,\n        `import { createRequestHandler } from \"@remix-run/cloudflare\";`,\n        `import * as build from \"./server/index.js\";`,\n        `export default {`,\n        `  async fetch(request) {`,\n        `    console.log(\"fetch\");`,\n        `    console.log(\"build\", build);`,\n        `    console.log(\"build mode\", build.mode);`,\n        `    const handleRequest = createRequestHandler(build);`,\n        `    console.log(\"handleRequest\", handleRequest);`,\n        `    return await handleRequest(request);`,\n        `  },`,\n        `};`,\n      ]",
                                              "start_token": 765,
                                              "end_token": 804,
                                              "children": [
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`import { createRequestHandler } from \"@remix-run/cloudflare\";`",
                                                  "start_token": 780,
                                                  "end_token": 780,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`import * as build from \"./server/index.js\";`",
                                                  "start_token": 782,
                                                  "end_token": 782,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`export default {`",
                                                  "start_token": 784,
                                                  "end_token": 784,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`  async fetch(request) {`",
                                                  "start_token": 786,
                                                  "end_token": 786,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`    console.log(\"fetch\");`",
                                                  "start_token": 788,
                                                  "end_token": 788,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`    console.log(\"build\", build);`",
                                                  "start_token": 790,
                                                  "end_token": 790,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`    console.log(\"build mode\", build.mode);`",
                                                  "start_token": 792,
                                                  "end_token": 792,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`    const handleRequest = createRequestHandler(build);`",
                                                  "start_token": 794,
                                                  "end_token": 794,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`    console.log(\"handleRequest\", handleRequest);`",
                                                  "start_token": 796,
                                                  "end_token": 796,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`    return await handleRequest(request);`",
                                                  "start_token": 798,
                                                  "end_token": 798,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`  },`",
                                                  "start_token": 800,
                                                  "end_token": 800,
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstTemplateToken",
                                                  "label": "`};`",
                                                  "start_token": 802,
                                                  "end_token": 802,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "join",
                                              "start_token": 806,
                                              "end_token": 806,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "\"\\n\"",
                                          "start_token": 808,
                                          "end_token": 808,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "fs.writeFileSync(path.join(buildPath, \"server.ts\"), content);",
                          "start_token": 811,
                          "end_token": 826,
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "fs.writeFileSync(path.join(buildPath, \"server.ts\"), content)",
                              "start_token": 811,
                              "end_token": 825,
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "fs.writeFileSync",
                                  "start_token": 811,
                                  "end_token": 813,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fs",
                                      "start_token": 811,
                                      "end_token": 811,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "writeFileSync",
                                      "start_token": 813,
                                      "end_token": 813,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "path.join(buildPath, \"server.ts\")",
                                  "start_token": 815,
                                  "end_token": 822,
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "path.join",
                                      "start_token": 815,
                                      "end_token": 817,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "path",
                                          "start_token": 815,
                                          "end_token": 815,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "join",
                                          "start_token": 817,
                                          "end_token": 817,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "buildPath",
                                      "start_token": 819,
                                      "end_token": 819,
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "\"server.ts\"",
                                      "start_token": 821,
                                      "end_token": 821,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "content",
                                  "start_token": 824,
                                  "end_token": 824,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      };",
                          "start_token": 827,
                          "end_token": 934,
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      }",
                              "start_token": 827,
                              "end_token": 933,
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "nodeBuiltInModulesPlugin: Plugin = {\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      }",
                                  "start_token": 828,
                                  "end_token": 933,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "nodeBuiltInModulesPlugin",
                                      "start_token": 828,
                                      "end_token": 828,
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Plugin",
                                      "start_token": 830,
                                      "end_token": 830,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Plugin",
                                          "start_token": 830,
                                          "end_token": 830,
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n        name: \"node:built-in:modules\",\n        setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        },\n      }",
                                      "start_token": 832,
                                      "end_token": 933,
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "name: \"node:built-in:modules\"",
                                          "start_token": 833,
                                          "end_token": 835,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "name",
                                              "start_token": 833,
                                              "end_token": 833,
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "\"node:built-in:modules\"",
                                              "start_token": 835,
                                              "end_token": 835,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "MethodDeclaration",
                                          "label": "setup(build) {\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        }",
                                          "start_token": 837,
                                          "end_token": 931,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "setup",
                                              "start_token": 837,
                                              "end_token": 837,
                                              "children": []
                                            },
                                            {
                                              "type": "Parameter",
                                              "label": "build",
                                              "start_token": 839,
                                              "end_token": 839,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "build",
                                                  "start_token": 839,
                                                  "end_token": 839,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });\n          // we convert the imports we tagged with the node-built-in-modules namespace so that instead of `require(\"node:*\")`\n          // they import from `export * from \"node:*\";`\n          build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );\n        }",
                                              "start_token": 841,
                                              "end_token": 931,
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          });",
                                                  "start_token": 842,
                                                  "end_token": 888,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "build.onResolve({ filter: /^(util|stream)$/ }, ({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          })",
                                                      "start_token": 842,
                                                      "end_token": 887,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "build.onResolve",
                                                          "start_token": 842,
                                                          "end_token": 844,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "build",
                                                              "start_token": 842,
                                                              "end_token": 842,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "onResolve",
                                                              "start_token": 844,
                                                              "end_token": 844,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{ filter: /^(util|stream)$/ }",
                                                          "start_token": 846,
                                                          "end_token": 857,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "filter: /^(util|stream)$/",
                                                              "start_token": 847,
                                                              "end_token": 856,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "filter",
                                                                  "start_token": 847,
                                                                  "end_token": 847,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "RegularExpressionLiteral",
                                                                  "label": "/^(util|stream)$/",
                                                                  "start_token": 849,
                                                                  "end_token": 856,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ArrowFunction",
                                                          "label": "({ kind, path }) => {\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          }",
                                                          "start_token": 859,
                                                          "end_token": 886,
                                                          "children": [
                                                            {
                                                              "type": "Parameter",
                                                              "label": "{ kind, path }",
                                                              "start_token": 860,
                                                              "end_token": 864,
                                                              "children": [
                                                                {
                                                                  "type": "ObjectBindingPattern",
                                                                  "label": "{ kind, path }",
                                                                  "start_token": 860,
                                                                  "end_token": 864,
                                                                  "children": [
                                                                    {
                                                                      "type": "BindingElement",
                                                                      "label": "kind",
                                                                      "start_token": 861,
                                                                      "end_token": 861,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "kind",
                                                                          "start_token": 861,
                                                                          "end_token": 861,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "BindingElement",
                                                                      "label": "path",
                                                                      "start_token": 863,
                                                                      "end_token": 863,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "path",
                                                                          "start_token": 863,
                                                                          "end_token": 863,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsGreaterThanToken",
                                                              "label": "=>",
                                                              "start_token": 866,
                                                              "end_token": 866,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            // this plugin converts `require(\"node:*\")` calls, those are the only ones that\n            // need updating (esm imports to \"node:*\" are totally valid), so here we tag with the\n            // node-buffer namespace only imports that are require calls\n            return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;\n          }",
                                                              "start_token": 867,
                                                              "end_token": 886,
                                                              "children": [
                                                                {
                                                                  "type": "ReturnStatement",
                                                                  "label": "return kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined;",
                                                                  "start_token": 871,
                                                                  "end_token": 885,
                                                                  "children": [
                                                                    {
                                                                      "type": "ConditionalExpression",
                                                                      "label": "kind === \"require-call\"\n              ? { path, namespace: \"node-built-in-modules\" }\n              : undefined",
                                                                      "start_token": 872,
                                                                      "end_token": 884,
                                                                      "children": [
                                                                        {
                                                                          "type": "BinaryExpression",
                                                                          "label": "kind === \"require-call\"",
                                                                          "start_token": 872,
                                                                          "end_token": 874,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "kind",
                                                                              "start_token": 872,
                                                                              "end_token": 872,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "EqualsEqualsEqualsToken",
                                                                              "label": "===",
                                                                              "start_token": 873,
                                                                              "end_token": 873,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "\"require-call\"",
                                                                              "start_token": 874,
                                                                              "end_token": 874,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "QuestionToken",
                                                                          "label": "?",
                                                                          "start_token": 875,
                                                                          "end_token": 875,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "ObjectLiteralExpression",
                                                                          "label": "{ path, namespace: \"node-built-in-modules\" }",
                                                                          "start_token": 876,
                                                                          "end_token": 882,
                                                                          "children": [
                                                                            {
                                                                              "type": "ShorthandPropertyAssignment",
                                                                              "label": "path",
                                                                              "start_token": 877,
                                                                              "end_token": 877,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "path",
                                                                                  "start_token": 877,
                                                                                  "end_token": 877,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "namespace: \"node-built-in-modules\"",
                                                                              "start_token": 879,
                                                                              "end_token": 881,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "namespace",
                                                                                  "start_token": 879,
                                                                                  "end_token": 879,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "StringLiteral",
                                                                                  "label": "\"node-built-in-modules\"",
                                                                                  "start_token": 881,
                                                                                  "end_token": 881,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "ColonToken",
                                                                          "label": ":",
                                                                          "start_token": 883,
                                                                          "end_token": 883,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "undefined",
                                                                          "start_token": 884,
                                                                          "end_token": 884,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          );",
                                                  "start_token": 891,
                                                  "end_token": 930,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "build.onLoad(\n            { filter: /.*/, namespace: \"node-built-in-modules\" },\n            ({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            },\n          )",
                                                      "start_token": 891,
                                                      "end_token": 929,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "build.onLoad",
                                                          "start_token": 891,
                                                          "end_token": 893,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "build",
                                                              "start_token": 891,
                                                              "end_token": 891,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "onLoad",
                                                              "start_token": 893,
                                                              "end_token": 893,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ObjectLiteralExpression",
                                                          "label": "{ filter: /.*/, namespace: \"node-built-in-modules\" }",
                                                          "start_token": 895,
                                                          "end_token": 906,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "filter: /.*/",
                                                              "start_token": 896,
                                                              "end_token": 901,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "filter",
                                                                  "start_token": 896,
                                                                  "end_token": 896,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "RegularExpressionLiteral",
                                                                  "label": "/.*/",
                                                                  "start_token": 898,
                                                                  "end_token": 901,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "PropertyAssignment",
                                                              "label": "namespace: \"node-built-in-modules\"",
                                                              "start_token": 903,
                                                              "end_token": 905,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "namespace",
                                                                  "start_token": 903,
                                                                  "end_token": 903,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "\"node-built-in-modules\"",
                                                                  "start_token": 905,
                                                                  "end_token": 905,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ArrowFunction",
                                                          "label": "({ path }) => {\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            }",
                                                          "start_token": 908,
                                                          "end_token": 927,
                                                          "children": [
                                                            {
                                                              "type": "Parameter",
                                                              "label": "{ path }",
                                                              "start_token": 909,
                                                              "end_token": 911,
                                                              "children": [
                                                                {
                                                                  "type": "ObjectBindingPattern",
                                                                  "label": "{ path }",
                                                                  "start_token": 909,
                                                                  "end_token": 911,
                                                                  "children": [
                                                                    {
                                                                      "type": "BindingElement",
                                                                      "label": "path",
                                                                      "start_token": 910,
                                                                      "end_token": 910,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "path",
                                                                          "start_token": 910,
                                                                          "end_token": 910,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsGreaterThanToken",
                                                              "label": "=>",
                                                              "start_token": 913,
                                                              "end_token": 913,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n              return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };\n            }",
                                                              "start_token": 914,
                                                              "end_token": 927,
                                                              "children": [
                                                                {
                                                                  "type": "ReturnStatement",
                                                                  "label": "return {\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              };",
                                                                  "start_token": 915,
                                                                  "end_token": 926,
                                                                  "children": [
                                                                    {
                                                                      "type": "ObjectLiteralExpression",
                                                                      "label": "{\n                contents: `export * from 'node:${path}'`,\n                loader: \"js\",\n              }",
                                                                      "start_token": 916,
                                                                      "end_token": 925,
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "contents: `export * from 'node:${path}'`",
                                                                          "start_token": 917,
                                                                          "end_token": 919,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "contents",
                                                                              "start_token": 917,
                                                                              "end_token": 917,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "TemplateExpression",
                                                                              "label": "`export * from 'node:${path}'`",
                                                                              "start_token": 919,
                                                                              "end_token": 919,
                                                                              "children": [
                                                                                {
                                                                                  "type": "TemplateHead",
                                                                                  "label": "`export * from 'node:${",
                                                                                  "start_token": 919,
                                                                                  "end_token": 919,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "TemplateSpan",
                                                                                  "label": "path}'`",
                                                                                  "start_token": 919,
                                                                                  "end_token": 919,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "path",
                                                                                      "start_token": 919,
                                                                                      "end_token": 919,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "LastTemplateToken",
                                                                                      "label": "}'`",
                                                                                      "start_token": 919,
                                                                                      "end_token": 919,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "loader: \"js\"",
                                                                          "start_token": 921,
                                                                          "end_token": 923,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "loader",
                                                                              "start_token": 921,
                                                                              "end_token": 921,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "\"js\"",
                                                                              "start_token": 923,
                                                                              "end_token": 923,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return {\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      };",
                          "start_token": 935,
                          "end_token": 990,
                          "children": [
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n        handler: path.join(buildPath, \"server.ts\"),\n        build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        },\n      }",
                              "start_token": 936,
                              "end_token": 989,
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "handler: path.join(buildPath, \"server.ts\")",
                                  "start_token": 937,
                                  "end_token": 946,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "handler",
                                      "start_token": 937,
                                      "end_token": 937,
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "path.join(buildPath, \"server.ts\")",
                                      "start_token": 939,
                                      "end_token": 946,
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "path.join",
                                          "start_token": 939,
                                          "end_token": 941,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "path",
                                              "start_token": 939,
                                              "end_token": 939,
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "join",
                                              "start_token": 941,
                                              "end_token": 941,
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "buildPath",
                                          "start_token": 943,
                                          "end_token": 943,
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "\"server.ts\"",
                                          "start_token": 945,
                                          "end_token": 945,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "build: {\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        }",
                                  "start_token": 948,
                                  "end_token": 987,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "build",
                                      "start_token": 948,
                                      "end_token": 948,
                                      "children": []
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n          esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          },\n        }",
                                      "start_token": 950,
                                      "end_token": 987,
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "esbuild: {\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          }",
                                          "start_token": 951,
                                          "end_token": 985,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "esbuild",
                                              "start_token": 951,
                                              "end_token": 951,
                                              "children": []
                                            },
                                            {
                                              "type": "ObjectLiteralExpression",
                                              "label": "{\n            define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            },\n            plugins: [nodeBuiltInModulesPlugin],\n          }",
                                              "start_token": 953,
                                              "end_token": 985,
                                              "children": [
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "define: {\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            }",
                                                  "start_token": 954,
                                                  "end_token": 977,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "define",
                                                      "start_token": 954,
                                                      "end_token": 954,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ObjectLiteralExpression",
                                                      "label": "{\n              process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }),\n            }",
                                                      "start_token": 956,
                                                      "end_token": 977,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAssignment",
                                                          "label": "process: JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              })",
                                                          "start_token": 957,
                                                          "end_token": 975,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "process",
                                                              "start_token": 957,
                                                              "end_token": 957,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "JSON.stringify({\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              })",
                                                              "start_token": 959,
                                                              "end_token": 975,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "JSON.stringify",
                                                                  "start_token": 959,
                                                                  "end_token": 961,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "JSON",
                                                                      "start_token": 959,
                                                                      "end_token": 959,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "stringify",
                                                                      "start_token": 961,
                                                                      "end_token": 961,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ObjectLiteralExpression",
                                                                  "label": "{\n                env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                },\n              }",
                                                                  "start_token": 963,
                                                                  "end_token": 974,
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAssignment",
                                                                      "label": "env: {\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                }",
                                                                      "start_token": 964,
                                                                      "end_token": 972,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "env",
                                                                          "start_token": 964,
                                                                          "end_token": 964,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "ObjectLiteralExpression",
                                                                          "label": "{\n                  //NODE_ENV: \"production\",\n                  NODE_ENV: \"development\",\n                }",
                                                                          "start_token": 966,
                                                                          "end_token": 972,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "NODE_ENV: \"development\"",
                                                                              "start_token": 968,
                                                                              "end_token": 970,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "NODE_ENV",
                                                                                  "start_token": 968,
                                                                                  "end_token": 968,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "StringLiteral",
                                                                                  "label": "\"development\"",
                                                                                  "start_token": 970,
                                                                                  "end_token": 970,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "plugins: [nodeBuiltInModulesPlugin]",
                                                  "start_token": 979,
                                                  "end_token": 983,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "plugins",
                                                      "start_token": 979,
                                                      "end_token": 979,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ArrayLiteralExpression",
                                                      "label": "[nodeBuiltInModulesPlugin]",
                                                      "start_token": 981,
                                                      "end_token": 983,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "nodeBuiltInModulesPlugin",
                                                          "start_token": 982,
                                                          "end_token": 982,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "GetAccessor",
          "label": "public get url() {\n    return this.router.url;\n  }",
          "start_token": 993,
          "end_token": 1006,
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "start_token": 993,
              "end_token": 993,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "url",
              "start_token": 995,
              "end_token": 995,
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return this.router.url;\n  }",
              "start_token": 998,
              "end_token": 1006,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return this.router.url;",
                  "start_token": 999,
                  "end_token": 1005,
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.router.url",
                      "start_token": 1000,
                      "end_token": 1004,
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.router",
                          "start_token": 1000,
                          "end_token": 1002,
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "start_token": 1000,
                              "end_token": 1000,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "router",
                              "start_token": 1002,
                              "end_token": 1002,
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "url",
                          "start_token": 1004,
                          "end_token": 1004,
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "GetAccessor",
          "label": "public get nodes() {\n    return {\n      server: this.server,\n      assets: this.assets,\n    };\n  }",
          "start_token": 1007,
          "end_token": 1029,
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "start_token": 1007,
              "end_token": 1007,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "nodes",
              "start_token": 1009,
              "end_token": 1009,
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return {\n      server: this.server,\n      assets: this.assets,\n    };\n  }",
              "start_token": 1012,
              "end_token": 1029,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return {\n      server: this.server,\n      assets: this.assets,\n    };",
                  "start_token": 1013,
                  "end_token": 1028,
                  "children": [
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      server: this.server,\n      assets: this.assets,\n    }",
                      "start_token": 1014,
                      "end_token": 1027,
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "server: this.server",
                          "start_token": 1015,
                          "end_token": 1019,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "server",
                              "start_token": 1015,
                              "end_token": 1015,
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.server",
                              "start_token": 1017,
                              "end_token": 1019,
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "start_token": 1017,
                                  "end_token": 1017,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "server",
                                  "start_token": 1019,
                                  "end_token": 1019,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "assets: this.assets",
                          "start_token": 1021,
                          "end_token": 1025,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "assets",
                              "start_token": 1021,
                              "end_token": 1021,
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.assets",
                              "start_token": 1023,
                              "end_token": 1025,
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "start_token": 1023,
                                  "end_token": 1023,
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "assets",
                                  "start_token": 1025,
                                  "end_token": 1025,
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }",
          "start_token": 1030,
          "end_token": 1050,
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "start_token": 1030,
              "end_token": 1030,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getSSTLink",
              "start_token": 1031,
              "end_token": 1031,
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }",
              "start_token": 1034,
              "end_token": 1050,
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return {\n      properties: {\n        url: this.url,\n      },\n    };",
                  "start_token": 1035,
                  "end_token": 1049,
                  "children": [
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      properties: {\n        url: this.url,\n      },\n    }",
                      "start_token": 1036,
                      "end_token": 1048,
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "properties: {\n        url: this.url,\n      }",
                          "start_token": 1037,
                          "end_token": 1046,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "properties",
                              "start_token": 1037,
                              "end_token": 1037,
                              "children": []
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n        url: this.url,\n      }",
                              "start_token": 1039,
                              "end_token": 1046,
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "url: this.url",
                                  "start_token": 1040,
                                  "end_token": 1044,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "url",
                                      "start_token": 1040,
                                      "end_token": 1040,
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.url",
                                      "start_token": 1042,
                                      "end_token": 1044,
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "start_token": 1042,
                                          "end_token": 1042,
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "url",
                                          "start_token": 1044,
                                          "end_token": 1044,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const __pulumiType = \"sst:cloudflare:Remix\";",
      "start_token": 1052,
      "end_token": 1056,
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const __pulumiType = \"sst:cloudflare:Remix\"",
          "start_token": 1052,
          "end_token": 1055,
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "__pulumiType = \"sst:cloudflare:Remix\"",
              "start_token": 1053,
              "end_token": 1055,
              "children": [
                {
                  "type": "Identifier",
                  "label": "__pulumiType",
                  "start_token": 1053,
                  "end_token": 1053,
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "\"sst:cloudflare:Remix\"",
                  "start_token": 1055,
                  "end_token": 1055,
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "label": "Remix.__pulumiType = __pulumiType;",
      "start_token": 1058,
      "end_token": 1063,
      "children": [
        {
          "type": "BinaryExpression",
          "label": "Remix.__pulumiType = __pulumiType",
          "start_token": 1058,
          "end_token": 1062,
          "children": [
            {
              "type": "PropertyAccessExpression",
              "label": "Remix.__pulumiType",
              "start_token": 1058,
              "end_token": 1060,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Remix",
                  "start_token": 1058,
                  "end_token": 1058,
                  "children": []
                },
                {
                  "type": "Identifier",
                  "label": "__pulumiType",
                  "start_token": 1060,
                  "end_token": 1060,
                  "children": []
                }
              ]
            },
            {
              "type": "FirstAssignment",
              "label": "=",
              "start_token": 1061,
              "end_token": 1061,
              "children": []
            },
            {
              "type": "Identifier",
              "label": "__pulumiType",
              "start_token": 1062,
              "end_token": 1062,
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "start_token": -1,
      "end_token": -1,
      "children": []
    }
  ]
}