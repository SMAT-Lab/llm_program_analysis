{
  "type": "SourceFile",
  "label": "import {Component, signal} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {HarnessLoader} from '@angular/cdk/testing';\nimport {DateAdapter, provideNativeDateAdapter} from '@angular/material/core';\nimport {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';\nimport {MatTimepickerToggleHarness} from './timepicker-toggle-harness';\ndescribe('MatTimepickerToggleHarness', () => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n});\n@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})\nclass TimepickerHarnessTest {\n  disabled = signal(false);\n}",
  "start_token": 0,
  "end_token": 374,
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import {Component, signal} from '@angular/core';",
      "start_token": 0,
      "end_token": 8,
      "children": [
        {
          "type": "ImportClause",
          "label": "{Component, signal}",
          "start_token": 1,
          "end_token": 5,
          "children": [
            {
              "type": "NamedImports",
              "label": "{Component, signal}",
              "start_token": 1,
              "end_token": 5,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Component",
                  "start_token": 2,
                  "end_token": 2,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Component",
                      "start_token": 2,
                      "end_token": 2,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "signal",
                  "start_token": 4,
                  "end_token": 4,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "signal",
                      "start_token": 4,
                      "end_token": 4,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/core'",
          "start_token": 7,
          "end_token": 7,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {ComponentFixture, TestBed} from '@angular/core/testing';",
      "start_token": 9,
      "end_token": 17,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ComponentFixture, TestBed}",
          "start_token": 10,
          "end_token": 14,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ComponentFixture, TestBed}",
              "start_token": 10,
              "end_token": 14,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "ComponentFixture",
                  "start_token": 11,
                  "end_token": 11,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ComponentFixture",
                      "start_token": 11,
                      "end_token": 11,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "TestBed",
                  "start_token": 13,
                  "end_token": 13,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "TestBed",
                      "start_token": 13,
                      "end_token": 13,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/core/testing'",
          "start_token": 16,
          "end_token": 16,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {HarnessLoader} from '@angular/cdk/testing';",
      "start_token": 18,
      "end_token": 24,
      "children": [
        {
          "type": "ImportClause",
          "label": "{HarnessLoader}",
          "start_token": 19,
          "end_token": 21,
          "children": [
            {
              "type": "NamedImports",
              "label": "{HarnessLoader}",
              "start_token": 19,
              "end_token": 21,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "HarnessLoader",
                  "start_token": 20,
                  "end_token": 20,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "HarnessLoader",
                      "start_token": 20,
                      "end_token": 20,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/cdk/testing'",
          "start_token": 23,
          "end_token": 23,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {DateAdapter, provideNativeDateAdapter} from '@angular/material/core';",
      "start_token": 25,
      "end_token": 33,
      "children": [
        {
          "type": "ImportClause",
          "label": "{DateAdapter, provideNativeDateAdapter}",
          "start_token": 26,
          "end_token": 30,
          "children": [
            {
              "type": "NamedImports",
              "label": "{DateAdapter, provideNativeDateAdapter}",
              "start_token": 26,
              "end_token": 30,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "DateAdapter",
                  "start_token": 27,
                  "end_token": 27,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "DateAdapter",
                      "start_token": 27,
                      "end_token": 27,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "provideNativeDateAdapter",
                  "start_token": 29,
                  "end_token": 29,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "provideNativeDateAdapter",
                      "start_token": 29,
                      "end_token": 29,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/material/core'",
          "start_token": 32,
          "end_token": 32,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';",
      "start_token": 34,
      "end_token": 40,
      "children": [
        {
          "type": "ImportClause",
          "label": "{TestbedHarnessEnvironment}",
          "start_token": 35,
          "end_token": 37,
          "children": [
            {
              "type": "NamedImports",
              "label": "{TestbedHarnessEnvironment}",
              "start_token": 35,
              "end_token": 37,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "TestbedHarnessEnvironment",
                  "start_token": 36,
                  "end_token": 36,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "TestbedHarnessEnvironment",
                      "start_token": 36,
                      "end_token": 36,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/cdk/testing/testbed'",
          "start_token": 39,
          "end_token": 39,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {NoopAnimationsModule} from '@angular/platform-browser/animations';",
      "start_token": 41,
      "end_token": 47,
      "children": [
        {
          "type": "ImportClause",
          "label": "{NoopAnimationsModule}",
          "start_token": 42,
          "end_token": 44,
          "children": [
            {
              "type": "NamedImports",
              "label": "{NoopAnimationsModule}",
              "start_token": 42,
              "end_token": 44,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "NoopAnimationsModule",
                  "start_token": 43,
                  "end_token": 43,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "NoopAnimationsModule",
                      "start_token": 43,
                      "end_token": 43,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/platform-browser/animations'",
          "start_token": 46,
          "end_token": 46,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {MatTimepicker, MatTimepickerInput, MatTimepickerToggle} from '@angular/material/timepicker';",
      "start_token": 48,
      "end_token": 58,
      "children": [
        {
          "type": "ImportClause",
          "label": "{MatTimepicker, MatTimepickerInput, MatTimepickerToggle}",
          "start_token": 49,
          "end_token": 55,
          "children": [
            {
              "type": "NamedImports",
              "label": "{MatTimepicker, MatTimepickerInput, MatTimepickerToggle}",
              "start_token": 49,
              "end_token": 55,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MatTimepicker",
                  "start_token": 50,
                  "end_token": 50,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MatTimepicker",
                      "start_token": 50,
                      "end_token": 50,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "MatTimepickerInput",
                  "start_token": 52,
                  "end_token": 52,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MatTimepickerInput",
                      "start_token": 52,
                      "end_token": 52,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "MatTimepickerToggle",
                  "start_token": 54,
                  "end_token": 54,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MatTimepickerToggle",
                      "start_token": 54,
                      "end_token": 54,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@angular/material/timepicker'",
          "start_token": 57,
          "end_token": 57,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import {MatTimepickerToggleHarness} from './timepicker-toggle-harness';",
      "start_token": 59,
      "end_token": 65,
      "children": [
        {
          "type": "ImportClause",
          "label": "{MatTimepickerToggleHarness}",
          "start_token": 60,
          "end_token": 62,
          "children": [
            {
              "type": "NamedImports",
              "label": "{MatTimepickerToggleHarness}",
              "start_token": 60,
              "end_token": 62,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MatTimepickerToggleHarness",
                  "start_token": 61,
                  "end_token": 61,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MatTimepickerToggleHarness",
                      "start_token": 61,
                      "end_token": 61,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./timepicker-toggle-harness'",
          "start_token": 64,
          "end_token": 64,
          "children": []
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "label": "describe('MatTimepickerToggleHarness', () => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n});",
      "start_token": 66,
      "end_token": 340,
      "children": [
        {
          "type": "CallExpression",
          "label": "describe('MatTimepickerToggleHarness', () => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n})",
          "start_token": 66,
          "end_token": 339,
          "children": [
            {
              "type": "Identifier",
              "label": "describe",
              "start_token": 66,
              "end_token": 66,
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'MatTimepickerToggleHarness'",
              "start_token": 68,
              "end_token": 68,
              "children": []
            },
            {
              "type": "ArrowFunction",
              "label": "() => {\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n}",
              "start_token": 70,
              "end_token": 338,
              "children": [
                {
                  "type": "EqualsGreaterThanToken",
                  "label": "=>",
                  "start_token": 72,
                  "end_token": 72,
                  "children": []
                },
                {
                  "type": "Block",
                  "label": "{\n  let fixture: ComponentFixture<TimepickerHarnessTest>;\n  let loader: HarnessLoader;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });\n  it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });\n  it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });\n  it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });\n}",
                  "start_token": 73,
                  "end_token": 338,
                  "children": [
                    {
                      "type": "FirstStatement",
                      "label": "let fixture: ComponentFixture<TimepickerHarnessTest>;",
                      "start_token": 74,
                      "end_token": 81,
                      "children": [
                        {
                          "type": "VariableDeclarationList",
                          "label": "let fixture: ComponentFixture<TimepickerHarnessTest>",
                          "start_token": 74,
                          "end_token": 80,
                          "children": [
                            {
                              "type": "VariableDeclaration",
                              "label": "fixture: ComponentFixture<TimepickerHarnessTest>",
                              "start_token": 75,
                              "end_token": 80,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "fixture",
                                  "start_token": 75,
                                  "end_token": 75,
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "ComponentFixture<TimepickerHarnessTest>",
                                  "start_token": 77,
                                  "end_token": 80,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "ComponentFixture",
                                      "start_token": 77,
                                      "end_token": 77,
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "TimepickerHarnessTest",
                                      "start_token": 79,
                                      "end_token": 79,
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "TimepickerHarnessTest",
                                          "start_token": 79,
                                          "end_token": 79,
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "FirstStatement",
                      "label": "let loader: HarnessLoader;",
                      "start_token": 82,
                      "end_token": 86,
                      "children": [
                        {
                          "type": "VariableDeclarationList",
                          "label": "let loader: HarnessLoader",
                          "start_token": 82,
                          "end_token": 85,
                          "children": [
                            {
                              "type": "VariableDeclaration",
                              "label": "loader: HarnessLoader",
                              "start_token": 83,
                              "end_token": 85,
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "loader",
                                  "start_token": 83,
                                  "end_token": 83,
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "HarnessLoader",
                                  "start_token": 85,
                                  "end_token": 85,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "HarnessLoader",
                                      "start_token": 85,
                                      "end_token": 85,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  });",
                      "start_token": 87,
                      "end_token": 160,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  })",
                          "start_token": 87,
                          "end_token": 159,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beforeEach",
                              "start_token": 87,
                              "end_token": 87,
                              "children": []
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "() => {\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  }",
                              "start_token": 89,
                              "end_token": 158,
                              "children": [
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "start_token": 91,
                                  "end_token": 91,
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n    TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });\n    const adapter = TestBed.inject(DateAdapter);\n    adapter.setLocale('en-US');\n    fixture = TestBed.createComponent(TimepickerHarnessTest);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n  }",
                                  "start_token": 92,
                                  "end_token": 158,
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    });",
                                      "start_token": 93,
                                      "end_token": 116,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "TestBed.configureTestingModule({\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    })",
                                          "start_token": 93,
                                          "end_token": 115,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "TestBed.configureTestingModule",
                                              "start_token": 93,
                                              "end_token": 95,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "TestBed",
                                                  "start_token": 93,
                                                  "end_token": 93,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "configureTestingModule",
                                                  "start_token": 95,
                                                  "end_token": 95,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ObjectLiteralExpression",
                                              "label": "{\n      providers: [provideNativeDateAdapter()],\n      imports: [NoopAnimationsModule, TimepickerHarnessTest],\n    }",
                                              "start_token": 97,
                                              "end_token": 114,
                                              "children": [
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "providers: [provideNativeDateAdapter()]",
                                                  "start_token": 98,
                                                  "end_token": 104,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "providers",
                                                      "start_token": 98,
                                                      "end_token": 98,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ArrayLiteralExpression",
                                                      "label": "[provideNativeDateAdapter()]",
                                                      "start_token": 100,
                                                      "end_token": 104,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "provideNativeDateAdapter()",
                                                          "start_token": 101,
                                                          "end_token": 103,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "provideNativeDateAdapter",
                                                              "start_token": 101,
                                                              "end_token": 101,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "imports: [NoopAnimationsModule, TimepickerHarnessTest]",
                                                  "start_token": 106,
                                                  "end_token": 112,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "imports",
                                                      "start_token": 106,
                                                      "end_token": 106,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ArrayLiteralExpression",
                                                      "label": "[NoopAnimationsModule, TimepickerHarnessTest]",
                                                      "start_token": 108,
                                                      "end_token": 112,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "NoopAnimationsModule",
                                                          "start_token": 109,
                                                          "end_token": 109,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TimepickerHarnessTest",
                                                          "start_token": 111,
                                                          "end_token": 111,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstStatement",
                                      "label": "const adapter = TestBed.inject(DateAdapter);",
                                      "start_token": 117,
                                      "end_token": 126,
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "const adapter = TestBed.inject(DateAdapter)",
                                          "start_token": 117,
                                          "end_token": 125,
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "adapter = TestBed.inject(DateAdapter)",
                                              "start_token": 118,
                                              "end_token": 125,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "adapter",
                                                  "start_token": 118,
                                                  "end_token": 118,
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "TestBed.inject(DateAdapter)",
                                                  "start_token": 120,
                                                  "end_token": 125,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "TestBed.inject",
                                                      "start_token": 120,
                                                      "end_token": 122,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TestBed",
                                                          "start_token": 120,
                                                          "end_token": 120,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "inject",
                                                          "start_token": 122,
                                                          "end_token": 122,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "DateAdapter",
                                                      "start_token": 124,
                                                      "end_token": 124,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "adapter.setLocale('en-US');",
                                      "start_token": 127,
                                      "end_token": 133,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "adapter.setLocale('en-US')",
                                          "start_token": 127,
                                          "end_token": 132,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "adapter.setLocale",
                                              "start_token": 127,
                                              "end_token": 129,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "adapter",
                                                  "start_token": 127,
                                                  "end_token": 127,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "setLocale",
                                                  "start_token": 129,
                                                  "end_token": 129,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'en-US'",
                                              "start_token": 131,
                                              "end_token": 131,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "fixture = TestBed.createComponent(TimepickerHarnessTest);",
                                      "start_token": 134,
                                      "end_token": 142,
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "fixture = TestBed.createComponent(TimepickerHarnessTest)",
                                          "start_token": 134,
                                          "end_token": 141,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "fixture",
                                              "start_token": 134,
                                              "end_token": 134,
                                              "children": []
                                            },
                                            {
                                              "type": "FirstAssignment",
                                              "label": "=",
                                              "start_token": 135,
                                              "end_token": 135,
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "TestBed.createComponent(TimepickerHarnessTest)",
                                              "start_token": 136,
                                              "end_token": 141,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "TestBed.createComponent",
                                                  "start_token": 136,
                                                  "end_token": 138,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "TestBed",
                                                      "start_token": 136,
                                                      "end_token": 136,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "createComponent",
                                                      "start_token": 138,
                                                      "end_token": 138,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TimepickerHarnessTest",
                                                  "start_token": 140,
                                                  "end_token": 140,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "fixture.detectChanges();",
                                      "start_token": 143,
                                      "end_token": 148,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "fixture.detectChanges()",
                                          "start_token": 143,
                                          "end_token": 147,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "fixture.detectChanges",
                                              "start_token": 143,
                                              "end_token": 145,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "fixture",
                                                  "start_token": 143,
                                                  "end_token": 143,
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "detectChanges",
                                                  "start_token": 145,
                                                  "end_token": 145,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "loader = TestbedHarnessEnvironment.documentRootLoader(fixture);",
                                      "start_token": 149,
                                      "end_token": 157,
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "loader = TestbedHarnessEnvironment.documentRootLoader(fixture)",
                                          "start_token": 149,
                                          "end_token": 156,
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "loader",
                                              "start_token": 149,
                                              "end_token": 149,
                                              "children": []
                                            },
                                            {
                                              "type": "FirstAssignment",
                                              "label": "=",
                                              "start_token": 150,
                                              "end_token": 150,
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "TestbedHarnessEnvironment.documentRootLoader(fixture)",
                                              "start_token": 151,
                                              "end_token": 156,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "TestbedHarnessEnvironment.documentRootLoader",
                                                  "start_token": 151,
                                                  "end_token": 153,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "TestbedHarnessEnvironment",
                                                      "start_token": 151,
                                                      "end_token": 151,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "documentRootLoader",
                                                      "start_token": 153,
                                                      "end_token": 153,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "fixture",
                                                  "start_token": 155,
                                                  "end_token": 155,
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  });",
                      "start_token": 161,
                      "end_token": 195,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "it('should be able to load timepicker toggle harnesses', async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  })",
                          "start_token": 161,
                          "end_token": 194,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "it",
                              "start_token": 161,
                              "end_token": 161,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'should be able to load timepicker toggle harnesses'",
                              "start_token": 163,
                              "end_token": 163,
                              "children": []
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "async () => {\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  }",
                              "start_token": 165,
                              "end_token": 193,
                              "children": [
                                {
                                  "type": "AsyncKeyword",
                                  "label": "async",
                                  "start_token": 165,
                                  "end_token": 165,
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "start_token": 168,
                                  "end_token": 168,
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n    const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);\n    expect(harnesses.length).toBe(2);\n  }",
                                  "start_token": 169,
                                  "end_token": 193,
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness);",
                                      "start_token": 170,
                                      "end_token": 180,
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "const harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness)",
                                          "start_token": 170,
                                          "end_token": 179,
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "harnesses = await loader.getAllHarnesses(MatTimepickerToggleHarness)",
                                              "start_token": 171,
                                              "end_token": 179,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "harnesses",
                                                  "start_token": 171,
                                                  "end_token": 171,
                                                  "children": []
                                                },
                                                {
                                                  "type": "AwaitExpression",
                                                  "label": "await loader.getAllHarnesses(MatTimepickerToggleHarness)",
                                                  "start_token": 173,
                                                  "end_token": 179,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "loader.getAllHarnesses(MatTimepickerToggleHarness)",
                                                      "start_token": 174,
                                                      "end_token": 179,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "loader.getAllHarnesses",
                                                          "start_token": 174,
                                                          "end_token": 176,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "loader",
                                                              "start_token": 174,
                                                              "end_token": 174,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getAllHarnesses",
                                                              "start_token": 176,
                                                              "end_token": 176,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "MatTimepickerToggleHarness",
                                                          "start_token": 178,
                                                          "end_token": 178,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "expect(harnesses.length).toBe(2);",
                                      "start_token": 181,
                                      "end_token": 192,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "expect(harnesses.length).toBe(2)",
                                          "start_token": 181,
                                          "end_token": 191,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "expect(harnesses.length).toBe",
                                              "start_token": 181,
                                              "end_token": 188,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(harnesses.length)",
                                                  "start_token": 181,
                                                  "end_token": 186,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "expect",
                                                      "start_token": 181,
                                                      "end_token": 181,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "harnesses.length",
                                                      "start_token": 183,
                                                      "end_token": 185,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "harnesses",
                                                          "start_token": 183,
                                                          "end_token": 183,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "length",
                                                          "start_token": 185,
                                                          "end_token": 185,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "toBe",
                                                  "start_token": 188,
                                                  "end_token": 188,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "2",
                                              "start_token": 190,
                                              "end_token": 190,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  });",
                      "start_token": 196,
                      "end_token": 264,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "it('should get the open state of a timepicker toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  })",
                          "start_token": 196,
                          "end_token": 263,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "it",
                              "start_token": 196,
                              "end_token": 196,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'should get the open state of a timepicker toggle'",
                              "start_token": 198,
                              "end_token": 198,
                              "children": []
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  }",
                              "start_token": 200,
                              "end_token": 262,
                              "children": [
                                {
                                  "type": "AsyncKeyword",
                                  "label": "async",
                                  "start_token": 200,
                                  "end_token": 200,
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "start_token": 203,
                                  "end_token": 203,
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isTimepickerOpen()).toBe(false);\n    await toggle.openTimepicker();\n    expect(await toggle.isTimepickerOpen()).toBe(true);\n  }",
                                  "start_token": 204,
                                  "end_token": 262,
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));",
                                      "start_token": 205,
                                      "end_token": 224,
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                          "start_token": 205,
                                          "end_token": 223,
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                              "start_token": 206,
                                              "end_token": 223,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "toggle",
                                                  "start_token": 206,
                                                  "end_token": 206,
                                                  "children": []
                                                },
                                                {
                                                  "type": "AwaitExpression",
                                                  "label": "await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                                  "start_token": 208,
                                                  "end_token": 223,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                                      "start_token": 209,
                                                      "end_token": 223,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "loader.getHarness",
                                                          "start_token": 209,
                                                          "end_token": 211,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "loader",
                                                              "start_token": 209,
                                                              "end_token": 209,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getHarness",
                                                              "start_token": 211,
                                                              "end_token": 211,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "MatTimepickerToggleHarness.with({selector: '#one'})",
                                                          "start_token": 213,
                                                          "end_token": 222,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "MatTimepickerToggleHarness.with",
                                                              "start_token": 213,
                                                              "end_token": 215,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "MatTimepickerToggleHarness",
                                                                  "start_token": 213,
                                                                  "end_token": 213,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "with",
                                                                  "start_token": 215,
                                                                  "end_token": 215,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{selector: '#one'}",
                                                              "start_token": 217,
                                                              "end_token": 221,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "selector: '#one'",
                                                                  "start_token": 218,
                                                                  "end_token": 220,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "selector",
                                                                      "start_token": 218,
                                                                      "end_token": 218,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'#one'",
                                                                      "start_token": 220,
                                                                      "end_token": 220,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "expect(await toggle.isTimepickerOpen()).toBe(false);",
                                      "start_token": 225,
                                      "end_token": 239,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "expect(await toggle.isTimepickerOpen()).toBe(false)",
                                          "start_token": 225,
                                          "end_token": 238,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "expect(await toggle.isTimepickerOpen()).toBe",
                                              "start_token": 225,
                                              "end_token": 235,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(await toggle.isTimepickerOpen())",
                                                  "start_token": 225,
                                                  "end_token": 233,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "expect",
                                                      "start_token": 225,
                                                      "end_token": 225,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "AwaitExpression",
                                                      "label": "await toggle.isTimepickerOpen()",
                                                      "start_token": 227,
                                                      "end_token": 232,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "toggle.isTimepickerOpen()",
                                                          "start_token": 228,
                                                          "end_token": 232,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "toggle.isTimepickerOpen",
                                                              "start_token": 228,
                                                              "end_token": 230,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toggle",
                                                                  "start_token": 228,
                                                                  "end_token": 228,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "isTimepickerOpen",
                                                                  "start_token": 230,
                                                                  "end_token": 230,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "toBe",
                                                  "start_token": 235,
                                                  "end_token": 235,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "FalseKeyword",
                                              "label": "false",
                                              "start_token": 237,
                                              "end_token": 237,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "await toggle.openTimepicker();",
                                      "start_token": 240,
                                      "end_token": 246,
                                      "children": [
                                        {
                                          "type": "AwaitExpression",
                                          "label": "await toggle.openTimepicker()",
                                          "start_token": 240,
                                          "end_token": 245,
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "toggle.openTimepicker()",
                                              "start_token": 241,
                                              "end_token": 245,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "toggle.openTimepicker",
                                                  "start_token": 241,
                                                  "end_token": 243,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "toggle",
                                                      "start_token": 241,
                                                      "end_token": 241,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "openTimepicker",
                                                      "start_token": 243,
                                                      "end_token": 243,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "expect(await toggle.isTimepickerOpen()).toBe(true);",
                                      "start_token": 247,
                                      "end_token": 261,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "expect(await toggle.isTimepickerOpen()).toBe(true)",
                                          "start_token": 247,
                                          "end_token": 260,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "expect(await toggle.isTimepickerOpen()).toBe",
                                              "start_token": 247,
                                              "end_token": 257,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(await toggle.isTimepickerOpen())",
                                                  "start_token": 247,
                                                  "end_token": 255,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "expect",
                                                      "start_token": 247,
                                                      "end_token": 247,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "AwaitExpression",
                                                      "label": "await toggle.isTimepickerOpen()",
                                                      "start_token": 249,
                                                      "end_token": 254,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "toggle.isTimepickerOpen()",
                                                          "start_token": 250,
                                                          "end_token": 254,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "toggle.isTimepickerOpen",
                                                              "start_token": 250,
                                                              "end_token": 252,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toggle",
                                                                  "start_token": 250,
                                                                  "end_token": 250,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "isTimepickerOpen",
                                                                  "start_token": 252,
                                                                  "end_token": 252,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "toBe",
                                                  "start_token": 257,
                                                  "end_token": 257,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "start_token": 259,
                                              "end_token": 259,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  });",
                      "start_token": 265,
                      "end_token": 337,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "it('should get the disabled state of a toggle', async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  })",
                          "start_token": 265,
                          "end_token": 336,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "it",
                              "start_token": 265,
                              "end_token": 265,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'should get the disabled state of a toggle'",
                              "start_token": 267,
                              "end_token": 267,
                              "children": []
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "async () => {\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  }",
                              "start_token": 269,
                              "end_token": 335,
                              "children": [
                                {
                                  "type": "AsyncKeyword",
                                  "label": "async",
                                  "start_token": 269,
                                  "end_token": 269,
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "start_token": 272,
                                  "end_token": 272,
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n    const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));\n    expect(await toggle.isDisabled()).toBe(false);\n    fixture.componentInstance.disabled.set(true);\n    expect(await toggle.isDisabled()).toBe(true);\n  }",
                                  "start_token": 273,
                                  "end_token": 335,
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}));",
                                      "start_token": 274,
                                      "end_token": 293,
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "const toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                          "start_token": 274,
                                          "end_token": 292,
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "toggle = await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                              "start_token": 275,
                                              "end_token": 292,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "toggle",
                                                  "start_token": 275,
                                                  "end_token": 275,
                                                  "children": []
                                                },
                                                {
                                                  "type": "AwaitExpression",
                                                  "label": "await loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                                  "start_token": 277,
                                                  "end_token": 292,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "loader.getHarness(MatTimepickerToggleHarness.with({selector: '#one'}))",
                                                      "start_token": 278,
                                                      "end_token": 292,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "loader.getHarness",
                                                          "start_token": 278,
                                                          "end_token": 280,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "loader",
                                                              "start_token": 278,
                                                              "end_token": 278,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getHarness",
                                                              "start_token": 280,
                                                              "end_token": 280,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "MatTimepickerToggleHarness.with({selector: '#one'})",
                                                          "start_token": 282,
                                                          "end_token": 291,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "MatTimepickerToggleHarness.with",
                                                              "start_token": 282,
                                                              "end_token": 284,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "MatTimepickerToggleHarness",
                                                                  "start_token": 282,
                                                                  "end_token": 282,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "with",
                                                                  "start_token": 284,
                                                                  "end_token": 284,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{selector: '#one'}",
                                                              "start_token": 286,
                                                              "end_token": 290,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "selector: '#one'",
                                                                  "start_token": 287,
                                                                  "end_token": 289,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "selector",
                                                                      "start_token": 287,
                                                                      "end_token": 287,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "StringLiteral",
                                                                      "label": "'#one'",
                                                                      "start_token": 289,
                                                                      "end_token": 289,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "expect(await toggle.isDisabled()).toBe(false);",
                                      "start_token": 294,
                                      "end_token": 308,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "expect(await toggle.isDisabled()).toBe(false)",
                                          "start_token": 294,
                                          "end_token": 307,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "expect(await toggle.isDisabled()).toBe",
                                              "start_token": 294,
                                              "end_token": 304,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(await toggle.isDisabled())",
                                                  "start_token": 294,
                                                  "end_token": 302,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "expect",
                                                      "start_token": 294,
                                                      "end_token": 294,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "AwaitExpression",
                                                      "label": "await toggle.isDisabled()",
                                                      "start_token": 296,
                                                      "end_token": 301,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "toggle.isDisabled()",
                                                          "start_token": 297,
                                                          "end_token": 301,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "toggle.isDisabled",
                                                              "start_token": 297,
                                                              "end_token": 299,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toggle",
                                                                  "start_token": 297,
                                                                  "end_token": 297,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "isDisabled",
                                                                  "start_token": 299,
                                                                  "end_token": 299,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "toBe",
                                                  "start_token": 304,
                                                  "end_token": 304,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "FalseKeyword",
                                              "label": "false",
                                              "start_token": 306,
                                              "end_token": 306,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "fixture.componentInstance.disabled.set(true);",
                                      "start_token": 309,
                                      "end_token": 319,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "fixture.componentInstance.disabled.set(true)",
                                          "start_token": 309,
                                          "end_token": 318,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "fixture.componentInstance.disabled.set",
                                              "start_token": 309,
                                              "end_token": 315,
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "fixture.componentInstance.disabled",
                                                  "start_token": 309,
                                                  "end_token": 313,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "fixture.componentInstance",
                                                      "start_token": 309,
                                                      "end_token": 311,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "fixture",
                                                          "start_token": 309,
                                                          "end_token": 309,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "componentInstance",
                                                          "start_token": 311,
                                                          "end_token": 311,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "disabled",
                                                      "start_token": 313,
                                                      "end_token": 313,
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "set",
                                                  "start_token": 315,
                                                  "end_token": 315,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "start_token": 317,
                                              "end_token": 317,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "expect(await toggle.isDisabled()).toBe(true);",
                                      "start_token": 320,
                                      "end_token": 334,
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "expect(await toggle.isDisabled()).toBe(true)",
                                          "start_token": 320,
                                          "end_token": 333,
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "expect(await toggle.isDisabled()).toBe",
                                              "start_token": 320,
                                              "end_token": 330,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(await toggle.isDisabled())",
                                                  "start_token": 320,
                                                  "end_token": 328,
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "expect",
                                                      "start_token": 320,
                                                      "end_token": 320,
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "AwaitExpression",
                                                      "label": "await toggle.isDisabled()",
                                                      "start_token": 322,
                                                      "end_token": 327,
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "toggle.isDisabled()",
                                                          "start_token": 323,
                                                          "end_token": 327,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "toggle.isDisabled",
                                                              "start_token": 323,
                                                              "end_token": 325,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toggle",
                                                                  "start_token": 323,
                                                                  "end_token": 323,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "isDisabled",
                                                                  "start_token": 325,
                                                                  "end_token": 325,
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "toBe",
                                                  "start_token": 330,
                                                  "end_token": 330,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "start_token": 332,
                                              "end_token": 332,
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})\nclass TimepickerHarnessTest {\n  disabled = signal(false);\n}",
      "start_token": 341,
      "end_token": 374,
      "children": [
        {
          "type": "Decorator",
          "label": "@Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})",
          "start_token": 341,
          "end_token": 363,
          "children": [
            {
              "type": "CallExpression",
              "label": "Component({\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n})",
              "start_token": 341,
              "end_token": 363,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Component",
                  "start_token": 341,
                  "end_token": 341,
                  "children": []
                },
                {
                  "type": "ObjectLiteralExpression",
                  "label": "{\n  template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `,\n  standalone: true,\n  imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle],\n}",
                  "start_token": 343,
                  "end_token": 362,
                  "children": [
                    {
                      "type": "PropertyAssignment",
                      "label": "template: `\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `",
                      "start_token": 344,
                      "end_token": 346,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "template",
                          "start_token": 344,
                          "end_token": 344,
                          "children": []
                        },
                        {
                          "type": "FirstTemplateToken",
                          "label": "`\n    <input [matTimepicker]=\"onePicker\">\n    <mat-timepicker #onePicker/>\n    <mat-timepicker-toggle id=\"one\" [for]=\"onePicker\" [disabled]=\"disabled()\"/>\n    <input [matTimepicker]=\"twoPicker\">\n    <mat-timepicker #twoPicker/>\n    <mat-timepicker-toggle id=\"two\" [for]=\"twoPicker\" [disabled]=\"disabled()\"/>\n  `",
                          "start_token": 346,
                          "end_token": 346,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAssignment",
                      "label": "standalone: true",
                      "start_token": 348,
                      "end_token": 350,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "standalone",
                          "start_token": 348,
                          "end_token": 348,
                          "children": []
                        },
                        {
                          "type": "TrueKeyword",
                          "label": "true",
                          "start_token": 350,
                          "end_token": 350,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAssignment",
                      "label": "imports: [MatTimepickerInput, MatTimepicker, MatTimepickerToggle]",
                      "start_token": 352,
                      "end_token": 360,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "imports",
                          "start_token": 352,
                          "end_token": 352,
                          "children": []
                        },
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[MatTimepickerInput, MatTimepicker, MatTimepickerToggle]",
                          "start_token": 354,
                          "end_token": 360,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "MatTimepickerInput",
                              "start_token": 355,
                              "end_token": 355,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "MatTimepicker",
                              "start_token": 357,
                              "end_token": 357,
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "MatTimepickerToggle",
                              "start_token": 359,
                              "end_token": 359,
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Identifier",
          "label": "TimepickerHarnessTest",
          "start_token": 365,
          "end_token": 365,
          "children": []
        },
        {
          "type": "PropertyDeclaration",
          "label": "disabled = signal(false);",
          "start_token": 367,
          "end_token": 373,
          "children": [
            {
              "type": "Identifier",
              "label": "disabled",
              "start_token": 367,
              "end_token": 367,
              "children": []
            },
            {
              "type": "CallExpression",
              "label": "signal(false)",
              "start_token": 369,
              "end_token": 372,
              "children": [
                {
                  "type": "Identifier",
                  "label": "signal",
                  "start_token": 369,
                  "end_token": 369,
                  "children": []
                },
                {
                  "type": "FalseKeyword",
                  "label": "false",
                  "start_token": 371,
                  "end_token": 371,
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "start_token": -1,
      "end_token": -1,
      "children": []
    }
  ]
}