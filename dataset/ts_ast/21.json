{
  "type": "SourceFile",
  "label": "import { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { MenuOperationCallback } from './MenuOperationCallback';\nimport { MenuOperation } from './MenuOperation';\nimport { MenuContext } from './MenuContext';\nimport { userFileModel } from '../base/UserFileModel';\nimport { Constants } from '../constants/BrowserConstants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { showToast } from '../utils/UiUtil';\nimport { UserFileDataItem } from '../base/UserFileDataItem';\n\nconst TAG = 'RenameMenuOperation';\n\nexport class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }\n\n  private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }\n\n  private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }\n\n  private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }\n\n  private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }\n}\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { Log } from '../utils/Log';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Log }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Log }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Log",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Log",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/Log'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { BroadcastConstants } from '../constants/BroadcastConstants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ BroadcastConstants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ BroadcastConstants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "BroadcastConstants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BroadcastConstants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/BroadcastConstants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MenuOperationCallback } from './MenuOperationCallback';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MenuOperationCallback }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MenuOperationCallback }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MenuOperationCallback",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuOperationCallback",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./MenuOperationCallback'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MenuOperation } from './MenuOperation';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MenuOperation }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MenuOperation }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MenuOperation",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuOperation",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./MenuOperation'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { MenuContext } from './MenuContext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ MenuContext }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ MenuContext }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "MenuContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuContext",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./MenuContext'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { userFileModel } from '../base/UserFileModel';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ userFileModel }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ userFileModel }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "userFileModel",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "userFileModel",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../base/UserFileModel'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Constants } from '../constants/BrowserConstants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Constants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Constants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Constants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Constants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/BrowserConstants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { getResourceString } from '../utils/ResourceUtils';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ getResourceString }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ getResourceString }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "getResourceString",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getResourceString",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/ResourceUtils'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { showToast } from '../utils/UiUtil';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ showToast }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ showToast }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "showToast",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "showToast",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/UiUtil'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { UserFileDataItem } from '../base/UserFileDataItem';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ UserFileDataItem }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ UserFileDataItem }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "UserFileDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "UserFileDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../base/UserFileDataItem'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG = 'RenameMenuOperation';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG = 'RenameMenuOperation'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG = 'RenameMenuOperation'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'RenameMenuOperation'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "export class RenameMenuOperation implements MenuOperation, MenuOperationCallback {\n  private menuContext: MenuContext;\n\n  constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }\n\n  doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }\n\n  onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }\n\n  onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }\n\n  private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }\n\n  private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }\n\n  private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }\n\n  private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }\n\n  private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }\n\n  private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }\n}",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "Identifier",
          "label": "RenameMenuOperation",
          "children": []
        },
        {
          "type": "HeritageClause",
          "label": "implements MenuOperation, MenuOperationCallback",
          "children": [
            {
              "type": "ExpressionWithTypeArguments",
              "label": "MenuOperation",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MenuOperation",
                  "children": []
                }
              ]
            },
            {
              "type": "ExpressionWithTypeArguments",
              "label": "MenuOperationCallback",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MenuOperationCallback",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private menuContext: MenuContext;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "menuContext",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "MenuContext",
              "children": [
                {
                  "type": "Identifier",
                  "label": "MenuContext",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor(menuContext: MenuContext) {\n    this.menuContext = menuContext;\n  }",
          "children": [
            {
              "type": "Parameter",
              "label": "menuContext: MenuContext",
              "children": [
                {
                  "type": "Identifier",
                  "label": "menuContext",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "MenuContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "MenuContext",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.menuContext = menuContext;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.menuContext = menuContext;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.menuContext = menuContext",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "menuContext",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "menuContext",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "doAction(): void {\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "doAction",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }\n    let mediaItem = this.menuContext.items[0];\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);\n    this.cancelCallback = (): void => this.cancelCallbackBindImpl();\n    let fileName = '';\n    if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }\n\n    this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.menuContext == null) {\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.menuContext == null",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "menuContext",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'menuContext is null, return');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'menuContext is null, return');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'menuContext is null, return')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'menuContext is null, return'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let mediaItem = this.menuContext.items[0];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let mediaItem = this.menuContext.items[0]",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "mediaItem = this.menuContext.items[0]",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "mediaItem",
                              "children": []
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "this.menuContext.items[0]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.menuContext.items",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.menuContext",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "menuContext",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "items",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "mediaItem == null",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "mediaItem",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'mediaItem is null, return');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'mediaItem is null, return')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'mediaItem is null, return'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.confirmCallback = (title: string): Promise<void> => this.confirmCallbackBindImpl(title)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.confirmCallback",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "confirmCallback",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(title: string): Promise<void> => this.confirmCallbackBindImpl(title)",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "title: string",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "title",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TypeReference",
                              "label": "Promise<void>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Promise",
                                  "children": []
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.confirmCallbackBindImpl(title)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.confirmCallbackBindImpl",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "confirmCallbackBindImpl",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "title",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.cancelCallback = (): void => this.cancelCallbackBindImpl();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.cancelCallback = (): void => this.cancelCallbackBindImpl()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cancelCallback",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cancelCallback",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(): void => this.cancelCallbackBindImpl()",
                          "children": [
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.cancelCallbackBindImpl()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cancelCallbackBindImpl",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cancelCallbackBindImpl",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let fileName = '';",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let fileName = ''",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "fileName = ''",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fileName",
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "''",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (mediaItem.title != null) {\n      fileName = mediaItem.title;\n    } else if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "mediaItem.title != null",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "mediaItem.title",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "mediaItem",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "title",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ExclamationEqualsToken",
                          "label": "!=",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      fileName = mediaItem.title;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "fileName = mediaItem.title;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "fileName = mediaItem.title",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "fileName",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "mediaItem.title",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "mediaItem",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "title",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "label": "if (mediaItem.displayName != null) {\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "mediaItem.displayName != null",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "mediaItem.displayName",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "mediaItem",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "displayName",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExclamationEqualsToken",
                              "label": "!=",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let index = mediaItem.displayName.lastIndexOf('.');\n      fileName = mediaItem.displayName.substr(0, index);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let index = mediaItem.displayName.lastIndexOf('.');",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let index = mediaItem.displayName.lastIndexOf('.')",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "index = mediaItem.displayName.lastIndexOf('.')",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "index",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "mediaItem.displayName.lastIndexOf('.')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "mediaItem.displayName.lastIndexOf",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "mediaItem.displayName",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "mediaItem",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "displayName",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "lastIndexOf",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'.'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "fileName = mediaItem.displayName.substr(0, index);",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "fileName = mediaItem.displayName.substr(0, index)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fileName",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "mediaItem.displayName.substr(0, index)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "mediaItem.displayName.substr",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "mediaItem.displayName",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "mediaItem",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "displayName",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "substr",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback]);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.menuContext.broadCast.emit(BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG,\n      [fileName, this.confirmCallback, this.cancelCallback])",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.menuContext.broadCast.emit",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.menuContext.broadCast",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.menuContext",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "menuContext",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "broadCast",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "emit",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "BroadcastConstants.SHOW_RENAME_PHOTO_DIALOG",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "BroadcastConstants",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "SHOW_RENAME_PHOTO_DIALOG",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[fileName, this.confirmCallback, this.cancelCallback]",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fileName",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.confirmCallback",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "confirmCallback",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cancelCallback",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cancelCallback",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onCompleted(): void {\n    Log.info(TAG, 'Rename data succeed!');\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onCompleted",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'Rename data succeed!');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'Rename data succeed!');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'Rename data succeed!')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'Rename data succeed!'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onError(): void {\n    Log.error(TAG, 'Rename data failed!');\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onError",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.error(TAG, 'Rename data failed!');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.error(TAG, 'Rename data failed!');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.error(TAG, 'Rename data failed!')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'Rename data failed!'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async confirmCallback(title: string): Promise<void> {\n    return await this.confirmCallbackBindImpl(title);\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "confirmCallback",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "title: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "title",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return await this.confirmCallbackBindImpl(title);\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return await this.confirmCallbackBindImpl(title);",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.confirmCallbackBindImpl(title)",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.confirmCallbackBindImpl(title)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.confirmCallbackBindImpl",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "confirmCallbackBindImpl",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "title",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async confirmCallbackBindImpl(title: string): Promise<void> {\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "confirmCallbackBindImpl",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "title: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "title",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'Rename confirm new name: ' + title);\n    let mediaItem = (this.menuContext.items[0] as UserFileDataItem);\n    if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }\n\n    let hasSameName = await this.hasSameNameAsset(mediaItem, title);\n    if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }\n    try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }\n\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'Rename confirm new name: ' + title);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'Rename confirm new name: ' + title)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'Rename confirm new name: ' + title",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'Rename confirm new name: '",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "title",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let mediaItem = (this.menuContext.items[0] as UserFileDataItem);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let mediaItem = (this.menuContext.items[0] as UserFileDataItem)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "mediaItem = (this.menuContext.items[0] as UserFileDataItem)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "mediaItem",
                              "children": []
                            },
                            {
                              "type": "ParenthesizedExpression",
                              "label": "(this.menuContext.items[0] as UserFileDataItem)",
                              "children": [
                                {
                                  "type": "AsExpression",
                                  "label": "this.menuContext.items[0] as UserFileDataItem",
                                  "children": [
                                    {
                                      "type": "ElementAccessExpression",
                                      "label": "this.menuContext.items[0]",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.menuContext.items",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.menuContext",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "menuContext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "UserFileDataItem",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "UserFileDataItem",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (mediaItem == null) {\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "mediaItem == null",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "mediaItem",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'mediaItem is null, return');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'mediaItem is null, return');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'mediaItem is null, return')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'mediaItem is null, return'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let hasSameName = await this.hasSameNameAsset(mediaItem, title);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hasSameName = await this.hasSameNameAsset(mediaItem, title)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hasSameName = await this.hasSameNameAsset(mediaItem, title)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hasSameName",
                              "children": []
                            },
                            {
                              "type": "AwaitExpression",
                              "label": "await this.hasSameNameAsset(mediaItem, title)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.hasSameNameAsset(mediaItem, title)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.hasSameNameAsset",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "hasSameNameAsset",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "mediaItem",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "title",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (hasSameName) {\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "hasSameName",
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'show find same file dialog');\n      getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'show find same file dialog');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'show find same file dialog')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'show find same file dialog'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "getResourceString($r('app.string.name_already_use')).then<void, void>((message: string): void => {\n        showToast(message);\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "getResourceString($r('app.string.name_already_use')).then",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "getResourceString($r('app.string.name_already_use'))",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "getResourceString",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "$r('app.string.name_already_use')",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "$r",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'app.string.name_already_use'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "then",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(message: string): void => {\n        showToast(message);\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "message: string",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "message",
                                          "children": []
                                        },
                                        {
                                          "type": "StringKeyword",
                                          "label": "string",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        showToast(message);\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "showToast(message);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "showToast(message)",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "showToast",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "message",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    } catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let result = await this.rename(mediaItem, title);\n      Log.info(TAG, 'Rename confirm result: ' + result);\n      this.menuContext.broadCast.emit(Constants.RENAME, [result]);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let result = await this.rename(mediaItem, title);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let result = await this.rename(mediaItem, title)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "result = await this.rename(mediaItem, title)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "result",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.rename(mediaItem, title)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.rename(mediaItem, title)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.rename",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "rename",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "mediaItem",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "title",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'Rename confirm result: ' + result);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'Rename confirm result: ' + result)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'Rename confirm result: ' + result",
                                  "children": [
                                    {
                                      "type": "StringLiteral",
                                      "label": "'Rename confirm result: '",
                                      "children": []
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "result",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.menuContext.broadCast.emit(Constants.RENAME, [result]);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.menuContext.broadCast.emit(Constants.RENAME, [result])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.menuContext.broadCast.emit",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.menuContext.broadCast",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.menuContext",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "menuContext",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "broadCast",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "emit",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.RENAME",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "RENAME",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrayLiteralExpression",
                                  "label": "[result]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "result",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'Rename error: ' + err);\n      getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'Rename error: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'Rename error: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'Rename error: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'Rename error: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "getResourceString($r('app.string.rename_failed')).then<void, void>((message: string): void => {\n        showToast(message);\n      })",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "getResourceString($r('app.string.rename_failed')).then",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "getResourceString($r('app.string.rename_failed'))",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "getResourceString",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "$r('app.string.rename_failed')",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "$r",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'app.string.rename_failed'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "then",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "ArrowFunction",
                                      "label": "(message: string): void => {\n        showToast(message);\n      }",
                                      "children": [
                                        {
                                          "type": "Parameter",
                                          "label": "message: string",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "message",
                                              "children": []
                                            },
                                            {
                                              "type": "StringKeyword",
                                              "label": "string",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "VoidKeyword",
                                          "label": "void",
                                          "children": []
                                        },
                                        {
                                          "type": "EqualsGreaterThanToken",
                                          "label": "=>",
                                          "children": []
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n        showToast(message);\n      }",
                                          "children": [
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "showToast(message);",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "showToast(message)",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "showToast",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "message",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async rename(item: UserFileDataItem, name: string): Promise<Object[]> {\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "rename",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "item: UserFileDataItem",
              "children": [
                {
                  "type": "Identifier",
                  "label": "item",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "UserFileDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "UserFileDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "name: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "name",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<Object[]>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "ArrayType",
                  "label": "Object[]",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "Object",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Object",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'renameSinglePhoto start');\n    await item.setName(name);\n    return [item.title, item.displayName] as Object[];\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'renameSinglePhoto start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'renameSinglePhoto start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'renameSinglePhoto start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await item.setName(name);",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await item.setName(name)",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "item.setName(name)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "item.setName",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "item",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "setName",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "name",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return [item.title, item.displayName] as Object[];",
                  "children": [
                    {
                      "type": "AsExpression",
                      "label": "[item.title, item.displayName] as Object[]",
                      "children": [
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[item.title, item.displayName]",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "item.title",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "item",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "title",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "item.displayName",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "item",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "displayName",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ArrayType",
                          "label": "Object[]",
                          "children": [
                            {
                              "type": "TypeReference",
                              "label": "Object",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Object",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async hasSameNameAsset(item: UserFileDataItem, name: string): Promise<boolean> {\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "hasSameNameAsset",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "item: UserFileDataItem",
              "children": [
                {
                  "type": "Identifier",
                  "label": "item",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "UserFileDataItem",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "UserFileDataItem",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "name: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "name",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<boolean>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "BooleanKeyword",
                  "label": "boolean",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.debug(TAG, 'hasSameNameAsset start');\n    let fileAsset = await item.loadFileAsset();\n    let displayName = fileAsset.displayName;\n    let index = displayName.lastIndexOf('.');\n    displayName = name + displayName.slice(index);\n    let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));\n    if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }\n    Log.info(TAG, 'hasSameNameAsset true');\n    return true;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'hasSameNameAsset start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'hasSameNameAsset start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'hasSameNameAsset start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let fileAsset = await item.loadFileAsset();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let fileAsset = await item.loadFileAsset()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "fileAsset = await item.loadFileAsset()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fileAsset",
                              "children": []
                            },
                            {
                              "type": "AwaitExpression",
                              "label": "await item.loadFileAsset()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "item.loadFileAsset()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "item.loadFileAsset",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "item",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "loadFileAsset",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let displayName = fileAsset.displayName;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let displayName = fileAsset.displayName",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "displayName = fileAsset.displayName",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "displayName",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "fileAsset.displayName",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "fileAsset",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "displayName",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let index = displayName.lastIndexOf('.');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let index = displayName.lastIndexOf('.')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "index = displayName.lastIndexOf('.')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "index",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "displayName.lastIndexOf('.')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "displayName.lastIndexOf",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "displayName",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "lastIndexOf",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'.'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "displayName = name + displayName.slice(index);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "displayName = name + displayName.slice(index)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "displayName",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "name + displayName.slice(index)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "name",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "displayName.slice(index)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "displayName.slice",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "displayName",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "slice",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "index",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri));",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri))",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "counts = (await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri))",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "counts",
                              "children": []
                            },
                            {
                              "type": "ParenthesizedExpression",
                              "label": "(await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri))",
                              "children": [
                                {
                                  "type": "AwaitExpression",
                                  "label": "await userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri)",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "userFileModel.getMediaItemCountsByDisplayName(fileAsset.uri)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "userFileModel.getMediaItemCountsByDisplayName",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "userFileModel",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getMediaItemCountsByDisplayName",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "fileAsset.uri",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "fileAsset",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "uri",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (counts === 0) {\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "counts === 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "counts",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'hasSameNameAsset is false');\n      return false;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'hasSameNameAsset is false');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'hasSameNameAsset is false')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'hasSameNameAsset is false'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return false;",
                          "children": [
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'hasSameNameAsset true');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'hasSameNameAsset true')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'hasSameNameAsset true'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return true;",
                  "children": [
                    {
                      "type": "TrueKeyword",
                      "label": "true",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private cancelCallback(): void {\n    this.cancelCallbackBindImpl();\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cancelCallback",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.cancelCallbackBindImpl();\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.cancelCallbackBindImpl();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.cancelCallbackBindImpl()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cancelCallbackBindImpl",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cancelCallbackBindImpl",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private cancelCallbackBindImpl(): void {\n    Log.info(TAG, 'Rename cancel');\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cancelCallbackBindImpl",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'Rename cancel');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'Rename cancel');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'Rename cancel')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'Rename cancel'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}