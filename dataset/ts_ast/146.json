{
  "type": "SourceFile",
  "label": "import { Test } from '@nestjs/testing';\nimport { expect } from 'chai';\nimport { Controller, Injectable, Module } from '@nestjs/common';\nclass B {}\n@Injectable()\nclass A {\n  constructor(b: B) {}\n}\n@Injectable()\nclass BImpl {\n  constructor(a: A) {}\n}\n@Controller()\nclass AppController {\n  constructor(a: A) {}\n}\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}\ndescribe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n});",
  "start_token": 0,
  "end_token": 316,
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { Test } from '@nestjs/testing';",
      "start_token": 0,
      "end_token": 6,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Test }",
          "start_token": 1,
          "end_token": 3,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Test }",
              "start_token": 1,
              "end_token": 3,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Test",
                  "start_token": 2,
                  "end_token": 2,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Test",
                      "start_token": 2,
                      "end_token": 2,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@nestjs/testing'",
          "start_token": 5,
          "end_token": 5,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { expect } from 'chai';",
      "start_token": 7,
      "end_token": 13,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ expect }",
          "start_token": 8,
          "end_token": 10,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ expect }",
              "start_token": 8,
              "end_token": 10,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "expect",
                  "start_token": 9,
                  "end_token": 9,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "expect",
                      "start_token": 9,
                      "end_token": 9,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'chai'",
          "start_token": 12,
          "end_token": 12,
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Controller, Injectable, Module } from '@nestjs/common';",
      "start_token": 14,
      "end_token": 24,
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Controller, Injectable, Module }",
          "start_token": 15,
          "end_token": 21,
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Controller, Injectable, Module }",
              "start_token": 15,
              "end_token": 21,
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Controller",
                  "start_token": 16,
                  "end_token": 16,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Controller",
                      "start_token": 16,
                      "end_token": 16,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "Injectable",
                  "start_token": 18,
                  "end_token": 18,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Injectable",
                      "start_token": 18,
                      "end_token": 18,
                      "children": []
                    }
                  ]
                },
                {
                  "type": "ImportSpecifier",
                  "label": "Module",
                  "start_token": 20,
                  "end_token": 20,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Module",
                      "start_token": 20,
                      "end_token": 20,
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@nestjs/common'",
          "start_token": 23,
          "end_token": 23,
          "children": []
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "class B {}",
      "start_token": 25,
      "end_token": 28,
      "children": [
        {
          "type": "Identifier",
          "label": "B",
          "start_token": 26,
          "end_token": 26,
          "children": []
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "@Injectable()\nclass A {\n  constructor(b: B) {}\n}",
      "start_token": 29,
      "end_token": 43,
      "children": [
        {
          "type": "Decorator",
          "label": "@Injectable()",
          "start_token": 29,
          "end_token": 31,
          "children": [
            {
              "type": "CallExpression",
              "label": "Injectable()",
              "start_token": 29,
              "end_token": 31,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Injectable",
                  "start_token": 29,
                  "end_token": 29,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Identifier",
          "label": "A",
          "start_token": 33,
          "end_token": 33,
          "children": []
        },
        {
          "type": "Constructor",
          "label": "constructor(b: B) {}",
          "start_token": 35,
          "end_token": 42,
          "children": [
            {
              "type": "Parameter",
              "label": "b: B",
              "start_token": 37,
              "end_token": 39,
              "children": [
                {
                  "type": "Identifier",
                  "label": "b",
                  "start_token": 37,
                  "end_token": 37,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "B",
                  "start_token": 39,
                  "end_token": 39,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "B",
                      "start_token": 39,
                      "end_token": 39,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{}",
              "start_token": 41,
              "end_token": 42,
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "@Injectable()\nclass BImpl {\n  constructor(a: A) {}\n}",
      "start_token": 44,
      "end_token": 58,
      "children": [
        {
          "type": "Decorator",
          "label": "@Injectable()",
          "start_token": 44,
          "end_token": 46,
          "children": [
            {
              "type": "CallExpression",
              "label": "Injectable()",
              "start_token": 44,
              "end_token": 46,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Injectable",
                  "start_token": 44,
                  "end_token": 44,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Identifier",
          "label": "BImpl",
          "start_token": 48,
          "end_token": 48,
          "children": []
        },
        {
          "type": "Constructor",
          "label": "constructor(a: A) {}",
          "start_token": 50,
          "end_token": 57,
          "children": [
            {
              "type": "Parameter",
              "label": "a: A",
              "start_token": 52,
              "end_token": 54,
              "children": [
                {
                  "type": "Identifier",
                  "label": "a",
                  "start_token": 52,
                  "end_token": 52,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "A",
                  "start_token": 54,
                  "end_token": 54,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "A",
                      "start_token": 54,
                      "end_token": 54,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{}",
              "start_token": 56,
              "end_token": 57,
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "@Controller()\nclass AppController {\n  constructor(a: A) {}\n}",
      "start_token": 59,
      "end_token": 73,
      "children": [
        {
          "type": "Decorator",
          "label": "@Controller()",
          "start_token": 59,
          "end_token": 61,
          "children": [
            {
              "type": "CallExpression",
              "label": "Controller()",
              "start_token": 59,
              "end_token": 61,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Controller",
                  "start_token": 59,
                  "end_token": 59,
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Identifier",
          "label": "AppController",
          "start_token": 63,
          "end_token": 63,
          "children": []
        },
        {
          "type": "Constructor",
          "label": "constructor(a: A) {}",
          "start_token": 65,
          "end_token": 72,
          "children": [
            {
              "type": "Parameter",
              "label": "a: A",
              "start_token": 67,
              "end_token": 69,
              "children": [
                {
                  "type": "Identifier",
                  "label": "a",
                  "start_token": 67,
                  "end_token": 67,
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "A",
                  "start_token": 69,
                  "end_token": 69,
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "A",
                      "start_token": 69,
                      "end_token": 69,
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{}",
              "start_token": 71,
              "end_token": 72,
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})\nexport class AppModule {}",
      "start_token": 74,
      "end_token": 110,
      "children": [
        {
          "type": "Decorator",
          "label": "@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})",
          "start_token": 74,
          "end_token": 105,
          "children": [
            {
              "type": "CallExpression",
              "label": "Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n})",
              "start_token": 74,
              "end_token": 105,
              "children": [
                {
                  "type": "Identifier",
                  "label": "Module",
                  "start_token": 74,
                  "end_token": 74,
                  "children": []
                },
                {
                  "type": "ObjectLiteralExpression",
                  "label": "{\n  imports: [],\n  controllers: [AppController],\n  providers: [A, { provide: B, useClass: BImpl }],\n}",
                  "start_token": 76,
                  "end_token": 104,
                  "children": [
                    {
                      "type": "PropertyAssignment",
                      "label": "imports: []",
                      "start_token": 77,
                      "end_token": 80,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "imports",
                          "start_token": 77,
                          "end_token": 77,
                          "children": []
                        },
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[]",
                          "start_token": 79,
                          "end_token": 80,
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAssignment",
                      "label": "controllers: [AppController]",
                      "start_token": 82,
                      "end_token": 86,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "controllers",
                          "start_token": 82,
                          "end_token": 82,
                          "children": []
                        },
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[AppController]",
                          "start_token": 84,
                          "end_token": 86,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "AppController",
                              "start_token": 85,
                              "end_token": 85,
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PropertyAssignment",
                      "label": "providers: [A, { provide: B, useClass: BImpl }]",
                      "start_token": 88,
                      "end_token": 102,
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "providers",
                          "start_token": 88,
                          "end_token": 88,
                          "children": []
                        },
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[A, { provide: B, useClass: BImpl }]",
                          "start_token": 90,
                          "end_token": 102,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "A",
                              "start_token": 91,
                              "end_token": 91,
                              "children": []
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{ provide: B, useClass: BImpl }",
                              "start_token": 93,
                              "end_token": 101,
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "provide: B",
                                  "start_token": 94,
                                  "end_token": 96,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "provide",
                                      "start_token": 94,
                                      "end_token": 94,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "B",
                                      "start_token": 96,
                                      "end_token": 96,
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "useClass: BImpl",
                                  "start_token": 98,
                                  "end_token": 100,
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "useClass",
                                      "start_token": 98,
                                      "end_token": 98,
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "BImpl",
                                      "start_token": 100,
                                      "end_token": 100,
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "ExportKeyword",
          "label": "export",
          "start_token": 106,
          "end_token": 106,
          "children": []
        },
        {
          "type": "Identifier",
          "label": "AppModule",
          "start_token": 108,
          "end_token": 108,
          "children": []
        }
      ]
    },
    {
      "type": "ExpressionStatement",
      "label": "describe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n});",
      "start_token": 111,
      "end_token": 316,
      "children": [
        {
          "type": "CallExpression",
          "label": "describe('Circular custom providers', () => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n})",
          "start_token": 111,
          "end_token": 315,
          "children": [
            {
              "type": "Identifier",
              "label": "describe",
              "start_token": 111,
              "end_token": 111,
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'Circular custom providers'",
              "start_token": 113,
              "end_token": 113,
              "children": []
            },
            {
              "type": "ArrowFunction",
              "label": "() => {\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n}",
              "start_token": 115,
              "end_token": 314,
              "children": [
                {
                  "type": "EqualsGreaterThanToken",
                  "label": "=>",
                  "start_token": 117,
                  "end_token": 117,
                  "children": []
                },
                {
                  "type": "Block",
                  "label": "{\n  it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n  it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });\n}",
                  "start_token": 118,
                  "end_token": 314,
                  "children": [
                    {
                      "type": "ExpressionStatement",
                      "label": "it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });",
                      "start_token": 119,
                      "end_token": 194,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "it('should throw an exception (useClass + regular provider)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  })",
                          "start_token": 119,
                          "end_token": 193,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "it",
                              "start_token": 119,
                              "end_token": 119,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'should throw an exception (useClass + regular provider)'",
                              "start_token": 121,
                              "end_token": 121,
                              "children": []
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "async () => {\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  }",
                              "start_token": 123,
                              "end_token": 192,
                              "children": [
                                {
                                  "type": "AsyncKeyword",
                                  "label": "async",
                                  "start_token": 123,
                                  "end_token": 123,
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "start_token": 126,
                                  "end_token": 126,
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n    try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  }",
                                  "start_token": 127,
                                  "end_token": 192,
                                  "children": [
                                    {
                                      "type": "TryStatement",
                                      "label": "try {\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }",
                                      "start_token": 128,
                                      "end_token": 191,
                                      "children": [
                                        {
                                          "type": "Block",
                                          "label": "{\n      const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    }",
                                          "start_token": 129,
                                          "end_token": 168,
                                          "children": [
                                            {
                                              "type": "FirstStatement",
                                              "label": "const builder = Test.createTestingModule({\n        imports: [AppModule],\n      });",
                                              "start_token": 130,
                                              "end_token": 146,
                                              "children": [
                                                {
                                                  "type": "VariableDeclarationList",
                                                  "label": "const builder = Test.createTestingModule({\n        imports: [AppModule],\n      })",
                                                  "start_token": 130,
                                                  "end_token": 145,
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "label": "builder = Test.createTestingModule({\n        imports: [AppModule],\n      })",
                                                      "start_token": 131,
                                                      "end_token": 145,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "builder",
                                                          "start_token": 131,
                                                          "end_token": 131,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "Test.createTestingModule({\n        imports: [AppModule],\n      })",
                                                          "start_token": 133,
                                                          "end_token": 145,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "Test.createTestingModule",
                                                              "start_token": 133,
                                                              "end_token": 135,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "Test",
                                                                  "start_token": 133,
                                                                  "end_token": 133,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "createTestingModule",
                                                                  "start_token": 135,
                                                                  "end_token": 135,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{\n        imports: [AppModule],\n      }",
                                                              "start_token": 137,
                                                              "end_token": 144,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "imports: [AppModule]",
                                                                  "start_token": 138,
                                                                  "end_token": 142,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "imports",
                                                                      "start_token": 138,
                                                                      "end_token": 138,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "ArrayLiteralExpression",
                                                                      "label": "[AppModule]",
                                                                      "start_token": 140,
                                                                      "end_token": 142,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "AppModule",
                                                                          "start_token": 141,
                                                                          "end_token": 141,
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "await builder.compile();",
                                              "start_token": 147,
                                              "end_token": 153,
                                              "children": [
                                                {
                                                  "type": "AwaitExpression",
                                                  "label": "await builder.compile()",
                                                  "start_token": 147,
                                                  "end_token": 152,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "builder.compile()",
                                                      "start_token": 148,
                                                      "end_token": 152,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "builder.compile",
                                                          "start_token": 148,
                                                          "end_token": 150,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "builder",
                                                              "start_token": 148,
                                                              "end_token": 148,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "compile",
                                                              "start_token": 150,
                                                              "end_token": 150,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "expect(true).to.be.eql(false);",
                                              "start_token": 154,
                                              "end_token": 167,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(true).to.be.eql(false)",
                                                  "start_token": 154,
                                                  "end_token": 166,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "expect(true).to.be.eql",
                                                      "start_token": 154,
                                                      "end_token": 163,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "expect(true).to.be",
                                                          "start_token": 154,
                                                          "end_token": 161,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "expect(true).to",
                                                              "start_token": 154,
                                                              "end_token": 159,
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "expect(true)",
                                                                  "start_token": 154,
                                                                  "end_token": 157,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "expect",
                                                                      "start_token": 154,
                                                                      "end_token": 154,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TrueKeyword",
                                                                      "label": "true",
                                                                      "start_token": 156,
                                                                      "end_token": 156,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "to",
                                                                  "start_token": 159,
                                                                  "end_token": 159,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "be",
                                                              "start_token": 161,
                                                              "end_token": 161,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "eql",
                                                          "start_token": 163,
                                                          "end_token": 163,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "FalseKeyword",
                                                      "label": "false",
                                                      "start_token": 165,
                                                      "end_token": 165,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "CatchClause",
                                          "label": "catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }",
                                          "start_token": 169,
                                          "end_token": 191,
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err",
                                              "start_token": 171,
                                              "end_token": 171,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "start_token": 171,
                                                  "end_token": 171,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }",
                                              "start_token": 173,
                                              "end_token": 191,
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );",
                                                  "start_token": 174,
                                                  "end_token": 190,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      )",
                                                      "start_token": 174,
                                                      "end_token": 189,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "expect(err.message).to.be.eql",
                                                          "start_token": 174,
                                                          "end_token": 185,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "expect(err.message).to.be",
                                                              "start_token": 174,
                                                              "end_token": 183,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "expect(err.message).to",
                                                                  "start_token": 174,
                                                                  "end_token": 181,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "expect(err.message)",
                                                                      "start_token": 174,
                                                                      "end_token": 179,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "expect",
                                                                          "start_token": 174,
                                                                          "end_token": 174,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "err.message",
                                                                          "start_token": 176,
                                                                          "end_token": 178,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "err",
                                                                              "start_token": 176,
                                                                              "end_token": 176,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "message",
                                                                              "start_token": 178,
                                                                              "end_token": 178,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "to",
                                                                      "start_token": 181,
                                                                      "end_token": 181,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "be",
                                                                  "start_token": 183,
                                                                  "end_token": 183,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "eql",
                                                              "start_token": 185,
                                                              "end_token": 185,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'A circular dependency has been detected inside \"A\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.'",
                                                          "start_token": 187,
                                                          "end_token": 187,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "label": "it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  });",
                      "start_token": 195,
                      "end_token": 313,
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "it('should throw an exception (2 factories)', async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  })",
                          "start_token": 195,
                          "end_token": 312,
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "it",
                              "start_token": 195,
                              "end_token": 195,
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "'should throw an exception (2 factories)'",
                              "start_token": 197,
                              "end_token": 197,
                              "children": []
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "async () => {\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  }",
                              "start_token": 199,
                              "end_token": 311,
                              "children": [
                                {
                                  "type": "AsyncKeyword",
                                  "label": "async",
                                  "start_token": 199,
                                  "end_token": 199,
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "start_token": 202,
                                  "end_token": 202,
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n    try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }\n  }",
                                  "start_token": 203,
                                  "end_token": 311,
                                  "children": [
                                    {
                                      "type": "TryStatement",
                                      "label": "try {\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    } catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }",
                                      "start_token": 204,
                                      "end_token": 310,
                                      "children": [
                                        {
                                          "type": "Block",
                                          "label": "{\n      const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });\n      await builder.compile();\n      expect(true).to.be.eql(false);\n    }",
                                          "start_token": 205,
                                          "end_token": 287,
                                          "children": [
                                            {
                                              "type": "FirstStatement",
                                              "label": "const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      });",
                                              "start_token": 206,
                                              "end_token": 265,
                                              "children": [
                                                {
                                                  "type": "VariableDeclarationList",
                                                  "label": "const builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      })",
                                                  "start_token": 206,
                                                  "end_token": 264,
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "label": "builder = Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      })",
                                                      "start_token": 207,
                                                      "end_token": 264,
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "builder",
                                                          "start_token": 207,
                                                          "end_token": 207,
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "Test.createTestingModule({\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      })",
                                                          "start_token": 209,
                                                          "end_token": 264,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "Test.createTestingModule",
                                                              "start_token": 209,
                                                              "end_token": 211,
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "Test",
                                                                  "start_token": 209,
                                                                  "end_token": 209,
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "createTestingModule",
                                                                  "start_token": 211,
                                                                  "end_token": 211,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{\n        providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ],\n      }",
                                                              "start_token": 213,
                                                              "end_token": 263,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "providers: [\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ]",
                                                                  "start_token": 214,
                                                                  "end_token": 261,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "providers",
                                                                      "start_token": 214,
                                                                      "end_token": 214,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "ArrayLiteralExpression",
                                                                      "label": "[\n          { provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] },\n          { provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] },\n        ]",
                                                                      "start_token": 216,
                                                                      "end_token": 261,
                                                                      "children": [
                                                                        {
                                                                          "type": "ObjectLiteralExpression",
                                                                          "label": "{ provide: 'ABC', useFactory: () => ({}), inject: ['DEF'] }",
                                                                          "start_token": 217,
                                                                          "end_token": 237,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "provide: 'ABC'",
                                                                              "start_token": 218,
                                                                              "end_token": 220,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "provide",
                                                                                  "start_token": 218,
                                                                                  "end_token": 218,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "StringLiteral",
                                                                                  "label": "'ABC'",
                                                                                  "start_token": 220,
                                                                                  "end_token": 220,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "useFactory: () => ({})",
                                                                              "start_token": 222,
                                                                              "end_token": 230,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "useFactory",
                                                                                  "start_token": 222,
                                                                                  "end_token": 222,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "ArrowFunction",
                                                                                  "label": "() => ({})",
                                                                                  "start_token": 224,
                                                                                  "end_token": 230,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "EqualsGreaterThanToken",
                                                                                      "label": "=>",
                                                                                      "start_token": 226,
                                                                                      "end_token": 226,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "ParenthesizedExpression",
                                                                                      "label": "({})",
                                                                                      "start_token": 227,
                                                                                      "end_token": 230,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "ObjectLiteralExpression",
                                                                                          "label": "{}",
                                                                                          "start_token": 228,
                                                                                          "end_token": 229,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "inject: ['DEF']",
                                                                              "start_token": 232,
                                                                              "end_token": 236,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "inject",
                                                                                  "start_token": 232,
                                                                                  "end_token": 232,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "ArrayLiteralExpression",
                                                                                  "label": "['DEF']",
                                                                                  "start_token": 234,
                                                                                  "end_token": 236,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "StringLiteral",
                                                                                      "label": "'DEF'",
                                                                                      "start_token": 235,
                                                                                      "end_token": 235,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "ObjectLiteralExpression",
                                                                          "label": "{ provide: 'DEF', useFactory: () => ({}), inject: ['ABC'] }",
                                                                          "start_token": 239,
                                                                          "end_token": 259,
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "provide: 'DEF'",
                                                                              "start_token": 240,
                                                                              "end_token": 242,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "provide",
                                                                                  "start_token": 240,
                                                                                  "end_token": 240,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "StringLiteral",
                                                                                  "label": "'DEF'",
                                                                                  "start_token": 242,
                                                                                  "end_token": 242,
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "useFactory: () => ({})",
                                                                              "start_token": 244,
                                                                              "end_token": 252,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "useFactory",
                                                                                  "start_token": 244,
                                                                                  "end_token": 244,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "ArrowFunction",
                                                                                  "label": "() => ({})",
                                                                                  "start_token": 246,
                                                                                  "end_token": 252,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "EqualsGreaterThanToken",
                                                                                      "label": "=>",
                                                                                      "start_token": 248,
                                                                                      "end_token": 248,
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "ParenthesizedExpression",
                                                                                      "label": "({})",
                                                                                      "start_token": 249,
                                                                                      "end_token": 252,
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "ObjectLiteralExpression",
                                                                                          "label": "{}",
                                                                                          "start_token": 250,
                                                                                          "end_token": 251,
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "inject: ['ABC']",
                                                                              "start_token": 254,
                                                                              "end_token": 258,
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "inject",
                                                                                  "start_token": 254,
                                                                                  "end_token": 254,
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "ArrayLiteralExpression",
                                                                                  "label": "['ABC']",
                                                                                  "start_token": 256,
                                                                                  "end_token": 258,
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "StringLiteral",
                                                                                      "label": "'ABC'",
                                                                                      "start_token": 257,
                                                                                      "end_token": 257,
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "await builder.compile();",
                                              "start_token": 266,
                                              "end_token": 272,
                                              "children": [
                                                {
                                                  "type": "AwaitExpression",
                                                  "label": "await builder.compile()",
                                                  "start_token": 266,
                                                  "end_token": 271,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "builder.compile()",
                                                      "start_token": 267,
                                                      "end_token": 271,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "builder.compile",
                                                          "start_token": 267,
                                                          "end_token": 269,
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "builder",
                                                              "start_token": 267,
                                                              "end_token": 267,
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "compile",
                                                              "start_token": 269,
                                                              "end_token": 269,
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "expect(true).to.be.eql(false);",
                                              "start_token": 273,
                                              "end_token": 286,
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "expect(true).to.be.eql(false)",
                                                  "start_token": 273,
                                                  "end_token": 285,
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "expect(true).to.be.eql",
                                                      "start_token": 273,
                                                      "end_token": 282,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "expect(true).to.be",
                                                          "start_token": 273,
                                                          "end_token": 280,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "expect(true).to",
                                                              "start_token": 273,
                                                              "end_token": 278,
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "expect(true)",
                                                                  "start_token": 273,
                                                                  "end_token": 276,
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "expect",
                                                                      "start_token": 273,
                                                                      "end_token": 273,
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TrueKeyword",
                                                                      "label": "true",
                                                                      "start_token": 275,
                                                                      "end_token": 275,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "to",
                                                                  "start_token": 278,
                                                                  "end_token": 278,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "be",
                                                              "start_token": 280,
                                                              "end_token": 280,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "eql",
                                                          "start_token": 282,
                                                          "end_token": 282,
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "FalseKeyword",
                                                      "label": "false",
                                                      "start_token": 284,
                                                      "end_token": 284,
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "CatchClause",
                                          "label": "catch (err) {\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }",
                                          "start_token": 288,
                                          "end_token": 310,
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err",
                                              "start_token": 290,
                                              "end_token": 290,
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "start_token": 290,
                                                  "end_token": 290,
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n      expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );\n    }",
                                              "start_token": 292,
                                              "end_token": 310,
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      );",
                                                  "start_token": 293,
                                                  "end_token": 309,
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "expect(err.message).to.be.eql(\n        'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.',\n      )",
                                                      "start_token": 293,
                                                      "end_token": 308,
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "expect(err.message).to.be.eql",
                                                          "start_token": 293,
                                                          "end_token": 304,
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "expect(err.message).to.be",
                                                              "start_token": 293,
                                                              "end_token": 302,
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "expect(err.message).to",
                                                                  "start_token": 293,
                                                                  "end_token": 300,
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "expect(err.message)",
                                                                      "start_token": 293,
                                                                      "end_token": 298,
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "expect",
                                                                          "start_token": 293,
                                                                          "end_token": 293,
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "err.message",
                                                                          "start_token": 295,
                                                                          "end_token": 297,
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "err",
                                                                              "start_token": 295,
                                                                              "end_token": 295,
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "message",
                                                                              "start_token": 297,
                                                                              "end_token": 297,
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "to",
                                                                      "start_token": 300,
                                                                      "end_token": 300,
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "be",
                                                                  "start_token": 302,
                                                                  "end_token": 302,
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "eql",
                                                              "start_token": 304,
                                                              "end_token": 304,
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'A circular dependency has been detected inside \"ABC\". Please, make sure that each side of a bidirectional relationships are decorated with \"forwardRef()\". Note that circular relationships between custom providers (e.g., factories) are not supported since functions cannot be called more than once.'",
                                                          "start_token": 306,
                                                          "end_token": 306,
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "start_token": -1,
      "end_token": -1,
      "children": []
    }
  ]
}