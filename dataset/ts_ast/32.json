{
  "type": "SourceFile",
  "label": "import deviceInfo from '@ohos.deviceInfo';\nimport window from '@ohos.window';\nimport { stashOrGetObject } from '../utils/SingleInstanceUtils';\nimport { Log } from '../utils/Log';\nimport { BroadcastConstants } from '../constants/BroadcastConstants';\nimport { Constants } from '../constants/Constants';\nimport { getResourceString } from '../utils/ResourceUtils';\nimport { GlobalContext } from './GlobalContext';\n\nexport enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}\n\nenum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}\n\nenum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}\n\ninterface Size {\n  width: number;\n  height: number;\n}\n\ninterface StatusNaviHeight {\n  status: number;\n  navi: number;\n}\n\ninterface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}\n\nconst TAG = 'ScreenManager';\n\nconst APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager';\n\nconst SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal';\nconst SCREEN_SIDEBAR: string = 'isSidebar';\n\nconst COLUMN_MARGIN: number = 12;\nconst COLUMN_GUTTER: number = 12;\n\ntype CallbackType = Function;\n\nclass ScreenManager {\n  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';\n  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';\n  readonly DEFAULT_WIDTH: number = 1920;\n  readonly DEFAULT_HEIGHT: number = 1080;\n  readonly SPLIT_THRESHOLD = 1.7;\n  private winWidth = 0.0;\n  private winHeight = 0.0;\n  private statusBarHeight = 0;\n  private naviBarHeight = 0;\n  private leftBlank: number[] = [0, 0, 0, 0];\n  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n  private mainWindow: window.Window = undefined;\n  private globalThis = GlobalContext.getContext();\n\n  // Default orientation\n  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n\n  // Default sidebar\n  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n  private windowMode = WindowMode.UNDEFINED;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n  }\n\n  async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }\n\n  /**\n   * Add Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }\n\n  /**\n   * Delete Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }\n\n  private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }\n\n  // Unit：vp\n  getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }\n\n  setWinWidth(width: number): void {\n    this.winWidth = width;\n  }\n\n  // Unit：vp\n  getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }\n\n  getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }\n\n  getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }\n\n  async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }\n\n  isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }\n\n  async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }\n\n  private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }\n\n  private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }\n\n  private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }\n\n  setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }\n\n  private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }\n\n  async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }\n\n  setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }\n\n  private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }\n\n  private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }\n\n  private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }\n\n  isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }\n\n  isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }\n\n  getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }\n\n  getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }\n\n  setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }\n\n  setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }\n}\n\nexport let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG);\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import deviceInfo from '@ohos.deviceInfo';",
      "children": [
        {
          "type": "ImportClause",
          "label": "deviceInfo",
          "children": [
            {
              "type": "Identifier",
              "label": "deviceInfo",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.deviceInfo'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import window from '@ohos.window';",
      "children": [
        {
          "type": "ImportClause",
          "label": "window",
          "children": [
            {
              "type": "Identifier",
              "label": "window",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.window'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { stashOrGetObject } from '../utils/SingleInstanceUtils';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ stashOrGetObject }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ stashOrGetObject }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "stashOrGetObject",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "stashOrGetObject",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/SingleInstanceUtils'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Log } from '../utils/Log';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Log }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Log }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Log",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Log",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/Log'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { BroadcastConstants } from '../constants/BroadcastConstants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ BroadcastConstants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ BroadcastConstants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "BroadcastConstants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BroadcastConstants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/BroadcastConstants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Constants } from '../constants/Constants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Constants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Constants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Constants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Constants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../constants/Constants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { getResourceString } from '../utils/ResourceUtils';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ getResourceString }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ getResourceString }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "getResourceString",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "getResourceString",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../utils/ResourceUtils'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { GlobalContext } from './GlobalContext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ GlobalContext }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ GlobalContext }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "GlobalContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "GlobalContext",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./GlobalContext'",
          "children": []
        }
      ]
    },
    {
      "type": "EnumDeclaration",
      "label": "export enum ColumnSize {\n  COLUMN_TWO = 2,\n  COLUMN_FOUR = 4,\n  COLUMN_SIX = 6,\n  COLUMN_EIGHT = 8,\n  COLUMN_TWELVE = 12\n}",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "Identifier",
          "label": "ColumnSize",
          "children": []
        },
        {
          "type": "EnumMember",
          "label": "COLUMN_TWO = 2",
          "children": [
            {
              "type": "Identifier",
              "label": "COLUMN_TWO",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "2",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "COLUMN_FOUR = 4",
          "children": [
            {
              "type": "Identifier",
              "label": "COLUMN_FOUR",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "4",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "COLUMN_SIX = 6",
          "children": [
            {
              "type": "Identifier",
              "label": "COLUMN_SIX",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "6",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "COLUMN_EIGHT = 8",
          "children": [
            {
              "type": "Identifier",
              "label": "COLUMN_EIGHT",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "8",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "COLUMN_TWELVE = 12",
          "children": [
            {
              "type": "Identifier",
              "label": "COLUMN_TWELVE",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "12",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EnumDeclaration",
      "label": "enum ScreenWidth {\n  WIDTH_MEDIUM = 520,\n  WIDTH_LARGE = 840\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "ScreenWidth",
          "children": []
        },
        {
          "type": "EnumMember",
          "label": "WIDTH_MEDIUM = 520",
          "children": [
            {
              "type": "Identifier",
              "label": "WIDTH_MEDIUM",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "520",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "WIDTH_LARGE = 840",
          "children": [
            {
              "type": "Identifier",
              "label": "WIDTH_LARGE",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "840",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EnumDeclaration",
      "label": "enum WindowMode {\n  UNDEFINED = 1,\n  FULL_SCREEN,\n  PRIMARY,\n  SECONDARY,\n  FLOATING\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "WindowMode",
          "children": []
        },
        {
          "type": "EnumMember",
          "label": "UNDEFINED = 1",
          "children": [
            {
              "type": "Identifier",
              "label": "UNDEFINED",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "1",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "FULL_SCREEN",
          "children": [
            {
              "type": "Identifier",
              "label": "FULL_SCREEN",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "PRIMARY",
          "children": [
            {
              "type": "Identifier",
              "label": "PRIMARY",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "SECONDARY",
          "children": [
            {
              "type": "Identifier",
              "label": "SECONDARY",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "FLOATING",
          "children": [
            {
              "type": "Identifier",
              "label": "FLOATING",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "InterfaceDeclaration",
      "label": "interface Size {\n  width: number;\n  height: number;\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "Size",
          "children": []
        },
        {
          "type": "PropertySignature",
          "label": "width: number;",
          "children": [
            {
              "type": "Identifier",
              "label": "width",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "height: number;",
          "children": [
            {
              "type": "Identifier",
              "label": "height",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "InterfaceDeclaration",
      "label": "interface StatusNaviHeight {\n  status: number;\n  navi: number;\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "StatusNaviHeight",
          "children": []
        },
        {
          "type": "PropertySignature",
          "label": "status: number;",
          "children": [
            {
              "type": "Identifier",
              "label": "status",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        },
        {
          "type": "PropertySignature",
          "label": "navi: number;",
          "children": [
            {
              "type": "Identifier",
              "label": "navi",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "InterfaceDeclaration",
      "label": "interface GetWindowMode {\n  getWindowMode(): Promise<WindowMode>;\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "GetWindowMode",
          "children": []
        },
        {
          "type": "MethodSignature",
          "label": "getWindowMode(): Promise<WindowMode>;",
          "children": [
            {
              "type": "Identifier",
              "label": "getWindowMode",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<WindowMode>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "WindowMode",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "WindowMode",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG = 'ScreenManager';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG = 'ScreenManager'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG = 'ScreenManager'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'ScreenManager'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "APP_KEY_SCREEN_MANAGER = 'app_key_screen_manager'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "APP_KEY_SCREEN_MANAGER",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'app_key_screen_manager'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "SCREEN_ORIENTATION_HORIZONTAL: string = 'isHorizontal'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "SCREEN_ORIENTATION_HORIZONTAL",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'isHorizontal'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const SCREEN_SIDEBAR: string = 'isSidebar';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const SCREEN_SIDEBAR: string = 'isSidebar'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "SCREEN_SIDEBAR: string = 'isSidebar'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "SCREEN_SIDEBAR",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'isSidebar'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const COLUMN_MARGIN: number = 12;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const COLUMN_MARGIN: number = 12",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "COLUMN_MARGIN: number = 12",
              "children": [
                {
                  "type": "Identifier",
                  "label": "COLUMN_MARGIN",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "12",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const COLUMN_GUTTER: number = 12;",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const COLUMN_GUTTER: number = 12",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "COLUMN_GUTTER: number = 12",
              "children": [
                {
                  "type": "Identifier",
                  "label": "COLUMN_GUTTER",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "12",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "TypeAliasDeclaration",
      "label": "type CallbackType = Function;",
      "children": [
        {
          "type": "Identifier",
          "label": "CallbackType",
          "children": []
        },
        {
          "type": "TypeReference",
          "label": "Function",
          "children": [
            {
              "type": "Identifier",
              "label": "Function",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "class ScreenManager {\n  readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';\n  readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';\n  readonly DEFAULT_WIDTH: number = 1920;\n  readonly DEFAULT_HEIGHT: number = 1080;\n  readonly SPLIT_THRESHOLD = 1.7;\n  private winWidth = 0.0;\n  private winHeight = 0.0;\n  private statusBarHeight = 0;\n  private naviBarHeight = 0;\n  private leftBlank: number[] = [0, 0, 0, 0];\n  private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();\n  private mainWindow: window.Window = undefined;\n  private globalThis = GlobalContext.getContext();\n\n  // Default orientation\n  private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n\n  // Default sidebar\n  private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;\n  private windowMode = WindowMode.UNDEFINED;\n\n  constructor() {\n    Log.info(TAG, 'constructor');\n  }\n\n  async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }\n\n  /**\n   * Add Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }\n\n  /**\n   * Delete Listeners\n   *\n   * @param event\n   * @param fn\n   */\n  off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }\n\n  private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }\n\n  // Unit：vp\n  getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }\n\n  setWinWidth(width: number): void {\n    this.winWidth = width;\n  }\n\n  // Unit：vp\n  getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }\n\n  getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }\n\n  getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }\n\n  async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }\n\n  isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }\n\n  async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }\n\n  private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }\n\n  private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }\n\n  private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }\n\n  setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }\n\n  private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }\n\n  async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }\n\n  setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }\n\n  private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }\n\n  private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }\n\n  private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }\n\n  isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }\n\n  isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }\n\n  getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }\n\n  getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }\n\n  setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }\n\n  setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "ScreenManager",
          "children": []
        },
        {
          "type": "PropertyDeclaration",
          "label": "readonly ON_WIN_SIZE_CHANGED = 'on_win_size_changed';",
          "children": [
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "ON_WIN_SIZE_CHANGED",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'on_win_size_changed'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "readonly ON_LEFT_BLANK_CHANGED = 'on_left_blank_changed';",
          "children": [
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "ON_LEFT_BLANK_CHANGED",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'on_left_blank_changed'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "readonly DEFAULT_WIDTH: number = 1920;",
          "children": [
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "DEFAULT_WIDTH",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "1920",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "readonly DEFAULT_HEIGHT: number = 1080;",
          "children": [
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "DEFAULT_HEIGHT",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "1080",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "readonly SPLIT_THRESHOLD = 1.7;",
          "children": [
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "SPLIT_THRESHOLD",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "1.7",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private winWidth = 0.0;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "winWidth",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0.0",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private winHeight = 0.0;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "winHeight",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0.0",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private statusBarHeight = 0;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "statusBarHeight",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private naviBarHeight = 0;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "naviBarHeight",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private leftBlank: number[] = [0, 0, 0, 0];",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "leftBlank",
              "children": []
            },
            {
              "type": "ArrayType",
              "label": "number[]",
              "children": [
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "ArrayLiteralExpression",
              "label": "[0, 0, 0, 0]",
              "children": [
                {
                  "type": "FirstLiteralToken",
                  "label": "0",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "0",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "0",
                  "children": []
                },
                {
                  "type": "FirstLiteralToken",
                  "label": "0",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private events: Map<string, CallbackType[]> = new Map<string, CallbackType[]>();",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "events",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Map<string, CallbackType[]>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Map",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "ArrayType",
                  "label": "CallbackType[]",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "CallbackType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "CallbackType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "NewExpression",
              "label": "new Map<string, CallbackType[]>()",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Map",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "ArrayType",
                  "label": "CallbackType[]",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "CallbackType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "CallbackType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private mainWindow: window.Window = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "mainWindow",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "window.Window",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "window.Window",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "window",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "Window",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private globalThis = GlobalContext.getContext();",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "globalThis",
              "children": []
            },
            {
              "type": "CallExpression",
              "label": "GlobalContext.getContext()",
              "children": [
                {
                  "type": "PropertyAccessExpression",
                  "label": "GlobalContext.getContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "GlobalContext",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "getContext",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private horizontal = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "horizontal",
              "children": []
            },
            {
              "type": "ConditionalExpression",
              "label": "deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default'",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "deviceInfo.deviceType === 'phone'",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "deviceInfo.deviceType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "deviceInfo",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "deviceType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'phone'",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BarBarToken",
                      "label": "||",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "deviceInfo.deviceType === 'default'",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "deviceInfo.deviceType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "deviceInfo",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "deviceType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'default'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "FalseKeyword",
                  "label": "false",
                  "children": []
                },
                {
                  "type": "ColonToken",
                  "label": ":",
                  "children": []
                },
                {
                  "type": "TrueKeyword",
                  "label": "true",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private sidebar = deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "sidebar",
              "children": []
            },
            {
              "type": "ConditionalExpression",
              "label": "deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default' ? false : true",
              "children": [
                {
                  "type": "BinaryExpression",
                  "label": "deviceInfo.deviceType === 'phone' || deviceInfo.deviceType === 'default'",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "deviceInfo.deviceType === 'phone'",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "deviceInfo.deviceType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "deviceInfo",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "deviceType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'phone'",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "BarBarToken",
                      "label": "||",
                      "children": []
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "deviceInfo.deviceType === 'default'",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "deviceInfo.deviceType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "deviceInfo",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "deviceType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'default'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "FalseKeyword",
                  "label": "false",
                  "children": []
                },
                {
                  "type": "ColonToken",
                  "label": ":",
                  "children": []
                },
                {
                  "type": "TrueKeyword",
                  "label": "true",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private windowMode = WindowMode.UNDEFINED;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "windowMode",
              "children": []
            },
            {
              "type": "PropertyAccessExpression",
              "label": "WindowMode.UNDEFINED",
              "children": [
                {
                  "type": "Identifier",
                  "label": "WindowMode",
                  "children": []
                },
                {
                  "type": "Identifier",
                  "label": "UNDEFINED",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor() {\n    Log.info(TAG, 'constructor');\n  }",
          "children": [
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'constructor');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'constructor');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'constructor')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'constructor'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async initializationSize(win): Promise<void> {\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "initializationSize",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "win",
              "children": [
                {
                  "type": "Identifier",
                  "label": "win",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.mainWindow = win;\n    this.setMainWindow(win);\n    await this.checkWindowMode();\n    this.getWindowProperties(win);\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.mainWindow = win;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.mainWindow = win",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.mainWindow",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "mainWindow",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "win",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.setMainWindow(win);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.setMainWindow(win)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.setMainWindow",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setMainWindow",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "win",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await this.checkWindowMode();",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.checkWindowMode()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.checkWindowMode()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.checkWindowMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "checkWindowMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.getWindowProperties(win);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.getWindowProperties(win)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.getWindowProperties",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "getWindowProperties",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "win",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "on(event, fn): void {\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "on",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "event",
              "children": [
                {
                  "type": "Identifier",
                  "label": "event",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "fn",
              "children": [
                {
                  "type": "Identifier",
                  "label": "fn",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    } else {\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Array.isArray(event)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Array.isArray",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Array",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "isArray",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "event",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }\n    }",
                      "children": [
                        {
                          "type": "ForStatement",
                          "label": "for (let i = 0, l = event.length; i < l; i++) {\n        this.on(event[i], fn);\n      }",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let i = 0, l = event.length",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "i = 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "label": "l = event.length",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "l",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "event.length",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "length",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "i < l",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                },
                                {
                                  "type": "FirstBinaryOperator",
                                  "label": "<",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "l",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PostfixUnaryExpression",
                              "label": "i++",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.on(event[i], fn);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.on(event[i], fn);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.on(event[i], fn)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.on",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "on",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "event[i]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "event",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "fn",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }\n      this.events.get(event).push(fn);\n    }",
                      "children": [
                        {
                          "type": "IfStatement",
                          "label": "if (this.events.get(event) === null || this.events.get(event) === undefined) {\n        this.events.set(event, []);\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.events.get(event) === null || this.events.get(event) === undefined",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.events.get(event) === null",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.events.get(event)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.events.get",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.events",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "events",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "NullKeyword",
                                      "label": "null",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.events.get(event) === undefined",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.events.get(event)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.events.get",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.events",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "events",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "undefined",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.events.set(event, []);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.events.set(event, []);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.events.set(event, [])",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.events.set",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.events",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "events",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "set",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        },
                                        {
                                          "type": "ArrayLiteralExpression",
                                          "label": "[]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.events.get(event).push(fn);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.events.get(event).push(fn)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.events.get(event).push",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.events.get(event)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.events.get",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.events",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "events",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "push",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "fn",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "off(event, fn): void {\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "off",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "event",
              "children": [
                {
                  "type": "Identifier",
                  "label": "event",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "fn",
              "children": [
                {
                  "type": "Identifier",
                  "label": "fn",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (event == null || event == undefined) {\n      return;\n    }\n    if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }\n    const cbs: CallbackType[] = this.events.get(event);\n    if (!new Boolean(cbs).valueOf()) {\n      return;\n    }\n    if (fn == null || fn == undefined) {\n      return;\n    }\n    let cb;\n    let i = cbs.length;\n    while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (event == null || event == undefined) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "event == null || event == undefined",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "event == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "event",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "event == undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "event",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (Array.isArray(event)) {\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Array.isArray(event)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Array.isArray",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Array",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "isArray",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "event",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }\n    }",
                      "children": [
                        {
                          "type": "ForStatement",
                          "label": "for (let i = 0, l = event.length; i < l; i++) {\n        this.off(event[i], fn);\n      }",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let i = 0, l = event.length",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "i = 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "label": "l = event.length",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "l",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "event.length",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "length",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "i < l",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                },
                                {
                                  "type": "FirstBinaryOperator",
                                  "label": "<",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "l",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PostfixUnaryExpression",
                              "label": "i++",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.off(event[i], fn);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.off(event[i], fn);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.off(event[i], fn)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.off",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "off",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "event[i]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "event",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "fn",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const cbs: CallbackType[] = this.events.get(event);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const cbs: CallbackType[] = this.events.get(event)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cbs: CallbackType[] = this.events.get(event)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cbs",
                              "children": []
                            },
                            {
                              "type": "ArrayType",
                              "label": "CallbackType[]",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "CallbackType",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CallbackType",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.events.get(event)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.events.get",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.events",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "events",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "event",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!new Boolean(cbs).valueOf()) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!new Boolean(cbs).valueOf()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "new Boolean(cbs).valueOf()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "new Boolean(cbs).valueOf",
                              "children": [
                                {
                                  "type": "NewExpression",
                                  "label": "new Boolean(cbs)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cbs",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "valueOf",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (fn == null || fn == undefined) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "fn == null || fn == undefined",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "fn == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fn",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "fn == undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fn",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let cb;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cb",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cb",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cb",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let i = cbs.length;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let i = cbs.length",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "i = cbs.length",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "i",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "cbs.length",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "cbs",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "length",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "WhileStatement",
                  "label": "while (i-- > 0) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "i-- > 0",
                      "children": [
                        {
                          "type": "PostfixUnaryExpression",
                          "label": "i--",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "i",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "GreaterThanToken",
                          "label": ">",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "cb = cbs[i];",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "cb = cbs[i]",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "cb",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "cbs[i]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "cbs",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "cb === fn || cb.fn === fn",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "cb === fn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "cb",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "fn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "cb.fn === fn",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "cb.fn",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cb",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "fn",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "fn",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        cbs.splice(i, 1);\n        break;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "cbs.splice(i, 1);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "cbs.splice(i, 1)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "cbs.splice",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "cbs",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "splice",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "i",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "BreakStatement",
                                  "label": "break;",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private emit(event, argument: Object[]): void {\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "emit",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "event",
              "children": [
                {
                  "type": "Identifier",
                  "label": "event",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "argument: Object[]",
              "children": [
                {
                  "type": "Identifier",
                  "label": "argument",
                  "children": []
                },
                {
                  "type": "ArrayType",
                  "label": "Object[]",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "Object",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "Object",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let _self = this;\n    if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }\n\n    let cbs: CallbackType[] = [];\n    for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }\n\n    if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let _self = this;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let _self = this",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "_self = this",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "_self",
                              "children": []
                            },
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!new Boolean(this.events.get(event)).valueOf()) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!new Boolean(this.events.get(event)).valueOf()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "new Boolean(this.events.get(event)).valueOf()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "new Boolean(this.events.get(event)).valueOf",
                              "children": [
                                {
                                  "type": "NewExpression",
                                  "label": "new Boolean(this.events.get(event))",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.events.get(event)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.events.get",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.events",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "events",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "valueOf",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let cbs: CallbackType[] = [];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cbs: CallbackType[] = []",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cbs: CallbackType[] = []",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cbs",
                              "children": []
                            },
                            {
                              "type": "ArrayType",
                              "label": "CallbackType[]",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "CallbackType",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CallbackType",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ArrayLiteralExpression",
                              "label": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ForStatement",
                  "label": "for (let i = 0; i < this.events.get(event).length; i++) {\n      cbs.push(this.events.get(event)[i]);\n    }",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let i = 0",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "i = 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "i",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BinaryExpression",
                      "label": "i < this.events.get(event).length",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.events.get(event).length",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.events.get(event)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.events.get",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.events",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "events",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "event",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "length",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "PostfixUnaryExpression",
                      "label": "i++",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "i",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      cbs.push(this.events.get(event)[i]);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "cbs.push(this.events.get(event)[i]);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "cbs.push(this.events.get(event)[i])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "cbs.push",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "cbs",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "push",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.events.get(event)[i]",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.events.get(event)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.events.get",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.events",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "events",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "event",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (cbs.length > 0) {\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "cbs.length > 0",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "cbs.length",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cbs",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "length",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "GreaterThanToken",
                          "label": ">",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }\n    }",
                      "children": [
                        {
                          "type": "ForStatement",
                          "label": "for (let i = 0, l = cbs.length; i < l; i++) {\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let i = 0, l = cbs.length",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "i = 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "label": "l = cbs.length",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "l",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "cbs.length",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cbs",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "length",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "i < l",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                },
                                {
                                  "type": "FirstBinaryOperator",
                                  "label": "<",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "l",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PostfixUnaryExpression",
                              "label": "i++",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        let ref = cbs[i];\n        if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let ref = cbs[i];",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let ref = cbs[i]",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "ref = cbs[i]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "ref",
                                              "children": []
                                            },
                                            {
                                              "type": "ElementAccessExpression",
                                              "label": "cbs[i]",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "cbs",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "i",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (ref != null) {\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "ref != null",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "ref",
                                          "children": []
                                        },
                                        {
                                          "type": "ExclamationEqualsToken",
                                          "label": "!=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }\n        }",
                                      "children": [
                                        {
                                          "type": "TryStatement",
                                          "label": "try {\n            ref.apply(_self, argument);\n          } catch (e) {\n            new Error(e);\n          }",
                                          "children": [
                                            {
                                              "type": "Block",
                                              "label": "{\n            ref.apply(_self, argument);\n          }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "ref.apply(_self, argument);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "ref.apply(_self, argument)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "ref.apply",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "ref",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "apply",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "_self",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "argument",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CatchClause",
                                              "label": "catch (e) {\n            new Error(e);\n          }",
                                              "children": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "label": "e",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Block",
                                                  "label": "{\n            new Error(e);\n          }",
                                                  "children": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "label": "new Error(e);",
                                                      "children": [
                                                        {
                                                          "type": "NewExpression",
                                                          "label": "new Error(e)",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Error",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private isLeftBlankInitialized(): boolean {\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "isLeftBlankInitialized",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0 || this.leftBlank[3] !== 0",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0 || this.leftBlank[2] !== 0",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.leftBlank[0] !== 0 || this.leftBlank[1] !== 0",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.leftBlank[0] !== 0",
                                  "children": [
                                    {
                                      "type": "ElementAccessExpression",
                                      "label": "this.leftBlank[0]",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.leftBlank",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "leftBlank",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExclamationEqualsEqualsToken",
                                      "label": "!==",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.leftBlank[1] !== 0",
                                  "children": [
                                    {
                                      "type": "ElementAccessExpression",
                                      "label": "this.leftBlank[1]",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.leftBlank",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "leftBlank",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExclamationEqualsEqualsToken",
                                      "label": "!==",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "this.leftBlank[2] !== 0",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.leftBlank[2]",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.leftBlank",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "leftBlank",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ExclamationEqualsEqualsToken",
                                  "label": "!==",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "this.leftBlank[3] !== 0",
                          "children": [
                            {
                              "type": "ElementAccessExpression",
                              "label": "this.leftBlank[3]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "3",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExclamationEqualsEqualsToken",
                              "label": "!==",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getWinWidth(): number {\n    return px2vp(this.winWidth);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getWinWidth",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return px2vp(this.winWidth);\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return px2vp(this.winWidth);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "px2vp(this.winWidth)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "px2vp",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.winWidth",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "winWidth",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setWinWidth(width: number): void {\n    this.winWidth = width;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setWinWidth",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "width: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "width",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.winWidth = width;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.winWidth = width;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.winWidth = width",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.winWidth",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "winWidth",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "width",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getWinHeight(): number {\n    return px2vp(this.winHeight);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getWinHeight",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return px2vp(this.winHeight);\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return px2vp(this.winHeight);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "px2vp(this.winHeight)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "px2vp",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.winHeight",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "winHeight",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getStatusBarHeight(): number {\n    return px2vp(this.statusBarHeight);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getStatusBarHeight",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return px2vp(this.statusBarHeight);\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return px2vp(this.statusBarHeight);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "px2vp(this.statusBarHeight)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "px2vp",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.statusBarHeight",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "statusBarHeight",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getNaviBarHeight(): number {\n    return px2vp(this.naviBarHeight);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getNaviBarHeight",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return px2vp(this.naviBarHeight);\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return px2vp(this.naviBarHeight);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "px2vp(this.naviBarHeight)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "px2vp",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.naviBarHeight",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "naviBarHeight",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async initWindowMode(): Promise<void> {\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "initWindowMode",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'start to initialize photos application window mode: ' + this.windowMode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'start to initialize photos application window mode: ' + this.windowMode",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'start to initialize photos application window mode: '",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.windowMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "windowMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isSplitMode(): boolean {\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isSplitMode",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return (WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)",
                  "children": [
                    {
                      "type": "ParenthesizedExpression",
                      "label": "(WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode)",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "WindowMode.PRIMARY === this.windowMode || WindowMode.SECONDARY === this.windowMode",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "WindowMode.PRIMARY === this.windowMode",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "WindowMode.PRIMARY",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "WindowMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "PRIMARY",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.windowMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "windowMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "WindowMode.SECONDARY === this.windowMode",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "WindowMode.SECONDARY",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "WindowMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SECONDARY",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.windowMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "windowMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async checkWindowMode(): Promise<void> {\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "checkWindowMode",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let before = this.windowMode;\n    let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;\n    let mode = await photosWindowStage.getWindowMode();\n    Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);\n\n    if (before === mode) {\n      return;\n    }\n    this.windowMode = mode;\n\n    if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let before = this.windowMode;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let before = this.windowMode",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "before = this.windowMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "before",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.windowMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "windowMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "photosWindowStage = this.globalThis.getObject('photosWindowStage') as GetWindowMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "photosWindowStage",
                              "children": []
                            },
                            {
                              "type": "AsExpression",
                              "label": "this.globalThis.getObject('photosWindowStage') as GetWindowMode",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.globalThis.getObject('photosWindowStage')",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.globalThis.getObject",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.globalThis",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "globalThis",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getObject",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'photosWindowStage'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "GetWindowMode",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "GetWindowMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let mode = await photosWindowStage.getWindowMode();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let mode = await photosWindowStage.getWindowMode()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "mode = await photosWindowStage.getWindowMode()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "mode",
                              "children": []
                            },
                            {
                              "type": "AwaitExpression",
                              "label": "await photosWindowStage.getWindowMode()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "photosWindowStage.getWindowMode()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "photosWindowStage.getWindowMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "photosWindowStage",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getWindowMode",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'photos application before/current window mode: ' + before + '/' + mode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'photos application before/current window mode: ' + before + '/' + mode",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "'photos application before/current window mode: ' + before + '/'",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "'photos application before/current window mode: ' + before",
                                  "children": [
                                    {
                                      "type": "StringLiteral",
                                      "label": "'photos application before/current window mode: '",
                                      "children": []
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "before",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'/'",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "mode",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (before === mode) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "before === mode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "before",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "mode",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.windowMode = mode;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.windowMode = mode",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.windowMode",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "windowMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "mode",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (WindowMode.FULL_SCREEN == this.windowMode) {\n      this.setFullScreen();\n    } else {\n      this.setSplitScreen();\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "WindowMode.FULL_SCREEN == this.windowMode",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "WindowMode.FULL_SCREEN",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "WindowMode",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "FULL_SCREEN",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.windowMode",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "windowMode",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.setFullScreen();\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.setFullScreen();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.setFullScreen()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.setFullScreen",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setFullScreen",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.setSplitScreen();\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.setSplitScreen();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.setSplitScreen()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.setSplitScreen",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setSplitScreen",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private setMainWindow(win: window.Window): void {\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "setMainWindow",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "win: window.Window",
              "children": [
                {
                  "type": "Identifier",
                  "label": "win",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "window.Window",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "window.Window",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "window",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Window",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n        Log.debug(TAG, 'setMainWindow');\n        win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })\n    }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'setMainWindow');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'setMainWindow')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setMainWindow'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "win.on('windowSizeChange', (data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "win.on",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "win",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'windowSizeChange'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(data: window.Size): void => {\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "data: window.Size",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "data",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "window.Size",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "window.Size",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "window",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n            Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));\n            this.checkWindowMode();\n            this.onWinSizeChanged(data);\n        }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data));",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Log.debug(TAG, 'windowSizeChange ' + JSON.stringify(data))",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Log.debug",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Log",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "debug",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'windowSizeChange ' + JSON.stringify(data)",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'windowSizeChange '",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(data)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.checkWindowMode();",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.checkWindowMode()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.checkWindowMode",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "checkWindowMode",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.onWinSizeChanged(data);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.onWinSizeChanged(data)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.onWinSizeChanged",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "onWinSizeChanged",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private getWindowProperties(win: window.Window): void {\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getWindowProperties",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "win: window.Window",
              "children": [
                {
                  "type": "Identifier",
                  "label": "win",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "window.Window",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "window.Window",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "window",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Window",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.debug(TAG, 'getWindowProperties');\n    try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'getWindowProperties');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'getWindowProperties')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'getWindowProperties'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    } catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let properties = win.getWindowProperties();\n      if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }\n      Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let properties = win.getWindowProperties();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let properties = win.getWindowProperties()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "properties = win.getWindowProperties()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "properties",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "win.getWindowProperties()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "win.getWindowProperties",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "win",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getWindowProperties",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (properties.windowRect.width !== 0 && properties.windowRect.height !== 0) {\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "properties.windowRect.width !== 0 && properties.windowRect.height !== 0",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "properties.windowRect.width !== 0",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "properties.windowRect.width",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "properties.windowRect",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "properties",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "windowRect",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "width",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExclamationEqualsEqualsToken",
                                      "label": "!==",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "AmpersandAmpersandToken",
                                  "label": "&&",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "properties.windowRect.height !== 0",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "properties.windowRect.height",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "properties.windowRect",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "properties",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "windowRect",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "height",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExclamationEqualsEqualsToken",
                                      "label": "!==",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.winWidth = properties.windowRect.width;\n        this.winHeight = properties.windowRect.height;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.winWidth = properties.windowRect.width;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.winWidth = properties.windowRect.width",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.winWidth",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "winWidth",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "properties.windowRect.width",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "properties.windowRect",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "properties",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "windowRect",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "width",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.winHeight = properties.windowRect.height;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.winHeight = properties.windowRect.height",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.winHeight",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "winHeight",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "properties.windowRect.height",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "properties.windowRect",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "properties",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "windowRect",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "height",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.debug(TAG, 'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.debug",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'this.winWidth = ' + this.winWidth + ' this.winHeight = ' + this.winHeight",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'this.winWidth = ' + this.winWidth + ' this.winHeight = '",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'this.winWidth = ' + this.winWidth",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'this.winWidth = '",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.winWidth",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "winWidth",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "' this.winHeight = '",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.winHeight",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "winHeight",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (exception) {\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exception",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exception",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception));",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "console.error('Failed to obtain the window properties. Cause: ' + JSON.stringify(exception))",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "console.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "console",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'Failed to obtain the window properties. Cause: ' + JSON.stringify(exception)",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'Failed to obtain the window properties. Cause: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "JSON.stringify(exception)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "JSON.stringify",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "JSON",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stringify",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "exception",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async setFullScreen(): Promise<void> {\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "setFullScreen",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "topWindow",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "window.Window",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "window",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Window",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.Get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "window.Window",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "window",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Window",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.MAIN_WINDOW",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MAIN_WINDOW",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'getTopWindow start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'getTopWindow start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'getTopWindow start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    } catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      await topWindow.setWindowLayoutFullScreen(true);\n      Log.debug(TAG, 'setFullScreen true Succeeded');\n      await this.hideStatusBar(topWindow);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "await topWindow.setWindowLayoutFullScreen(true);",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await topWindow.setWindowLayoutFullScreen(true)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "topWindow.setWindowLayoutFullScreen(true)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "topWindow.setWindowLayoutFullScreen",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "topWindow",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "setWindowLayoutFullScreen",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TrueKeyword",
                                      "label": "true",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.debug(TAG, 'setFullScreen true Succeeded');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.debug(TAG, 'setFullScreen true Succeeded')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.debug",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'setFullScreen true Succeeded'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.hideStatusBar(topWindow);",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.hideStatusBar(topWindow)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.hideStatusBar(topWindow)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.hideStatusBar",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "hideStatusBar",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "topWindow",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'setFullScreen err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'setFullScreen err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'setFullScreen err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'setFullScreen err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setFullScreen err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setSplitScreen(): void {\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setSplitScreen",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    } catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.statusBarHeight = 0;\n      this.naviBarHeight = 0;\n      this.leftBlank = [0, 0, 0, 0];\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.statusBarHeight = 0;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.statusBarHeight = 0",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.statusBarHeight",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "statusBarHeight",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.naviBarHeight = 0;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.naviBarHeight = 0",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.naviBarHeight",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "naviBarHeight",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.leftBlank = [0, 0, 0, 0];",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.leftBlank = [0, 0, 0, 0]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "ArrayLiteralExpression",
                                  "label": "[0, 0, 0, 0]",
                                  "children": [
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.SetOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SetOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrayType",
                                  "label": "number[]",
                                  "children": [
                                    {
                                      "type": "NumberKeyword",
                                      "label": "number",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "BroadcastConstants.LEFT_BLANK",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BroadcastConstants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "LEFT_BLANK",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'setSplitScreen err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'setSplitScreen err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'setSplitScreen err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'setSplitScreen err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setSplitScreen err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private async hideStatusBar(topWindow: window.Window): Promise<void> {\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "hideStatusBar",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "topWindow: window.Window",
              "children": [
                {
                  "type": "Identifier",
                  "label": "topWindow",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "window.Window",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "window.Window",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "window",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Window",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.debug(TAG, 'hideStatusBar start');\n    let names: string[] = ['navigation'];\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'hideStatusBar start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'hideStatusBar start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'hideStatusBar start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let names: string[] = ['navigation'];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let names: string[] = ['navigation']",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "names: string[] = ['navigation']",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "names",
                              "children": []
                            },
                            {
                              "type": "ArrayType",
                              "label": "string[]",
                              "children": [
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrayLiteralExpression",
                              "label": "['navigation']",
                              "children": [
                                {
                                  "type": "StringLiteral",
                                  "label": "'navigation'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'getTopWindow names: ' + names + ' end');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'getTopWindow names: ' + names + ' end')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'getTopWindow names: ' + names + ' end'",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "'getTopWindow names: ' + names",
                              "children": [
                                {
                                  "type": "StringLiteral",
                                  "label": "'getTopWindow names: '",
                                  "children": []
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "names",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "' end'",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    } catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      // @ts-ignore\n      await topWindow.setWindowSystemBarEnable(names);\n      Log.debug(TAG, 'hideStatusBar Succeeded');\n      let data = await topWindow.getWindowAvoidArea(0)\n      Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));\n      this.onLeftBlankChanged(data);\n      let barColor: string = await getResourceString($r('app.color.default_background_color'));\n      let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));\n      if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }\n      if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      await topWindow.setWindowSystemBarProperties(systemBarProperties);\n      Log.info(TAG, 'setStatusBarColor done');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "await topWindow.setWindowSystemBarEnable(names);",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await topWindow.setWindowSystemBarEnable(names)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "topWindow.setWindowSystemBarEnable(names)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "topWindow.setWindowSystemBarEnable",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "topWindow",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "setWindowSystemBarEnable",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "names",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.debug(TAG, 'hideStatusBar Succeeded');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.debug(TAG, 'hideStatusBar Succeeded')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.debug",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'hideStatusBar Succeeded'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let data = await topWindow.getWindowAvoidArea(0)",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let data = await topWindow.getWindowAvoidArea(0)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "data = await topWindow.getWindowAvoidArea(0)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "data",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await topWindow.getWindowAvoidArea(0)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "topWindow.getWindowAvoidArea(0)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "topWindow.getWindowAvoidArea",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "topWindow",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getWindowAvoidArea",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "0",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data));",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.debug(TAG, 'Succeeded in obtaining the area. Data: ' + JSON.stringify(data))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.debug",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'Succeeded in obtaining the area. Data: ' + JSON.stringify(data)",
                                  "children": [
                                    {
                                      "type": "StringLiteral",
                                      "label": "'Succeeded in obtaining the area. Data: '",
                                      "children": []
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "JSON.stringify(data)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "JSON.stringify",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "JSON",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "stringify",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onLeftBlankChanged(data);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onLeftBlankChanged(data)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onLeftBlankChanged",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onLeftBlankChanged",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "data",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let barColor: string = await getResourceString($r('app.color.default_background_color'));",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let barColor: string = await getResourceString($r('app.color.default_background_color'))",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "barColor: string = await getResourceString($r('app.color.default_background_color'))",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "barColor",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await getResourceString($r('app.color.default_background_color'))",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "getResourceString($r('app.color.default_background_color'))",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "getResourceString",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "$r('app.color.default_background_color')",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "$r",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'app.color.default_background_color'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'));",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'))",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "barContentColor: string = await getResourceString($r('app.color.default_bar_content_color'))",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "barContentColor",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await getResourceString($r('app.color.default_bar_content_color'))",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "getResourceString($r('app.color.default_bar_content_color'))",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "getResourceString",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "$r('app.color.default_bar_content_color')",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "$r",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'app.color.default_bar_content_color'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (!barColor) {\n        barColor = '#FFF1F3F5';\n      }",
                          "children": [
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "!barColor",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "barColor",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        barColor = '#FFF1F3F5';\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "barColor = '#FFF1F3F5';",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "barColor = '#FFF1F3F5'",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "barColor",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'#FFF1F3F5'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (!barContentColor) {\n        barContentColor = '#FF000000';\n      }",
                          "children": [
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "!barContentColor",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "barContentColor",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        barContentColor = '#FF000000';\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "barContentColor = '#FF000000';",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "barContentColor = '#FF000000'",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "barContentColor",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'#FF000000'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "systemBarProperties",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "window.SystemBarProperties",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "window.SystemBarProperties",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "window",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SystemBarProperties",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }",
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "navigationBarColor: barColor",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "navigationBarColor",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "barColor",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "navigationBarContentColor: barContentColor",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "navigationBarContentColor",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "barContentColor",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await topWindow.setWindowSystemBarProperties(systemBarProperties);",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await topWindow.setWindowSystemBarProperties(systemBarProperties)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "topWindow.setWindowSystemBarProperties(systemBarProperties)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "topWindow.setWindowSystemBarProperties",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "topWindow",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "setWindowSystemBarProperties",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "systemBarProperties",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'setStatusBarColor done');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'setStatusBarColor done')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'setStatusBarColor done'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'hideStatusBar err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'hideStatusBar err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'hideStatusBar err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'hideStatusBar err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'hideStatusBar err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async setNavigationBarColor(barColor: string, barContentColor: string): Promise<void> {\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "setNavigationBarColor",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "barColor: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "barColor",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "barContentColor: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "barContentColor",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Log.debug(TAG, 'setNavigationBarColor start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'setNavigationBarColor start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'setNavigationBarColor start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setNavigationBarColor start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "topWindow",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "window.Window",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "window",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Window",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.Get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "window.Window",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "window",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Window",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.MAIN_WINDOW",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MAIN_WINDOW",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      } catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };\n      topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );\n      }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      };",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "systemBarProperties: window.SystemBarProperties = {\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "systemBarProperties",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "window.SystemBarProperties",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "window.SystemBarProperties",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "window",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SystemBarProperties",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n        navigationBarColor: barColor,\n        navigationBarContentColor: barContentColor\n      }",
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "navigationBarColor: barColor",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "navigationBarColor",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "barColor",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "navigationBarContentColor: barContentColor",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "navigationBarContentColor",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "barContentColor",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      );",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "topWindow.setWindowSystemBarProperties(\n        systemBarProperties,\n        (): void  => Log.info(TAG, 'setStatusBarColor done')\n      )",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "topWindow.setWindowSystemBarProperties",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "topWindow",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setWindowSystemBarProperties",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "systemBarProperties",
                                  "children": []
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(): void  => Log.info(TAG, 'setStatusBarColor done')",
                                  "children": [
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "Log.info(TAG, 'setStatusBarColor done')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Log.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Log",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setStatusBarColor done'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'setNavigationBarColor err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'setNavigationBarColor err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'setNavigationBarColor err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'setNavigationBarColor err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setNavigationBarColor err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setSystemUi(isShowBar: boolean): void {\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setSystemUi",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "isShowBar: boolean",
              "children": [
                {
                  "type": "Identifier",
                  "label": "isShowBar",
                  "children": []
                },
                {
                  "type": "BooleanKeyword",
                  "label": "boolean",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.debug(TAG, 'setSystemUi start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);\n    Log.debug(TAG, 'getTopWindow start');\n    let names: string[] = ['navigation'];\n    if (!isShowBar) {\n      names = [];\n    }\n    Log.debug(TAG, 'getTopWindow names: ' + names + ' end');\n    try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'setSystemUi start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'setSystemUi start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setSystemUi start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "topWindow: window.Window = AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "topWindow",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "window.Window",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "window",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Window",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.Get<window.Window>(Constants.MAIN_WINDOW)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.Get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "window.Window",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "window",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Window",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.MAIN_WINDOW",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MAIN_WINDOW",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'getTopWindow start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'getTopWindow start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'getTopWindow start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let names: string[] = ['navigation'];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let names: string[] = ['navigation']",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "names: string[] = ['navigation']",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "names",
                              "children": []
                            },
                            {
                              "type": "ArrayType",
                              "label": "string[]",
                              "children": [
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrayLiteralExpression",
                              "label": "['navigation']",
                              "children": [
                                {
                                  "type": "StringLiteral",
                                  "label": "'navigation'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!isShowBar) {\n      names = [];\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!isShowBar",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isShowBar",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      names = [];\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "names = [];",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "names = []",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "names",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "ArrayLiteralExpression",
                                  "label": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.debug(TAG, 'getTopWindow names: ' + names + ' end');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.debug(TAG, 'getTopWindow names: ' + names + ' end')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'getTopWindow names: ' + names + ' end'",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "'getTopWindow names: ' + names",
                              "children": [
                                {
                                  "type": "StringLiteral",
                                  "label": "'getTopWindow names: '",
                                  "children": []
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "names",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "StringLiteral",
                              "label": "' end'",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        } catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n            // @ts-ignore\n            topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })\n        }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "topWindow.setWindowSystemBarEnable(names, async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "topWindow.setWindowSystemBarEnable",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "topWindow",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setWindowSystemBarEnable",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "names",
                                  "children": []
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "async (): Promise<void> => {\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            }",
                                  "children": [
                                    {
                                      "type": "AsyncKeyword",
                                      "label": "async",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Promise<void>",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Promise",
                                          "children": []
                                        },
                                        {
                                          "type": "VoidKeyword",
                                          "label": "void",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n                Log.debug(TAG, 'setFullScreen Succeeded');\n                if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }\n            }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Log.debug(TAG, 'setFullScreen Succeeded');",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Log.debug(TAG, 'setFullScreen Succeeded')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Log.debug",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Log",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "debug",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'setFullScreen Succeeded'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "IfStatement",
                                          "label": "if (isShowBar) {\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isShowBar",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n                    let data = await topWindow.getWindowAvoidArea(0);\n                    this.onLeftBlankChanged(data);\n                }",
                                              "children": [
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "let data = await topWindow.getWindowAvoidArea(0);",
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "let data = await topWindow.getWindowAvoidArea(0)",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "data = await topWindow.getWindowAvoidArea(0)",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "data",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "AwaitExpression",
                                                              "label": "await topWindow.getWindowAvoidArea(0)",
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "topWindow.getWindowAvoidArea(0)",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "topWindow.getWindowAvoidArea",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "topWindow",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "getWindowAvoidArea",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "FirstLiteralToken",
                                                                      "label": "0",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "this.onLeftBlankChanged(data);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.onLeftBlankChanged(data)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.onLeftBlankChanged",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "onLeftBlankChanged",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'setSystemUi err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'setSystemUi err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'setSystemUi err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'setSystemUi err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setSystemUi err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private onLeftBlankChanged(area: window.AvoidArea): void {\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "onLeftBlankChanged",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "area: window.AvoidArea",
              "children": [
                {
                  "type": "Identifier",
                  "label": "area",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "window.AvoidArea",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "window.AvoidArea",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "window",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "AvoidArea",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }\n    let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };\n    this.statusBarHeight = 0;\n    this.naviBarHeight = area.bottomRect.height;\n    this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];\n    if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (area == null || area == undefined || area.bottomRect.height === 0) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "area == null || area == undefined || area.bottomRect.height === 0",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "area == null || area == undefined",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "area == null",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "area",
                                  "children": []
                                },
                                {
                                  "type": "EqualsEqualsToken",
                                  "label": "==",
                                  "children": []
                                },
                                {
                                  "type": "NullKeyword",
                                  "label": "null",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "area == undefined",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "area",
                                  "children": []
                                },
                                {
                                  "type": "EqualsEqualsToken",
                                  "label": "==",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "area.bottomRect.height === 0",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "area.bottomRect.height",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "area.bottomRect",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "area",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "bottomRect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "height",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    };",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "leftBlankBefore: StatusNaviHeight = {\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "leftBlankBefore",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "StatusNaviHeight",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "StatusNaviHeight",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n      status: this.statusBarHeight,\n      navi: this.naviBarHeight\n    }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "status: this.statusBarHeight",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "status",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.statusBarHeight",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "statusBarHeight",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "navi: this.naviBarHeight",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "navi",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.naviBarHeight",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "naviBarHeight",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.statusBarHeight = 0;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.statusBarHeight = 0",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.statusBarHeight",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "statusBarHeight",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.naviBarHeight = area.bottomRect.height;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.naviBarHeight = area.bottomRect.height",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.naviBarHeight",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "naviBarHeight",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "area.bottomRect.height",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "area.bottomRect",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "area",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "bottomRect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height];",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.leftBlank = [this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height]",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.leftBlank",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "leftBlank",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "ArrayLiteralExpression",
                          "label": "[this.leftBlank[0], this.leftBlank[1], this.leftBlank[2], area.bottomRect.height]",
                          "children": [
                            {
                              "type": "ElementAccessExpression",
                              "label": "this.leftBlank[0]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "this.leftBlank[1]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "this.leftBlank[2]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "area.bottomRect.height",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "area.bottomRect",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "area",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "bottomRect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "height",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight) {\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "leftBlankBefore.status !== this.statusBarHeight || leftBlankBefore.navi !== this.naviBarHeight",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "leftBlankBefore.status !== this.statusBarHeight",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "leftBlankBefore.status",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "leftBlankBefore",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "status",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExclamationEqualsEqualsToken",
                              "label": "!==",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.statusBarHeight",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "statusBarHeight",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "leftBlankBefore.navi !== this.naviBarHeight",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "leftBlankBefore.navi",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "leftBlankBefore",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "navi",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExclamationEqualsEqualsToken",
                              "label": "!==",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.naviBarHeight",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "naviBarHeight",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))\n      AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-' + JSON.stringify(this.leftBlank)",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'leftBlank changed: ' + JSON.stringify(leftBlankBefore) + '-'",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'leftBlank changed: ' + JSON.stringify(leftBlankBefore)",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'leftBlank changed: '",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(leftBlankBefore)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "leftBlankBefore",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'-'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "JSON.stringify(this.leftBlank)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "JSON.stringify",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "JSON",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "stringify",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.leftBlank",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "leftBlank",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.SetOrCreate<number[]>(BroadcastConstants.LEFT_BLANK, this.leftBlank)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.SetOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SetOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrayType",
                                  "label": "number[]",
                                  "children": [
                                    {
                                      "type": "NumberKeyword",
                                      "label": "number",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "BroadcastConstants.LEFT_BLANK",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BroadcastConstants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "LEFT_BLANK",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.leftBlank",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "leftBlank",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private onWinSizeChanged(size): void {\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "onWinSizeChanged",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "size",
              "children": [
                {
                  "type": "Identifier",
                  "label": "size",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));\n    if (size == null || size == undefined) {\n      return;\n    }\n    let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };\n    this.winWidth = size.width;\n    this.winHeight = size.height;\n\n\n    if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size));",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'onWinSizeChanged ' + JSON.stringify(size))",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'onWinSizeChanged ' + JSON.stringify(size)",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'onWinSizeChanged '",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "JSON.stringify(size)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "JSON.stringify",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "JSON",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "stringify",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (size == null || size == undefined) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "size == null || size == undefined",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "size == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "size",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "size == undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "size",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    };",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "sizeBefore: Size = {\n      width: this.winWidth,\n      height: this.winHeight\n    }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "sizeBefore",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Size",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Size",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n      width: this.winWidth,\n      height: this.winHeight\n    }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "width: this.winWidth",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "width",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.winWidth",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "winWidth",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "height: this.winHeight",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "height",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.winHeight",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "winHeight",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.winWidth = size.width;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.winWidth = size.width",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.winWidth",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "winWidth",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "size.width",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "size",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.winHeight = size.height;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.winHeight = size.height",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.winHeight",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "winHeight",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "size.height",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "size",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight) {\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "sizeBefore.width !== this.winWidth || sizeBefore.height !== this.winHeight",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "sizeBefore.width !== this.winWidth",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "sizeBefore.width",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "sizeBefore",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "width",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExclamationEqualsEqualsToken",
                              "label": "!==",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.winWidth",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "winWidth",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "sizeBefore.height !== this.winHeight",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "sizeBefore.height",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "sizeBefore",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "height",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExclamationEqualsEqualsToken",
                              "label": "!==",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.winHeight",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "winHeight",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));\n      this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size));",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.info(TAG, 'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> ' + JSON.stringify(size)",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'winSize changed: ' + JSON.stringify(sizeBefore) + ' -> '",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'winSize changed: ' + JSON.stringify(sizeBefore)",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'winSize changed: '",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(sizeBefore)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "sizeBefore",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "' -> '",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "JSON.stringify(size)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "JSON.stringify",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "JSON",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "stringify",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size]);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.emit(screenManager.ON_WIN_SIZE_CHANGED, [size])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.emit",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "emit",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "screenManager.ON_WIN_SIZE_CHANGED",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "screenManager",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "ON_WIN_SIZE_CHANGED",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrayLiteralExpression",
                                  "label": "[size]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "size",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private onRotationAngleChanged(angle): void {\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "onRotationAngleChanged",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "angle",
              "children": [
                {
                  "type": "Identifier",
                  "label": "angle",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (angle == null || angle == undefined) {\n      return;\n    }\n\n    if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }\n    AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (angle == null || angle == undefined) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "angle == null || angle == undefined",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "angle == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "angle",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "angle == undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "angle",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (angle === 0) {\n      this.horizontal = false;\n    } else {\n      this.horizontal = true;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "angle === 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "angle",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.horizontal = false;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.horizontal = false;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.horizontal = false",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.horizontal",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "horizontal",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.horizontal = true;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.horizontal = true;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.horizontal = true",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.horizontal",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "horizontal",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "TrueKeyword",
                                  "label": "true",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "AppStorage.SetOrCreate",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "AppStorage",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "SetOrCreate",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "SCREEN_ORIENTATION_HORIZONTAL",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.horizontal",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "horizontal",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isHorizontal(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isHorizontal",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }\n    return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL) == null",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "AppStorage.Get",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "AppStorage",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "Get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "SCREEN_ORIENTATION_HORIZONTAL",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.SetOrCreate<boolean>(SCREEN_ORIENTATION_HORIZONTAL, this.horizontal)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.SetOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SetOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BooleanKeyword",
                                  "label": "boolean",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "SCREEN_ORIENTATION_HORIZONTAL",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.horizontal",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "horizontal",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "AppStorage.Get<boolean>(SCREEN_ORIENTATION_HORIZONTAL)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "AppStorage.Get",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "AppStorage",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "Get",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "SCREEN_ORIENTATION_HORIZONTAL",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isSidebar(): boolean {\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isSidebar",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }\n    return AppStorage.Get<boolean>(SCREEN_SIDEBAR);\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null) {\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "AppStorage.Get<boolean>(SCREEN_SIDEBAR) == null",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "AppStorage.Get<boolean>(SCREEN_SIDEBAR)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "AppStorage.Get",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "AppStorage",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "Get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "SCREEN_SIDEBAR",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.SetOrCreate<boolean>(SCREEN_SIDEBAR, this.sidebar)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.SetOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SetOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BooleanKeyword",
                                  "label": "boolean",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "SCREEN_SIDEBAR",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.sidebar",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "sidebar",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return AppStorage.Get<boolean>(SCREEN_SIDEBAR);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "AppStorage.Get<boolean>(SCREEN_SIDEBAR)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "AppStorage.Get",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "AppStorage",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "Get",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BooleanKeyword",
                          "label": "boolean",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "SCREEN_SIDEBAR",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getColumnsWidth(count: number): number {\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getColumnsWidth",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "count: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "count",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let columns = this.getScreenColumns();\n    Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);\n    let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;\n    return columnWidth * count - COLUMN_GUTTER;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let columns = this.getScreenColumns();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let columns = this.getScreenColumns()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "columns = this.getScreenColumns()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "columns",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getScreenColumns()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getScreenColumns",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getScreenColumns",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'getColumnsWidth count is ' + count + ' columns: ' + columns)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'getColumnsWidth count is ' + count + ' columns: ' + columns",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "'getColumnsWidth count is ' + count + ' columns: '",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "'getColumnsWidth count is ' + count",
                                  "children": [
                                    {
                                      "type": "StringLiteral",
                                      "label": "'getColumnsWidth count is '",
                                      "children": []
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "count",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "' columns: '",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "columns",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "columnWidth = (px2vp(this.winWidth) - COLUMN_MARGIN) / columns",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "columnWidth",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "(px2vp(this.winWidth) - COLUMN_MARGIN) / columns",
                              "children": [
                                {
                                  "type": "ParenthesizedExpression",
                                  "label": "(px2vp(this.winWidth) - COLUMN_MARGIN)",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "px2vp(this.winWidth) - COLUMN_MARGIN",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "px2vp(this.winWidth)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "px2vp",
                                              "children": []
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.winWidth",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "winWidth",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "MinusToken",
                                          "label": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "COLUMN_MARGIN",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "SlashToken",
                                  "label": "/",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "columns",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return columnWidth * count - COLUMN_GUTTER;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "columnWidth * count - COLUMN_GUTTER",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "columnWidth * count",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "columnWidth",
                              "children": []
                            },
                            {
                              "type": "AsteriskToken",
                              "label": "*",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "count",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "MinusToken",
                          "label": "-",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "COLUMN_GUTTER",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getScreenColumns(): number {\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getScreenColumns",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let width = px2vp(this.winWidth);\n    if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let width = px2vp(this.winWidth);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let width = px2vp(this.winWidth)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "width = px2vp(this.winWidth)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "px2vp(this.winWidth)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "px2vp",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.winWidth",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "winWidth",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (width < ScreenWidth.WIDTH_MEDIUM) {\n      return ColumnSize.COLUMN_FOUR;\n    } else if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "width < ScreenWidth.WIDTH_MEDIUM",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "width",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "ScreenWidth.WIDTH_MEDIUM",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "ScreenWidth",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "WIDTH_MEDIUM",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return ColumnSize.COLUMN_FOUR;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return ColumnSize.COLUMN_FOUR;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "ColumnSize.COLUMN_FOUR",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "ColumnSize",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "COLUMN_FOUR",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "label": "if (width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE) {\n      return ColumnSize.COLUMN_EIGHT;\n    } else {\n      return ColumnSize.COLUMN_TWELVE;\n    }",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "width >= ScreenWidth.WIDTH_MEDIUM && width < ScreenWidth.WIDTH_LARGE",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "width >= ScreenWidth.WIDTH_MEDIUM",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "width",
                                  "children": []
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "ScreenWidth.WIDTH_MEDIUM",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "ScreenWidth",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "WIDTH_MEDIUM",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "AmpersandAmpersandToken",
                              "label": "&&",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "width < ScreenWidth.WIDTH_LARGE",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "width",
                                  "children": []
                                },
                                {
                                  "type": "FirstBinaryOperator",
                                  "label": "<",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "ScreenWidth.WIDTH_LARGE",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "ScreenWidth",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "WIDTH_LARGE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      return ColumnSize.COLUMN_EIGHT;\n    }",
                          "children": [
                            {
                              "type": "ReturnStatement",
                              "label": "return ColumnSize.COLUMN_EIGHT;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "ColumnSize.COLUMN_EIGHT",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "ColumnSize",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "COLUMN_EIGHT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      return ColumnSize.COLUMN_TWELVE;\n    }",
                          "children": [
                            {
                              "type": "ReturnStatement",
                              "label": "return ColumnSize.COLUMN_TWELVE;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "ColumnSize.COLUMN_TWELVE",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "ColumnSize",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "COLUMN_TWELVE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setKeepScreenOn(): void {\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setKeepScreenOn",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'setKeepScreenOn start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'setKeepScreenOn start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'setKeepScreenOn start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setKeepScreenOn start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "topWindow",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "window.Window",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "window",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Window",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.Get<window.Window>('mainWindow')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.Get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "window.Window",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "window",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Window",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'mainWindow'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n          topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))\n      }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "topWindow.setWindowKeepScreenOn(true, (): void => Log.info(TAG, 'setKeepScreenOn Succeeded'))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "topWindow.setWindowKeepScreenOn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "topWindow",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setWindowKeepScreenOn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TrueKeyword",
                                  "label": "true",
                                  "children": []
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(): void => Log.info(TAG, 'setKeepScreenOn Succeeded')",
                                  "children": [
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "Log.info(TAG, 'setKeepScreenOn Succeeded')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Log.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Log",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setKeepScreenOn Succeeded'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'setKeepScreenOn err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'setKeepScreenOn err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'setKeepScreenOn err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'setKeepScreenOn err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setKeepScreenOn err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setKeepScreenOff(): void {\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setKeepScreenOff",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Log.info(TAG, 'setKeepScreenOff start');\n    let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');\n    try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'setKeepScreenOff start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'setKeepScreenOff start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setKeepScreenOff start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "topWindow: window.Window = AppStorage.Get<window.Window>('mainWindow')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "topWindow",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "window.Window",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "window",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Window",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.Get<window.Window>('mainWindow')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.Get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "window.Window",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "window.Window",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "window",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Window",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'mainWindow'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      } catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n          topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))\n      }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "topWindow.setWindowKeepScreenOn(false, (): void => Log.info(TAG, 'setKeepScreenOff Succeeded'))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "topWindow.setWindowKeepScreenOn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "topWindow",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setWindowKeepScreenOn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(): void => Log.info(TAG, 'setKeepScreenOff Succeeded')",
                                  "children": [
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "Log.info(TAG, 'setKeepScreenOff Succeeded')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Log.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Log",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setKeepScreenOff Succeeded'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Log.error(TAG, 'setKeepScreenOff err: ' + err);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Log.error(TAG, 'setKeepScreenOff err: ' + err);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Log.error(TAG, 'setKeepScreenOff err: ' + err)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Log.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Log",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'setKeepScreenOff err: ' + err",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'setKeepScreenOff err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "export let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG);",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "VariableDeclarationList",
          "label": "let screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG)",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "screenManager: ScreenManager = stashOrGetObject<ScreenManager>(new ScreenManager(), TAG)",
              "children": [
                {
                  "type": "Identifier",
                  "label": "screenManager",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "ScreenManager",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ScreenManager",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "CallExpression",
                  "label": "stashOrGetObject<ScreenManager>(new ScreenManager(), TAG)",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "stashOrGetObject",
                      "children": []
                    },
                    {
                      "type": "TypeReference",
                      "label": "ScreenManager",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "ScreenManager",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "NewExpression",
                      "label": "new ScreenManager()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "ScreenManager",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "label": "TAG",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}