{
  "type": "SourceFile",
  "label": "import camera from '@ohos.multimedia.camera';\nimport image from '@ohos.multimedia.image';\nimport media from '@ohos.multimedia.media';\nimport { BusinessError } from '@ohos.base';\nimport Logger from '../model/Logger';\nimport { Constants } from '../common/Constants';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\nimport fs from '@ohos.file.fs';\nimport { GlobalContext } from '../common/GlobalContext';\nimport type { CameraConfig } from '../common/CameraConfig';\nimport colorSpaceManager from '@ohos.graphics.colorSpaceManager';\n\nconst cameraSize = {\n  width: 1280,\n  height: 720\n};\n\nenum PhotoOrientation {\n  ORIENTATION_0 = 0,\n  ORIENTATION_1,\n  ORIENTATION_2,\n  ORIENTATION_3\n}\n\nenum CaptureMode {\n  OLD_CAPTURE = 0,\n  NEW_CAPTURE,\n  NEW_DEFERRED_PHOTO\n}\n\nenum CameraMode {\n  NORMAL = 0,\n  VIDEO,\n  PORTRAIT,\n  SUPER_STAB,\n  NIGHT,\n  MACRO_PHOTO = 8,\n  MACRO_VIDEO = 9\n}\n\nfunction mockInterface(): void {\n  if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }\n  if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }\n}\n\nconst TAG: string = 'CameraService';\nconst TAG_AB: string = '-----AB-----';\n\nclass CameraService {\n  private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;\n  private cameraManager: camera.CameraManager | undefined = undefined;\n  private cameras: Array<camera.CameraDevice> | undefined = undefined;\n  private sceneModes: Array<camera.SceneMode> | undefined = undefined;\n  private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;\n  private cameraInput: camera.CameraInput | undefined = undefined;\n  private previewOutput: camera.PreviewOutput | undefined = undefined;\n  private photoOutPut: camera.PhotoOutput | undefined = undefined;\n  private photoSession: camera.PhotoSession | undefined = undefined;\n  private videoSession: camera.VideoSession | undefined = undefined;\n  private portraitSession: camera.PortraitPhotoSession | undefined = undefined;\n  private nightSession: camera.NightPhotoSession | undefined = undefined;\n  private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;\n  private mReceiver: image.ImageReceiver | undefined = undefined;\n  private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;\n  private fd: number = -1;\n  private videoRecorder: media.AVRecorder | undefined = undefined;\n  private videoOutput: camera.VideoOutput | undefined = undefined;\n  private handleTakePicture: (photoUri: string) => void | undefined = undefined;\n  private videoConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  };\n  private videoProfiles: Array<camera.VideoProfile>;\n  private videoProfileObj: camera.VideoProfile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  };\n  private defaultProfile: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private previewProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoRotationMap = {\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  };\n  private videoOutputStatus: boolean = false;\n  private colorEffect: camera.ColorEffectType | undefined = undefined;\n  private cameraMode: number = 0;\n  private accessHelper: photoAccessHelper.PhotoAccessHelper;\n  private globalContext: GlobalContext = GlobalContext.get();\n  private isFirstRecord = true;\n  private isMoonCaptureBoostSupported: Boolean = false;\n\n  constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 读取图像\n   */\n  async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 判断两浮点数是否相等\n   */\n  withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }\n\n  switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }\n\n  setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }\n\n  initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }\n\n  /**\n   * 初始化\n   */\n  async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }\n\n  /**\n   * 曝光\n   */\n  isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }\n\n  setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }\n\n  /**\n   * 曝光区域\n   */\n  isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }\n\n  /**\n   * 曝光补偿\n   */\n  isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }\n\n  /**\n   * 是否支持对应对焦模式\n   */\n  isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }\n\n  /**\n   * 对焦模式\n   */\n  isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }\n\n  /**\n   * 焦点\n   */\n  isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }\n\n  /**\n   * 闪关灯\n   */\n  hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }\n\n  getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }\n\n  /**\n   * 变焦\n   */\n  setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 防抖\n   */\n  isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }\n\n  setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }\n\n  /**\n   * 是否支持夜景模式\n   */\n  isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }\n\n  /**\n   * 是否支持人像模式\n   */\n  isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }\n\n  /**\n   * 是否支持微距模式\n   */\n  isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }\n\n  /**\n   * 是否支持镜像\n   */\n  isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }\n\n  setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }\n\n  /**\n   * 照片方向判断\n   */\n  onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }\n\n  /**\n   * 照片地理位置逻辑 ，后续需要靠定位实现 目前传入固定值\n   */\n  onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }\n\n  /**\n   * 拍照\n   */\n  async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }\n\n  async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }\n\n  async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }\n\n  async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }\n\n  /**\n   * 配置videoOutput流\n   */\n  async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }\n\n  /**\n   * 暂停录制\n   */\n  async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }\n\n  /**\n   * 恢复视频录制\n   */\n  async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }\n\n  /**\n   * 初始化录制适配地址\n   */\n  async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }\n\n  /**\n   * 开始录制\n   */\n  async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  /**\n   * 停止录制\n   */\n  async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }\n\n  /**\n   * 释放会话及其相关参数\n   */\n  async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }\n\n  /**\n   * 获取相机管理器实例\n   */\n  getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 获取支持指定的相机设备对象\n   */\n  getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 查询相机设备在模式下支持的输出能力\n   */\n  async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }\n\n  /**\n   * 创建previewOutput输出对象\n   */\n  createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 创建photoOutPut输出对象\n   */\n  createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }\n\n  /**\n   * 创建cameraInput输出对象\n   */\n  createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }\n\n  /**\n   * 打开相机\n   */\n  async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 处理望月信息\n   */\n  configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }\n\n  /**\n   * 拍照会话流程\n   */\n  async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 会话流程\n   */\n  async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n \n  async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }\n\n  getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }\n\n  setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }\n\n  setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }\n\n  getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }\n\n  getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }\n\n  /**\n   * 监听拍照事件\n   */\n  photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }\n\n  /**\n   * 调用媒体库方式落盘缩略图\n   */\n  async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 监听预览事件\n   */\n  previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }\n\n  /**\n   * 监听录像事件\n   */\n  onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }\n\n  /**\n   * 镜头状态回调\n   */\n  onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }\n\n  /**\n   * 监听CameraInput的错误事件\n   */\n  onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }\n\n  /**\n   * 监听焦距的状态变化\n   */\n  onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }\n\n  onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }\n  /**\n   * 监听拍照会话的错误事件\n   */\n  onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }\n\n  setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }\n\n  getCaptureMode(): number {\n    return this.captureMode;\n  }\n\n  /**\n   * 查询是否支持二阶段\n   */\n  isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }\n\n  /**\n   * 查询是否已使能二阶段\n   */\n  isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }\n\n  /**\n   * 使能二阶段\n   */\n  deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }\n\n  testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }\n  \n  logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }\n  \n  logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n  \n  logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n\n  logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }\n}\n\nexport default new CameraService();",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import camera from '@ohos.multimedia.camera';",
      "children": [
        {
          "type": "ImportClause",
          "label": "camera",
          "children": [
            {
              "type": "Identifier",
              "label": "camera",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.multimedia.camera'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import image from '@ohos.multimedia.image';",
      "children": [
        {
          "type": "ImportClause",
          "label": "image",
          "children": [
            {
              "type": "Identifier",
              "label": "image",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.multimedia.image'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import media from '@ohos.multimedia.media';",
      "children": [
        {
          "type": "ImportClause",
          "label": "media",
          "children": [
            {
              "type": "Identifier",
              "label": "media",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.multimedia.media'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { BusinessError } from '@ohos.base';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ BusinessError }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ BusinessError }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "BusinessError",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "BusinessError",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.base'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import Logger from '../model/Logger';",
      "children": [
        {
          "type": "ImportClause",
          "label": "Logger",
          "children": [
            {
              "type": "Identifier",
              "label": "Logger",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../model/Logger'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { Constants } from '../common/Constants';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Constants }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Constants }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Constants",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Constants",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/Constants'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import photoAccessHelper from '@ohos.file.photoAccessHelper';",
      "children": [
        {
          "type": "ImportClause",
          "label": "photoAccessHelper",
          "children": [
            {
              "type": "Identifier",
              "label": "photoAccessHelper",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.file.photoAccessHelper'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import fs from '@ohos.file.fs';",
      "children": [
        {
          "type": "ImportClause",
          "label": "fs",
          "children": [
            {
              "type": "Identifier",
              "label": "fs",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.file.fs'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import { GlobalContext } from '../common/GlobalContext';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ GlobalContext }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ GlobalContext }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "GlobalContext",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "GlobalContext",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/GlobalContext'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import type { CameraConfig } from '../common/CameraConfig';",
      "children": [
        {
          "type": "ImportClause",
          "label": "type { CameraConfig }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ CameraConfig }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "CameraConfig",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "CameraConfig",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'../common/CameraConfig'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import colorSpaceManager from '@ohos.graphics.colorSpaceManager';",
      "children": [
        {
          "type": "ImportClause",
          "label": "colorSpaceManager",
          "children": [
            {
              "type": "Identifier",
              "label": "colorSpaceManager",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.graphics.colorSpaceManager'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const cameraSize = {\n  width: 1280,\n  height: 720\n};",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const cameraSize = {\n  width: 1280,\n  height: 720\n}",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "cameraSize = {\n  width: 1280,\n  height: 720\n}",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraSize",
                  "children": []
                },
                {
                  "type": "ObjectLiteralExpression",
                  "label": "{\n  width: 1280,\n  height: 720\n}",
                  "children": [
                    {
                      "type": "PropertyAssignment",
                      "label": "width: 1280",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "width",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "1280",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "PropertyAssignment",
                      "label": "height: 720",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "height",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "720",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EnumDeclaration",
      "label": "enum PhotoOrientation {\n  ORIENTATION_0 = 0,\n  ORIENTATION_1,\n  ORIENTATION_2,\n  ORIENTATION_3\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "PhotoOrientation",
          "children": []
        },
        {
          "type": "EnumMember",
          "label": "ORIENTATION_0 = 0",
          "children": [
            {
              "type": "Identifier",
              "label": "ORIENTATION_0",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "ORIENTATION_1",
          "children": [
            {
              "type": "Identifier",
              "label": "ORIENTATION_1",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "ORIENTATION_2",
          "children": [
            {
              "type": "Identifier",
              "label": "ORIENTATION_2",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "ORIENTATION_3",
          "children": [
            {
              "type": "Identifier",
              "label": "ORIENTATION_3",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EnumDeclaration",
      "label": "enum CaptureMode {\n  OLD_CAPTURE = 0,\n  NEW_CAPTURE,\n  NEW_DEFERRED_PHOTO\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "CaptureMode",
          "children": []
        },
        {
          "type": "EnumMember",
          "label": "OLD_CAPTURE = 0",
          "children": [
            {
              "type": "Identifier",
              "label": "OLD_CAPTURE",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "NEW_CAPTURE",
          "children": [
            {
              "type": "Identifier",
              "label": "NEW_CAPTURE",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "NEW_DEFERRED_PHOTO",
          "children": [
            {
              "type": "Identifier",
              "label": "NEW_DEFERRED_PHOTO",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EnumDeclaration",
      "label": "enum CameraMode {\n  NORMAL = 0,\n  VIDEO,\n  PORTRAIT,\n  SUPER_STAB,\n  NIGHT,\n  MACRO_PHOTO = 8,\n  MACRO_VIDEO = 9\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "CameraMode",
          "children": []
        },
        {
          "type": "EnumMember",
          "label": "NORMAL = 0",
          "children": [
            {
              "type": "Identifier",
              "label": "NORMAL",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "VIDEO",
          "children": [
            {
              "type": "Identifier",
              "label": "VIDEO",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "PORTRAIT",
          "children": [
            {
              "type": "Identifier",
              "label": "PORTRAIT",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "SUPER_STAB",
          "children": [
            {
              "type": "Identifier",
              "label": "SUPER_STAB",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "NIGHT",
          "children": [
            {
              "type": "Identifier",
              "label": "NIGHT",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "MACRO_PHOTO = 8",
          "children": [
            {
              "type": "Identifier",
              "label": "MACRO_PHOTO",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "8",
              "children": []
            }
          ]
        },
        {
          "type": "EnumMember",
          "label": "MACRO_VIDEO = 9",
          "children": [
            {
              "type": "Identifier",
              "label": "MACRO_VIDEO",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "9",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "label": "function mockInterface(): void {\n  if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }\n  if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "mockInterface",
          "children": []
        },
        {
          "type": "VoidKeyword",
          "label": "void",
          "children": []
        },
        {
          "type": "Block",
          "label": "{\n  if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }\n  if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }\n}",
          "children": [
            {
              "type": "IfStatement",
              "label": "if (!camera.SceneFeatureType) {\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }",
              "children": [
                {
                  "type": "PrefixUnaryExpression",
                  "label": "!camera.SceneFeatureType",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "camera.SceneFeatureType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "SceneFeatureType",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };\n  }",
                  "children": [
                    {
                      "type": "ExpressionStatement",
                      "label": "camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 };",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "camera.SceneFeatureType = { MOON_CAPTURE_BOOST: 0 }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "camera.SceneFeatureType",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "camera",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "SceneFeatureType",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "FirstAssignment",
                              "label": "=",
                              "children": []
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{ MOON_CAPTURE_BOOST: 0 }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "MOON_CAPTURE_BOOST: 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "MOON_CAPTURE_BOOST",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "IfStatement",
              "label": "if (!camera.SceneMode) {\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }",
              "children": [
                {
                  "type": "PrefixUnaryExpression",
                  "label": "!camera.SceneMode",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "camera.SceneMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "SceneMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Block",
                  "label": "{\n    camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };\n  }",
                  "children": [
                    {
                      "type": "ExpressionStatement",
                      "label": "camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    };",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "camera.SceneMode = {\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "camera.SceneMode",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "camera",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "SceneMode",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "FirstAssignment",
                              "label": "=",
                              "children": []
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n      NORMAL_PHOTO: 1,\n      NORMAL_VIDEO: 2,\n      PORTRAIT_PHOTO: 3,\n      NIGHT_PHOTO: 4\n    }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "NORMAL_PHOTO: 1",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "NORMAL_PHOTO",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "NORMAL_VIDEO: 2",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "NORMAL_VIDEO",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "PORTRAIT_PHOTO: 3",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "PORTRAIT_PHOTO",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "3",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "NIGHT_PHOTO: 4",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "NIGHT_PHOTO",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "4",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG: string = 'CameraService';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG: string = 'CameraService'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG: string = 'CameraService'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'CameraService'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG_AB: string = '-----AB-----';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG_AB: string = '-----AB-----'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG_AB: string = '-----AB-----'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG_AB",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'-----AB-----'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "class CameraService {\n  private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;\n  private cameraManager: camera.CameraManager | undefined = undefined;\n  private cameras: Array<camera.CameraDevice> | undefined = undefined;\n  private sceneModes: Array<camera.SceneMode> | undefined = undefined;\n  private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;\n  private cameraInput: camera.CameraInput | undefined = undefined;\n  private previewOutput: camera.PreviewOutput | undefined = undefined;\n  private photoOutPut: camera.PhotoOutput | undefined = undefined;\n  private photoSession: camera.PhotoSession | undefined = undefined;\n  private videoSession: camera.VideoSession | undefined = undefined;\n  private portraitSession: camera.PortraitPhotoSession | undefined = undefined;\n  private nightSession: camera.NightPhotoSession | undefined = undefined;\n  private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;\n  private mReceiver: image.ImageReceiver | undefined = undefined;\n  private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;\n  private fd: number = -1;\n  private videoRecorder: media.AVRecorder | undefined = undefined;\n  private videoOutput: camera.VideoOutput | undefined = undefined;\n  private handleTakePicture: (photoUri: string) => void | undefined = undefined;\n  private videoConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  };\n  private videoProfiles: Array<camera.VideoProfile>;\n  private videoProfileObj: camera.VideoProfile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  };\n  private defaultProfile: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private previewProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };\n  private photoRotationMap = {\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  };\n  private videoOutputStatus: boolean = false;\n  private colorEffect: camera.ColorEffectType | undefined = undefined;\n  private cameraMode: number = 0;\n  private accessHelper: photoAccessHelper.PhotoAccessHelper;\n  private globalContext: GlobalContext = GlobalContext.get();\n  private isFirstRecord = true;\n  private isMoonCaptureBoostSupported: Boolean = false;\n\n  constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 读取图像\n   */\n  async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 判断两浮点数是否相等\n   */\n  withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }\n\n  switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }\n\n  setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }\n\n  initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }\n\n  /**\n   * 初始化\n   */\n  async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }\n\n  /**\n   * 曝光\n   */\n  isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }\n\n  setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }\n\n  /**\n   * 曝光区域\n   */\n  isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }\n\n  /**\n   * 曝光补偿\n   */\n  isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }\n\n  /**\n   * 是否支持对应对焦模式\n   */\n  isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }\n\n  /**\n   * 对焦模式\n   */\n  isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }\n\n  /**\n   * 焦点\n   */\n  isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }\n\n  /**\n   * 闪关灯\n   */\n  hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }\n\n  getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }\n\n  /**\n   * 变焦\n   */\n  setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 防抖\n   */\n  isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }\n\n  setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }\n\n  /**\n   * 是否支持夜景模式\n   */\n  isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }\n\n  /**\n   * 是否支持人像模式\n   */\n  isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }\n\n  /**\n   * 是否支持微距模式\n   */\n  isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }\n\n  /**\n   * 是否支持镜像\n   */\n  isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }\n\n  setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }\n\n  /**\n   * 照片方向判断\n   */\n  onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }\n\n  /**\n   * 照片地理位置逻辑 ，后续需要靠定位实现 目前传入固定值\n   */\n  onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }\n\n  /**\n   * 拍照\n   */\n  async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }\n\n  async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }\n\n  async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }\n\n  async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }\n\n  /**\n   * 配置videoOutput流\n   */\n  async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }\n\n  /**\n   * 暂停录制\n   */\n  async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }\n\n  /**\n   * 恢复视频录制\n   */\n  async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }\n\n  /**\n   * 初始化录制适配地址\n   */\n  async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }\n\n  /**\n   * 开始录制\n   */\n  async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }\n\n  async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }\n\n  /**\n   * 停止录制\n   */\n  async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }\n\n  /**\n   * 释放会话及其相关参数\n   */\n  async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }\n\n  /**\n   * 获取相机管理器实例\n   */\n  getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 获取支持指定的相机设备对象\n   */\n  getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 查询相机设备在模式下支持的输出能力\n   */\n  async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }\n\n  /**\n   * 创建previewOutput输出对象\n   */\n  createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 创建photoOutPut输出对象\n   */\n  createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }\n\n  /**\n   * 创建cameraInput输出对象\n   */\n  createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }\n\n  /**\n   * 打开相机\n   */\n  async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 处理望月信息\n   */\n  configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }\n\n  /**\n   * 拍照会话流程\n   */\n  async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 会话流程\n   */\n  async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n \n  async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }\n\n  setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }\n\n  getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }\n\n  setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }\n\n  setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }\n\n  getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }\n\n  getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }\n\n  /**\n   * 监听拍照事件\n   */\n  photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }\n\n  /**\n   * 调用媒体库方式落盘缩略图\n   */\n  async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }\n\n  /**\n   * 监听预览事件\n   */\n  previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }\n\n  /**\n   * 监听录像事件\n   */\n  onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }\n\n  /**\n   * 镜头状态回调\n   */\n  onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }\n\n  /**\n   * 监听CameraInput的错误事件\n   */\n  onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }\n\n  /**\n   * 监听焦距的状态变化\n   */\n  onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }\n\n  onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }\n  /**\n   * 监听拍照会话的错误事件\n   */\n  onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }\n\n  setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }\n\n  getCaptureMode(): number {\n    return this.captureMode;\n  }\n\n  /**\n   * 查询是否支持二阶段\n   */\n  isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }\n\n  /**\n   * 查询是否已使能二阶段\n   */\n  isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }\n\n  /**\n   * 使能二阶段\n   */\n  deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }\n\n  testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }\n  \n  logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }\n  \n  logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }\n  \n  logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n  \n  logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }\n\n  logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }\n  \n  logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }\n}",
      "children": [
        {
          "type": "Identifier",
          "label": "CameraService",
          "children": []
        },
        {
          "type": "PropertyDeclaration",
          "label": "private captureMode: CaptureMode = CaptureMode.OLD_CAPTURE;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "captureMode",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "CaptureMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "CaptureMode",
                  "children": []
                }
              ]
            },
            {
              "type": "PropertyAccessExpression",
              "label": "CaptureMode.OLD_CAPTURE",
              "children": [
                {
                  "type": "Identifier",
                  "label": "CaptureMode",
                  "children": []
                },
                {
                  "type": "Identifier",
                  "label": "OLD_CAPTURE",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private cameraManager: camera.CameraManager | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cameraManager",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.CameraManager | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.CameraManager",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CameraManager",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CameraManager",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private cameras: Array<camera.CameraDevice> | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cameras",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "Array<camera.CameraDevice> | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "Array<camera.CameraDevice>",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Array",
                      "children": []
                    },
                    {
                      "type": "TypeReference",
                      "label": "camera.CameraDevice",
                      "children": [
                        {
                          "type": "FirstNode",
                          "label": "camera.CameraDevice",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "camera",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "CameraDevice",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private sceneModes: Array<camera.SceneMode> | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "sceneModes",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "Array<camera.SceneMode> | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "Array<camera.SceneMode>",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Array",
                      "children": []
                    },
                    {
                      "type": "TypeReference",
                      "label": "camera.SceneMode",
                      "children": [
                        {
                          "type": "FirstNode",
                          "label": "camera.SceneMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "camera",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "SceneMode",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private cameraOutputCapability: camera.CameraOutputCapability | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cameraOutputCapability",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.CameraOutputCapability | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.CameraOutputCapability",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CameraOutputCapability",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CameraOutputCapability",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private cameraInput: camera.CameraInput | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cameraInput",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.CameraInput | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.CameraInput",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CameraInput",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CameraInput",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private previewOutput: camera.PreviewOutput | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "previewOutput",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.PreviewOutput | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.PreviewOutput",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PreviewOutput",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PreviewOutput",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private photoOutPut: camera.PhotoOutput | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "photoOutPut",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.PhotoOutput | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.PhotoOutput",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PhotoOutput",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PhotoOutput",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private photoSession: camera.PhotoSession | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "photoSession",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.PhotoSession | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.PhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoSession: camera.VideoSession | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoSession",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.VideoSession | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.VideoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private portraitSession: camera.PortraitPhotoSession | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "portraitSession",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.PortraitPhotoSession | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.PortraitPhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PortraitPhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PortraitPhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private nightSession: camera.NightPhotoSession | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "nightSession",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.NightPhotoSession | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.NightPhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.NightPhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "NightPhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private macroPhotoSession: camera.MacroPhotoSession | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "macroPhotoSession",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.MacroPhotoSession | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.MacroPhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.MacroPhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "MacroPhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private mReceiver: image.ImageReceiver | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "mReceiver",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "image.ImageReceiver | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "image.ImageReceiver",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "image.ImageReceiver",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "image",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ImageReceiver",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private fileAsset: photoAccessHelper.PhotoAsset | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "fileAsset",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "photoAccessHelper.PhotoAsset | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "photoAccessHelper.PhotoAsset",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "photoAccessHelper.PhotoAsset",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "photoAccessHelper",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PhotoAsset",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private fd: number = -1;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "fd",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "PrefixUnaryExpression",
              "label": "-1",
              "children": [
                {
                  "type": "FirstLiteralToken",
                  "label": "1",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoRecorder: media.AVRecorder | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoRecorder",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "media.AVRecorder | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "media.AVRecorder",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "media.AVRecorder",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "media",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "AVRecorder",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoOutput: camera.VideoOutput | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoOutput",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.VideoOutput | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.VideoOutput",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoOutput",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoOutput",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private handleTakePicture: (photoUri: string) => void | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "handleTakePicture",
              "children": []
            },
            {
              "type": "FunctionType",
              "label": "(photoUri: string) => void | undefined",
              "children": [
                {
                  "type": "Parameter",
                  "label": "photoUri: string",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "photoUri",
                      "children": []
                    },
                    {
                      "type": "StringKeyword",
                      "label": "string",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "UnionType",
                  "label": "void | undefined",
                  "children": [
                    {
                      "type": "VoidKeyword",
                      "label": "void",
                      "children": []
                    },
                    {
                      "type": "UndefinedKeyword",
                      "label": "undefined",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  };",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoConfig",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "media.AVRecorderConfig",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "media.AVRecorderConfig",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "media",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "AVRecorderConfig",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    },\n    url: '',\n    rotation: 0\n  }",
              "children": [
                {
                  "type": "PropertyAssignment",
                  "label": "audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "audioSourceType",
                      "children": []
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "media.AudioSourceType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "media",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "AudioSourceType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "AUDIO_SOURCE_TYPE_MIC",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "videoSourceType",
                      "children": []
                    },
                    {
                      "type": "PropertyAccessExpression",
                      "label": "media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "media.VideoSourceType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "media",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "VideoSourceType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "VIDEO_SOURCE_TYPE_SURFACE_YUV",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "profile: {\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "profile",
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      audioBitrate: 48000,\n      audioChannels: 2,\n      audioCodec: media.CodecMimeType.AUDIO_AAC,\n      audioSampleRate: 48000,\n      fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n      videoBitrate: 512000,\n      videoCodec: media.CodecMimeType.VIDEO_AVC,\n      videoFrameWidth: 640,\n      videoFrameHeight: 480,\n      videoFrameRate: Constants.VIDEO_FRAME_30\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "audioBitrate: 48000",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "audioBitrate",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "48000",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "audioChannels: 2",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "audioChannels",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "audioCodec: media.CodecMimeType.AUDIO_AAC",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "audioCodec",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "media.CodecMimeType.AUDIO_AAC",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.CodecMimeType",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "media",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CodecMimeType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "AUDIO_AAC",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "audioSampleRate: 48000",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "audioSampleRate",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "48000",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "fileFormat: media.ContainerFormatType.CFT_MPEG_4",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fileFormat",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "media.ContainerFormatType.CFT_MPEG_4",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.ContainerFormatType",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "media",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "ContainerFormatType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "CFT_MPEG_4",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "videoBitrate: 512000",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoBitrate",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "512000",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "videoCodec: media.CodecMimeType.VIDEO_AVC",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoCodec",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "media.CodecMimeType.VIDEO_AVC",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.CodecMimeType",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "media",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CodecMimeType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO_AVC",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "videoFrameWidth: 640",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoFrameWidth",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "640",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "videoFrameHeight: 480",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoFrameHeight",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "480",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "videoFrameRate: Constants.VIDEO_FRAME_30",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoFrameRate",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Constants.VIDEO_FRAME_30",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Constants",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO_FRAME_30",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "url: ''",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "url",
                      "children": []
                    },
                    {
                      "type": "StringLiteral",
                      "label": "''",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "rotation: 0",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "rotation",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "0",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoProfiles: Array<camera.VideoProfile>;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoProfiles",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Array<camera.VideoProfile>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Array",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.VideoProfile",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoProfile",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoProfile",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoProfileObj: camera.VideoProfile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  };",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoProfileObj",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "camera.VideoProfile",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "camera.VideoProfile",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "camera",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "VideoProfile",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    },\n    frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }\n  }",
              "children": [
                {
                  "type": "PropertyAssignment",
                  "label": "format: 1003",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "format",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "1003",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "size: {\n      width: 1920,\n      height: 1080\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "size",
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      width: 1920,\n      height: 1080\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "width: 1920",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1920",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "height: 1080",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1080",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "frameRateRange: {\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "frameRateRange",
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      min: Constants.VIDEO_FRAME_30,\n      max: Constants.VIDEO_FRAME_30\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "min: Constants.VIDEO_FRAME_30",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "min",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Constants.VIDEO_FRAME_30",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Constants",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO_FRAME_30",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "max: Constants.VIDEO_FRAME_30",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "max",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Constants.VIDEO_FRAME_30",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Constants",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO_FRAME_30",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private defaultProfile: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "defaultProfile",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "camera.Profile",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "camera.Profile",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "camera",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "Profile",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  }",
              "children": [
                {
                  "type": "PropertyAssignment",
                  "label": "format: 1003",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "format",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "1003",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "size: {\n      width: 1920,\n      height: 1080\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "size",
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      width: 1920,\n      height: 1080\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "width: 1920",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1920",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "height: 1080",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1080",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private photoProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "photoProfileObj",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "camera.Profile",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "camera.Profile",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "camera",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "Profile",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  }",
              "children": [
                {
                  "type": "PropertyAssignment",
                  "label": "format: 1003",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "format",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "1003",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "size: {\n      width: 1920,\n      height: 1080\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "size",
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      width: 1920,\n      height: 1080\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "width: 1920",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1920",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "height: 1080",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1080",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private previewProfileObj: camera.Profile = {\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  };",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "previewProfileObj",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "camera.Profile",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "camera.Profile",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "camera",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "Profile",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{\n    format: 1003,\n    size: {\n      width: 1920,\n      height: 1080\n    }\n  }",
              "children": [
                {
                  "type": "PropertyAssignment",
                  "label": "format: 1003",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "format",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "1003",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "size: {\n      width: 1920,\n      height: 1080\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "size",
                      "children": []
                    },
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      width: 1920,\n      height: 1080\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "width: 1920",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1920",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "height: 1080",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1080",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private photoRotationMap = {\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  };",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "photoRotationMap",
              "children": []
            },
            {
              "type": "ObjectLiteralExpression",
              "label": "{\n    rotation0: 0,\n    rotation90: 90,\n    rotation180: 180,\n    rotation270: 270,\n  }",
              "children": [
                {
                  "type": "PropertyAssignment",
                  "label": "rotation0: 0",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "rotation0",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "rotation90: 90",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "rotation90",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "90",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "rotation180: 180",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "rotation180",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "180",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertyAssignment",
                  "label": "rotation270: 270",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "rotation270",
                      "children": []
                    },
                    {
                      "type": "FirstLiteralToken",
                      "label": "270",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private videoOutputStatus: boolean = false;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoOutputStatus",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "FalseKeyword",
              "label": "false",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private colorEffect: camera.ColorEffectType | undefined = undefined;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "colorEffect",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.ColorEffectType | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.ColorEffectType",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.ColorEffectType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ColorEffectType",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Identifier",
              "label": "undefined",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private cameraMode: number = 0;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cameraMode",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "0",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private accessHelper: photoAccessHelper.PhotoAccessHelper;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "accessHelper",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "photoAccessHelper.PhotoAccessHelper",
              "children": [
                {
                  "type": "FirstNode",
                  "label": "photoAccessHelper.PhotoAccessHelper",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "photoAccessHelper",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "PhotoAccessHelper",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private globalContext: GlobalContext = GlobalContext.get();",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "globalContext",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "GlobalContext",
              "children": [
                {
                  "type": "Identifier",
                  "label": "GlobalContext",
                  "children": []
                }
              ]
            },
            {
              "type": "CallExpression",
              "label": "GlobalContext.get()",
              "children": [
                {
                  "type": "PropertyAccessExpression",
                  "label": "GlobalContext.get",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "GlobalContext",
                      "children": []
                    },
                    {
                      "type": "Identifier",
                      "label": "get",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private isFirstRecord = true;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "isFirstRecord",
              "children": []
            },
            {
              "type": "TrueKeyword",
              "label": "true",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private isMoonCaptureBoostSupported: Boolean = false;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "isMoonCaptureBoostSupported",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Boolean",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Boolean",
                  "children": []
                }
              ]
            },
            {
              "type": "FalseKeyword",
              "label": "false",
              "children": []
            }
          ]
        },
        {
          "type": "Constructor",
          "label": "constructor() {\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Block",
              "label": "{\n    mockInterface();\n    this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n    // image capacity\n    let imageCapacity = 8;\n    try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "mockInterface();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "mockInterface()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "mockInterface",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.accessHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.accessHelper",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "accessHelper",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext())",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "photoAccessHelper.getPhotoAccessHelper",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "photoAccessHelper",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getPhotoAccessHelper",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.globalContext.getCameraSettingContext()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.globalContext.getCameraSettingContext",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.globalContext",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "globalContext",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getCameraSettingContext",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let imageCapacity = 8;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let imageCapacity = 8",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "imageCapacity = 8",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "imageCapacity",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "8",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);\n      Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);\n      // debug版本可能监听进不来\n      this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.mReceiver = image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.mReceiver",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "mReceiver",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "image.createImageReceiver(cameraSize.width, cameraSize.height, image.ImageFormat.JPEG, imageCapacity)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "image.createImageReceiver",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "image",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createImageReceiver",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "cameraSize.width",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cameraSize",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "width",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "cameraSize.height",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cameraSize",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "height",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "image.ImageFormat.JPEG",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "image.ImageFormat",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "image",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "ImageFormat",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "JPEG",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "imageCapacity",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.debug(TAG, `createImageReceiver value: ${this.mReceiver}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.debug",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`createImageReceiver value: ${this.mReceiver}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`createImageReceiver value: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.mReceiver}`",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.mReceiver",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "mReceiver",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.mReceiver.on('imageArrival', (): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.mReceiver.on",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.mReceiver",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "mReceiver",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "on",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'imageArrival'",
                                  "children": []
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(): void => {\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      }",
                                  "children": [
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        Logger.debug(TAG, 'imageArrival start');\n        this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.debug(TAG, 'imageArrival start');",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.debug(TAG, 'imageArrival start')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.debug",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "debug",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'imageArrival start'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        });",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.mReceiver.readNextImage((errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        })",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.mReceiver.readNextImage",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.mReceiver",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "mReceiver",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "readNextImage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(errCode: BusinessError, imageObj: image.Image): void => {\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        }",
                                                  "children": [
                                                    {
                                                      "type": "Parameter",
                                                      "label": "errCode: BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "errCode",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TypeReference",
                                                          "label": "BusinessError",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "BusinessError",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Parameter",
                                                      "label": "imageObj: image.Image",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "imageObj",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TypeReference",
                                                          "label": "image.Image",
                                                          "children": [
                                                            {
                                                              "type": "FirstNode",
                                                              "label": "image.Image",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "image",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "Image",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "VoidKeyword",
                                                      "label": "void",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          Logger.info(TAG, 'readNextImage start');\n          Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n          if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }\n          imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });\n        }",
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.info(TAG, 'readNextImage start');",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.info(TAG, 'readNextImage start')",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.info",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "info",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'readNextImage start'",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.info(TAG, `err: ${JSON.stringify(errCode)}`)",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.info",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "info",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "TemplateExpression",
                                                                  "label": "`err: ${JSON.stringify(errCode)}`",
                                                                  "children": [
                                                                    {
                                                                      "type": "TemplateHead",
                                                                      "label": "`err: ${",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TemplateSpan",
                                                                      "label": "JSON.stringify(errCode)}`",
                                                                      "children": [
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "JSON.stringify(errCode)",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "JSON.stringify",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "JSON",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "stringify",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "errCode",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "LastTemplateToken",
                                                                          "label": "}`",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (errCode || imageObj === undefined) {\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "errCode || imageObj === undefined",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "errCode",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "BarBarToken",
                                                                  "label": "||",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "imageObj === undefined",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "imageObj",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "EqualsEqualsEqualsToken",
                                                                      "label": "===",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "undefined",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n            Logger.error(TAG, 'readNextImage failed');\n            return;\n          }",
                                                              "children": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "Logger.error(TAG, 'readNextImage failed');",
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "Logger.error(TAG, 'readNextImage failed')",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "Logger.error",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "Logger",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "error",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "TAG",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "StringLiteral",
                                                                          "label": "'readNextImage failed'",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ReturnStatement",
                                                                  "label": "return;",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          });",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          })",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "imageObj.getComponent",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "imageObj",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "getComponent",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "image.ComponentType.JPEG",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "image.ComponentType",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "image",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "ComponentType",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "JPEG",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ArrowFunction",
                                                                  "label": "(errCode: BusinessError, component: image.Component): void => {\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          }",
                                                                  "children": [
                                                                    {
                                                                      "type": "Parameter",
                                                                      "label": "errCode: BusinessError",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "errCode",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "TypeReference",
                                                                          "label": "BusinessError",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "BusinessError",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Parameter",
                                                                      "label": "component: image.Component",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "component",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "TypeReference",
                                                                          "label": "image.Component",
                                                                          "children": [
                                                                            {
                                                                              "type": "FirstNode",
                                                                              "label": "image.Component",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "image",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "Component",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "VoidKeyword",
                                                                      "label": "void",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "EqualsGreaterThanToken",
                                                                      "label": "=>",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Block",
                                                                      "label": "{\n            Logger.debug(TAG, 'getComponent start');\n            Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n            if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }\n            let buffer: ArrayBuffer;\n            if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }\n            this.savePicture(buffer, imageObj);\n          }",
                                                                      "children": [
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "label": "Logger.debug(TAG, 'getComponent start');",
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "Logger.debug(TAG, 'getComponent start')",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "Logger.debug",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "Logger",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "debug",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "TAG",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "StringLiteral",
                                                                                  "label": "'getComponent start'",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "label": "Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);",
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "Logger.info(TAG, `err: ${JSON.stringify(errCode)}`)",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "Logger.info",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "Logger",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "info",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "TAG",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "TemplateExpression",
                                                                                  "label": "`err: ${JSON.stringify(errCode)}`",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "TemplateHead",
                                                                                      "label": "`err: ${",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "TemplateSpan",
                                                                                      "label": "JSON.stringify(errCode)}`",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "CallExpression",
                                                                                          "label": "JSON.stringify(errCode)",
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "PropertyAccessExpression",
                                                                                              "label": "JSON.stringify",
                                                                                              "children": [
                                                                                                {
                                                                                                  "type": "Identifier",
                                                                                                  "label": "JSON",
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "type": "Identifier",
                                                                                                  "label": "stringify",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "errCode",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "LastTemplateToken",
                                                                                          "label": "}`",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "IfStatement",
                                                                          "label": "if (errCode || component === undefined) {\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }",
                                                                          "children": [
                                                                            {
                                                                              "type": "BinaryExpression",
                                                                              "label": "errCode || component === undefined",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "errCode",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "BarBarToken",
                                                                                  "label": "||",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "BinaryExpression",
                                                                                  "label": "component === undefined",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "component",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "EqualsEqualsEqualsToken",
                                                                                      "label": "===",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "undefined",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Block",
                                                                              "label": "{\n              Logger.info(TAG, 'getComponent failed');\n              return;\n            }",
                                                                              "children": [
                                                                                {
                                                                                  "type": "ExpressionStatement",
                                                                                  "label": "Logger.info(TAG, 'getComponent failed');",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "CallExpression",
                                                                                      "label": "Logger.info(TAG, 'getComponent failed')",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "Logger.info",
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "Logger",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "info",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "TAG",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "StringLiteral",
                                                                                          "label": "'getComponent failed'",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "ReturnStatement",
                                                                                  "label": "return;",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "FirstStatement",
                                                                          "label": "let buffer: ArrayBuffer;",
                                                                          "children": [
                                                                            {
                                                                              "type": "VariableDeclarationList",
                                                                              "label": "let buffer: ArrayBuffer",
                                                                              "children": [
                                                                                {
                                                                                  "type": "VariableDeclaration",
                                                                                  "label": "buffer: ArrayBuffer",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "buffer",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "TypeReference",
                                                                                      "label": "ArrayBuffer",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "ArrayBuffer",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "IfStatement",
                                                                          "label": "if (component.byteBuffer) {\n              buffer = component.byteBuffer;\n            } else {\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "component.byteBuffer",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "component",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "byteBuffer",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Block",
                                                                              "label": "{\n              buffer = component.byteBuffer;\n            }",
                                                                              "children": [
                                                                                {
                                                                                  "type": "ExpressionStatement",
                                                                                  "label": "buffer = component.byteBuffer;",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "BinaryExpression",
                                                                                      "label": "buffer = component.byteBuffer",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "buffer",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "FirstAssignment",
                                                                                          "label": "=",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "component.byteBuffer",
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "component",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "byteBuffer",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Block",
                                                                              "label": "{\n              Logger.error(TAG, 'component byteBuffer is undefined');\n            }",
                                                                              "children": [
                                                                                {
                                                                                  "type": "ExpressionStatement",
                                                                                  "label": "Logger.error(TAG, 'component byteBuffer is undefined');",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "CallExpression",
                                                                                      "label": "Logger.error(TAG, 'component byteBuffer is undefined')",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "PropertyAccessExpression",
                                                                                          "label": "Logger.error",
                                                                                          "children": [
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "Logger",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "type": "Identifier",
                                                                                              "label": "error",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "TAG",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "StringLiteral",
                                                                                          "label": "'component byteBuffer is undefined'",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "label": "this.savePicture(buffer, imageObj);",
                                                                          "children": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "label": "this.savePicture(buffer, imageObj)",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "this.savePicture",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "ThisKeyword",
                                                                                      "label": "this",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "savePicture",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "buffer",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "imageObj",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`savePicture err: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`savePicture err: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "savePicture",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "buffer: ArrayBuffer",
              "children": [
                {
                  "type": "Identifier",
                  "label": "buffer",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "ArrayBuffer",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "ArrayBuffer",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "img: image.Image",
              "children": [
                {
                  "type": "Identifier",
                  "label": "img",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "image.Image",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "image.Image",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "image",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Image",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG, 'savePicture start');\n      let fileName = `${Date.now()}.jpg`;\n      let fileAsset = await this.accessHelper.createAsset(fileName);\n      let imgPhotoUri: string = fileAsset.uri;\n      const fd = await fileAsset.open('rw');\n      await fs.write(fd, buffer);\n      await fileAsset.close(fd);\n      await img.release();\n      Logger.info(TAG, 'savePicture End');\n      if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'savePicture start');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'savePicture start')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'savePicture start'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let fileName = `${Date.now()}.jpg`;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let fileName = `${Date.now()}.jpg`",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "fileName = `${Date.now()}.jpg`",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fileName",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`${Date.now()}.jpg`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "Date.now()}.jpg`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Date.now()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Date.now",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Date",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "now",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}.jpg`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let fileAsset = await this.accessHelper.createAsset(fileName);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let fileAsset = await this.accessHelper.createAsset(fileName)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "fileAsset = await this.accessHelper.createAsset(fileName)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fileAsset",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.accessHelper.createAsset(fileName)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.accessHelper.createAsset(fileName)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.accessHelper.createAsset",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.accessHelper",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "accessHelper",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "createAsset",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "fileName",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let imgPhotoUri: string = fileAsset.uri;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let imgPhotoUri: string = fileAsset.uri",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "imgPhotoUri: string = fileAsset.uri",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "imgPhotoUri",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "fileAsset.uri",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "fileAsset",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "uri",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "const fd = await fileAsset.open('rw');",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const fd = await fileAsset.open('rw')",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "fd = await fileAsset.open('rw')",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fd",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await fileAsset.open('rw')",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "fileAsset.open('rw')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "fileAsset.open",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "fileAsset",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "open",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'rw'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await fs.write(fd, buffer);",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await fs.write(fd, buffer)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "fs.write(fd, buffer)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "fs.write",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "fs",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "write",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "fd",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "buffer",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await fileAsset.close(fd);",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await fileAsset.close(fd)",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "fileAsset.close(fd)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "fileAsset.close",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "fileAsset",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "close",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "fd",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await img.release();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await img.release()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "img.release()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "img.release",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "img",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "release",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'savePicture End');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'savePicture End')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'savePicture End'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.handleTakePicture) {\n        this.handleTakePicture(imgPhotoUri);\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.handleTakePicture",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "handleTakePicture",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.handleTakePicture(imgPhotoUri);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.handleTakePicture(imgPhotoUri);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.handleTakePicture(imgPhotoUri)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.handleTakePicture",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "handleTakePicture",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "imgPhotoUri",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `savePicture err: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`savePicture err: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`savePicture err: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "withinErrorMargin(left: number, right: number): boolean {\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "withinErrorMargin",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "left: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "left",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "right: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "right",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 底数\n    let baseNumber = 2;\n    // 指数\n    let indexNumber = 2;\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let baseNumber = 2;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let baseNumber = 2",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "baseNumber = 2",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "baseNumber",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let indexNumber = 2;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let indexNumber = 2",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "indexNumber = 2",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "indexNumber",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "Math.abs(left - right) < Number.EPSILON * Math.pow(baseNumber, indexNumber)",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "Math.abs(left - right)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Math.abs",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Math",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "abs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "left - right",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "left",
                                  "children": []
                                },
                                {
                                  "type": "MinusToken",
                                  "label": "-",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "right",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "Number.EPSILON * Math.pow(baseNumber, indexNumber)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Number.EPSILON",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Number",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "EPSILON",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "AsteriskToken",
                              "label": "*",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "Math.pow(baseNumber, indexNumber)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Math.pow",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Math",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "pow",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "baseNumber",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "indexNumber",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "switchProfiles(profiles: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "switchProfiles",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "profiles: camera.CameraOutputCapability",
              "children": [
                {
                  "type": "Identifier",
                  "label": "profiles",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.CameraOutputCapability",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CameraOutputCapability",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CameraOutputCapability",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n    let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;\n    let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;\n    let isValidProfiles = true;\n    if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }\n    if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }\n    let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');\n    let previewProfileObj: camera.Profile;\n    let photoProfileObj: camera.Profile;\n    const deviceType = AppStorage.get<string>('deviceType');\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }\n    if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let previewProfiles: Array<camera.Profile> = profiles.previewProfiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "previewProfiles: Array<camera.Profile> = profiles.previewProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "previewProfiles",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.Profile>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Profile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Profile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "profiles.previewProfiles",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "profiles",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "previewProfiles",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let videoProfiles: Array<camera.Profile> = profiles.videoProfiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let videoProfiles: Array<camera.Profile> = profiles.videoProfiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "videoProfiles: Array<camera.Profile> = profiles.videoProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoProfiles",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.Profile>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Profile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Profile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "profiles.videoProfiles",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "profiles",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoProfiles",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let photoProfiles: Array<camera.Profile> = profiles.photoProfiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let photoProfiles: Array<camera.Profile> = profiles.photoProfiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "photoProfiles: Array<camera.Profile> = profiles.photoProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "photoProfiles",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.Profile>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Profile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Profile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "profiles.photoProfiles",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "profiles",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoProfiles",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isValidProfiles = true;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isValidProfiles = true",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isValidProfiles = true",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isValidProfiles",
                              "children": []
                            },
                            {
                              "type": "TrueKeyword",
                              "label": "true",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!previewProfiles || previewProfiles.length < 1) {\n      isValidProfiles = false;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "!previewProfiles || previewProfiles.length < 1",
                      "children": [
                        {
                          "type": "PrefixUnaryExpression",
                          "label": "!previewProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "previewProfiles",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "previewProfiles.length < 1",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "previewProfiles.length",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "previewProfiles",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "length",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "FirstBinaryOperator",
                              "label": "<",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      isValidProfiles = false;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "isValidProfiles = false;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "isValidProfiles = false",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isValidProfiles",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (isValidProfiles && (!photoProfiles || photoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "isValidProfiles && (!photoProfiles || photoProfiles.length < 1)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isValidProfiles",
                          "children": []
                        },
                        {
                          "type": "AmpersandAmpersandToken",
                          "label": "&&",
                          "children": []
                        },
                        {
                          "type": "ParenthesizedExpression",
                          "label": "(!photoProfiles || photoProfiles.length < 1)",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "!photoProfiles || photoProfiles.length < 1",
                              "children": [
                                {
                                  "type": "PrefixUnaryExpression",
                                  "label": "!photoProfiles",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfiles",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "photoProfiles.length < 1",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "photoProfiles.length",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "photoProfiles",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "length",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstBinaryOperator",
                                      "label": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      isValidProfiles = false;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "isValidProfiles = false;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "isValidProfiles = false",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isValidProfiles",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)) {\n      isValidProfiles = false;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT && (!videoProfiles || videoProfiles.length < 1)",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "isValidProfiles && this.cameraMode !== CameraMode.PORTRAIT",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isValidProfiles",
                              "children": []
                            },
                            {
                              "type": "AmpersandAmpersandToken",
                              "label": "&&",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraMode !== CameraMode.PORTRAIT",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ExclamationEqualsEqualsToken",
                                  "label": "!==",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CameraMode.PORTRAIT",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CameraMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "PORTRAIT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "AmpersandAmpersandToken",
                          "label": "&&",
                          "children": []
                        },
                        {
                          "type": "ParenthesizedExpression",
                          "label": "(!videoProfiles || videoProfiles.length < 1)",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "!videoProfiles || videoProfiles.length < 1",
                              "children": [
                                {
                                  "type": "PrefixUnaryExpression",
                                  "label": "!videoProfiles",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "videoProfiles",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "videoProfiles.length < 1",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "videoProfiles.length",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfiles",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "length",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstBinaryOperator",
                                      "label": "<",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      isValidProfiles = false;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "isValidProfiles = false;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "isValidProfiles = false",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isValidProfiles",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!isValidProfiles) {\n      Logger.error('Profile is invalid');\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!isValidProfiles",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isValidProfiles",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Logger.error('Profile is invalid');\n      return;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.error('Profile is invalid');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.error('Profile is invalid')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'Profile is invalid'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "defaultAspectRatio: number = AppStorage.get<number>('defaultAspectRatio')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "defaultAspectRatio",
                              "children": []
                            },
                            {
                              "type": "NumberKeyword",
                              "label": "number",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.get<number>('defaultAspectRatio')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'defaultAspectRatio'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let previewProfileObj: camera.Profile;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let previewProfileObj: camera.Profile",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "previewProfileObj: camera.Profile",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "previewProfileObj",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.Profile",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Profile",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let photoProfileObj: camera.Profile;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let photoProfileObj: camera.Profile",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "photoProfileObj: camera.Profile",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "photoProfileObj",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.Profile",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "Profile",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const deviceType = AppStorage.get<string>('deviceType');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const deviceType = AppStorage.get<string>('deviceType')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "deviceType = AppStorage.get<string>('deviceType')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "deviceType",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.get<string>('deviceType')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'deviceType'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "SwitchStatement",
                  "label": "switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.cameraMode",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cameraMode",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "CaseBlock",
                      "label": "{\n      case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;\n      case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;\n      case CameraMode.NORMAL:\n      case CameraMode.VIDEO:\n      default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }\n    }",
                      "children": [
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.PORTRAIT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.PORTRAIT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "PORTRAIT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "previewProfiles.find",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "previewProfiles",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "profile: camera.Profile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "profile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "camera.Profile",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "camera.Profile",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Profile",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                              "children": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "label": "return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.defaultProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.width === this.defaultProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`previewProfileObj: ${JSON.stringify(previewProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`previewProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(previewProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(previewProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "previewProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.previewProfileObj = previewProfileObj;",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.previewProfileObj = previewProfileObj",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.previewProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "previewProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoProfiles.find",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoProfiles",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "profile: camera.Profile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "profile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "camera.Profile",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "camera.Profile",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Profile",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                              "children": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "label": "return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.defaultProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.width === this.defaultProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`photoProfileObj: ${JSON.stringify(photoProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`photoProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(photoProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(photoProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.photoProfileObj = photoProfileObj;",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.photoProfileObj = photoProfileObj",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BreakStatement",
                              "label": "break;",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.SUPER_STAB:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };\n        let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });\n        Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);\n        if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }\n        break;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.SUPER_STAB",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "SUPER_STAB",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "previewProfiles.find",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "previewProfiles",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "profile: camera.Profile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "profile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "camera.Profile",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "camera.Profile",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Profile",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                              "children": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "label": "return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.defaultProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.width === this.defaultProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`previewProfileObj: ${JSON.stringify(previewProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`previewProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(previewProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(previewProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "previewProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.previewProfileObj = previewProfileObj;",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.previewProfileObj = previewProfileObj",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.previewProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "previewProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoProfiles.find",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoProfiles",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "profile: camera.Profile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "profile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "camera.Profile",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "camera.Profile",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Profile",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                              "children": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "label": "return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.defaultProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.width === this.defaultProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`photoProfileObj: ${JSON.stringify(photoProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`photoProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(photoProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(photoProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.photoProfileObj = photoProfileObj;",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.photoProfileObj = photoProfileObj",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        };",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.videoProfileObj = {\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        }",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "ObjectLiteralExpression",
                                      "label": "{\n          format: 1003,\n          size: {\n            width: 1920,\n            height: 1080\n          },\n          frameRateRange: {\n            min: 60,\n            max: 60\n          }\n        }",
                                      "children": [
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "format: 1003",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "format",
                                              "children": []
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "1003",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "size: {\n            width: 1920,\n            height: 1080\n          }",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "size",
                                              "children": []
                                            },
                                            {
                                              "type": "ObjectLiteralExpression",
                                              "label": "{\n            width: 1920,\n            height: 1080\n          }",
                                              "children": [
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "width: 1920",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "width",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1920",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "height: 1080",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "height",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1080",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAssignment",
                                          "label": "frameRateRange: {\n            min: 60,\n            max: 60\n          }",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "frameRateRange",
                                              "children": []
                                            },
                                            {
                                              "type": "ObjectLiteralExpression",
                                              "label": "{\n            min: 60,\n            max: 60\n          }",
                                              "children": [
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "min: 60",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "min",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "60",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAssignment",
                                                  "label": "max: 60",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "max",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "60",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "FirstStatement",
                              "label": "let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        });",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        })",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "videoProfileObj = videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        })",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfileObj",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "videoProfiles.find((profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        })",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "videoProfiles.find",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "videoProfiles",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "find",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ArrowFunction",
                                              "label": "(profile: camera.VideoProfile) => {\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        }",
                                              "children": [
                                                {
                                                  "type": "Parameter",
                                                  "label": "profile: camera.VideoProfile",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "profile",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "camera.VideoProfile",
                                                      "children": [
                                                        {
                                                          "type": "FirstNode",
                                                          "label": "camera.VideoProfile",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "camera",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "VideoProfile",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "EqualsGreaterThanToken",
                                                  "label": "=>",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Block",
                                                  "label": "{\n          return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;\n        }",
                                                  "children": [
                                                    {
                                                      "type": "ReturnStatement",
                                                      "label": "return profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max;",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min &&\n            profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width &&\n            profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min",
                                                              "children": [
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "profile.size.height === this.videoProfileObj.size.height &&\n            profile.size.width === this.videoProfileObj.size.width",
                                                                  "children": [
                                                                    {
                                                                      "type": "BinaryExpression",
                                                                      "label": "profile.size.height === this.videoProfileObj.size.height",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "profile.size.height",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "profile.size",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "profile",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "size",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "height",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "EqualsEqualsEqualsToken",
                                                                          "label": "===",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.videoProfileObj.size.height",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.videoProfileObj.size",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "this.videoProfileObj",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "ThisKeyword",
                                                                                      "label": "this",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "videoProfileObj",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "size",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "height",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "AmpersandAmpersandToken",
                                                                      "label": "&&",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "BinaryExpression",
                                                                      "label": "profile.size.width === this.videoProfileObj.size.width",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "profile.size.width",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "profile.size",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "profile",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "size",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "width",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "EqualsEqualsEqualsToken",
                                                                          "label": "===",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.videoProfileObj.size.width",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.videoProfileObj.size",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "this.videoProfileObj",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "ThisKeyword",
                                                                                      "label": "this",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "videoProfileObj",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "size",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "width",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "AmpersandAmpersandToken",
                                                                  "label": "&&",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "profile.frameRateRange.min === this.videoProfileObj.frameRateRange.min",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "profile.frameRateRange.min",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "profile.frameRateRange",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "profile",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "frameRateRange",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "min",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "EqualsEqualsEqualsToken",
                                                                      "label": "===",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.videoProfileObj.frameRateRange.min",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.videoProfileObj.frameRateRange",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.videoProfileObj",
                                                                              "children": [
                                                                                {
                                                                                  "type": "ThisKeyword",
                                                                                  "label": "this",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "videoProfileObj",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "frameRateRange",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "min",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "AmpersandAmpersandToken",
                                                              "label": "&&",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "profile.frameRateRange.max === this.videoProfileObj.frameRateRange.max",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.frameRateRange.max",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "profile.frameRateRange",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "profile",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "frameRateRange",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "max",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.videoProfileObj.frameRateRange.max",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.videoProfileObj.frameRateRange",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.videoProfileObj",
                                                                          "children": [
                                                                            {
                                                                              "type": "ThisKeyword",
                                                                              "label": "this",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "videoProfileObj",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "frameRateRange",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "max",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`videoProfileObj: ${JSON.stringify(videoProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`videoProfileObj: ${JSON.stringify(videoProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`videoProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(videoProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(videoProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "videoProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "IfStatement",
                              "label": "if (!videoProfileObj) {\n          Logger.error('videoProfileObj not supported');\n        }",
                              "children": [
                                {
                                  "type": "PrefixUnaryExpression",
                                  "label": "!videoProfileObj",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "videoProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n          Logger.error('videoProfileObj not supported');\n        }",
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error('videoProfileObj not supported');",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error('videoProfileObj not supported')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'videoProfileObj not supported'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BreakStatement",
                              "label": "break;",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.NIGHT:\n        previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);\n        this.previewProfileObj = previewProfileObj;\n        photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });\n        Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);\n        this.photoProfileObj = photoProfileObj;\n        break;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.NIGHT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "NIGHT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "previewProfileObj = previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "previewProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "previewProfiles.find",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "previewProfiles",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "profile: camera.Profile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "profile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "camera.Profile",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "camera.Profile",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Profile",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                              "children": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "label": "return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.defaultProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.width === this.defaultProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`previewProfileObj: ${JSON.stringify(previewProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`previewProfileObj: ${JSON.stringify(previewProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`previewProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(previewProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(previewProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "previewProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.previewProfileObj = previewProfileObj;",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.previewProfileObj = previewProfileObj",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.previewProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "previewProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        });",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "photoProfileObj = photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "photoProfiles.find((profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoProfiles.find",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoProfiles",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "find",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(profile: camera.Profile) => {\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "profile: camera.Profile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "profile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "camera.Profile",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "camera.Profile",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Profile",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n          return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;\n        }",
                                              "children": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "label": "return profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "profile.size.height === this.defaultProfile.size.height &&\n            profile.size.width === this.defaultProfile.size.width",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.height === this.defaultProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "height",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "profile.size.width === this.defaultProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "profile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "profile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "profile",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.defaultProfile.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.defaultProfile.size",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.defaultProfile",
                                                                      "children": [
                                                                        {
                                                                          "type": "ThisKeyword",
                                                                          "label": "this",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "defaultProfile",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "width",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(`photoProfileObj: ${JSON.stringify(photoProfileObj)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`photoProfileObj: ${JSON.stringify(photoProfileObj)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`photoProfileObj: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(photoProfileObj)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(photoProfileObj)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoProfileObj",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.photoProfileObj = photoProfileObj;",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.photoProfileObj = photoProfileObj",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BreakStatement",
                              "label": "break;",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.NORMAL:",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.NORMAL",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "NORMAL",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.VIDEO:",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.VIDEO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "DefaultClause",
                          "label": "default:\n        for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }\n        for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }",
                          "children": [
                            {
                              "type": "ForStatement",
                              "label": "for (let index = profiles.previewProfiles.length - 1; index >= 0; index--) {\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let index = profiles.previewProfiles.length - 1",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "index = profiles.previewProfiles.length - 1",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "index",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "profiles.previewProfiles.length - 1",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "profiles.previewProfiles.length",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "profiles.previewProfiles",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "profiles",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "previewProfiles",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "length",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "MinusToken",
                                              "label": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "index >= 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "index",
                                      "children": []
                                    },
                                    {
                                      "type": "GreaterThanEqualsToken",
                                      "label": ">=",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PostfixUnaryExpression",
                                  "label": "index--",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "index",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n          const previewProfile = profiles.previewProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }\n        }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "const previewProfile = profiles.previewProfiles[index];",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "const previewProfile = profiles.previewProfiles[index]",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "previewProfile = profiles.previewProfiles[index]",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "previewProfile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "profiles.previewProfiles[index]",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "profiles.previewProfiles",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "profiles",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "previewProfiles",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "index",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "IfStatement",
                                      "label": "if (this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)) {\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.withinErrorMargin(defaultAspectRatio, previewProfile.size.width / previewProfile.size.height)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.withinErrorMargin",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "withinErrorMargin",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "defaultAspectRatio",
                                              "children": []
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "label": "previewProfile.size.width / previewProfile.size.height",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "previewProfile.size.width",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "previewProfile.size",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "previewProfile",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "size",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "width",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "SlashToken",
                                                  "label": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "previewProfile.size.height",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "previewProfile.size",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "previewProfile",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "size",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "height",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n            if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }\n          }",
                                          "children": [
                                            {
                                              "type": "IfStatement",
                                              "label": "if (previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "previewProfile.size.width <= Constants.PHOTO_MAX_WIDTH",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "previewProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "previewProfile.size",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "previewProfile",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "size",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "width",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LessThanEqualsToken",
                                                          "label": "<=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Constants.PHOTO_MAX_WIDTH",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Constants",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "PHOTO_MAX_WIDTH",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "AmpersandAmpersandToken",
                                                      "label": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "previewProfile.size.height <= Constants.PHOTO_MAX_WIDTH",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "previewProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "previewProfile.size",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "previewProfile",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "size",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "height",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LessThanEqualsToken",
                                                          "label": "<=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Constants.PHOTO_MAX_WIDTH",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Constants",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "PHOTO_MAX_WIDTH",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Block",
                                                  "label": "{\n              let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };\n              this.previewProfileObj = previewProfileTemp;\n              Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);\n              break;\n            }",
                                                  "children": [
                                                    {
                                                      "type": "FirstStatement",
                                                      "label": "let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              };",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclarationList",
                                                          "label": "let previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              }",
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclaration",
                                                              "label": "previewProfileTemp = {\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              }",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "previewProfileTemp",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ObjectLiteralExpression",
                                                                  "label": "{\n                format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format,\n                size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }\n              }",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAssignment",
                                                                      "label": "format: deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "format",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "ConditionalExpression",
                                                                          "label": "deviceType === Constants.DEFAULT ? previewProfile.format : this.defaultProfile.format",
                                                                          "children": [
                                                                            {
                                                                              "type": "BinaryExpression",
                                                                              "label": "deviceType === Constants.DEFAULT",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "deviceType",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "EqualsEqualsEqualsToken",
                                                                                  "label": "===",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "Constants.DEFAULT",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "Constants",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "DEFAULT",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "QuestionToken",
                                                                              "label": "?",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "previewProfile.format",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "previewProfile",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "format",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "ColonToken",
                                                                              "label": ":",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.defaultProfile.format",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "this.defaultProfile",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "ThisKeyword",
                                                                                      "label": "this",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "defaultProfile",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "format",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "PropertyAssignment",
                                                                      "label": "size: {\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "size",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "ObjectLiteralExpression",
                                                                          "label": "{\n                  width: previewProfile.size.width,\n                  height: previewProfile.size.height\n                }",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "width: previewProfile.size.width",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "width",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "previewProfile.size.width",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "previewProfile.size",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "previewProfile",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "size",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "width",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "height: previewProfile.size.height",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "height",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "previewProfile.size.height",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "previewProfile.size",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "previewProfile",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "size",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "height",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "label": "this.previewProfileObj = previewProfileTemp;",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "this.previewProfileObj = previewProfileTemp",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.previewProfileObj",
                                                              "children": [
                                                                {
                                                                  "type": "ThisKeyword",
                                                                  "label": "this",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "previewProfileObj",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "FirstAssignment",
                                                              "label": "=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "previewProfileTemp",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "label": "Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`);",
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "Logger.debug(TAG, `previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`)",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "Logger.debug",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "Logger",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "debug",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "TAG",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateExpression",
                                                              "label": "`previewProfileObj: ${JSON.stringify(this.previewProfileObj)}`",
                                                              "children": [
                                                                {
                                                                  "type": "TemplateHead",
                                                                  "label": "`previewProfileObj: ${",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "TemplateSpan",
                                                                  "label": "JSON.stringify(this.previewProfileObj)}`",
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "JSON.stringify(this.previewProfileObj)",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "JSON.stringify",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "JSON",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "stringify",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.previewProfileObj",
                                                                          "children": [
                                                                            {
                                                                              "type": "ThisKeyword",
                                                                              "label": "this",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "previewProfileObj",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "LastTemplateToken",
                                                                      "label": "}`",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "BreakStatement",
                                                      "label": "break;",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ForStatement",
                              "label": "for (let index = profiles.photoProfiles.length - 1; index >= 0; index--) {\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let index = profiles.photoProfiles.length - 1",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "index = profiles.photoProfiles.length - 1",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "index",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "profiles.photoProfiles.length - 1",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "profiles.photoProfiles.length",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "profiles.photoProfiles",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "profiles",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "photoProfiles",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "length",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "MinusToken",
                                              "label": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "index >= 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "index",
                                      "children": []
                                    },
                                    {
                                      "type": "GreaterThanEqualsToken",
                                      "label": ">=",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PostfixUnaryExpression",
                                  "label": "index--",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "index",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n          const photoProfile = profiles.photoProfiles[index];\n          if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }\n        }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "const photoProfile = profiles.photoProfiles[index];",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "const photoProfile = profiles.photoProfiles[index]",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "photoProfile = profiles.photoProfiles[index]",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoProfile",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "profiles.photoProfiles[index]",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "profiles.photoProfiles",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "profiles",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "photoProfiles",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "index",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "IfStatement",
                                      "label": "if (this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)) {\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.withinErrorMargin(defaultAspectRatio, photoProfile.size.width / photoProfile.size.height)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.withinErrorMargin",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "withinErrorMargin",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "defaultAspectRatio",
                                              "children": []
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "label": "photoProfile.size.width / photoProfile.size.height",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "photoProfile.size.width",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "photoProfile.size",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "photoProfile",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "size",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "width",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "SlashToken",
                                                  "label": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "photoProfile.size.height",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "photoProfile.size",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "photoProfile",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "size",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "height",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n            if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }\n          }",
                                          "children": [
                                            {
                                              "type": "IfStatement",
                                              "label": "if (photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH) {\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH &&\n              photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "photoProfile.size.width <= Constants.PHOTO_MAX_WIDTH",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "photoProfile.size.width",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "photoProfile.size",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "photoProfile",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "size",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "width",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LessThanEqualsToken",
                                                          "label": "<=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Constants.PHOTO_MAX_WIDTH",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Constants",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "PHOTO_MAX_WIDTH",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "AmpersandAmpersandToken",
                                                      "label": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "photoProfile.size.height <= Constants.PHOTO_MAX_WIDTH",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "photoProfile.size.height",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "photoProfile.size",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "photoProfile",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "size",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "height",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LessThanEqualsToken",
                                                          "label": "<=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Constants.PHOTO_MAX_WIDTH",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Constants",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "PHOTO_MAX_WIDTH",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Block",
                                                  "label": "{\n              let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };\n              this.photoProfileObj = photoProfileTemp;\n              Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);\n              break;\n            }",
                                                  "children": [
                                                    {
                                                      "type": "FirstStatement",
                                                      "label": "let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              };",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclarationList",
                                                          "label": "let photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              }",
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclaration",
                                                              "label": "photoProfileTemp = {\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              }",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "photoProfileTemp",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "ObjectLiteralExpression",
                                                                  "label": "{\n                format: photoProfile.format,\n                size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }\n              }",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAssignment",
                                                                      "label": "format: photoProfile.format",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "format",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "photoProfile.format",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "photoProfile",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "format",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "PropertyAssignment",
                                                                      "label": "size: {\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "size",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "ObjectLiteralExpression",
                                                                          "label": "{\n                  width: photoProfile.size.width,\n                  height: photoProfile.size.height\n                }",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "width: photoProfile.size.width",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "width",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "photoProfile.size.width",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "photoProfile.size",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "photoProfile",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "size",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "width",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAssignment",
                                                                              "label": "height: photoProfile.size.height",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "height",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "photoProfile.size.height",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "PropertyAccessExpression",
                                                                                      "label": "photoProfile.size",
                                                                                      "children": [
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "photoProfile",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "type": "Identifier",
                                                                                          "label": "size",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "height",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "label": "this.photoProfileObj = photoProfileTemp;",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "this.photoProfileObj = photoProfileTemp",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.photoProfileObj",
                                                              "children": [
                                                                {
                                                                  "type": "ThisKeyword",
                                                                  "label": "this",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "photoProfileObj",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "FirstAssignment",
                                                              "label": "=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "photoProfileTemp",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "label": "Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`);",
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "Logger.debug(TAG, `photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`)",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "Logger.debug",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "Logger",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "debug",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "TAG",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateExpression",
                                                              "label": "`photoProfileObj: ${JSON.stringify(this.photoProfileObj)}`",
                                                              "children": [
                                                                {
                                                                  "type": "TemplateHead",
                                                                  "label": "`photoProfileObj: ${",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "TemplateSpan",
                                                                  "label": "JSON.stringify(this.photoProfileObj)}`",
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "JSON.stringify(this.photoProfileObj)",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "JSON.stringify",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "JSON",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "stringify",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.photoProfileObj",
                                                                          "children": [
                                                                            {
                                                                              "type": "ThisKeyword",
                                                                              "label": "this",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "photoProfileObj",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "LastTemplateToken",
                                                                      "label": "}`",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "BreakStatement",
                                                      "label": "break;",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (deviceType === Constants.DEFAULT) {\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "deviceType === Constants.DEFAULT",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "deviceType",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Constants.DEFAULT",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Constants",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "DEFAULT",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;\n      for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "cameraConfig = this.globalContext.getObject('cameraConfig') as CameraConfig",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "cameraConfig",
                                      "children": []
                                    },
                                    {
                                      "type": "AsExpression",
                                      "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.globalContext.getObject('cameraConfig')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.globalContext.getObject",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "globalContext",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getObject",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'cameraConfig'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "CameraConfig",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "CameraConfig",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ForStatement",
                          "label": "for (let index = this.videoProfiles.length - 1; index >= 0; index--) {\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let index = this.videoProfiles.length - 1",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "index = this.videoProfiles.length - 1",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "index",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.videoProfiles.length - 1",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoProfiles.length",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoProfiles",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "videoProfiles",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "length",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "MinusToken",
                                          "label": "-",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "index >= 0",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "index",
                                  "children": []
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PostfixUnaryExpression",
                              "label": "index--",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "index",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        const videoProfileObj = this.videoProfiles[index];\n        if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "const videoProfileObj = this.videoProfiles[index];",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "const videoProfileObj = this.videoProfiles[index]",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "videoProfileObj = this.videoProfiles[index]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "videoProfileObj",
                                              "children": []
                                            },
                                            {
                                              "type": "ElementAccessExpression",
                                              "label": "this.videoProfiles[index]",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoProfiles",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoProfiles",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "index",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)) {\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.withinErrorMargin(defaultAspectRatio, videoProfileObj.size.width / videoProfileObj.size.height)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.withinErrorMargin",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "withinErrorMargin",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "defaultAspectRatio",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "videoProfileObj.size.width / videoProfileObj.size.height",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "videoProfileObj.size.width",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "videoProfileObj.size",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoProfileObj",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "size",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "width",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "SlashToken",
                                              "label": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "videoProfileObj.size.height",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "videoProfileObj.size",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoProfileObj",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "size",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "height",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }\n        }",
                                      "children": [
                                        {
                                          "type": "IfStatement",
                                          "label": "if (videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH) {\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH &&\n            videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "videoProfileObj.size.width <= Constants.VIDEO_MAX_WIDTH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "videoProfileObj.size.width",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "videoProfileObj.size",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "videoProfileObj",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "size",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "width",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LessThanEqualsToken",
                                                      "label": "<=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "Constants.VIDEO_MAX_WIDTH",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Constants",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VIDEO_MAX_WIDTH",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "AmpersandAmpersandToken",
                                                  "label": "&&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "videoProfileObj.size.height <= Constants.VIDEO_MAX_WIDTH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "videoProfileObj.size.height",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "videoProfileObj.size",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "videoProfileObj",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "size",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "height",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LessThanEqualsToken",
                                                      "label": "<=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "Constants.VIDEO_MAX_WIDTH",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Constants",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VIDEO_MAX_WIDTH",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n            let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };\n            if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }\n            Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);\n            this.videoProfileObj = videoProfileTemp;\n          }",
                                              "children": [
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            };",
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "let videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            }",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "videoProfileTemp = {\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            }",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "videoProfileTemp",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "ObjectLiteralExpression",
                                                              "label": "{\n              format: videoProfileObj.format,\n              size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              },\n              frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }\n            }",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "format: videoProfileObj.format",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "format",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfileObj.format",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfileObj",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "format",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "size: {\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              }",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "size",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "ObjectLiteralExpression",
                                                                      "label": "{\n                width: videoProfileObj.size.width,\n                height: videoProfileObj.size.height\n              }",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "width: videoProfileObj.size.width",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "width",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "videoProfileObj.size.width",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "videoProfileObj.size",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "videoProfileObj",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "size",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "width",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "height: videoProfileObj.size.height",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "height",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "videoProfileObj.size.height",
                                                                              "children": [
                                                                                {
                                                                                  "type": "PropertyAccessExpression",
                                                                                  "label": "videoProfileObj.size",
                                                                                  "children": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "videoProfileObj",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "label": "size",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "height",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAssignment",
                                                                  "label": "frameRateRange: {\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "frameRateRange",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "ObjectLiteralExpression",
                                                                      "label": "{\n                min: Constants.VIDEO_FRAME_30,\n                max: Constants.VIDEO_FRAME_30\n              }",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "min: Constants.VIDEO_FRAME_30",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "min",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "Constants.VIDEO_FRAME_30",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "Constants",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "VIDEO_FRAME_30",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "PropertyAssignment",
                                                                          "label": "max: Constants.VIDEO_FRAME_30",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "max",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "Constants.VIDEO_FRAME_30",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "Constants",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "VIDEO_FRAME_30",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if ((cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min) {\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "(cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30) ===\n            videoProfileObj.frameRateRange.min",
                                                      "children": [
                                                        {
                                                          "type": "ParenthesizedExpression",
                                                          "label": "(cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30)",
                                                          "children": [
                                                            {
                                                              "type": "ConditionalExpression",
                                                              "label": "cameraConfig.videoFrame === 0 ? Constants.VIDEO_FRAME_15 : Constants.VIDEO_FRAME_30",
                                                              "children": [
                                                                {
                                                                  "type": "BinaryExpression",
                                                                  "label": "cameraConfig.videoFrame === 0",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "cameraConfig.videoFrame",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "cameraConfig",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoFrame",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "EqualsEqualsEqualsToken",
                                                                      "label": "===",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "FirstLiteralToken",
                                                                      "label": "0",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "QuestionToken",
                                                                  "label": "?",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Constants.VIDEO_FRAME_15",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Constants",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "VIDEO_FRAME_15",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "ColonToken",
                                                                  "label": ":",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Constants.VIDEO_FRAME_30",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Constants",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "VIDEO_FRAME_30",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "EqualsEqualsEqualsToken",
                                                          "label": "===",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "videoProfileObj.frameRateRange.min",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "videoProfileObj.frameRateRange",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "videoProfileObj",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "frameRateRange",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "min",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n              videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;\n              videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;\n              this.videoProfileObj = videoProfileTemp;\n              Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n              break;\n            }",
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min;",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "videoProfileTemp.frameRateRange.min = videoProfileObj.frameRateRange.min",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "videoProfileTemp.frameRateRange.min",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfileTemp.frameRateRange",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfileTemp",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "frameRateRange",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "min",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "FirstAssignment",
                                                                  "label": "=",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "videoProfileObj.frameRateRange.min",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfileObj.frameRateRange",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfileObj",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "frameRateRange",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "min",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max;",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "videoProfileTemp.frameRateRange.max = videoProfileObj.frameRateRange.max",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "videoProfileTemp.frameRateRange.max",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfileTemp.frameRateRange",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfileTemp",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "frameRateRange",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "max",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "FirstAssignment",
                                                                  "label": "=",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "videoProfileObj.frameRateRange.max",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfileObj.frameRateRange",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfileObj",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "frameRateRange",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "max",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "this.videoProfileObj = videoProfileTemp;",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "this.videoProfileObj = videoProfileTemp",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.videoProfileObj",
                                                                  "children": [
                                                                    {
                                                                      "type": "ThisKeyword",
                                                                      "label": "this",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "videoProfileObj",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "FirstAssignment",
                                                                  "label": "=",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "videoProfileTemp",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.info(TAG, `videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`)",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.info",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "info",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "TemplateExpression",
                                                                  "label": "`videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`",
                                                                  "children": [
                                                                    {
                                                                      "type": "TemplateHead",
                                                                      "label": "`videoProfileObj: ${",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TemplateSpan",
                                                                      "label": "JSON.stringify(this.videoProfileObj)}`",
                                                                      "children": [
                                                                        {
                                                                          "type": "CallExpression",
                                                                          "label": "JSON.stringify(this.videoProfileObj)",
                                                                          "children": [
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "JSON.stringify",
                                                                              "children": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "JSON",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "stringify",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "type": "PropertyAccessExpression",
                                                                              "label": "this.videoProfileObj",
                                                                              "children": [
                                                                                {
                                                                                  "type": "ThisKeyword",
                                                                                  "label": "this",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "label": "videoProfileObj",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "LastTemplateToken",
                                                                          "label": "}`",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "BreakStatement",
                                                          "label": "break;",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.info(TAG, `videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`videoProfileTemp: ${JSON.stringify(videoProfileTemp)}`",
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`videoProfileTemp: ${",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "JSON.stringify(videoProfileTemp)}`",
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "JSON.stringify(videoProfileTemp)",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "JSON.stringify",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "JSON",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "stringify",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "videoProfileTemp",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "}`",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "this.videoProfileObj = videoProfileTemp;",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "this.videoProfileObj = videoProfileTemp",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.videoProfileObj",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "videoProfileObj",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "FirstAssignment",
                                                          "label": "=",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "videoProfileTemp",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setCameraMode(cameraMode: number): void {\n    this.cameraMode = cameraMode;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setCameraMode",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "cameraMode: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraMode",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.cameraMode = cameraMode;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.cameraMode = cameraMode;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.cameraMode = cameraMode",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cameraMode",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cameraMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cameraMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "initProfile(cameraDeviceIndex: number): void {\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "initProfile",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "cameraDeviceIndex: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraDeviceIndex",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let profiles;\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }\n    this.videoProfiles = profiles.videoProfiles;\n    this.switchProfiles(profiles);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let profiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let profiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "profiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "profiles",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.cameraMode === CameraMode.PORTRAIT) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.cameraMode === CameraMode.PORTRAIT",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cameraMode",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cameraMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "CameraMode.PORTRAIT",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "CameraMode",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "PORTRAIT",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "profiles",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.PORTRAIT_PHOTO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.getSupportedOutputCapability",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getSupportedOutputCapability",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ElementAccessExpression",
                                      "label": "this.cameras[cameraDeviceIndex]",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameras",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameras",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraDeviceIndex",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneMode.PORTRAIT_PHOTO",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneMode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PORTRAIT_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "label": "if (this.cameraMode === CameraMode.VIDEO) {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    } else {\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "this.cameraMode === CameraMode.VIDEO",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraMode",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.VIDEO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO);",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "profiles",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex], camera.SceneMode.NORMAL_VIDEO)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager.getSupportedOutputCapability",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameraManager",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameraManager",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSupportedOutputCapability",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "this.cameras[cameraDeviceIndex]",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameras",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameras",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraDeviceIndex",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode.NORMAL_VIDEO",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.SceneMode",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "SceneMode",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "NORMAL_VIDEO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "profiles = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex])",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "profiles",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex])",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager.getSupportedOutputCapability",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameraManager",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameraManager",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSupportedOutputCapability",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "this.cameras[cameraDeviceIndex]",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameras",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameras",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraDeviceIndex",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoProfiles = profiles.videoProfiles;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoProfiles = profiles.videoProfiles",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoProfiles",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "videoProfiles",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "profiles.videoProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "profiles",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "videoProfiles",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.switchProfiles(profiles);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.switchProfiles(profiles)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.switchProfiles",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "switchProfiles",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "profiles",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async initCamera(surfaceId: string, cameraDeviceIndex: number): Promise<void> {\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "initCamera",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "surfaceId: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "surfaceId",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "cameraDeviceIndex: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraDeviceIndex",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.isFirstRecord = true;\n      // 获取传入摄像头\n      Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.getCameraManagerFn();\n      let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];\n\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }\n      // 获取支持指定的相机设备对象\n      this.getSupportedCamerasFn();\n      if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }\n      this.initProfile(cameraDeviceIndex);\n      // 创建previewOutput输出对象\n      this.createPreviewOutputFn(this.previewProfileObj, surfaceId);\n      // 监听预览事件\n      this.previewOutputCallBack();\n      if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }\n      // 创建photoOutPut输出对象\n      let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();\n      this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);\n      // 拍照监听事件\n      this.photoOutPutCallBack();\n      // 创建cameraInput输出对象\n      this.createCameraInputFn(this.cameras[cameraDeviceIndex]);\n      // 打开相机\n      await this.cameraInputOpenFn();\n      // 镜头状态回调\n      this.onCameraStatusChange();\n      // 监听CameraInput的错误事件\n      this.onCameraInputChange();\n      // 会话流程\n      switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }\n      this.testAbilityFunction();\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFirstRecord = true;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.isFirstRecord = true",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFirstRecord",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFirstRecord",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "TrueKeyword",
                                  "label": "true",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.debug(TAG, `initCamera cameraDeviceIndex: ${cameraDeviceIndex}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.debug",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`initCamera cameraDeviceIndex: ${cameraDeviceIndex}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`initCamera cameraDeviceIndex: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "cameraDeviceIndex}`",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cameraDeviceIndex",
                                          "children": []
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.releaseCamera();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.releaseCamera()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.releaseCamera()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.releaseCamera",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "releaseCamera",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.getCameraManagerFn();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.getCameraManagerFn()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getCameraManagerFn",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getCameraManagerFn",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO];",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO]",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "newModes = [CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "newModes",
                                      "children": []
                                    },
                                    {
                                      "type": "ArrayLiteralExpression",
                                      "label": "[CameraMode.PORTRAIT, CameraMode.NIGHT, CameraMode.MACRO_PHOTO, CameraMode.MACRO_VIDEO]",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "CameraMode.PORTRAIT",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "CameraMode",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "PORTRAIT",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "CameraMode.NIGHT",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "CameraMode",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "NIGHT",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "CameraMode.MACRO_PHOTO",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "CameraMode",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "MACRO_PHOTO",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "CameraMode.MACRO_VIDEO",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "CameraMode",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "MACRO_VIDEO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getModeManagerFn();\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "newModes.indexOf(this.cameraMode) >= 0",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "newModes.indexOf(this.cameraMode)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "newModes.indexOf",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "newModes",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "indexOf",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraMode",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraMode",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.getModeManagerFn();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.getModeManagerFn();",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.getModeManagerFn()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.getModeManagerFn",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getModeManagerFn",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.getSupportedCamerasFn();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.getSupportedCamerasFn()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSupportedCamerasFn",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedCamerasFn",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (newModes.indexOf(this.cameraMode) >= 0) {\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "newModes.indexOf(this.cameraMode) >= 0",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "newModes.indexOf(this.cameraMode)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "newModes.indexOf",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "newModes",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "indexOf",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraMode",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraMode",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.getSupportedModeFn(cameraDeviceIndex);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.getSupportedModeFn(cameraDeviceIndex);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.getSupportedModeFn(cameraDeviceIndex)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.getSupportedModeFn",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSupportedModeFn",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraDeviceIndex",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.initProfile(cameraDeviceIndex);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.initProfile(cameraDeviceIndex)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.initProfile",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "initProfile",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraDeviceIndex",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.createPreviewOutputFn(this.previewProfileObj, surfaceId);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.createPreviewOutputFn(this.previewProfileObj, surfaceId)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.createPreviewOutputFn",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "createPreviewOutputFn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewProfileObj",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "surfaceId",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.previewOutputCallBack();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.previewOutputCallBack()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutputCallBack",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutputCallBack",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO) {\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraMode === CameraMode.SUPER_STAB || this.cameraMode === CameraMode.VIDEO",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.cameraMode === CameraMode.SUPER_STAB",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraMode",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.SUPER_STAB",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SUPER_STAB",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.cameraMode === CameraMode.VIDEO",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraMode",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.VIDEO",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VIDEO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        await this.createAVRecorder();\n        await this.createVideoOutput();\n        // 监听录像事件\n        this.onVideoOutputChange();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.createAVRecorder();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.createAVRecorder()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.createAVRecorder()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.createAVRecorder",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "createAVRecorder",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.createVideoOutput();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.createVideoOutput()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.createVideoOutput()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.createVideoOutput",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "createVideoOutput",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.onVideoOutputChange();",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.onVideoOutputChange()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.onVideoOutputChange",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "onVideoOutputChange",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let mSurfaceId = await this.mReceiver.getReceivingSurfaceId();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let mSurfaceId = await this.mReceiver.getReceivingSurfaceId()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "mSurfaceId = await this.mReceiver.getReceivingSurfaceId()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "mSurfaceId",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.mReceiver.getReceivingSurfaceId()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.mReceiver.getReceivingSurfaceId()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.mReceiver.getReceivingSurfaceId",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.mReceiver",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "mReceiver",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getReceivingSurfaceId",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.createPhotoOutputFn(this.photoProfileObj, mSurfaceId)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.createPhotoOutputFn",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "createPhotoOutputFn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoProfileObj",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "mSurfaceId",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.photoOutPutCallBack();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.photoOutPutCallBack()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPutCallBack",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoOutPutCallBack",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.createCameraInputFn(this.cameras[cameraDeviceIndex]);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.createCameraInputFn(this.cameras[cameraDeviceIndex])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.createCameraInputFn",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "createCameraInputFn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.cameras[cameraDeviceIndex]",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameras",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameras",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraDeviceIndex",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.cameraInputOpenFn();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.cameraInputOpenFn()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraInputOpenFn()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraInputOpenFn",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraInputOpenFn",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCameraStatusChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCameraStatusChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCameraStatusChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCameraStatusChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCameraInputChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCameraInputChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCameraInputChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCameraInputChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "SwitchStatement",
                          "label": "switch (this.cameraMode) {\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraMode",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CaseBlock",
                              "label": "{\n        case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;\n        case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;\n        case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;\n        case CameraMode.MACRO_VIDEO:\n          break;\n        case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;\n        default:\n          await this.photoSessionFlowFn();\n          break;\n      }",
                              "children": [
                                {
                                  "type": "CaseClause",
                                  "label": "case CameraMode.PORTRAIT:\n          await this.portraitSessionFlowFn(); break;",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.PORTRAIT",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PORTRAIT",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "await this.portraitSessionFlowFn();",
                                      "children": [
                                        {
                                          "type": "AwaitExpression",
                                          "label": "await this.portraitSessionFlowFn()",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.portraitSessionFlowFn()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.portraitSessionFlowFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "portraitSessionFlowFn",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BreakStatement",
                                      "label": "break;",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CaseClause",
                                  "label": "case CameraMode.NIGHT:\n          await this.nightSessionFlowFn(); break;",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.NIGHT",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NIGHT",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "await this.nightSessionFlowFn();",
                                      "children": [
                                        {
                                          "type": "AwaitExpression",
                                          "label": "await this.nightSessionFlowFn()",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.nightSessionFlowFn()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.nightSessionFlowFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "nightSessionFlowFn",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BreakStatement",
                                      "label": "break;",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CaseClause",
                                  "label": "case CameraMode.MACRO_PHOTO:\n          await this.macroPhotoSessionFlowFn(); break;",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.MACRO_PHOTO",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MACRO_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "await this.macroPhotoSessionFlowFn();",
                                      "children": [
                                        {
                                          "type": "AwaitExpression",
                                          "label": "await this.macroPhotoSessionFlowFn()",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.macroPhotoSessionFlowFn()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.macroPhotoSessionFlowFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "macroPhotoSessionFlowFn",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BreakStatement",
                                      "label": "break;",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CaseClause",
                                  "label": "case CameraMode.MACRO_VIDEO:\n          break;",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.MACRO_VIDEO",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MACRO_VIDEO",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BreakStatement",
                                      "label": "break;",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "CaseClause",
                                  "label": "case CameraMode.VIDEO:\n          await this.videoSessionFlowFn(); break;",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.VIDEO",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VIDEO",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "await this.videoSessionFlowFn();",
                                      "children": [
                                        {
                                          "type": "AwaitExpression",
                                          "label": "await this.videoSessionFlowFn()",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.videoSessionFlowFn()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoSessionFlowFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoSessionFlowFn",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BreakStatement",
                                      "label": "break;",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "DefaultClause",
                                  "label": "default:\n          await this.photoSessionFlowFn();\n          break;",
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "await this.photoSessionFlowFn();",
                                      "children": [
                                        {
                                          "type": "AwaitExpression",
                                          "label": "await this.photoSessionFlowFn()",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.photoSessionFlowFn()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.photoSessionFlowFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "photoSessionFlowFn",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "BreakStatement",
                                      "label": "break;",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.testAbilityFunction();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.testAbilityFunction()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.testAbilityFunction",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "testAbilityFunction",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `initCamera fail: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`initCamera fail: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`initCamera fail: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isVideoFrameSupportedFn(videoFrame: number): boolean {\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isVideoFrameSupportedFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "videoFrame: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "videoFrame",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });\n    return videoProfile === undefined ? false : true;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    });",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    })",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "videoProfile: camera.VideoProfile | undefined = this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    })",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoProfile",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.VideoProfile | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.VideoProfile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.VideoProfile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VideoProfile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.videoProfiles.find((videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoProfiles.find",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoProfiles",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfiles",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "find",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(videoProfile: camera.VideoProfile) => {\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "videoProfile: camera.VideoProfile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfile",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.VideoProfile",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.VideoProfile",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "VideoProfile",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n      return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;\n    }",
                                      "children": [
                                        {
                                          "type": "ReturnStatement",
                                          "label": "return videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame;",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame &&\n        videoProfile.frameRateRange.max === videoFrame",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format &&\n        videoProfile.frameRateRange.min === videoFrame",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width &&\n        videoProfile.format === this.videoProfileObj.format",
                                                      "children": [
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "videoProfile.size.height === this.videoProfileObj.size.height &&\n        videoProfile.size.width === this.videoProfileObj.size.width",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "videoProfile.size.height === this.videoProfileObj.size.height",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "videoProfile.size.height",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfile.size",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfile",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "size",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "height",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.videoProfileObj.size.height",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.videoProfileObj.size",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.videoProfileObj",
                                                                          "children": [
                                                                            {
                                                                              "type": "ThisKeyword",
                                                                              "label": "this",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "videoProfileObj",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "size",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "height",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "AmpersandAmpersandToken",
                                                              "label": "&&",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "videoProfile.size.width === this.videoProfileObj.size.width",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "videoProfile.size.width",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "videoProfile.size",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "videoProfile",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "size",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "width",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.videoProfileObj.size.width",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "this.videoProfileObj.size",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.videoProfileObj",
                                                                          "children": [
                                                                            {
                                                                              "type": "ThisKeyword",
                                                                              "label": "this",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "videoProfileObj",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "size",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "width",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "AmpersandAmpersandToken",
                                                          "label": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "videoProfile.format === this.videoProfileObj.format",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "videoProfile.format",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "videoProfile",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "format",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.videoProfileObj.format",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "this.videoProfileObj",
                                                                  "children": [
                                                                    {
                                                                      "type": "ThisKeyword",
                                                                      "label": "this",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "videoProfileObj",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "format",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "AmpersandAmpersandToken",
                                                      "label": "&&",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "videoProfile.frameRateRange.min === videoFrame",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "videoProfile.frameRateRange.min",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "videoProfile.frameRateRange",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "videoProfile",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "frameRateRange",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "min",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "EqualsEqualsEqualsToken",
                                                          "label": "===",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "videoFrame",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "AmpersandAmpersandToken",
                                                  "label": "&&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "videoProfile.frameRateRange.max === videoFrame",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "videoProfile.frameRateRange.max",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "videoProfile.frameRateRange",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "videoProfile",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "frameRateRange",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "max",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "EqualsEqualsEqualsToken",
                                                      "label": "===",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoFrame",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return videoProfile === undefined ? false : true;",
                  "children": [
                    {
                      "type": "ConditionalExpression",
                      "label": "videoProfile === undefined ? false : true",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "videoProfile === undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoProfile",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "QuestionToken",
                          "label": "?",
                          "children": []
                        },
                        {
                          "type": "FalseKeyword",
                          "label": "false",
                          "children": []
                        },
                        {
                          "type": "ColonToken",
                          "label": ":",
                          "children": []
                        },
                        {
                          "type": "TrueKeyword",
                          "label": "true",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isExposureModeSupportedFn(aeMode: camera.ExposureMode): boolean {\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isExposureModeSupportedFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "aeMode: camera.ExposureMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "aeMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.ExposureMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.ExposureMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ExposureMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 检测曝光模式是否支持\n    let isSupported: boolean = false;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return isSupported;\n    }\n    isSupported = session.isExposureModeSupported(aeMode);\n    Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);\n    return isSupported;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSupported: boolean = false;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSupported: boolean = false",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSupported: boolean = false",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupported",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return isSupported;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return isSupported;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return isSupported;",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupported",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "isSupported = session.isExposureModeSupported(aeMode);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "isSupported = session.isExposureModeSupported(aeMode)",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isSupported",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.isExposureModeSupported(aeMode)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.isExposureModeSupported",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "isExposureModeSupported",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "aeMode",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isExposureModeSupported success, isSupported: ${isSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isExposureModeSupported success, isSupported: ${isSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isExposureModeSupported success, isSupported: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return isSupported;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "isSupported",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setExposureMode(aeMode: camera.ExposureMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setExposureMode",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "aeMode: camera.ExposureMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "aeMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.ExposureMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.ExposureMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ExposureMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setExposureMode(aeMode);\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setExposureMode(aeMode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setExposureMode(aeMode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setExposureMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setExposureMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "aeMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposureMode: camera.ExposureMode | undefined = undefined;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposureMode: camera.ExposureMode | undefined = undefined",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposureMode: camera.ExposureMode | undefined = undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposureMode",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.ExposureMode | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.ExposureMode",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.ExposureMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ExposureMode",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "exposureMode = session.getExposureMode();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "exposureMode = session.getExposureMode()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "exposureMode",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.getExposureMode()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.getExposureMode",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getExposureMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getExposureMode success, exposureMode: ${exposureMode}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getExposureMode success, exposureMode: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureMode}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "exposureMode",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isMeteringPoint(point: camera.Point): void {\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isMeteringPoint",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "point: camera.Point",
              "children": [
                {
                  "type": "Identifier",
                  "label": "point",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.Point",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.Point",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Point",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 获取当前曝光模式\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let exposureMode: camera.ExposureMode | undefined = undefined;\n    exposureMode = session.getExposureMode();\n    Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);\n    session.setMeteringPoint(point);\n    let exposurePoint: camera.Point | undefined = undefined;\n    exposurePoint = session.getMeteringPoint();\n    Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposureMode: camera.ExposureMode | undefined = undefined;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposureMode: camera.ExposureMode | undefined = undefined",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposureMode: camera.ExposureMode | undefined = undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposureMode",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.ExposureMode | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.ExposureMode",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.ExposureMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ExposureMode",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "exposureMode = session.getExposureMode();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "exposureMode = session.getExposureMode()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "exposureMode",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.getExposureMode()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.getExposureMode",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getExposureMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `getExposureMode success, exposureMode: ${exposureMode}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getExposureMode success, exposureMode: ${exposureMode}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getExposureMode success, exposureMode: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureMode}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "exposureMode",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setMeteringPoint(point);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setMeteringPoint(point)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setMeteringPoint",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setMeteringPoint",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "point",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposurePoint: camera.Point | undefined = undefined;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposurePoint: camera.Point | undefined = undefined",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposurePoint: camera.Point | undefined = undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposurePoint",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.Point | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Point",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Point",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Point",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "exposurePoint = session.getMeteringPoint();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "exposurePoint = session.getMeteringPoint()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "exposurePoint",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.getMeteringPoint()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.getMeteringPoint",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getMeteringPoint",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getMeteringPoint exposurePoint: ${JSON.stringify(exposurePoint)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getMeteringPoint exposurePoint: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(exposurePoint)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(exposurePoint)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "exposurePoint",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isExposureBiasRange(exposureBias: number): void {\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isExposureBiasRange",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "exposureBias: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "exposureBias",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.debug(TAG, `setExposureBias value ${exposureBias}`);\n    // 查询曝光补偿范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    let biasRangeArray: Array<number> = [];\n    biasRangeArray = session.getExposureBiasRange();\n    Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);\n    // 设置曝光补偿\n    session.setExposureBias(exposureBias);\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `setExposureBias value ${exposureBias}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `setExposureBias value ${exposureBias}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`setExposureBias value ${exposureBias}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`setExposureBias value ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBias}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "exposureBias",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let biasRangeArray: Array<number> = [];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let biasRangeArray: Array<number> = []",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "biasRangeArray: Array<number> = []",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "biasRangeArray",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrayLiteralExpression",
                              "label": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "biasRangeArray = session.getExposureBiasRange();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "biasRangeArray = session.getExposureBiasRange()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "biasRangeArray",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.getExposureBiasRange()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.getExposureBiasRange",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getExposureBiasRange",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getExposureBiasRange success, biasRangeArray: ${JSON.stringify(biasRangeArray)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getExposureBiasRange success, biasRangeArray: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(biasRangeArray)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(biasRangeArray)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "biasRangeArray",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setExposureBias(exposureBias);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setExposureBias(exposureBias)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setExposureBias",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setExposureBias",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "exposureBias",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isFocusModeSupported(focusMode: camera.FocusMode): boolean {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isFocusModeSupported",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "focusMode: camera.FocusMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "focusMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.FocusMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.FocusMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "FocusMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    return session.isFocusModeSupported(focusMode);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return false;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return false;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return false;",
                          "children": [
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return session.isFocusModeSupported(focusMode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.isFocusModeSupported(focusMode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.isFocusModeSupported",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "isFocusModeSupported",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "focusMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isFocusMode(focusMode: camera.FocusMode): void {\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isFocusMode",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "focusMode: camera.FocusMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "focusMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.FocusMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.FocusMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "FocusMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 检测对焦模式是否支持\n    let isSupported = this.isFocusModeSupported(focusMode);\n    Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);\n    // 设置对焦模式\n    if (!isSupported) {\n      return;\n    }\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusMode(focusMode);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSupported = this.isFocusModeSupported(focusMode);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSupported = this.isFocusModeSupported(focusMode)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSupported = this.isFocusModeSupported(focusMode)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupported",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.isFocusModeSupported(focusMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFocusModeSupported",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "focusMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isFocusModeSupported isSupported: ${JSON.stringify(isSupported)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isFocusModeSupported isSupported: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(isSupported)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(isSupported)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!isSupported) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!isSupported",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isSupported",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setFocusMode(focusMode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setFocusMode(focusMode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setFocusMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setFocusMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "focusMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isFocusPoint(point: camera.Point): void {\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isFocusPoint",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "point: camera.Point",
              "children": [
                {
                  "type": "Identifier",
                  "label": "point",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.Point",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.Point",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Point",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 设置焦点\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.setFocusPoint(point);\n    Logger.info(TAG, 'setFocusPoint success');\n    // 获取当前的焦点\n    let nowPoint: camera.Point | undefined = undefined;\n    nowPoint = session.getFocusPoint();\n    Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setFocusPoint(point);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setFocusPoint(point)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setFocusPoint",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setFocusPoint",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "point",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'setFocusPoint success');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'setFocusPoint success')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setFocusPoint success'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let nowPoint: camera.Point | undefined = undefined;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let nowPoint: camera.Point | undefined = undefined",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "nowPoint: camera.Point | undefined = undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "nowPoint",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.Point | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Point",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Point",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Point",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "nowPoint = session.getFocusPoint();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "nowPoint = session.getFocusPoint()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "nowPoint",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.getFocusPoint()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.getFocusPoint",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getFocusPoint",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getFocusPoint success, nowPoint: ${JSON.stringify(nowPoint)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getFocusPoint success, nowPoint: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(nowPoint)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(nowPoint)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "nowPoint",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "hasFlashFn(flashMode: camera.FlashMode): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "hasFlashFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "flashMode: camera.FlashMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "flashMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.FlashMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.FlashMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "FlashMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    // 检测是否有闪关灯\n    let hasFlash = session.hasFlash();\n    Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);\n    // 检测闪光灯模式是否支持\n    let isFlashModeSupported = session.isFlashModeSupported(flashMode);\n    Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);\n    // 设置闪光灯模式\n    session.setFlashMode(flashMode);\n    // 获取当前设备的闪光灯模式\n    let nowFlashMode = session.getFlashMode();\n    Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let hasFlash = session.hasFlash();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hasFlash = session.hasFlash()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hasFlash = session.hasFlash()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hasFlash",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.hasFlash()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.hasFlash",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hasFlash",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `hasFlash success, hasFlash: ${hasFlash}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`hasFlash success, hasFlash: ${hasFlash}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`hasFlash success, hasFlash: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "hasFlash}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "hasFlash",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFlashModeSupported = session.isFlashModeSupported(flashMode);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFlashModeSupported = session.isFlashModeSupported(flashMode)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFlashModeSupported = session.isFlashModeSupported(flashMode)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFlashModeSupported",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.isFlashModeSupported(flashMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.isFlashModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFlashModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "flashMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isFlashModeSupported success, isFlashModeSupported: ${isFlashModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isFlashModeSupported success, isFlashModeSupported: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFlashModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFlashModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setFlashMode(flashMode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setFlashMode(flashMode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setFlashMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setFlashMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "flashMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let nowFlashMode = session.getFlashMode();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let nowFlashMode = session.getFlashMode()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "nowFlashMode = session.getFlashMode()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "nowFlashMode",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getFlashMode()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getFlashMode",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getFlashMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `getFlashMode success, nowFlashMode: ${nowFlashMode}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getFlashMode success, nowFlashMode: ${nowFlashMode}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getFlashMode success, nowFlashMode: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "nowFlashMode}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "nowFlashMode",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getSession(): camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getSession",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.PortraitPhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PortraitPhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PortraitPhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeReference",
                  "label": "camera.CaptureSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CaptureSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CaptureSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TypeReference",
                  "label": "camera.NightPhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.NightPhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "NightPhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;\n    switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "SwitchStatement",
                  "label": "switch (this.cameraMode) {\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.cameraMode",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cameraMode",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "CaseBlock",
                      "label": "{\n      case CameraMode.PORTRAIT:\n        return this.portraitSession;\n      case CameraMode.NIGHT:\n        return this.nightSession;\n      case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;\n      case CameraMode.VIDEO:\n        return this.videoSession;\n      case CameraMode.NORMAL:\n        return this.photoSession;\n      default:\n        return this.captureSession;\n    }",
                      "children": [
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.PORTRAIT:\n        return this.portraitSession;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.PORTRAIT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "PORTRAIT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.portraitSession;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "portraitSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.NIGHT:\n        return this.nightSession;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.NIGHT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "NIGHT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.nightSession;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.nightSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "nightSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.MACRO_PHOTO:\n        return this.macroPhotoSession;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.MACRO_PHOTO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "MACRO_PHOTO",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.macroPhotoSession;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.macroPhotoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "macroPhotoSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.VIDEO:\n        return this.videoSession;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.VIDEO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.videoSession;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CameraMode.NORMAL:\n        return this.photoSession;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.NORMAL",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "NORMAL",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.photoSession;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "DefaultClause",
                          "label": "default:\n        return this.captureSession;",
                          "children": [
                            {
                              "type": "ReturnStatement",
                              "label": "return this.captureSession;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.captureSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "captureSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setZoomRatioFn(zoomRatio: number): void {\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setZoomRatioFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "zoomRatio: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "zoomRatio",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);\n    // 获取支持的变焦范围\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }\n\n    try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `setZoomRatioFn value ${zoomRatio}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`setZoomRatioFn value ${zoomRatio}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`setZoomRatioFn value ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatio}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "zoomRatio",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let zoomRatioRange = session.getZoomRatioRange();\n      Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let zoomRatioRange = session.getZoomRatioRange();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let zoomRatioRange = session.getZoomRatioRange()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "zoomRatioRange = session.getZoomRatioRange()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "session.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.getZoomRatioRange",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getZoomRatioRange",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getZoomRatioRange success: ${JSON.stringify(zoomRatioRange)}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getZoomRatioRange success: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "JSON.stringify(zoomRatioRange)}`",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "JSON.stringify(zoomRatioRange)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "JSON.stringify",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "JSON",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stringify",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "zoomRatioRange",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `getZoomRatioRange fail: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`getZoomRatioRange fail: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`getZoomRatioRange fail: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      session.setZoomRatio(zoomRatio);\n      Logger.info(TAG, 'setZoomRatioFn success');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "session.setZoomRatio(zoomRatio);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "session.setZoomRatio(zoomRatio)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.setZoomRatio",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setZoomRatio",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "zoomRatio",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'setZoomRatioFn success');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'setZoomRatioFn success')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'setZoomRatioFn success'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `setZoomRatioFn fail: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`setZoomRatioFn fail: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`setZoomRatioFn fail: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let nowZoomRatio = session.getZoomRatio();\n      Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let nowZoomRatio = session.getZoomRatio();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let nowZoomRatio = session.getZoomRatio()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "nowZoomRatio = session.getZoomRatio()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "nowZoomRatio",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "session.getZoomRatio()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.getZoomRatio",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getZoomRatio",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getZoomRatio nowZoomRatio: ${JSON.stringify(nowZoomRatio)}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getZoomRatio nowZoomRatio: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "JSON.stringify(nowZoomRatio)}`",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "JSON.stringify(nowZoomRatio)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "JSON.stringify",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "JSON",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stringify",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "nowZoomRatio",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `getZoomRatio fail: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`getZoomRatio fail: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`getZoomRatio fail: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isVideoStabilizationModeSupportedFn(videoStabilizationMode: camera.VideoStabilizationMode): boolean {\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isVideoStabilizationModeSupportedFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "videoStabilizationMode: camera.VideoStabilizationMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "videoStabilizationMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.VideoStabilizationMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoStabilizationMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoStabilizationMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 查询是否支持指定的视频防抖模式\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);\n    Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);\n    return isVideoStabilizationModeSupported;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Session",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Session",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Session",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isVideoStabilizationModeSupported: boolean = session.isVideoStabilizationModeSupported(videoStabilizationMode)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isVideoStabilizationModeSupported",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.isVideoStabilizationModeSupported(videoStabilizationMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.isVideoStabilizationModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isVideoStabilizationModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoStabilizationMode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isVideoStabilizationModeSupported success: ${JSON.stringify(isVideoStabilizationModeSupported)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isVideoStabilizationModeSupported success: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(isVideoStabilizationModeSupported)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(isVideoStabilizationModeSupported)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isVideoStabilizationModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return isVideoStabilizationModeSupported;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "isVideoStabilizationModeSupported",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setVideoStabilizationMode(videoStabilizationMode: camera.VideoStabilizationMode): void {\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setVideoStabilizationMode",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "videoStabilizationMode: camera.VideoStabilizationMode",
              "children": [
                {
                  "type": "Identifier",
                  "label": "videoStabilizationMode",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.VideoStabilizationMode",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoStabilizationMode",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoStabilizationMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 设置视频防抖\n    Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);\n    let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();\n    session.setVideoStabilizationMode(videoStabilizationMode);\n    let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `setVideoStabilizationMode: ${videoStabilizationMode}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`setVideoStabilizationMode: ${videoStabilizationMode}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`setVideoStabilizationMode: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "videoStabilizationMode}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "videoStabilizationMode",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.Session | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Session",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Session",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Session",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.setVideoStabilizationMode(videoStabilizationMode);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.setVideoStabilizationMode(videoStabilizationMode)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.setVideoStabilizationMode",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "setVideoStabilizationMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "videoStabilizationMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "nowVideoStabilizationMod: camera.VideoStabilizationMode = session.getActiveVideoStabilizationMode()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "nowVideoStabilizationMod",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.VideoStabilizationMode",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.VideoStabilizationMode",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "VideoStabilizationMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getActiveVideoStabilizationMode()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getActiveVideoStabilizationMode",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getActiveVideoStabilizationMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getActiveVideoStabilizationMode nowVideoStabilizationMod: ${nowVideoStabilizationMod}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getActiveVideoStabilizationMode nowVideoStabilizationMod: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "nowVideoStabilizationMod}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "nowVideoStabilizationMod",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isNightModeSupportedFn(): boolean {\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isNightModeSupportedFn",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;\n    Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);\n    return isSupportNightMode;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSupportNightMode: boolean = this.sceneModes.indexOf(CameraMode.NIGHT) >= 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupportNightMode",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "this.sceneModes.indexOf(CameraMode.NIGHT) >= 0",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.sceneModes.indexOf(CameraMode.NIGHT)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.sceneModes.indexOf",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.sceneModes",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "sceneModes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "indexOf",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.NIGHT",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NIGHT",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isSupportNightMode success: ${JSON.stringify(isSupportNightMode)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isSupportNightMode success: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(isSupportNightMode)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(isSupportNightMode)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSupportNightMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return isSupportNightMode;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "isSupportNightMode",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isPortraitModeSupportedFn(): boolean {\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isPortraitModeSupportedFn",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;\n    Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);\n    return isSupportPortraitMode;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSupportPortraitMode: boolean = this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupportPortraitMode",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "this.sceneModes.indexOf(CameraMode.PORTRAIT) >= 0",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.sceneModes.indexOf(CameraMode.PORTRAIT)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.sceneModes.indexOf",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.sceneModes",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "sceneModes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "indexOf",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.PORTRAIT",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PORTRAIT",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isSupportPortraitMode success: ${JSON.stringify(isSupportPortraitMode)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isSupportPortraitMode success: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(isSupportPortraitMode)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(isSupportPortraitMode)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSupportPortraitMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return isSupportPortraitMode;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "isSupportPortraitMode",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isMacroPhotoModeSupportedFn(): boolean {\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isMacroPhotoModeSupportedFn",
              "children": []
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;\n    Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);\n    return isSupportMacroMode;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSupportMacroMode: boolean = this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupportMacroMode",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "this.sceneModes.indexOf(CameraMode.MACRO_PHOTO) >= 0",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.sceneModes.indexOf(CameraMode.MACRO_PHOTO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.sceneModes.indexOf",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.sceneModes",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "sceneModes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "indexOf",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.MACRO_PHOTO",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MACRO_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "GreaterThanEqualsToken",
                                  "label": ">=",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isSupportMacroMode success: ${JSON.stringify(isSupportMacroMode)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isSupportMacroMode success: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(isSupportMacroMode)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(isSupportMacroMode)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSupportMacroMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return isSupportMacroMode;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "isSupportMacroMode",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isMirrorSupportedFn(): void {\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isMirrorSupportedFn",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let isSupported = this.photoOutPut.isMirrorSupported();\n    Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isSupported = this.photoOutPut.isMirrorSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isSupported = this.photoOutPut.isMirrorSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isSupported = this.photoOutPut.isMirrorSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupported",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.photoOutPut.isMirrorSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut.isMirrorSupported",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoOutPut",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoOutPut",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isMirrorSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isMirrorSupported success Bol: ${JSON.stringify(isSupported)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isMirrorSupported success Bol: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(isSupported)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(isSupported)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setTakePictureCallback(callback: (photoUri: string) => void): void {\n    this.handleTakePicture = callback;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setTakePictureCallback",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "callback: (photoUri: string) => void",
              "children": [
                {
                  "type": "Identifier",
                  "label": "callback",
                  "children": []
                },
                {
                  "type": "FunctionType",
                  "label": "(photoUri: string) => void",
                  "children": [
                    {
                      "type": "Parameter",
                      "label": "photoUri: string",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "photoUri",
                          "children": []
                        },
                        {
                          "type": "StringKeyword",
                          "label": "string",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "VoidKeyword",
                      "label": "void",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.handleTakePicture = callback;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.handleTakePicture = callback;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.handleTakePicture = callback",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.handleTakePicture",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "handleTakePicture",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "callback",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onChangeRotation(): number {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onChangeRotation",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cameraConfig",
                              "children": []
                            },
                            {
                              "type": "ParenthesizedExpression",
                              "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                              "children": [
                                {
                                  "type": "AsExpression",
                                  "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.globalContext.getObject('cameraConfig')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.globalContext.getObject",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.globalContext",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "globalContext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getObject",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'cameraConfig'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "CameraConfig",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "SwitchStatement",
                  "label": "switch (cameraConfig.photoOrientation) {\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "cameraConfig.photoOrientation",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "cameraConfig",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "photoOrientation",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "CaseBlock",
                      "label": "{\n      case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;\n      case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;\n      case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;\n      case PhotoOrientation.ORIENTATION_0:\n      default:\n        return this.photoRotationMap.rotation0;\n    }",
                      "children": [
                        {
                          "type": "CaseClause",
                          "label": "case PhotoOrientation.ORIENTATION_1:\n        return this.photoRotationMap.rotation90;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "PhotoOrientation.ORIENTATION_1",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "PhotoOrientation",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ORIENTATION_1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.photoRotationMap.rotation90;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoRotationMap.rotation90",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoRotationMap",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoRotationMap",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "rotation90",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case PhotoOrientation.ORIENTATION_2:\n        return this.photoRotationMap.rotation180;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "PhotoOrientation.ORIENTATION_2",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "PhotoOrientation",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ORIENTATION_2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.photoRotationMap.rotation180;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoRotationMap.rotation180",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoRotationMap",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoRotationMap",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "rotation180",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case PhotoOrientation.ORIENTATION_3:\n        return this.photoRotationMap.rotation270;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "PhotoOrientation.ORIENTATION_3",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "PhotoOrientation",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ORIENTATION_3",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return this.photoRotationMap.rotation270;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoRotationMap.rotation270",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoRotationMap",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoRotationMap",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "rotation270",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case PhotoOrientation.ORIENTATION_0:",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "PhotoOrientation.ORIENTATION_0",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "PhotoOrientation",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "ORIENTATION_0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "DefaultClause",
                          "label": "default:\n        return this.photoRotationMap.rotation0;",
                          "children": [
                            {
                              "type": "ReturnStatement",
                              "label": "return this.photoRotationMap.rotation0;",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoRotationMap.rotation0",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoRotationMap",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoRotationMap",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "rotation0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onChangeLocation(): {\n    latitude: number,\n    longitude: number,\n    altitude: number\n  } {\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onChangeLocation",
              "children": []
            },
            {
              "type": "TypeLiteral",
              "label": "{\n    latitude: number,\n    longitude: number,\n    altitude: number\n  }",
              "children": [
                {
                  "type": "PropertySignature",
                  "label": "latitude: number,",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "latitude",
                      "children": []
                    },
                    {
                      "type": "NumberKeyword",
                      "label": "number",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertySignature",
                  "label": "longitude: number,",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "longitude",
                      "children": []
                    },
                    {
                      "type": "NumberKeyword",
                      "label": "number",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "PropertySignature",
                  "label": "altitude: number",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "altitude",
                      "children": []
                    },
                    {
                      "type": "NumberKeyword",
                      "label": "number",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }\n    return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cameraConfig",
                              "children": []
                            },
                            {
                              "type": "ParenthesizedExpression",
                              "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                              "children": [
                                {
                                  "type": "AsExpression",
                                  "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.globalContext.getObject('cameraConfig')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.globalContext.getObject",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.globalContext",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "globalContext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getObject",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'cameraConfig'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "CameraConfig",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (cameraConfig.locationBol) {\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "cameraConfig.locationBol",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "cameraConfig",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "locationBol",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return {\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      };",
                          "children": [
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n        // 位置信息，经纬度\n        latitude: 12.9698,\n        longitude: 77.7500,\n        altitude: 1000\n      }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "latitude: 12.9698",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "latitude",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "12.9698",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "longitude: 77.7500",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "longitude",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "77.7500",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "altitude: 1000",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "altitude",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1000",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return {\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    };",
                  "children": [
                    {
                      "type": "ObjectLiteralExpression",
                      "label": "{\n      latitude: 0,\n      longitude: 0,\n      altitude: 0\n    }",
                      "children": [
                        {
                          "type": "PropertyAssignment",
                          "label": "latitude: 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "latitude",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "longitude: 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "longitude",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "PropertyAssignment",
                          "label": "altitude: 0",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "altitude",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async takePicture(mirrorBol?: boolean): Promise<void> {\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "takePicture",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "mirrorBol?: boolean",
              "children": [
                {
                  "type": "Identifier",
                  "label": "mirrorBol",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "BooleanKeyword",
                  "label": "boolean",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'takePicture start');\n    mirrorBol = mirrorBol || false;\n    this.isMirrorSupportedFn();\n    let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);\n    let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };\n    Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);\n    await this.photoOutPut.capture(photoSettings);\n    Logger.info(TAG, 'takePicture end');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'takePicture start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'takePicture start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'takePicture start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "mirrorBol = mirrorBol || false;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "mirrorBol = mirrorBol || false",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "mirrorBol",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "mirrorBol || false",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "mirrorBol",
                              "children": []
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.isMirrorSupportedFn();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.isMirrorSupportedFn()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.isMirrorSupportedFn",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "isMirrorSupportedFn",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cameraConfig = (this.globalContext.getObject('cameraConfig') as CameraConfig)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cameraConfig",
                              "children": []
                            },
                            {
                              "type": "ParenthesizedExpression",
                              "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                              "children": [
                                {
                                  "type": "AsExpression",
                                  "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.globalContext.getObject('cameraConfig')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.globalContext.getObject",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.globalContext",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "globalContext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getObject",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'cameraConfig'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "CameraConfig",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    };",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "photoSettings = {\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "photoSettings",
                              "children": []
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n      rotation: this.onChangeRotation(),\n      quality: cameraConfig.photoQuality,\n      location: this.onChangeLocation(),\n      mirror: cameraConfig.mirrorBol\n    }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "rotation: this.onChangeRotation()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "rotation",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.onChangeRotation()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.onChangeRotation",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "onChangeRotation",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "quality: cameraConfig.photoQuality",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "quality",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "cameraConfig.photoQuality",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cameraConfig",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoQuality",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "location: this.onChangeLocation()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "location",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.onChangeLocation()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.onChangeLocation",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "onChangeLocation",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "mirror: cameraConfig.mirrorBol",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "mirror",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "cameraConfig.mirrorBol",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cameraConfig",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "mirrorBol",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `takePicture photoSettings:${JSON.stringify(photoSettings)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`takePicture photoSettings:${JSON.stringify(photoSettings)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`takePicture photoSettings:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(photoSettings)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(photoSettings)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoSettings",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await this.photoOutPut.capture(photoSettings);",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.photoOutPut.capture(photoSettings)",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.photoOutPut.capture(photoSettings)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut.capture",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoOutPut",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "capture",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "photoSettings",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'takePicture end');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'takePicture end')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'takePicture end'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async prepareAVRecorder(): Promise<void> {\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "prepareAVRecorder",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    await this.initUrl();\n    let deviceType = AppStorage.get<string>('deviceType');\n    if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }\n    if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }\n    if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }\n    this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;\n    this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;\n    this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;\n    Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);\n    await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "await this.initUrl();",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.initUrl()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.initUrl()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.initUrl",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "initUrl",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let deviceType = AppStorage.get<string>('deviceType');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let deviceType = AppStorage.get<string>('deviceType')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "deviceType = AppStorage.get<string>('deviceType')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "deviceType",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.get<string>('deviceType')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'deviceType'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (deviceType === Constants.DEFAULT) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "deviceType === Constants.DEFAULT",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "deviceType",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Constants.DEFAULT",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Constants",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "DEFAULT",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig.videoSourceType",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoConfig",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoSourceType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "media.VideoSourceType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "media",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VideoSourceType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "VIDEO_SOURCE_TYPE_SURFACE_ES",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (deviceType === Constants.PHONE) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "deviceType === Constants.PHONE",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "deviceType",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Constants.PHONE",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Constants",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "PHONE",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n      this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;\n      this.videoConfig.rotation = this.photoRotationMap.rotation90;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig.videoSourceType",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoConfig",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoSourceType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "media.VideoSourceType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "media",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VideoSourceType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "VIDEO_SOURCE_TYPE_SURFACE_YUV",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoConfig.profile.videoCodec = media.CodecMimeType.VIDEO_AVC",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig.profile.videoCodec",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig.profile",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoConfig",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoConfig",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "profile",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoCodec",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.CodecMimeType.VIDEO_AVC",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "media.CodecMimeType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "media",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CodecMimeType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "VIDEO_AVC",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoConfig.rotation = this.photoRotationMap.rotation90;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoConfig.rotation = this.photoRotationMap.rotation90",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig.rotation",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoConfig",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "rotation",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoRotationMap.rotation90",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoRotationMap",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoRotationMap",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "rotation90",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (deviceType === Constants.TABLET) {\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "deviceType === Constants.TABLET",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "deviceType",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Constants.TABLET",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Constants",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "TABLET",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoConfig.videoSourceType = media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig.videoSourceType",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoConfig",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoSourceType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "media.VideoSourceType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "media",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VideoSourceType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "VIDEO_SOURCE_TYPE_SURFACE_YUV",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoConfig.profile.videoFrameWidth = this.videoProfileObj.size.width",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoConfig.profile.videoFrameWidth",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoConfig.profile",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoConfig",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "profile",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "videoFrameWidth",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoProfileObj.size.width",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoProfileObj.size",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoProfileObj",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "size",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "width",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoConfig.profile.videoFrameHeight = this.videoProfileObj.size.height",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoConfig.profile.videoFrameHeight",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoConfig.profile",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoConfig",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "profile",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "videoFrameHeight",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoProfileObj.size.height",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoProfileObj.size",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoProfileObj",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "size",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "height",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoConfig.profile.videoFrameRate = this.videoProfileObj.frameRateRange.max",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoConfig.profile.videoFrameRate",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoConfig.profile",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoConfig",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoConfig",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "profile",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "videoFrameRate",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoProfileObj.frameRateRange.max",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoProfileObj.frameRateRange",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoProfileObj",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "frameRateRange",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "max",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`prepareAVRecorder deviceType: ${deviceType}, videoSourceType: ${JSON.stringify(this.videoConfig)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`prepareAVRecorder deviceType: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "deviceType}, videoSourceType: ${",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deviceType",
                                  "children": []
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "}, videoSourceType: ${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(this.videoConfig)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(this.videoConfig)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    });",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    })",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.videoRecorder.prepare(this.videoConfig).catch((err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    })",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoRecorder.prepare(this.videoConfig).catch",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.videoRecorder.prepare(this.videoConfig)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoRecorder.prepare",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoRecorder",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoRecorder",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "prepare",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoConfig",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "catch",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "(err: { code?: number }): void => {\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    }",
                              "children": [
                                {
                                  "type": "Parameter",
                                  "label": "err: { code?: number }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeLiteral",
                                      "label": "{ code?: number }",
                                      "children": [
                                        {
                                          "type": "PropertySignature",
                                          "label": "code?: number",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "code",
                                              "children": []
                                            },
                                            {
                                              "type": "QuestionToken",
                                              "label": "?",
                                              "children": []
                                            },
                                            {
                                              "type": "NumberKeyword",
                                              "label": "number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n      Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);\n    }",
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `prepareAVRecorder prepare err: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`prepareAVRecorder prepare err: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`prepareAVRecorder prepare err: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async getAVRecorderSurfaceId(): Promise<string> {\n    return await this.videoRecorder.getInputSurface();\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getAVRecorderSurfaceId",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<string>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    return await this.videoRecorder.getInputSurface();\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return await this.videoRecorder.getInputSurface();",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.videoRecorder.getInputSurface()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.videoRecorder.getInputSurface()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoRecorder.getInputSurface",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoRecorder",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoRecorder",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getInputSurface",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async createAVRecorder(): Promise<void> {\n    this.videoRecorder = await media.createAVRecorder();\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "createAVRecorder",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.videoRecorder = await media.createAVRecorder();\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoRecorder = await media.createAVRecorder();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoRecorder = await media.createAVRecorder()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoRecorder",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "videoRecorder",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "AwaitExpression",
                          "label": "await media.createAVRecorder()",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "media.createAVRecorder()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "media.createAVRecorder",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "media",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "createAVRecorder",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async createVideoOutput(): Promise<void> {\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "createVideoOutput",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'createVideoOutput start');\n    await this.prepareAVRecorder();\n    let videoId = await this.getAVRecorderSurfaceId();\n    Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);\n    let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n    if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }\n    this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);\n    Logger.info(TAG, 'createVideoOutput end');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'createVideoOutput start');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'createVideoOutput start')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'createVideoOutput start'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await this.prepareAVRecorder();",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.prepareAVRecorder()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.prepareAVRecorder()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.prepareAVRecorder",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "prepareAVRecorder",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let videoId = await this.getAVRecorderSurfaceId();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let videoId = await this.getAVRecorderSurfaceId()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "videoId = await this.getAVRecorderSurfaceId()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoId",
                              "children": []
                            },
                            {
                              "type": "AwaitExpression",
                              "label": "await this.getAVRecorderSurfaceId()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.getAVRecorderSurfaceId()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.getAVRecorderSurfaceId",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getAVRecorderSurfaceId",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.debug(TAG, `createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.debug",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`createVideoOutput videoProfileObj: ${JSON.stringify(this.videoProfileObj)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`createVideoOutput videoProfileObj: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(this.videoProfileObj)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(this.videoProfileObj)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hdrVideoBol",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                              "children": [
                                {
                                  "type": "ParenthesizedExpression",
                                  "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                  "children": [
                                    {
                                      "type": "AsExpression",
                                      "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.globalContext.getObject('cameraConfig')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.globalContext.getObject",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "globalContext",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getObject",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'cameraConfig'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "CameraConfig",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "CameraConfig",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "hdrVideoBol",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.cameraMode === CameraMode.VIDEO && hdrVideoBol",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "this.cameraMode === CameraMode.VIDEO",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraMode",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.VIDEO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "AmpersandAmpersandToken",
                          "label": "&&",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "hdrVideoBol",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n       this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoProfileObj.format",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoProfileObj",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "format",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.CameraFormat",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CameraFormat",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CAMERA_FORMAT_YCRCB_P010",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoOutput = this.cameraManager.createVideoOutput(this.videoProfileObj, videoId)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoOutput",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "videoOutput",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "this.cameraManager.createVideoOutput(this.videoProfileObj, videoId)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraManager.createVideoOutput",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraManager",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraManager",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "createVideoOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoProfileObj",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoProfileObj",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "videoId",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'createVideoOutput end');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'createVideoOutput end')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'createVideoOutput end'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async pauseVideo(): Promise<void> {\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "pauseVideo",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    });",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    })",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch((err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    })",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }).catch",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.videoRecorder.pause().then((): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    })",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoRecorder.pause().then",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.videoRecorder.pause()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoRecorder.pause",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoRecorder",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoRecorder",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "pause",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "then",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ArrowFunction",
                                      "label": "(): void => {\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }",
                                      "children": [
                                        {
                                          "type": "VoidKeyword",
                                          "label": "void",
                                          "children": []
                                        },
                                        {
                                          "type": "EqualsGreaterThanToken",
                                          "label": "=>",
                                          "children": []
                                        },
                                        {
                                          "type": "Block",
                                          "label": "{\n      this.videoOutput.stop();\n      this.videoOutputStatus = false;\n      Logger.info(TAG, 'pauseVideo success');\n    }",
                                          "children": [
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "this.videoOutput.stop();",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "this.videoOutput.stop()",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.videoOutput.stop",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.videoOutput",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "videoOutput",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stop",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "this.videoOutputStatus = false;",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "this.videoOutputStatus = false",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.videoOutputStatus",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "videoOutputStatus",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "FirstAssignment",
                                                      "label": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FalseKeyword",
                                                      "label": "false",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "label": "Logger.info(TAG, 'pauseVideo success');",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "Logger.info(TAG, 'pauseVideo success')",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "Logger.info",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "info",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "TAG",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "'pauseVideo success'",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "catch",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrowFunction",
                              "label": "(err: BusinessError): void => {\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    }",
                              "children": [
                                {
                                  "type": "Parameter",
                                  "label": "err: BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "BusinessError",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                },
                                {
                                  "type": "EqualsGreaterThanToken",
                                  "label": "=>",
                                  "children": []
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n      Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);\n    }",
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `pauseVideo failed: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`pauseVideo failed: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`pauseVideo failed: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async resumeVideo(): Promise<void> {\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "resumeVideo",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.videoOutput.start().then((): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoOutput.start().then",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.videoOutput.start()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoOutput.start",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoOutput",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoOutput",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "start",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "then",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(): void => {\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    }",
                          "children": [
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      this.videoOutputStatus = true;\n      Logger.info(TAG, 'resumeVideo start');\n      this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.videoOutputStatus = true;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.videoOutputStatus = true",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoOutputStatus",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoOutputStatus",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "TrueKeyword",
                                          "label": "true",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, 'resumeVideo start');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, 'resumeVideo start')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'resumeVideo start'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch((err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }).catch",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.videoRecorder.resume().then((): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      })",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoRecorder.resume().then",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.videoRecorder.resume()",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.videoRecorder.resume",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "this.videoRecorder",
                                                              "children": [
                                                                {
                                                                  "type": "ThisKeyword",
                                                                  "label": "this",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "videoRecorder",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "resume",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "then",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ArrowFunction",
                                                  "label": "(): void => {\n        Logger.info(TAG, 'resumeVideo success');\n      }",
                                                  "children": [
                                                    {
                                                      "type": "VoidKeyword",
                                                      "label": "void",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "EqualsGreaterThanToken",
                                                      "label": "=>",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n        Logger.info(TAG, 'resumeVideo success');\n      }",
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.info(TAG, 'resumeVideo success');",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.info(TAG, 'resumeVideo success')",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.info",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "info",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'resumeVideo success'",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "catch",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(err: { code?: number }): void => {\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "err: { code?: number }",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeLiteral",
                                                  "label": "{ code?: number }",
                                                  "children": [
                                                    {
                                                      "type": "PropertySignature",
                                                      "label": "code?: number",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "NumberKeyword",
                                                          "label": "number",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "VoidKeyword",
                                              "label": "void",
                                              "children": []
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);\n      }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.error(TAG, `resumeVideo failed: ${JSON.stringify(err)}`)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.error",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "error",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`resumeVideo failed: ${JSON.stringify(err)}`",
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`resumeVideo failed: ${",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "JSON.stringify(err)}`",
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "JSON.stringify(err)",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "JSON.stringify",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "JSON",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "stringify",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "err",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "}`",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async initUrl(): Promise<void> {\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "initUrl",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let fileName = `${Date.now()}.mp4`;\n    this.fileAsset = await this.accessHelper.createAsset(fileName);\n    this.fd = await this.fileAsset.open('rw');\n    this.videoConfig.url = `fd://${this.fd.toString()}`;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let fileName = `${Date.now()}.mp4`;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let fileName = `${Date.now()}.mp4`",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "fileName = `${Date.now()}.mp4`",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "fileName",
                              "children": []
                            },
                            {
                              "type": "TemplateExpression",
                              "label": "`${Date.now()}.mp4`",
                              "children": [
                                {
                                  "type": "TemplateHead",
                                  "label": "`${",
                                  "children": []
                                },
                                {
                                  "type": "TemplateSpan",
                                  "label": "Date.now()}.mp4`",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Date.now()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Date.now",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Date",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "now",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "LastTemplateToken",
                                      "label": "}.mp4`",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.fileAsset = await this.accessHelper.createAsset(fileName);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.fileAsset = await this.accessHelper.createAsset(fileName)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.fileAsset",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "fileAsset",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "AwaitExpression",
                          "label": "await this.accessHelper.createAsset(fileName)",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.accessHelper.createAsset(fileName)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.accessHelper.createAsset",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.accessHelper",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "accessHelper",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "createAsset",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "fileName",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.fd = await this.fileAsset.open('rw');",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.fd = await this.fileAsset.open('rw')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.fd",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "fd",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "AwaitExpression",
                          "label": "await this.fileAsset.open('rw')",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.fileAsset.open('rw')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.fileAsset.open",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.fileAsset",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "fileAsset",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "open",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'rw'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoConfig.url = `fd://${this.fd.toString()}`;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.videoConfig.url = `fd://${this.fd.toString()}`",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoConfig.url",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoConfig",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoConfig",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "url",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`fd://${this.fd.toString()}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`fd://${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "this.fd.toString()}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.fd.toString()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.fd.toString",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.fd",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "fd",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "toString",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async startVideo(): Promise<void> {\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "startVideo",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG, 'startVideo begin');\n      await this.videoOutput.start();\n      this.videoOutputStatus = true;\n      if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }\n      await this.videoRecorder.start();\n      this.isFirstRecord = false;\n      AppStorage.setOrCreate<boolean>('isRecorder', true);\n      Logger.info(TAG, 'startVideo end');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'startVideo begin');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'startVideo begin')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'startVideo begin'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.videoOutput.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.videoOutput.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.videoOutput.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoOutput.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoOutput",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoOutput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoOutputStatus = true;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoOutputStatus = true",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoOutputStatus",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoOutputStatus",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "TrueKeyword",
                                  "label": "true",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (!this.isFirstRecord) {\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }",
                          "children": [
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "!this.isFirstRecord",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFirstRecord",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFirstRecord",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        await this.prepareAVRecorder();\n        await this.getAVRecorderSurfaceId();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.prepareAVRecorder();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.prepareAVRecorder()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.prepareAVRecorder()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.prepareAVRecorder",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "prepareAVRecorder",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.getAVRecorderSurfaceId();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.getAVRecorderSurfaceId()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.getAVRecorderSurfaceId()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.getAVRecorderSurfaceId",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getAVRecorderSurfaceId",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.videoRecorder.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.videoRecorder.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.videoRecorder.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoRecorder.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoRecorder",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoRecorder",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFirstRecord = false;",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.isFirstRecord = false",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFirstRecord",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFirstRecord",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate<boolean>('isRecorder', true);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate<boolean>('isRecorder', true)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BooleanKeyword",
                                  "label": "boolean",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'isRecorder'",
                                  "children": []
                                },
                                {
                                  "type": "TrueKeyword",
                                  "label": "true",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'startVideo end');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'startVideo end')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'startVideo end'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `startVideo err: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`startVideo err: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`startVideo err: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async releaseVideoRecorder(): Promise<void> {\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "releaseVideoRecorder",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.videoRecorder) {\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.videoRecorder",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "videoRecorder",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.videoRecorder.release();\n        this.videoOutputStatus = false;\n        AppStorage.setOrCreate<boolean>('isRecorder', false);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.videoRecorder.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.videoRecorder.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.videoRecorder.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoRecorder.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoRecorder",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoRecorder",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.videoOutputStatus = false;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.videoOutputStatus = false",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoOutputStatus",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoOutputStatus",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "FalseKeyword",
                                          "label": "false",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "AppStorage.setOrCreate<boolean>('isRecorder', false);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.setOrCreate<boolean>('isRecorder', false)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.setOrCreate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setOrCreate",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "BooleanKeyword",
                                          "label": "boolean",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'isRecorder'",
                                          "children": []
                                        },
                                        {
                                          "type": "FalseKeyword",
                                          "label": "false",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err))",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "BinaryExpression",
                                              "label": "'stopVideo err: ' + JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'stopVideo err: '",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PlusToken",
                                                  "label": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "JSON.stringify(err)",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "JSON.stringify",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "JSON",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stringify",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "err",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async stopVideo(): Promise<photoAccessHelper.PhotoAsset> {\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "stopVideo",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<photoAccessHelper.PhotoAsset>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "photoAccessHelper.PhotoAsset",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "photoAccessHelper.PhotoAsset",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "photoAccessHelper",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PhotoAsset",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');\n    if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }\n    try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isRecorder: boolean = AppStorage.get<boolean>('isRecorder');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isRecorder: boolean = AppStorage.get<boolean>('isRecorder')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isRecorder: boolean = AppStorage.get<boolean>('isRecorder')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isRecorder",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.get<boolean>('isRecorder')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.get",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BooleanKeyword",
                                  "label": "boolean",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'isRecorder'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!isRecorder) {\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!isRecorder",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "isRecorder",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG, 'not in recording');\n      return undefined;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'not in recording');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'not in recording')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'not in recording'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return undefined;",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG, 'stopVideo start');\n      AppStorage.setOrCreate<boolean>('isRecorder', false);\n      if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }\n      if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }\n      if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }\n      return undefined;\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'stopVideo start');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'stopVideo start')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'stopVideo start'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate<boolean>('isRecorder', false);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate<boolean>('isRecorder', false)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BooleanKeyword",
                                  "label": "boolean",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'isRecorder'",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.videoRecorder) {\n        await this.videoRecorder.stop();\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoRecorder",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoRecorder",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        await this.videoRecorder.stop();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.videoRecorder.stop();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.videoRecorder.stop()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.videoRecorder.stop()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoRecorder.stop",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoRecorder",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoRecorder",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stop",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.videoOutputStatus) {\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoOutputStatus",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoOutputStatus",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        await this.videoOutput.stop();\n        this.videoOutputStatus = false;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.videoOutput.stop();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.videoOutput.stop()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.videoOutput.stop()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoOutput.stop",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoOutput",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoOutput",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stop",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.videoOutputStatus = false;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.videoOutputStatus = false",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoOutputStatus",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoOutputStatus",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "FalseKeyword",
                                          "label": "false",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.fileAsset) {\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.fileAsset",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "fileAsset",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        await this.fileAsset.close(this.fd);\n        return this.fileAsset;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.fileAsset.close(this.fd);",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.fileAsset.close(this.fd)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.fileAsset.close(this.fd)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.fileAsset.close",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.fileAsset",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "fileAsset",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "close",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.fd",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "fd",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ReturnStatement",
                                  "label": "return this.fileAsset;",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.fileAsset",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "fileAsset",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return undefined;",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));\n      return undefined;\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err));",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, 'stopVideo err: ' + JSON.stringify(err))",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "'stopVideo err: ' + JSON.stringify(err)",
                                      "children": [
                                        {
                                          "type": "StringLiteral",
                                          "label": "'stopVideo err: '",
                                          "children": []
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "JSON.stringify(err)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "JSON.stringify",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "JSON",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stringify",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "err",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return undefined;",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async releaseCamera(): Promise<void> {\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "releaseCamera",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'releaseCamera is called');\n    await this.stopVideo();\n    await this.releaseVideoRecorder();\n    if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }\n    if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }\n    if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }\n    if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }\n    if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }\n    if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }\n    if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }\n    if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }\n    Logger.info(TAG, 'releaseCamera success');\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'releaseCamera is called');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'releaseCamera is called')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'releaseCamera is called'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await this.stopVideo();",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.stopVideo()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.stopVideo()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.stopVideo",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "stopVideo",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "await this.releaseVideoRecorder();",
                  "children": [
                    {
                      "type": "AwaitExpression",
                      "label": "await this.releaseVideoRecorder()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "this.releaseVideoRecorder()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.releaseVideoRecorder",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "releaseVideoRecorder",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.previewOutput) {\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.previewOutput",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "previewOutput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }\n\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.previewOutput = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.previewOutput.stop();\n        await this.previewOutput.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.previewOutput.stop();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.previewOutput.stop()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.previewOutput.stop()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.previewOutput.stop",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.previewOutput",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "previewOutput",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stop",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.previewOutput.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.previewOutput.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.previewOutput.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.previewOutput.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.previewOutput",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "previewOutput",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `previewOutput release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`previewOutput release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`previewOutput release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.previewOutput = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.previewOutput = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.previewOutput = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.previewOutput",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "previewOutput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.photoOutPut) {\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.photoOutPut",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "photoOutPut",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.photoOutPut.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoOutPut = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.photoOutPut.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.photoOutPut.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.photoOutPut.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.photoOutPut.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.photoOutPut.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.photoOutPut",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "photoOutPut",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `photoOutPut release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`photoOutPut release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`photoOutPut release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.photoOutPut = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.photoOutPut = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.photoOutPut = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoOutPut",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoOutPut",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.videoOutput) {\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.videoOutput",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "videoOutput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.videoOutput.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoOutput = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.videoOutput.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.videoOutput.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.videoOutput.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.videoOutput.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoOutput.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoOutput",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoOutput",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `videoOutput release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`videoOutput release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`videoOutput release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.videoOutput = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.videoOutput = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.videoOutput = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoOutput",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoOutput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.photoSession) {\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.photoSession",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "photoSession",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.photoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.photoSession = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.photoSession.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.photoSession.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.photoSession.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.photoSession.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.photoSession.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.photoSession",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "photoSession",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `photoSession release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`photoSession release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`photoSession release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.photoSession = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.photoSession = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.photoSession = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.videoSession) {\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.videoSession",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "videoSession",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.videoSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.videoSession = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.videoSession.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.videoSession.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.videoSession.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.videoSession.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.videoSession.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoSession",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoSession",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `videoSession release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`videoSession release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`videoSession release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.videoSession = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.videoSession = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.videoSession = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.portraitSession) {\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.portraitSession",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "portraitSession",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.portraitSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.portraitSession = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.portraitSession.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.portraitSession.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.portraitSession.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.portraitSession.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.portraitSession.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.portraitSession",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "portraitSession",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `portraitSession release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`portraitSession release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`portraitSession release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.portraitSession = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.portraitSession = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.portraitSession = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.portraitSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "portraitSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.nightSession) {\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.nightSession",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "nightSession",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.nightSession.release();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.nightSession = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.nightSession.release();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.nightSession.release();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.nightSession.release()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.nightSession.release()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.nightSession.release",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.nightSession",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "nightSession",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "release",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `nightSession release fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`nightSession release fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`nightSession release fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.nightSession = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.nightSession = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.nightSession = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.nightSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "nightSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.cameraInput) {\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.cameraInput",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cameraInput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }\n    }",
                      "children": [
                        {
                          "type": "TryStatement",
                          "label": "try {\n        await this.cameraInput.close();\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      } finally {\n        this.cameraInput = null;\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        await this.cameraInput.close();\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "await this.cameraInput.close();",
                                  "children": [
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await this.cameraInput.close()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "this.cameraInput.close()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameraInput.close",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.cameraInput",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "cameraInput",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "close",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `cameraInput close fail: error: ${JSON.stringify(err)}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`cameraInput close fail: error: ${JSON.stringify(err)}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`cameraInput close fail: error: ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "JSON.stringify(err)}`",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "JSON.stringify(err)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "JSON.stringify",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "JSON",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "stringify",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.cameraInput = null;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.cameraInput = null;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.cameraInput = null",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraInput",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraInput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "NullKeyword",
                                          "label": "null",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'releaseCamera success');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'releaseCamera success')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'releaseCamera success'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getCameraManagerFn(): void {\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getCameraManagerFn",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.cameraManager) {\n      return;\n    }\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.cameraManager) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.cameraManager",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "cameraManager",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext())",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraManager",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraManager",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "camera.getCameraManager(GlobalContext.get().getCameraSettingContext())",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.getCameraManager",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getCameraManager",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "GlobalContext.get().getCameraSettingContext()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "GlobalContext.get().getCameraSettingContext",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "GlobalContext.get()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "GlobalContext.get",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "GlobalContext",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getCameraSettingContext",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getCameraManager success: ${this.cameraManager}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getCameraManager success: ${this.cameraManager}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getCameraManager success: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.cameraManager}`",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `getCameraManager failed: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`getCameraManager failed: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`getCameraManager failed: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getModeManagerFn(): void {\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getModeManagerFn",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());\n      Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext());",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraManager = camera.getCameraManager(GlobalContext.get().getCameraSettingContext())",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraManager",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraManager",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "camera.getCameraManager(GlobalContext.get().getCameraSettingContext())",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.getCameraManager",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getCameraManager",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "GlobalContext.get().getCameraSettingContext()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "GlobalContext.get().getCameraSettingContext",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "GlobalContext.get()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "GlobalContext.get",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "GlobalContext",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getCameraSettingContext",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getModeManagerFn success: ${this.cameraManager}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getModeManagerFn success: ${this.cameraManager}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getModeManagerFn success: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.cameraManager}`",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `getModeManagerFn failed: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`getModeManagerFn failed: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`getModeManagerFn failed: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getSupportedCamerasFn(): void {\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getSupportedCamerasFn",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.cameras = this.cameraManager.getSupportedCameras();\n      Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.cameras = this.cameraManager.getSupportedCameras();",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameras = this.cameraManager.getSupportedCameras()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameras",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameras",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.getSupportedCameras()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.getSupportedCameras",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getSupportedCameras",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getSupportedCameras success: ${this.cameras}, length: ${this.cameras.length}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getSupportedCameras success: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.cameras}, length: ${",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameras",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameras",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TemplateMiddle",
                                          "label": "}, length: ${",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.cameras.length}`",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameras.length",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameras",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameras",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "length",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `getSupportedCameras failed: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`getSupportedCameras failed: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`getSupportedCameras failed: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getSupportedModeFn(cameraIndex: number): void {\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getSupportedModeFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "cameraIndex: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraIndex",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);\n      Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex]);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.sceneModes = this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.sceneModes",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "sceneModes",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.getSupportedSceneModes(this.cameras[cameraIndex])",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.getSupportedSceneModes",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getSupportedSceneModes",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ElementAccessExpression",
                                      "label": "this.cameras[cameraIndex]",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameras",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameras",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraIndex",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getSupportedModeFn success: ${this.sceneModes}, length: ${this.sceneModes.length}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getSupportedModeFn success: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.sceneModes}, length: ${",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.sceneModes",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "sceneModes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TemplateMiddle",
                                          "label": "}, length: ${",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.sceneModes.length}`",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.sceneModes.length",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.sceneModes",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "sceneModes",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "length",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `getSupportedModeFn failed: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`getSupportedModeFn failed: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`getSupportedModeFn failed: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async getSupportedOutputCapabilityFn(cameraDeviceIndex: number): Promise<void> {\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getSupportedOutputCapabilityFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "cameraDeviceIndex: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraDeviceIndex",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex]);",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.cameraOutputCapability = this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex])",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cameraOutputCapability",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cameraOutputCapability",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "this.cameraManager.getSupportedOutputCapability(this.cameras[cameraDeviceIndex])",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraManager.getSupportedOutputCapability",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraManager",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraManager",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getSupportedOutputCapability",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "this.cameras[cameraDeviceIndex]",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameras",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameras",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraDeviceIndex",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "createPreviewOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "createPreviewOutputFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "photoProfileObj: camera.Profile",
              "children": [
                {
                  "type": "Identifier",
                  "label": "photoProfileObj",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.Profile",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.Profile",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Profile",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "surfaceId: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "surfaceId",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }\n      this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);\n      Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "hdrVideoBol",
                                      "children": []
                                    },
                                    {
                                      "type": "BooleanKeyword",
                                      "label": "boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                                      "children": [
                                        {
                                          "type": "ParenthesizedExpression",
                                          "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                          "children": [
                                            {
                                              "type": "AsExpression",
                                              "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "this.globalContext.getObject('cameraConfig')",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext.getObject",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.globalContext",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "globalContext",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "getObject",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "'cameraConfig'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "CameraConfig",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "CameraConfig",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "hdrVideoBol",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.cameraMode === CameraMode.VIDEO && hdrVideoBol) {\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraMode === CameraMode.VIDEO && hdrVideoBol",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.cameraMode === CameraMode.VIDEO",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraMode",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsEqualsToken",
                                      "label": "===",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "CameraMode.VIDEO",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "CameraMode",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VIDEO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "AmpersandAmpersandToken",
                                  "label": "&&",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "hdrVideoBol",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010;",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "photoProfileObj.format = camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoProfileObj.format",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoProfileObj",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "format",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstAssignment",
                                          "label": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.CameraFormat",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "CameraFormat",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "CAMERA_FORMAT_YCRCB_P010",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.previewOutput = this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createPreviewOutput(photoProfileObj, surfaceId)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createPreviewOutput",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createPreviewOutput",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "surfaceId",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `createPreviewOutput success: ${this.previewOutput}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`createPreviewOutput success: ${this.previewOutput}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`createPreviewOutput success: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "this.previewOutput}`",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.previewOutput",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "previewOutput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `createPreviewOutput failed: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`createPreviewOutput failed: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`createPreviewOutput failed: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "createPhotoOutputFn(photoProfileObj: camera.Profile, surfaceId: string): void {\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "createPhotoOutputFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "photoProfileObj: camera.Profile",
              "children": [
                {
                  "type": "Identifier",
                  "label": "photoProfileObj",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.Profile",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.Profile",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "Profile",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "surfaceId: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "surfaceId",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);\n    switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`createPhotoOutputFn photoProfiles: ${JSON.stringify(photoProfileObj)} ,captureMode: ${this.captureMode}, surfaceId: ${surfaceId}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`createPhotoOutputFn photoProfiles: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(photoProfileObj)} ,captureMode: ${",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(photoProfileObj)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfileObj",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "} ,captureMode: ${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "this.captureMode}, surfaceId: ${",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.captureMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "captureMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "}, surfaceId: ${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "surfaceId}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "surfaceId",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "SwitchStatement",
                  "label": "switch (this.captureMode) {\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.captureMode",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "captureMode",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "CaseBlock",
                      "label": "{\n      case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;\n      case CaptureMode.NEW_CAPTURE:\n      case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;\n    }",
                      "children": [
                        {
                          "type": "CaseClause",
                          "label": "case CaptureMode.OLD_CAPTURE:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);\n        break;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CaptureMode.OLD_CAPTURE",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CaptureMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "OLD_CAPTURE",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId);",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoOutPut",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoOutPut",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.cameraManager.createPhotoOutput(photoProfileObj, surfaceId)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager.createPhotoOutput",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameraManager",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameraManager",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "createPhotoOutput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoProfileObj",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "surfaceId",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BreakStatement",
                              "label": "break;",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CaptureMode.NEW_CAPTURE:",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CaptureMode.NEW_CAPTURE",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CaptureMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "NEW_CAPTURE",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "CaseClause",
                          "label": "case CaptureMode.NEW_DEFERRED_PHOTO:\n        this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);\n        if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }\n        break;",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CaptureMode.NEW_DEFERRED_PHOTO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CaptureMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "NEW_DEFERRED_PHOTO",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj);",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.photoOutPut = this.cameraManager.createPhotoOutput(photoProfileObj)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoOutPut",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoOutPut",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "FirstAssignment",
                                      "label": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.cameraManager.createPhotoOutput(photoProfileObj)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager.createPhotoOutput",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.cameraManager",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "cameraManager",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "createPhotoOutput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoProfileObj",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "IfStatement",
                              "label": "if (this.photoOutPut == null) {\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.photoOutPut == null",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoOutPut",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoOutPut",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsEqualsToken",
                                      "label": "==",
                                      "children": []
                                    },
                                    {
                                      "type": "NullKeyword",
                                      "label": "null",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n          Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');\n        }",
                                  "children": [
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed');",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, 'createPhotoOutputFn createPhotoOutput failed')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'createPhotoOutputFn createPhotoOutput failed'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BreakStatement",
                              "label": "break;",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "createCameraInputFn(cameraDevice: camera.CameraDevice): void {\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "createCameraInputFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "cameraDevice: camera.CameraDevice",
              "children": [
                {
                  "type": "Identifier",
                  "label": "cameraDevice",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.CameraDevice",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CameraDevice",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CameraDevice",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'createCameraInputFn is called.');\n    try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'createCameraInputFn is called.');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'createCameraInputFn is called.')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'createCameraInputFn is called.'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    } catch (err) {\n\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.cameraInput = this.cameraManager.createCameraInput(cameraDevice);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraInput = this.cameraManager.createCameraInput(cameraDevice)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraInput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createCameraInput(cameraDevice)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createCameraInput",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createCameraInput",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraDevice",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n\n    }",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async cameraInputOpenFn(): Promise<void> {\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "cameraInputOpenFn",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      await this.cameraInput.open();\n      Logger.info(TAG, 'cameraInput open success');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.cameraInput.open();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.cameraInput.open()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraInput.open()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraInput.open",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraInput",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraInput",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "open",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'cameraInput open success');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'cameraInput open success')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'cameraInput open success'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `createCameraInput failed : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`createCameraInput failed : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`createCameraInput failed : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "configMoonCaptureBoost(): void {\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "configMoonCaptureBoost",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n      if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.isMoonCaptureBoostSupported =\n        this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isMoonCaptureBoostSupported",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isMoonCaptureBoostSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.photoSession.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession.isSceneFeatureSupported",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "isSceneFeatureSupported",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneFeatureType.MOON_CAPTURE_BOOST",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneFeatureType",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneFeatureType",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MOON_CAPTURE_BOOST",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.isMoonCaptureBoostSupported) {\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.isMoonCaptureBoostSupported",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "isMoonCaptureBoostSupported",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.photoSession.on('featureDetectionStatus', camera.SceneFeatureType.MOON_CAPTURE_BOOST,\n          (error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession.on",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.photoSession",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoSession",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "on",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'featureDetectionStatus'",
                                          "children": []
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneFeatureType.MOON_CAPTURE_BOOST",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.SceneFeatureType",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "SceneFeatureType",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "MOON_CAPTURE_BOOST",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(error, statusObject) => {\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Parameter",
                                              "label": "statusObject",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "statusObject",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n            Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);\n            if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }\n          }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.info(TAG,\n              `on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`on featureDetectionStatus featureType:${statusObject.featureType} detected:${statusObject.detected}`",
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`on featureDetectionStatus featureType:${",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "statusObject.featureType} detected:${",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "statusObject.featureType",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "statusObject",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "featureType",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "TemplateMiddle",
                                                                  "label": "} detected:${",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "statusObject.detected}`",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "statusObject.detected",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "statusObject",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "detected",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "}`",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if (statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST) {\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "statusObject.featureType === camera.SceneFeatureType.MOON_CAPTURE_BOOST",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "statusObject.featureType",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "statusObject",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "featureType",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "EqualsEqualsEqualsToken",
                                                          "label": "===",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "camera.SceneFeatureType.MOON_CAPTURE_BOOST",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "camera.SceneFeatureType",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "camera",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "SceneFeatureType",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "MOON_CAPTURE_BOOST",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n              let status = statusObject.detected;\n              Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);\n              AppStorage.setOrCreate('moonCaptureComponentIsShow', status);\n              if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }\n            }",
                                                      "children": [
                                                        {
                                                          "type": "FirstStatement",
                                                          "label": "let status = statusObject.detected;",
                                                          "children": [
                                                            {
                                                              "type": "VariableDeclarationList",
                                                              "label": "let status = statusObject.detected",
                                                              "children": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "label": "status = statusObject.detected",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "status",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "statusObject.detected",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "statusObject",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "detected",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`);",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.info(TAG, `on moonCaptureBoostStatus change:${status}`)",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.info",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "info",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "TemplateExpression",
                                                                  "label": "`on moonCaptureBoostStatus change:${status}`",
                                                                  "children": [
                                                                    {
                                                                      "type": "TemplateHead",
                                                                      "label": "`on moonCaptureBoostStatus change:${",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "TemplateSpan",
                                                                      "label": "status}`",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "status",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "LastTemplateToken",
                                                                          "label": "}`",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', status);",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', status)",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "AppStorage.setOrCreate",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "AppStorage",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "setOrCreate",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'moonCaptureComponentIsShow'",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "status",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "label": "if (!status) {\n                this.setMoonCaptureBoostEnable(status);\n              }",
                                                          "children": [
                                                            {
                                                              "type": "PrefixUnaryExpression",
                                                              "label": "!status",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "status",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Block",
                                                              "label": "{\n                this.setMoonCaptureBoostEnable(status);\n              }",
                                                              "children": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "label": "this.setMoonCaptureBoostEnable(status);",
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "this.setMoonCaptureBoostEnable(status)",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "this.setMoonCaptureBoostEnable",
                                                                          "children": [
                                                                            {
                                                                              "type": "ThisKeyword",
                                                                              "label": "this",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "setMoonCaptureBoostEnable",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "status",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `isMoonCaptureBoostSupported fail: error code ${err.code}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`isMoonCaptureBoostSupported fail: error code ${err.code}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`isMoonCaptureBoostSupported fail: error code ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "err.code}`",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "err.code",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "code",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async photoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "photoSessionFlowFn",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG, 'photoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.photoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.photoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.photoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.photoSession.addOutput(this.photoOutPut);\n\n      // hdr 拍照\n      let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;\n      Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);\n      if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }\n\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.photoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      this.configMoonCaptureBoost();\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n      // 开始会话工作\n      await this.photoSession.start();\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'photoSessionFlowFn success');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'photoSessionFlowFn start');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'photoSessionFlowFn start')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'photoSessionFlowFn start'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.photoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createSession",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneMode.NORMAL_PHOTO",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneMode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NORMAL_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onFocusStateChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onFocusStateChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onFocusStateChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onFocusStateChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCaptureSessionErrorChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCaptureSessionErrorChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCaptureSessionErrorChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCaptureSessionErrorChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.photoSession.beginConfig();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.photoSession.beginConfig()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession.beginConfig",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "beginConfig",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.photoSession.addInput(this.cameraInput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.photoSession.addInput(this.cameraInput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession.addInput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addInput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraInput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.photoSession.addOutput(this.previewOutput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.photoSession.addOutput(this.previewOutput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.photoSession.addOutput(this.photoOutPut);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.photoSession.addOutput(this.photoOutPut)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoOutPut",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "hdrPhotoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "hdrPhotoBol",
                                      "children": []
                                    },
                                    {
                                      "type": "BooleanKeyword",
                                      "label": "boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).hdrPhotoBol",
                                      "children": [
                                        {
                                          "type": "ParenthesizedExpression",
                                          "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                          "children": [
                                            {
                                              "type": "AsExpression",
                                              "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "this.globalContext.getObject('cameraConfig')",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext.getObject",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.globalContext",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "globalContext",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "getObject",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "'cameraConfig'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "CameraConfig",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "CameraConfig",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "hdrPhotoBol",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'hdrPhotoBol:' + hdrPhotoBol)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'hdrPhotoBol:' + hdrPhotoBol",
                                  "children": [
                                    {
                                      "type": "StringLiteral",
                                      "label": "'hdrPhotoBol:'",
                                      "children": []
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hdrPhotoBol",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (hdrPhotoBol) {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      } else {\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hdrPhotoBol",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.DISPLAY_P3)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.setColorSpace",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setColorSpace",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "colorSpaceManager.ColorSpace.DISPLAY_P3",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "colorSpaceManager.ColorSpace",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorSpaceManager",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "ColorSpace",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "DISPLAY_P3",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.setColorSpace(this.photoSession, colorSpaceManager.ColorSpace.SRGB)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.setColorSpace",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setColorSpace",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "colorSpaceManager.ColorSpace.SRGB",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "colorSpaceManager.ColorSpace",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorSpaceManager",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "ColorSpace",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SRGB",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.captureMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "captureMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CaptureMode.NEW_DEFERRED_PHOTO",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CaptureMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "NEW_DEFERRED_PHOTO",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.isDeferredImageDeliverySupported",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "isDeferredImageDeliverySupported",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.DeferredDeliveryImageType.PHOTO",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.DeferredDeliveryImageType",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "DeferredDeliveryImageType",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "PHOTO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.deferImageDeliveryFor",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "deferImageDeliveryFor",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isDeferredImageDeliveryEnabled",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isDeferredImageDeliveryEnabled",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.photoSession.commitConfig();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.photoSession.commitConfig()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.photoSession.commitConfig()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession.commitConfig",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "commitConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let range: Array<number> = this.photoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let range: Array<number> = this.photoSession.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let range: Array<number> = this.photoSession.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "range: Array<number> = this.photoSession.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "range",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.photoSession.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.photoSession.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.photoSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "photoSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `getZoomRatioRange:${range}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`getZoomRatioRange:${range}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "range}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "range",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "range",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMin'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMax', range[1])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMax'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomRatioRange fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomRatioRange fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "zoomPointInfo: Array<ZoomPointInfo> = this.photoSession.getZoomPointInfos()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "zoomPointInfo",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<ZoomPointInfo>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "ZoomPointInfo",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "ZoomPointInfo",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.photoSession.getZoomPointInfos()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.photoSession.getZoomPointInfos",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.photoSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "photoSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomPointInfos",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomPointInfo",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateExpression",
                                                  "label": "`getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`",
                                                  "children": [
                                                    {
                                                      "type": "TemplateHead",
                                                      "label": "`getZoomPointInfos zoomRatio:${",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "zoomPointInfo[0].zoomRatio} equivalentFocalLength:${",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "zoomPointInfo[0].zoomRatio",
                                                          "children": [
                                                            {
                                                              "type": "ElementAccessExpression",
                                                              "label": "zoomPointInfo[0]",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "zoomPointInfo",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "zoomRatio",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "TemplateMiddle",
                                                          "label": "} equivalentFocalLength:${",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "zoomPointInfo[0].equivalentFocalLength}`",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "zoomPointInfo[0].equivalentFocalLength",
                                                          "children": [
                                                            {
                                                              "type": "ElementAccessExpression",
                                                              "label": "zoomPointInfo[0]",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "zoomPointInfo",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "equivalentFocalLength",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LastTemplateToken",
                                                          "label": "}`",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'equivalentFocalLength'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "zoomPointInfo[0].equivalentFocalLength",
                                                  "children": [
                                                    {
                                                      "type": "ElementAccessExpression",
                                                      "label": "zoomPointInfo[0]",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "zoomPointInfo",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "FirstLiteralToken",
                                                          "label": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "equivalentFocalLength",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomPointInfos fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomPointInfos fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.configMoonCaptureBoost();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.configMoonCaptureBoost()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.configMoonCaptureBoost",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "configMoonCaptureBoost",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'colorEffectComponentIsHidden'",
                                  "children": []
                                },
                                {
                                  "type": "ConditionalExpression",
                                  "label": "this.getSupportedColorEffects().length > 0 ? false : true",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.getSupportedColorEffects().length > 0",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.getSupportedColorEffects().length",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.getSupportedColorEffects()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getSupportedColorEffects",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getSupportedColorEffects",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "length",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "GreaterThanToken",
                                          "label": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "QuestionToken",
                                      "label": "?",
                                      "children": []
                                    },
                                    {
                                      "type": "FalseKeyword",
                                      "label": "false",
                                      "children": []
                                    },
                                    {
                                      "type": "ColonToken",
                                      "label": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "TrueKeyword",
                                      "label": "true",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'deferredPhotoComponentIsHidden'",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', false);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', false)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'moonCaptureComponentIsShow'",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.colorEffect",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "colorEffect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.setColorEffect(this.colorEffect);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.setColorEffect(this.colorEffect);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.setColorEffect(this.colorEffect)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.setColorEffect",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setColorEffect",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.colorEffect",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "colorEffect",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.photoSession.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.photoSession.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.photoSession.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoSession.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.photoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "photoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraMode === CameraMode.SUPER_STAB",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CameraMode.SUPER_STAB",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CameraMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SUPER_STAB",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isSupported",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isVideoStabilizationModeSupportedFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isVideoStabilizationModeSupportedFn",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.VideoStabilizationMode.HIGH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.VideoStabilizationMode",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VideoStabilizationMode",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "HIGH",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isSupported",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setVideoStabilizationMode",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setVideoStabilizationMode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.VideoStabilizationMode.HIGH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.VideoStabilizationMode",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VideoStabilizationMode",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "HIGH",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFocusMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode",
                                  "children": [
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraConfig')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraConfig'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "CameraConfig",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "CameraConfig",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "focusMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'photoSessionFlowFn success');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'photoSessionFlowFn success')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'photoSessionFlowFn success'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `photoSessionFlowFn fail : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`photoSessionFlowFn fail : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`photoSessionFlowFn fail : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async videoSessionFlowFn(): Promise<void> {\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "videoSessionFlowFn",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG, 'videoSessionFlowFn start');\n      // 创建CaptureSession实例\n      this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);\n\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.videoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.videoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.videoSession.addOutput(this.previewOutput);\n\n      this.videoSession.addOutput(this.videoOutput);\n\n      // 提交配置信息\n      await this.videoSession.commitConfig();\n\n      // hdr 录像\n      let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;\n      Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);\n\n      if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      // 获取当前模式等效焦距\n      try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }\n\n      AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n      AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);\n      AppStorage.setOrCreate('moonCaptureComponentIsShow', false);\n\n      if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }\n\n      // 开始会话工作\n      await this.videoSession.start();\n\n      if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'videoSessionFlowFn start');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'videoSessionFlowFn start')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'videoSessionFlowFn start'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.videoSession = this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createSession",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneMode.NORMAL_VIDEO",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneMode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NORMAL_VIDEO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onFocusStateChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onFocusStateChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onFocusStateChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onFocusStateChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCaptureSessionErrorChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCaptureSessionErrorChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCaptureSessionErrorChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCaptureSessionErrorChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoSession.beginConfig();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.videoSession.beginConfig()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession.beginConfig",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "beginConfig",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoSession.addInput(this.cameraInput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.videoSession.addInput(this.cameraInput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession.addInput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addInput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraInput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoSession.addOutput(this.previewOutput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.videoSession.addOutput(this.previewOutput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.videoSession.addOutput(this.videoOutput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.videoSession.addOutput(this.videoOutput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "videoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoOutput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.videoSession.commitConfig();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.videoSession.commitConfig()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.videoSession.commitConfig()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoSession.commitConfig",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "commitConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "hdrVideoBol: boolean = (this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "hdrVideoBol",
                                      "children": []
                                    },
                                    {
                                      "type": "BooleanKeyword",
                                      "label": "boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).hdrVideoBol",
                                      "children": [
                                        {
                                          "type": "ParenthesizedExpression",
                                          "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                          "children": [
                                            {
                                              "type": "AsExpression",
                                              "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "this.globalContext.getObject('cameraConfig')",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext.getObject",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.globalContext",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "globalContext",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "getObject",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "'cameraConfig'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "CameraConfig",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "CameraConfig",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "hdrVideoBol",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'hdrVideoBol:' + hdrVideoBol)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "'hdrVideoBol:' + hdrVideoBol",
                                  "children": [
                                    {
                                      "type": "StringLiteral",
                                      "label": "'hdrVideoBol:'",
                                      "children": []
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hdrVideoBol",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (hdrVideoBol) {\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      } else {\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hdrVideoBol",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n        let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "isSupportedVideoStabilization = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isSupportedVideoStabilization",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isVideoStabilizationModeSupportedFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isVideoStabilizationModeSupportedFn",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.VideoStabilizationMode.HIGH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.VideoStabilizationMode",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VideoStabilizationMode",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "HIGH",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (isSupportedVideoStabilization) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        } else {\n          Logger.info(TAG, 'VideoStabilization not support');\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isSupportedVideoStabilization",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n          this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setVideoStabilizationMode",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setVideoStabilizationMode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.VideoStabilizationMode.HIGH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.VideoStabilizationMode",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VideoStabilizationMode",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "HIGH",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setColorSpace",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setColorSpace",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoSession",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoSession",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "colorSpaceManager.ColorSpace",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "colorSpaceManager",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "ColorSpace",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "BT2020_HLG_LIMIT",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          Logger.info(TAG, 'VideoStabilization not support');\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, 'VideoStabilization not support');",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, 'VideoStabilization not support')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'VideoStabilization not support'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.setColorSpace(this.videoSession, colorSpaceManager.ColorSpace.BT709_LIMIT)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.setColorSpace",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setColorSpace",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "colorSpaceManager.ColorSpace.BT709_LIMIT",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "colorSpaceManager.ColorSpace",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorSpaceManager",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "ColorSpace",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "BT709_LIMIT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let range: Array<number> = this.videoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let range: Array<number> = this.videoSession.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let range: Array<number> = this.videoSession.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "range: Array<number> = this.videoSession.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "range",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.videoSession.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoSession.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.videoSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "videoSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `getZoomRatioRange:${range}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`getZoomRatioRange:${range}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "range}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "range",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "range",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMin'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMax', range[1])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMax'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomRatioRange fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomRatioRange fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();\n        if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "zoomPointInfo: Array<ZoomPointInfo> = this.videoSession.getZoomPointInfos()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "zoomPointInfo",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<ZoomPointInfo>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "ZoomPointInfo",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "ZoomPointInfo",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.videoSession.getZoomPointInfos()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.videoSession.getZoomPointInfos",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.videoSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "videoSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomPointInfos",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (zoomPointInfo) {\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomPointInfo",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);\n          AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, `getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateExpression",
                                                  "label": "`getZoomPointInfos zoomRatio:${zoomPointInfo[0].zoomRatio} equivalentFocalLength:${zoomPointInfo[0].equivalentFocalLength}`",
                                                  "children": [
                                                    {
                                                      "type": "TemplateHead",
                                                      "label": "`getZoomPointInfos zoomRatio:${",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "zoomPointInfo[0].zoomRatio} equivalentFocalLength:${",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "zoomPointInfo[0].zoomRatio",
                                                          "children": [
                                                            {
                                                              "type": "ElementAccessExpression",
                                                              "label": "zoomPointInfo[0]",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "zoomPointInfo",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "zoomRatio",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "TemplateMiddle",
                                                          "label": "} equivalentFocalLength:${",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "zoomPointInfo[0].equivalentFocalLength}`",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "zoomPointInfo[0].equivalentFocalLength",
                                                          "children": [
                                                            {
                                                              "type": "ElementAccessExpression",
                                                              "label": "zoomPointInfo[0]",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "zoomPointInfo",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "equivalentFocalLength",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LastTemplateToken",
                                                          "label": "}`",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('equivalentFocalLength', zoomPointInfo[0].equivalentFocalLength)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'equivalentFocalLength'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "zoomPointInfo[0].equivalentFocalLength",
                                                  "children": [
                                                    {
                                                      "type": "ElementAccessExpression",
                                                      "label": "zoomPointInfo[0]",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "zoomPointInfo",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "FirstLiteralToken",
                                                          "label": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "equivalentFocalLength",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomPointInfos fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomPointInfos fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomPointInfos fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'colorEffectComponentIsHidden'",
                                  "children": []
                                },
                                {
                                  "type": "ConditionalExpression",
                                  "label": "this.getSupportedColorEffects().length > 0 ? false : true",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "this.getSupportedColorEffects().length > 0",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.getSupportedColorEffects().length",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.getSupportedColorEffects()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getSupportedColorEffects",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getSupportedColorEffects",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "length",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "GreaterThanToken",
                                          "label": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "QuestionToken",
                                      "label": "?",
                                      "children": []
                                    },
                                    {
                                      "type": "FalseKeyword",
                                      "label": "false",
                                      "children": []
                                    },
                                    {
                                      "type": "ColonToken",
                                      "label": ":",
                                      "children": []
                                    },
                                    {
                                      "type": "TrueKeyword",
                                      "label": "true",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate('deferredPhotoComponentIsHidden', false)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'deferredPhotoComponentIsHidden'",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', false);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate('moonCaptureComponentIsShow', false)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'moonCaptureComponentIsShow'",
                                  "children": []
                                },
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.colorEffect) {\n        this.setColorEffect(this.colorEffect);\n      }",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.colorEffect",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "colorEffect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        this.setColorEffect(this.colorEffect);\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.setColorEffect(this.colorEffect);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.setColorEffect(this.colorEffect)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.setColorEffect",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setColorEffect",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.colorEffect",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "colorEffect",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.videoSession.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.videoSession.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.videoSession.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.videoSession.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.videoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "videoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.cameraMode === CameraMode.SUPER_STAB) {\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraMode === CameraMode.SUPER_STAB",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CameraMode.SUPER_STAB",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CameraMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "SUPER_STAB",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);\n        if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH);",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "isSupported = this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isSupported",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode.HIGH)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isVideoStabilizationModeSupportedFn",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isVideoStabilizationModeSupportedFn",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.VideoStabilizationMode.HIGH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.VideoStabilizationMode",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VideoStabilizationMode",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "HIGH",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (isSupported) {\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isSupported",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setVideoStabilizationMode(camera.VideoStabilizationMode.HIGH)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setVideoStabilizationMode",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setVideoStabilizationMode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.VideoStabilizationMode.HIGH",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.VideoStabilizationMode",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "VideoStabilizationMode",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "HIGH",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFocusMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode",
                                  "children": [
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraConfig')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraConfig'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "CameraConfig",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "CameraConfig",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "focusMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `videoSessionFlowFn fail : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`videoSessionFlowFn fail : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`videoSessionFlowFn fail : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async portraitSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "portraitSessionFlowFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "sceneModeIndex?: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "sceneModeIndex",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      // 创建PortraitSession实例\n      this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听能力值发生变化\n      this.onAbilityChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.portraitSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.portraitSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.portraitSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.portraitSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.portraitSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      this.setPortraitEffect();\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.portraitSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'portraitSessionFlowFn success');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.portraitSession = this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "portraitSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createSession(camera.SceneMode.PORTRAIT_PHOTO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createSession",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneMode.PORTRAIT_PHOTO",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneMode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PORTRAIT_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onFocusStateChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onFocusStateChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onFocusStateChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onFocusStateChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onAbilityChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onAbilityChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onAbilityChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onAbilityChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCaptureSessionErrorChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCaptureSessionErrorChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCaptureSessionErrorChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCaptureSessionErrorChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.portraitSession.beginConfig();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.portraitSession.beginConfig()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession.beginConfig",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "portraitSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "beginConfig",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.portraitSession.addInput(this.cameraInput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.portraitSession.addInput(this.cameraInput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession.addInput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "portraitSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addInput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraInput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.portraitSession.addOutput(this.previewOutput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.portraitSession.addOutput(this.previewOutput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "portraitSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.portraitSession.addOutput(this.photoOutPut);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.portraitSession.addOutput(this.photoOutPut)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "portraitSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoOutPut",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.captureMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "captureMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CaptureMode.NEW_DEFERRED_PHOTO",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CaptureMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "NEW_DEFERRED_PHOTO",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.isDeferredImageDeliverySupported",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "isDeferredImageDeliverySupported",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.DeferredDeliveryImageType.PHOTO",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.DeferredDeliveryImageType",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "DeferredDeliveryImageType",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "PHOTO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.deferImageDeliveryFor",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "deferImageDeliveryFor",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isDeferredImageDeliveryEnabled",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isDeferredImageDeliveryEnabled",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.portraitSession.commitConfig();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.portraitSession.commitConfig()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.portraitSession.commitConfig()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession.commitConfig",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.portraitSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "portraitSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "commitConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let range: Array<number> = this.portraitSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let range: Array<number> = this.portraitSession.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let range: Array<number> = this.portraitSession.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "range: Array<number> = this.portraitSession.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "range",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.portraitSession.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.portraitSession.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.portraitSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "portraitSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `getZoomRatioRange:${range}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`getZoomRatioRange:${range}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "range}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "range",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "range",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMin'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMax', range[1])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMax'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomRatioRange fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomRatioRange fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.setPortraitEffect();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.setPortraitEffect()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.setPortraitEffect",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setPortraitEffect",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "const deviceType = AppStorage.get<string>('deviceType');",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const deviceType = AppStorage.get<string>('deviceType')",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "deviceType = AppStorage.get<string>('deviceType')",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "deviceType",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.get<string>('deviceType')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.get",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringKeyword",
                                          "label": "string",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'deviceType'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "deviceType !== Constants.DEFAULT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deviceType",
                                  "children": []
                                },
                                {
                                  "type": "ExclamationEqualsEqualsToken",
                                  "label": "!==",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.DEFAULT",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "DEFAULT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.setOrCreate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setOrCreate",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'colorEffectComponentIsHidden'",
                                          "children": []
                                        },
                                        {
                                          "type": "ConditionalExpression",
                                          "label": "this.getSupportedColorEffects().length > 0 ? false : true",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "this.getSupportedColorEffects().length > 0",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getSupportedColorEffects().length",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.getSupportedColorEffects()",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.getSupportedColorEffects",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getSupportedColorEffects",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "length",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "GreaterThanToken",
                                                  "label": ">",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "QuestionToken",
                                              "label": "?",
                                              "children": []
                                            },
                                            {
                                              "type": "FalseKeyword",
                                              "label": "false",
                                              "children": []
                                            },
                                            {
                                              "type": "ColonToken",
                                              "label": ":",
                                              "children": []
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.colorEffect",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "colorEffect",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.setColorEffect(this.colorEffect);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setColorEffect(this.colorEffect);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setColorEffect(this.colorEffect)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setColorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setColorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.colorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "colorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.portraitSession.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.portraitSession.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.portraitSession.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.portraitSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "portraitSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFocusMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode",
                                  "children": [
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraConfig')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraConfig'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "CameraConfig",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "CameraConfig",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "focusMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'portraitSessionFlowFn success');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'portraitSessionFlowFn success')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'portraitSessionFlowFn success'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `portraitSessionFlowFn fail : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`portraitSessionFlowFn fail : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`portraitSessionFlowFn fail : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async nightSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "nightSessionFlowFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "sceneModeIndex?: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "sceneModeIndex",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      // 创建PortraitSession实例\n      this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.nightSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.nightSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.nightSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.nightSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      // 提交配置信息\n      await this.nightSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n      // 开始会话工作\n      await this.nightSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'nightSessionFlowFn success');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.nightSession = this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.nightSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "nightSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createSession(camera.SceneMode.NIGHT_PHOTO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createSession",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneMode.NIGHT_PHOTO",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneMode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NIGHT_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onFocusStateChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onFocusStateChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onFocusStateChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onFocusStateChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCaptureSessionErrorChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCaptureSessionErrorChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCaptureSessionErrorChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCaptureSessionErrorChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.nightSession.beginConfig();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.nightSession.beginConfig()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.nightSession.beginConfig",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.nightSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "nightSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "beginConfig",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.nightSession.addInput(this.cameraInput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.nightSession.addInput(this.cameraInput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.nightSession.addInput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.nightSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "nightSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addInput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraInput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.nightSession.addOutput(this.previewOutput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.nightSession.addOutput(this.previewOutput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.nightSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.nightSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "nightSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.nightSession.addOutput(this.photoOutPut);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.nightSession.addOutput(this.photoOutPut)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.nightSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.nightSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "nightSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoOutPut",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.captureMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "captureMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CaptureMode.NEW_DEFERRED_PHOTO",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CaptureMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "NEW_DEFERRED_PHOTO",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.isDeferredImageDeliverySupported",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "isDeferredImageDeliverySupported",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.DeferredDeliveryImageType.PHOTO",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.DeferredDeliveryImageType",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "DeferredDeliveryImageType",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "PHOTO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.deferImageDeliveryFor",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "deferImageDeliveryFor",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isDeferredImageDeliveryEnabled",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isDeferredImageDeliveryEnabled",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.nightSession.commitConfig();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.nightSession.commitConfig()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.nightSession.commitConfig()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.nightSession.commitConfig",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.nightSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "nightSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "commitConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let range: Array<number> = this.nightSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let range: Array<number> = this.nightSession.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let range: Array<number> = this.nightSession.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "range: Array<number> = this.nightSession.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "range",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.nightSession.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.nightSession.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.nightSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "nightSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `getZoomRatioRange:${range}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`getZoomRatioRange:${range}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "range}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "range",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "range",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMin'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMax', range[1])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMax'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomRatioRange fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomRatioRange fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "const deviceType = AppStorage.get<string>('deviceType');",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const deviceType = AppStorage.get<string>('deviceType')",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "deviceType = AppStorage.get<string>('deviceType')",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "deviceType",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.get<string>('deviceType')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.get",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringKeyword",
                                          "label": "string",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'deviceType'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "deviceType !== Constants.DEFAULT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deviceType",
                                  "children": []
                                },
                                {
                                  "type": "ExclamationEqualsEqualsToken",
                                  "label": "!==",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.DEFAULT",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "DEFAULT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.setOrCreate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setOrCreate",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'colorEffectComponentIsHidden'",
                                          "children": []
                                        },
                                        {
                                          "type": "ConditionalExpression",
                                          "label": "this.getSupportedColorEffects().length > 0 ? false : true",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "this.getSupportedColorEffects().length > 0",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getSupportedColorEffects().length",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.getSupportedColorEffects()",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.getSupportedColorEffects",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getSupportedColorEffects",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "length",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "GreaterThanToken",
                                                  "label": ">",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "QuestionToken",
                                              "label": "?",
                                              "children": []
                                            },
                                            {
                                              "type": "FalseKeyword",
                                              "label": "false",
                                              "children": []
                                            },
                                            {
                                              "type": "ColonToken",
                                              "label": ":",
                                              "children": []
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.colorEffect",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "colorEffect",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.setColorEffect(this.colorEffect);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setColorEffect(this.colorEffect);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setColorEffect(this.colorEffect)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setColorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setColorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.colorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "colorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.nightSession.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.nightSession.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.nightSession.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.nightSession.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.nightSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "nightSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFocusMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode",
                                  "children": [
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraConfig')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraConfig'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "CameraConfig",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "CameraConfig",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "focusMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'nightSessionFlowFn success');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'nightSessionFlowFn success')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'nightSessionFlowFn success'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `nightSessionFlowFn fail : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`nightSessionFlowFn fail : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`nightSessionFlowFn fail : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async macroPhotoSessionFlowFn(sceneModeIndex?: number): Promise<void> {\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "macroPhotoSessionFlowFn",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "sceneModeIndex?: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "sceneModeIndex",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, `macroPhotoSessionFlowFn enter`);\n    try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `macroPhotoSessionFlowFn enter`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `macroPhotoSessionFlowFn enter`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "FirstTemplateToken",
                          "label": "`macroPhotoSessionFlowFn enter`",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      // 创建MacroPhotoSession实例\n      this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);\n      // 监听焦距的状态变化\n      this.onFocusStateChange();\n      // 监听拍照会话的错误事件\n      this.onCaptureSessionErrorChange();\n      // 开始配置会话\n      this.macroPhotoSession.beginConfig();\n      // 把CameraInput加入到会话\n      this.macroPhotoSession.addInput(this.cameraInput);\n      // 把previewOutput加入到会话\n      this.macroPhotoSession.addOutput(this.previewOutput);\n      // 把photoOutPut加入到会话\n      this.macroPhotoSession.addOutput(this.photoOutPut);\n      if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }\n\n      let isSketchSupported = this.previewOutput.isSketchSupported();\n      Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);\n\n      // 提交配置信息\n      await this.macroPhotoSession.commitConfig();\n\n      // 处理变焦条信息\n      try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }\n\n      const deviceType = AppStorage.get<string>('deviceType');\n      if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }\n\n      // 开始会话工作\n      await this.macroPhotoSession.start();\n      this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);\n      Logger.info(TAG, 'macroPhotoSessionFlowFn success');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.macroPhotoSession = this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.macroPhotoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "macroPhotoSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.cameraManager.createSession(camera.SceneMode.MACRO_PHOTO)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraManager.createSession",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.cameraManager",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "cameraManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "createSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneMode.MACRO_PHOTO",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.SceneMode",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "SceneMode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MACRO_PHOTO",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onFocusStateChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onFocusStateChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onFocusStateChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onFocusStateChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.onCaptureSessionErrorChange();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.onCaptureSessionErrorChange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.onCaptureSessionErrorChange",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "onCaptureSessionErrorChange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.macroPhotoSession.beginConfig();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.macroPhotoSession.beginConfig()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.macroPhotoSession.beginConfig",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.macroPhotoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "macroPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "beginConfig",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.macroPhotoSession.addInput(this.cameraInput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.macroPhotoSession.addInput(this.cameraInput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.macroPhotoSession.addInput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.macroPhotoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "macroPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addInput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraInput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.macroPhotoSession.addOutput(this.previewOutput);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.macroPhotoSession.addOutput(this.previewOutput)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.macroPhotoSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.macroPhotoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "macroPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.previewOutput",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewOutput",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.macroPhotoSession.addOutput(this.photoOutPut);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.macroPhotoSession.addOutput(this.photoOutPut)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.macroPhotoSession.addOutput",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.macroPhotoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "macroPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoOutPut",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO) {\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.captureMode === CaptureMode.NEW_DEFERRED_PHOTO",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.captureMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "captureMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CaptureMode.NEW_DEFERRED_PHOTO",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CaptureMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "NEW_DEFERRED_PHOTO",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }\n      }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)) {\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType.PHOTO)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.isDeferredImageDeliverySupported",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "isDeferredImageDeliverySupported",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "camera.DeferredDeliveryImageType.PHOTO",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "camera.DeferredDeliveryImageType",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "DeferredDeliveryImageType",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "PHOTO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);\n          this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.deferImageDeliveryFor(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.deferImageDeliveryFor",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "deferImageDeliveryFor",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType.PHOTO)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.isDeferredImageDeliveryEnabled",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isDeferredImageDeliveryEnabled",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "camera.DeferredDeliveryImageType.PHOTO",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "camera.DeferredDeliveryImageType",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "DeferredDeliveryImageType",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PHOTO",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let isSketchSupported = this.previewOutput.isSketchSupported();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let isSketchSupported = this.previewOutput.isSketchSupported()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "isSketchSupported = this.previewOutput.isSketchSupported()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isSketchSupported",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.previewOutput.isSketchSupported()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.previewOutput.isSketchSupported",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.previewOutput",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "previewOutput",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "isSketchSupported",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `isSketchSupported:${isSketchSupported}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `isSketchSupported:${isSketchSupported}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`isSketchSupported:${isSketchSupported}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`isSketchSupported:${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "isSketchSupported}`",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "isSketchSupported",
                                          "children": []
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.macroPhotoSession.commitConfig();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.macroPhotoSession.commitConfig()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.macroPhotoSession.commitConfig()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.macroPhotoSession.commitConfig",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.macroPhotoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "macroPhotoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "commitConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "TryStatement",
                          "label": "try {\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      } catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                          "children": [
                            {
                              "type": "Block",
                              "label": "{\n        let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();\n        Logger.info(TAG, `getZoomRatioRange:${range}`);\n        if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }\n      }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let range: Array<number> = this.macroPhotoSession.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let range: Array<number> = this.macroPhotoSession.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "range: Array<number> = this.macroPhotoSession.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "range",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.macroPhotoSession.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.macroPhotoSession.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.macroPhotoSession",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "macroPhotoSession",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `getZoomRatioRange:${range}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `getZoomRatioRange:${range}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`getZoomRatioRange:${range}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "range}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "range",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (range) {\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "range",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          AppStorage.setOrCreate('zoomRatioMin', range[0]);\n          AppStorage.setOrCreate('zoomRatioMax', range[1]);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMin', range[0]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMin', range[0])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMin'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "AppStorage.setOrCreate('zoomRatioMax', range[1]);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "AppStorage.setOrCreate('zoomRatioMax', range[1])",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "AppStorage.setOrCreate",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "AppStorage",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setOrCreate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'zoomRatioMax'",
                                                  "children": []
                                                },
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "range[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CatchClause",
                              "label": "catch (error) {\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Block",
                                  "label": "{\n        let err = error as BusinessError;\n        Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "FirstStatement",
                                      "label": "let err = error as BusinessError;",
                                      "children": [
                                        {
                                          "type": "VariableDeclarationList",
                                          "label": "let err = error as BusinessError",
                                          "children": [
                                            {
                                              "type": "VariableDeclaration",
                                              "label": "err = error as BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "AsExpression",
                                                  "label": "error as BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TypeReference",
                                                      "label": "BusinessError",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "BusinessError",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`);",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Logger.error(TAG, `getZoomRatioRange fail: error code ${err.code}`)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Logger.error",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Logger",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "TAG",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateExpression",
                                              "label": "`getZoomRatioRange fail: error code ${err.code}`",
                                              "children": [
                                                {
                                                  "type": "TemplateHead",
                                                  "label": "`getZoomRatioRange fail: error code ${",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateSpan",
                                                  "label": "err.code}`",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "err.code",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "err",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "code",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "LastTemplateToken",
                                                      "label": "}`",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "const deviceType = AppStorage.get<string>('deviceType');",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "const deviceType = AppStorage.get<string>('deviceType')",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "deviceType = AppStorage.get<string>('deviceType')",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "deviceType",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.get<string>('deviceType')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.get",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringKeyword",
                                          "label": "string",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'deviceType'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (deviceType !== Constants.DEFAULT) {\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "deviceType !== Constants.DEFAULT",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deviceType",
                                  "children": []
                                },
                                {
                                  "type": "ExclamationEqualsEqualsToken",
                                  "label": "!==",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Constants.DEFAULT",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Constants",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "DEFAULT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);\n        if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.setOrCreate('colorEffectComponentIsHidden', this.getSupportedColorEffects().length > 0 ? false : true)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.setOrCreate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setOrCreate",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'colorEffectComponentIsHidden'",
                                          "children": []
                                        },
                                        {
                                          "type": "ConditionalExpression",
                                          "label": "this.getSupportedColorEffects().length > 0 ? false : true",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "this.getSupportedColorEffects().length > 0",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getSupportedColorEffects().length",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.getSupportedColorEffects()",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.getSupportedColorEffects",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getSupportedColorEffects",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "length",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "GreaterThanToken",
                                                  "label": ">",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "QuestionToken",
                                              "label": "?",
                                              "children": []
                                            },
                                            {
                                              "type": "FalseKeyword",
                                              "label": "false",
                                              "children": []
                                            },
                                            {
                                              "type": "ColonToken",
                                              "label": ":",
                                              "children": []
                                            },
                                            {
                                              "type": "TrueKeyword",
                                              "label": "true",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (this.colorEffect) {\n          this.setColorEffect(this.colorEffect);\n        }",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.colorEffect",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "colorEffect",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          this.setColorEffect(this.colorEffect);\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.setColorEffect(this.colorEffect);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.setColorEffect(this.colorEffect)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.setColorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setColorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.colorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "colorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "await this.macroPhotoSession.start();",
                          "children": [
                            {
                              "type": "AwaitExpression",
                              "label": "await this.macroPhotoSession.start()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.macroPhotoSession.start()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.macroPhotoSession.start",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.macroPhotoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "macroPhotoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "start",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.isFocusMode((this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.isFocusMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig).focusMode",
                                  "children": [
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraConfig') as CameraConfig)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraConfig') as CameraConfig",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraConfig')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraConfig'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "CameraConfig",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "CameraConfig",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "focusMode",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, 'macroPhotoSessionFlowFn success');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, 'macroPhotoSessionFlowFn success')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'macroPhotoSessionFlowFn success'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`macroPhotoSessionFlowFn fail : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`macroPhotoSessionFlowFn fail : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setColorSpace(session: camera.PhotoSession | camera.VideoSession, colorSpace: colorSpaceManager.ColorSpace): void {\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setColorSpace",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "session: camera.PhotoSession | camera.VideoSession",
              "children": [
                {
                  "type": "Identifier",
                  "label": "session",
                  "children": []
                },
                {
                  "type": "UnionType",
                  "label": "camera.PhotoSession | camera.VideoSession",
                  "children": [
                    {
                      "type": "TypeReference",
                      "label": "camera.PhotoSession",
                      "children": [
                        {
                          "type": "FirstNode",
                          "label": "camera.PhotoSession",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "camera",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "PhotoSession",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "TypeReference",
                      "label": "camera.VideoSession",
                      "children": [
                        {
                          "type": "FirstNode",
                          "label": "camera.VideoSession",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "camera",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "VideoSession",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "colorSpace: colorSpaceManager.ColorSpace",
              "children": [
                {
                  "type": "Identifier",
                  "label": "colorSpace",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "colorSpaceManager.ColorSpace",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "colorSpaceManager.ColorSpace",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "colorSpaceManager",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ColorSpace",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();\n      Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);\n      let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);\n      if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "colorSpaces: Array<colorSpaceManager.ColorSpace> = session.getSupportedColorSpaces()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpaces",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Array<colorSpaceManager.ColorSpace>",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Array",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "colorSpaceManager.ColorSpace",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "colorSpaceManager.ColorSpace",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorSpaceManager",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "ColorSpace",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "session.getSupportedColorSpaces()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.getSupportedColorSpaces",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSupportedColorSpaces",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `supportedColorSpaces: ${JSON.stringify(colorSpaces)}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`supportedColorSpaces: ${JSON.stringify(colorSpaces)}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`supportedColorSpaces: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "JSON.stringify(colorSpaces)}`",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "JSON.stringify(colorSpaces)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "JSON.stringify",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "JSON",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "stringify",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "colorSpaces",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "isSupportedUseColorSpaces = colorSpaces.indexOf(colorSpace)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "isSupportedUseColorSpaces",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "colorSpaces.indexOf(colorSpace)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "colorSpaces.indexOf",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "colorSpaces",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "indexOf",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "colorSpace",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (isSupportedUseColorSpaces) {\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isSupportedUseColorSpaces",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n        Logger.info(TAG, `setColorSpace: ${colorSpace}`);\n        session.setColorSpace(colorSpace);\n        Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);\n        return;\n      }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `setColorSpace: ${colorSpace}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `setColorSpace: ${colorSpace}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`setColorSpace: ${colorSpace}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`setColorSpace: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "colorSpace}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorSpace",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "session.setColorSpace(colorSpace);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "session.setColorSpace(colorSpace)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.setColorSpace",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setColorSpace",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "colorSpace",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `activeColorSpace: ${session.getActiveColorSpace()}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`activeColorSpace: ${session.getActiveColorSpace()}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`activeColorSpace: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "session.getActiveColorSpace()}`",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "session.getActiveColorSpace()",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "session.getActiveColorSpace",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "session",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "getActiveColorSpace",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ReturnStatement",
                                  "label": "return;",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `setColorSpace fail : ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`setColorSpace fail : ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`setColorSpace fail : ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setPortraitEffect(): void {\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setPortraitEffect",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n    this.getPortraitEffect();\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.portraitSession.setPortraitEffect(camera.PortraitEffect.CIRCLES)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.portraitSession.setPortraitEffect",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.portraitSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "portraitSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setPortraitEffect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.PortraitEffect.CIRCLES",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.PortraitEffect",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitEffect",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CIRCLES",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `setPortraitEffect error code: ${err.code}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`setPortraitEffect error code: ${err.code}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`setPortraitEffect error code: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "err.code}`",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "err.code",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "code",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.getPortraitEffect();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.getPortraitEffect()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.getPortraitEffect",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "getPortraitEffect",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getPortraitEffect(): void {\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getPortraitEffect",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      let portraitEffect = this.portraitSession.getPortraitEffect();\n      Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let portraitEffect = this.portraitSession.getPortraitEffect();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let portraitEffect = this.portraitSession.getPortraitEffect()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "portraitEffect = this.portraitSession.getPortraitEffect()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "portraitEffect",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.portraitSession.getPortraitEffect()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.portraitSession.getPortraitEffect",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.portraitSession",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "portraitSession",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getPortraitEffect",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `getPortraitEffect portraitEffect: ${portraitEffect}`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`getPortraitEffect portraitEffect: ${portraitEffect}`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`getPortraitEffect portraitEffect: ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "portraitEffect}`",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "portraitEffect",
                                          "children": []
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `setPortraitEffect error code: ${err.code}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `setPortraitEffect error code: ${err.code}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`setPortraitEffect error code: ${err.code}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`setPortraitEffect error code: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "err.code}`",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "err.code",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "code",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setMoonCaptureBoostEnable(moonCaptureBoostEnable: Boolean): boolean {\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setMoonCaptureBoostEnable",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "moonCaptureBoostEnable: Boolean",
              "children": [
                {
                  "type": "Identifier",
                  "label": "moonCaptureBoostEnable",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Boolean",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Boolean",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'moonCaptureBoostEnable is called.');\n    let session: camera.CaptureSession = this.getSession();\n    if (!session) {\n      return false;\n    }\n    try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }\n    return true;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'moonCaptureBoostEnable is called.');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'moonCaptureBoostEnable is called.')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'moonCaptureBoostEnable is called.'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.CaptureSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.CaptureSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.CaptureSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.CaptureSession",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CaptureSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return false;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return false;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return false;",
                          "children": [
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);\n      AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "session.enableSceneFeature(camera.SceneFeatureType.MOON_CAPTURE_BOOST, moonCaptureBoostEnable)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.enableSceneFeature",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "enableSceneFeature",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.SceneFeatureType.MOON_CAPTURE_BOOST",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneFeatureType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SceneFeatureType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MOON_CAPTURE_BOOST",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "moonCaptureBoostEnable",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "AppStorage.setOrCreate<boolean>('moonCaptureComponentEnable', moonCaptureBoostEnable)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "AppStorage.setOrCreate",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "AppStorage",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setOrCreate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BooleanKeyword",
                                  "label": "boolean",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'moonCaptureComponentEnable'",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "moonCaptureBoostEnable",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);\n      return false;\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `setMoonCaptureBoostEnable fail: error code ${err.code}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`setMoonCaptureBoostEnable fail: error code ${err.code}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`setMoonCaptureBoostEnable fail: error code ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "err.code}`",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "err.code",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "code",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ReturnStatement",
                              "label": "return false;",
                              "children": [
                                {
                                  "type": "FalseKeyword",
                                  "label": "false",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return true;",
                  "children": [
                    {
                      "type": "TrueKeyword",
                      "label": "true",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setColorEffect(colorEffect: camera.ColorEffectType): void {\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setColorEffect",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "colorEffect: camera.ColorEffectType",
              "children": [
                {
                  "type": "Identifier",
                  "label": "colorEffect",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.ColorEffectType",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.ColorEffectType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ColorEffectType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'setColorEffect is called.');\n    if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'setColorEffect is called.');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'setColorEffect is called.')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'setColorEffect is called.'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.photoSession || this.videoSession || this.portraitSession || this.nightSession) {\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.photoSession || this.videoSession || this.portraitSession || this.nightSession",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "this.photoSession || this.videoSession || this.portraitSession",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.photoSession || this.videoSession",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BarBarToken",
                                  "label": "||",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.videoSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BarBarToken",
                              "label": "||",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.portraitSession",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "portraitSession",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.nightSession",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "nightSession",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let res: Array<camera.ColorEffectType> | undefined = [];\n      res = this.getSupportedColorEffects();\n      let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n      if (!session) {\n        return;\n      }\n      for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }\n      Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let res: Array<camera.ColorEffectType> | undefined = [];",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let res: Array<camera.ColorEffectType> | undefined = []",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "res: Array<camera.ColorEffectType> | undefined = []",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "res",
                                      "children": []
                                    },
                                    {
                                      "type": "UnionType",
                                      "label": "Array<camera.ColorEffectType> | undefined",
                                      "children": [
                                        {
                                          "type": "TypeReference",
                                          "label": "Array<camera.ColorEffectType>",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Array",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "camera.ColorEffectType",
                                              "children": [
                                                {
                                                  "type": "FirstNode",
                                                  "label": "camera.ColorEffectType",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "camera",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "ColorEffectType",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "UndefinedKeyword",
                                          "label": "undefined",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ArrayLiteralExpression",
                                      "label": "[]",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "res = this.getSupportedColorEffects();",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "res = this.getSupportedColorEffects()",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.getSupportedColorEffects()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.getSupportedColorEffects",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getSupportedColorEffects",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "UnionType",
                                      "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.PortraitPhotoSession",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.PortraitPhotoSession",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "PortraitPhotoSession",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.CaptureSession",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.CaptureSession",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "CaptureSession",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.NightPhotoSession",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.NightPhotoSession",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "NightPhotoSession",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.getSession()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.getSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSession",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (!session) {\n        return;\n      }",
                          "children": [
                            {
                              "type": "PrefixUnaryExpression",
                              "label": "!session",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        return;\n      }",
                              "children": [
                                {
                                  "type": "ReturnStatement",
                                  "label": "return;",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ForStatement",
                          "label": "for (let i = 0; i < res.length; i++) {\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let i = 0",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "i = 0",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "i",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BinaryExpression",
                              "label": "i < res.length",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                },
                                {
                                  "type": "FirstBinaryOperator",
                                  "label": "<",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "res.length",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "res",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "length",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PostfixUnaryExpression",
                              "label": "i++",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "i",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }\n      }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (res[i] === colorEffect) {\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "res[i] === colorEffect",
                                      "children": [
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "res[i]",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "res",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "EqualsEqualsEqualsToken",
                                          "label": "===",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "colorEffect",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n          Logger.info(TAG, 'setColorEffect success.');\n          session.setColorEffect(colorEffect);\n          this.colorEffect = colorEffect;\n          return;\n        }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, 'setColorEffect success.');",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, 'setColorEffect success.')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'setColorEffect success.'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "session.setColorEffect(colorEffect);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "session.setColorEffect(colorEffect)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "session.setColorEffect",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "session",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "setColorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorEffect",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.colorEffect = colorEffect;",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "this.colorEffect = colorEffect",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.colorEffect",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "colorEffect",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "FirstAssignment",
                                                  "label": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "colorEffect",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ReturnStatement",
                                          "label": "return;",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.error(TAG, `setColorEffect fail: The colorEffect ${colorEffect} was not found`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.error",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`setColorEffect fail: The colorEffect ${colorEffect} was not found`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`setColorEffect fail: The colorEffect ${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "colorEffect} was not found`",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "colorEffect",
                                          "children": []
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "} was not found`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getColorEffect(): camera.ColorEffectType | undefined {\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getColorEffect",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "camera.ColorEffectType | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "camera.ColorEffectType",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.ColorEffectType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "ColorEffectType",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'getColorEffect is called.');\n    let colorEffect: camera.ColorEffectType | undefined = undefined;\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return colorEffect;\n    }\n    try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }\n    return colorEffect;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'getColorEffect is called.');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'getColorEffect is called.')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'getColorEffect is called.'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorEffect: camera.ColorEffectType | undefined = undefined;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorEffect: camera.ColorEffectType | undefined = undefined",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorEffect: camera.ColorEffectType | undefined = undefined",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorEffect",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.ColorEffectType | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.ColorEffectType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.ColorEffectType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorEffectType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "undefined",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return colorEffect;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return colorEffect;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return colorEffect;",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorEffect",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "TryStatement",
                  "label": "try {\n      colorEffect = session.getColorEffect();\n    } catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      colorEffect = session.getColorEffect();\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "colorEffect = session.getColorEffect();",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "colorEffect = session.getColorEffect()",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "colorEffect",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "session.getColorEffect()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "session.getColorEffect",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "session",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getColorEffect",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      let err = error as BusinessError;\n      Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);\n    }",
                          "children": [
                            {
                              "type": "FirstStatement",
                              "label": "let err = error as BusinessError;",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let err = error as BusinessError",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "err = error as BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "err",
                                          "children": []
                                        },
                                        {
                                          "type": "AsExpression",
                                          "label": "error as BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "BusinessError",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `setColorEffect fail: error code ${err.code}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `setColorEffect fail: error code ${err.code}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`setColorEffect fail: error code ${err.code}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`setColorEffect fail: error code ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "err.code}`",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "err.code",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "code",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return colorEffect;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "colorEffect",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getSupportedColorEffects(): Array<camera.ColorEffectType> | undefined {\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getSupportedColorEffects",
              "children": []
            },
            {
              "type": "UnionType",
              "label": "Array<camera.ColorEffectType> | undefined",
              "children": [
                {
                  "type": "TypeReference",
                  "label": "Array<camera.ColorEffectType>",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Array",
                      "children": []
                    },
                    {
                      "type": "TypeReference",
                      "label": "camera.ColorEffectType",
                      "children": [
                        {
                          "type": "FirstNode",
                          "label": "camera.ColorEffectType",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "camera",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "ColorEffectType",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "UndefinedKeyword",
                  "label": "undefined",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'getSupportedColorEffects is called.');\n    let res: Array<camera.ColorEffectType> | undefined = [];\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return res;\n    }\n    res = session.getSupportedColorEffects();\n    Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);\n    return res;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'getSupportedColorEffects is called.');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'getSupportedColorEffects is called.')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'getSupportedColorEffects is called.'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let res: Array<camera.ColorEffectType> | undefined = [];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let res: Array<camera.ColorEffectType> | undefined = []",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "res: Array<camera.ColorEffectType> | undefined = []",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "res",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "Array<camera.ColorEffectType> | undefined",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "Array<camera.ColorEffectType>",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Array",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "camera.ColorEffectType",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "camera.ColorEffectType",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "ColorEffectType",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "UndefinedKeyword",
                                  "label": "undefined",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ArrayLiteralExpression",
                              "label": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return res;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return res;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return res;",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "res",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "res = session.getSupportedColorEffects();",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "res = session.getSupportedColorEffects()",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "res",
                          "children": []
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "session.getSupportedColorEffects()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "session.getSupportedColorEffects",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getSupportedColorEffects",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `getSupportedColorEffects length: ${res.length}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getSupportedColorEffects length: ${res.length}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getSupportedColorEffects length: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "res.length}`",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "res.length",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "res",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "length",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return res;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "res",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "photoOutPutCallBack(): void {\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "photoOutPutCallBack",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    // 监听拍照开始\n    this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });\n    // 监听拍照帧输出捕获\n    // 获取时间戳转化异常\n    this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });\n    // 监听拍照结束\n    this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });\n    this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });\n    this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });\n    this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.on('captureStart', (err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'captureStart'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(err: BusinessError, captureId: number): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "captureId: number",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "captureId",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `photoOutPutCallBack captureStart captureId success: ${captureId}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`photoOutPutCallBack captureStart captureId success: ${captureId}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`photoOutPutCallBack captureStart captureId success: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "captureId}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "captureId",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.on('frameShutter', (err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'frameShutter'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(err: BusinessError, frameShutterInfo: camera.FrameShutterInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "frameShutterInfo: camera.FrameShutterInfo",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "frameShutterInfo",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.FrameShutterInfo",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.FrameShutterInfo",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FrameShutterInfo",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`photoOutPutCallBack frameShutter captureId: ${frameShutterInfo.captureId}, timestamp: ${frameShutterInfo.timestamp}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`photoOutPutCallBack frameShutter captureId: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "frameShutterInfo.captureId}, timestamp: ${",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "frameShutterInfo.captureId",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "frameShutterInfo",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "captureId",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "}, timestamp: ${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "frameShutterInfo.timestamp}`",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "frameShutterInfo.timestamp",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "frameShutterInfo",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "timestamp",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'captureEnd'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(err: BusinessError, captureEndInfo: camera.CaptureEndInfo): void => {\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "captureEndInfo: camera.CaptureEndInfo",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "captureEndInfo",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureEndInfo",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureEndInfo",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureEndInfo",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`photoOutPutCallBack captureEnd captureId: ${captureEndInfo.captureId}, frameCount: ${captureEndInfo.frameCount}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`photoOutPutCallBack captureEnd captureId: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "captureEndInfo.captureId}, frameCount: ${",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "captureEndInfo.captureId",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "captureEndInfo",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "captureId",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "}, frameCount: ${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "captureEndInfo.frameCount}`",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "captureEndInfo.frameCount",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "captureEndInfo",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "frameCount",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.on('error', (data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'error'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(data: BusinessError): void => {\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "data: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "data",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `photoOutPut data: ${JSON.stringify(data)}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`photoOutPut data: ${JSON.stringify(data)}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`photoOutPut data: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "JSON.stringify(data)}`",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "JSON.stringify(data)",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "JSON.stringify",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "JSON",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stringify",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "data",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.on('photoAvailable', (err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'photoAvailable'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(err: BusinessError, photo: camera.Photo): void => {\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "photo: camera.Photo",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "photo",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Photo",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Photo",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Photo",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');\n      if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      let mainImage: image.Image = photo.main;\n      AppStorage.setOrCreate('mainImage', mainImage);\n      mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });\n      photo.release();\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, 'photoOutPutCallBack photoAvailable 3')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'photoOutPutCallBack photoAvailable 3'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "IfStatement",
                                  "label": "if (err) {\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, `photoAvailable error: ${JSON.stringify(err)}.`)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateExpression",
                                                  "label": "`photoAvailable error: ${JSON.stringify(err)}.`",
                                                  "children": [
                                                    {
                                                      "type": "TemplateHead",
                                                      "label": "`photoAvailable error: ${",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "JSON.stringify(err)}.`",
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "JSON.stringify(err)",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "JSON.stringify",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "JSON",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "stringify",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "err",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LastTemplateToken",
                                                          "label": "}.`",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ReturnStatement",
                                          "label": "return;",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstStatement",
                                  "label": "let mainImage: image.Image = photo.main;",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let mainImage: image.Image = photo.main",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "mainImage: image.Image = photo.main",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "mainImage",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "image.Image",
                                              "children": [
                                                {
                                                  "type": "FirstNode",
                                                  "label": "image.Image",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "image",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Image",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "photo.main",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "photo",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "main",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "AppStorage.setOrCreate('mainImage', mainImage);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "AppStorage.setOrCreate('mainImage', mainImage)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "AppStorage.setOrCreate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "AppStorage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "setOrCreate",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'mainImage'",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "mainImage",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "mainImage.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "mainImage.getComponent",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "mainImage",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getComponent",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "image.ComponentType.JPEG",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "image.ComponentType",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "image",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "ComponentType",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "JPEG",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(errCode: BusinessError, component: image.Component): void => {\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "errCode: BusinessError",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "errCode",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "BusinessError",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "BusinessError",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Parameter",
                                              "label": "component: image.Component",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "component",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "image.Component",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "image.Component",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "image",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "Component",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "VoidKeyword",
                                              "label": "void",
                                              "children": []
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        Logger.debug(TAG, 'getComponent start');\n        Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);\n        if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }\n        let buffer: ArrayBuffer;\n        if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }\n        this.savePicture(buffer, mainImage);\n      }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.debug(TAG, 'getComponent start');",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.debug(TAG, 'getComponent start')",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.debug",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "debug",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'getComponent start'",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.info(TAG, `err: ${JSON.stringify(errCode)}`);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.info(TAG, `err: ${JSON.stringify(errCode)}`)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`err: ${JSON.stringify(errCode)}`",
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`err: ${",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "JSON.stringify(errCode)}`",
                                                              "children": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "label": "JSON.stringify(errCode)",
                                                                  "children": [
                                                                    {
                                                                      "type": "PropertyAccessExpression",
                                                                      "label": "JSON.stringify",
                                                                      "children": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "JSON",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "label": "stringify",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "errCode",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "}`",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if (errCode || component === undefined) {\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "errCode || component === undefined",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "errCode",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BarBarToken",
                                                          "label": "||",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "label": "component === undefined",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "component",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "EqualsEqualsEqualsToken",
                                                              "label": "===",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "undefined",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          Logger.info(TAG, 'getComponent failed');\n          return;\n        }",
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.info(TAG, 'getComponent failed');",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.info(TAG, 'getComponent failed')",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.info",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "info",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'getComponent failed'",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ReturnStatement",
                                                          "label": "return;",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "FirstStatement",
                                                  "label": "let buffer: ArrayBuffer;",
                                                  "children": [
                                                    {
                                                      "type": "VariableDeclarationList",
                                                      "label": "let buffer: ArrayBuffer",
                                                      "children": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "label": "buffer: ArrayBuffer",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "buffer",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TypeReference",
                                                              "label": "ArrayBuffer",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "ArrayBuffer",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "label": "if (component.byteBuffer) {\n          buffer = component.byteBuffer;\n        } else {\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "component.byteBuffer",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "component",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "byteBuffer",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          buffer = component.byteBuffer;\n        }",
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "buffer = component.byteBuffer;",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "buffer = component.byteBuffer",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "buffer",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstAssignment",
                                                                  "label": "=",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "component.byteBuffer",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "component",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "byteBuffer",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Block",
                                                      "label": "{\n          Logger.error(TAG, 'component byteBuffer is undefined');\n        }",
                                                      "children": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "label": "Logger.error(TAG, 'component byteBuffer is undefined');",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "Logger.error(TAG, 'component byteBuffer is undefined')",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "Logger.error",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "Logger",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "error",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "TAG",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "StringLiteral",
                                                                  "label": "'component byteBuffer is undefined'",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "this.savePicture(buffer, mainImage);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "this.savePicture(buffer, mainImage)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "this.savePicture",
                                                          "children": [
                                                            {
                                                              "type": "ThisKeyword",
                                                              "label": "this",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "savePicture",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "buffer",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "mainImage",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "photo.release();",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "photo.release()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photo.release",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photo",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "release",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.on('deferredPhotoProxyAvailable', (err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'deferredPhotoProxyAvailable'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(err: BusinessError, proxyObj: camera.DeferredPhotoProxy): void => {\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "proxyObj: camera.DeferredPhotoProxy",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "proxyObj",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.DeferredPhotoProxy",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.DeferredPhotoProxy",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "DeferredPhotoProxy",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }\n      Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');\n      proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });\n      this.saveDeferredPhoto(proxyObj);\n    }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (err) {\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "err",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);\n        return;\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, `deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateExpression",
                                                  "label": "`deferredPhotoProxyAvailable error: ${JSON.stringify(err)}.`",
                                                  "children": [
                                                    {
                                                      "type": "TemplateHead",
                                                      "label": "`deferredPhotoProxyAvailable error: ${",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "JSON.stringify(err)}.`",
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "JSON.stringify(err)",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "JSON.stringify",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "JSON",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "stringify",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "err",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LastTemplateToken",
                                                          "label": "}.`",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ReturnStatement",
                                          "label": "return;",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, 'photoOutPutCallBack deferredPhotoProxyAvailable')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'photoOutPutCallBack deferredPhotoProxyAvailable'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "proxyObj.getThumbnail().then((thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "proxyObj.getThumbnail().then",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "proxyObj.getThumbnail()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "proxyObj.getThumbnail",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "proxyObj",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getThumbnail",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "then",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(thumbnail: image.PixelMap) => {\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "thumbnail: image.PixelMap",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "thumbnail",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TypeReference",
                                                  "label": "image.PixelMap",
                                                  "children": [
                                                    {
                                                      "type": "FirstNode",
                                                      "label": "image.PixelMap",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "image",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "PixelMap",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        AppStorage.setOrCreate('proxyThumbnail', thumbnail);\n      }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "AppStorage.setOrCreate('proxyThumbnail', thumbnail);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "AppStorage.setOrCreate('proxyThumbnail', thumbnail)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "AppStorage.setOrCreate",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "AppStorage",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "setOrCreate",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'proxyThumbnail'",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "thumbnail",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.saveDeferredPhoto(proxyObj);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.saveDeferredPhoto(proxyObj)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.saveDeferredPhoto",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "saveDeferredPhoto",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "proxyObj",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "async saveDeferredPhoto(proxyObj: camera.DeferredPhotoProxy): Promise<void> {\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }",
          "children": [
            {
              "type": "AsyncKeyword",
              "label": "async",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "saveDeferredPhoto",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "proxyObj: camera.DeferredPhotoProxy",
              "children": [
                {
                  "type": "Identifier",
                  "label": "proxyObj",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.DeferredPhotoProxy",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.DeferredPhotoProxy",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "DeferredPhotoProxy",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Promise<void>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Promise",
                  "children": []
                },
                {
                  "type": "VoidKeyword",
                  "label": "void",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    } catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      // 创建 photoAsset\n      let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());\n      let fileName = Date.now() + '.jpg';\n      let photoAsset = await photoHelper.createAsset(fileName);\n      let imgPhotoUri: string = photoAsset.uri;\n      // 将缩略图代理类传递给媒体库\n      let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n      mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);\n      let res = await photoHelper.applyChanges(mediaRequest);\n      this.handleTakePicture(imgPhotoUri);\n      Logger.info(TAG, `saveDeferredPhoto res:${res}.`);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext());",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext())",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "photoHelper = photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext())",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "photoHelper",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "photoAccessHelper.getPhotoAccessHelper(this.globalContext.getCameraSettingContext())",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoAccessHelper.getPhotoAccessHelper",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoAccessHelper",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getPhotoAccessHelper",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "this.globalContext.getCameraSettingContext()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.globalContext.getCameraSettingContext",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "globalContext",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getCameraSettingContext",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let fileName = Date.now() + '.jpg';",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let fileName = Date.now() + '.jpg'",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "fileName = Date.now() + '.jpg'",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "fileName",
                                      "children": []
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "label": "Date.now() + '.jpg'",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Date.now()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Date.now",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Date",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "now",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'.jpg'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let photoAsset = await photoHelper.createAsset(fileName);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let photoAsset = await photoHelper.createAsset(fileName)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "photoAsset = await photoHelper.createAsset(fileName)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "photoAsset",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await photoHelper.createAsset(fileName)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "photoHelper.createAsset(fileName)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "photoHelper.createAsset",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoHelper",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "createAsset",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "fileName",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let imgPhotoUri: string = photoAsset.uri;",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let imgPhotoUri: string = photoAsset.uri",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "imgPhotoUri: string = photoAsset.uri",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "imgPhotoUri",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "photoAsset.uri",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "photoAsset",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "uri",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "mediaRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "mediaRequest",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "photoAccessHelper.MediaAssetChangeRequest",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "photoAccessHelper.MediaAssetChangeRequest",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoAccessHelper",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "MediaAssetChangeRequest",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "NewExpression",
                                      "label": "new photoAccessHelper.MediaAssetChangeRequest(photoAsset)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "photoAccessHelper.MediaAssetChangeRequest",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "photoAccessHelper",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "MediaAssetChangeRequest",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoAsset",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "mediaRequest.addResource(photoAccessHelper.ResourceType.PHOTO_PROXY, proxyObj)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "mediaRequest.addResource",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "mediaRequest",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "addResource",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "photoAccessHelper.ResourceType.PHOTO_PROXY",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "photoAccessHelper.ResourceType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "photoAccessHelper",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ResourceType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "PHOTO_PROXY",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "proxyObj",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let res = await photoHelper.applyChanges(mediaRequest);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let res = await photoHelper.applyChanges(mediaRequest)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "res = await photoHelper.applyChanges(mediaRequest)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "res",
                                      "children": []
                                    },
                                    {
                                      "type": "AwaitExpression",
                                      "label": "await photoHelper.applyChanges(mediaRequest)",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "photoHelper.applyChanges(mediaRequest)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "photoHelper.applyChanges",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "photoHelper",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "applyChanges",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "mediaRequest",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.handleTakePicture(imgPhotoUri);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.handleTakePicture(imgPhotoUri)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.handleTakePicture",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "handleTakePicture",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "imgPhotoUri",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG, `saveDeferredPhoto res:${res}.`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG, `saveDeferredPhoto res:${res}.`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "TemplateExpression",
                                  "label": "`saveDeferredPhoto res:${res}.`",
                                  "children": [
                                    {
                                      "type": "TemplateHead",
                                      "label": "`saveDeferredPhoto res:${",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateSpan",
                                      "label": "res}.`",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "res",
                                          "children": []
                                        },
                                        {
                                          "type": "LastTemplateToken",
                                          "label": "}.`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (err) {\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "err",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "err",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.error(TAG, `Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.error",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "TemplateExpression",
                                      "label": "`Failed to saveDeferredPhoto. error: ${JSON.stringify(err)}`",
                                      "children": [
                                        {
                                          "type": "TemplateHead",
                                          "label": "`Failed to saveDeferredPhoto. error: ${",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateSpan",
                                          "label": "JSON.stringify(err)}`",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(err)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "err",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "LastTemplateToken",
                                              "label": "}`",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "previewOutputCallBack(): void {\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "previewOutputCallBack",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'previewOutputCallBack is called');\n    this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });\n    this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });\n    this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'previewOutputCallBack is called');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'previewOutputCallBack is called')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'previewOutputCallBack is called'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.previewOutput.on('frameStart', (): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.previewOutput.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.previewOutput",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "previewOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'frameStart'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(): void => {\n      Logger.debug(TAG, 'Preview frame started');\n    }",
                          "children": [
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.debug(TAG, 'Preview frame started');\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.debug(TAG, 'Preview frame started');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.debug(TAG, 'Preview frame started')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.debug",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "debug",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'Preview frame started'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.previewOutput.on('frameEnd', (): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.previewOutput.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.previewOutput",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "previewOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'frameEnd'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(): void => {\n      Logger.debug(TAG, 'Preview frame ended');\n    }",
                          "children": [
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.debug(TAG, 'Preview frame ended');\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.debug(TAG, 'Preview frame ended');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.debug(TAG, 'Preview frame ended')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.debug",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "debug",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'Preview frame ended'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.previewOutput.on('error', (previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.previewOutput.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.previewOutput",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "previewOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'error'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(previewOutputError: BusinessError): void => {\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "previewOutputError: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "previewOutputError",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`Preview output previewOutputError: ${JSON.stringify(previewOutputError)}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`Preview output previewOutputError: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "JSON.stringify(previewOutputError)}`",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "JSON.stringify(previewOutputError)",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "JSON.stringify",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "JSON",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stringify",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "previewOutputError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onVideoOutputChange(): void {\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onVideoOutputChange",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });\n    this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });\n    this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.videoOutput.on('frameStart', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoOutput.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoOutput",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'frameStart'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    }",
                          "children": [
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, 'onVideoOutputChange frame started');\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, 'onVideoOutputChange frame started');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, 'onVideoOutputChange frame started')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'onVideoOutputChange frame started'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.videoOutput.on('frameEnd', (): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoOutput.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoOutput",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'frameEnd'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(): void => {\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    }",
                          "children": [
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, 'onVideoOutputChange frame frameEnd');\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, 'onVideoOutputChange frame frameEnd');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, 'onVideoOutputChange frame frameEnd')",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'onVideoOutputChange frame frameEnd'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.videoOutput.on('error', (videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.videoOutput.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.videoOutput",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoOutput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'error'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(videoOutputError: BusinessError) => {\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "videoOutputError: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "videoOutputError",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.error(TAG, `onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.error",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "error",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`onVideoOutputChange fail: ${JSON.stringify(videoOutputError)}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`onVideoOutputChange fail: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "JSON.stringify(videoOutputError)}`",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "JSON.stringify(videoOutputError)",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "JSON.stringify",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "JSON",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "stringify",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "videoOutputError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onCameraStatusChange(): void {\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onCameraStatusChange",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, 'onCameraStatusChange is called');\n    this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, 'onCameraStatusChange is called');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, 'onCameraStatusChange is called')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'onCameraStatusChange is called'",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.cameraManager.on('cameraStatus', async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cameraManager.on",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraManager",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraManager",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'cameraStatus'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "async (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo): Promise<void> => {\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    }",
                          "children": [
                            {
                              "type": "AsyncKeyword",
                              "label": "async",
                              "children": []
                            },
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "cameraStatusInfo: camera.CameraStatusInfo",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "cameraStatusInfo",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CameraStatusInfo",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CameraStatusInfo",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CameraStatusInfo",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "TypeReference",
                              "label": "Promise<void>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Promise",
                                  "children": []
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`onCameraStatusChange cameraStatus success, cameraId: ${cameraStatusInfo.camera.cameraId}, status: ${cameraStatusInfo.status}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`onCameraStatusChange cameraStatus success, cameraId: ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "cameraStatusInfo.camera.cameraId}, status: ${",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "cameraStatusInfo.camera.cameraId",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "cameraStatusInfo.camera",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "cameraStatusInfo",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "camera",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "cameraId",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "}, status: ${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "cameraStatusInfo.status}`",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "cameraStatusInfo.status",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "cameraStatusInfo",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "status",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onCameraInputChange(): void {\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onCameraInputChange",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }\n  }",
              "children": [
                {
                  "type": "TryStatement",
                  "label": "try {\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    } catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }",
                  "children": [
                    {
                      "type": "Block",
                      "label": "{\n      this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.cameraInput.on('error', this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)], (cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraInput.on",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameraInput",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameraInput",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "on",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'error'",
                                  "children": []
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameras",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameras",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraDeviceIndex') as number)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraDeviceIndex') as number",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraDeviceIndex')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraDeviceIndex'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "NumberKeyword",
                                              "label": "number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(cameraInputError: BusinessError): void => {\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "cameraInputError: BusinessError",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "cameraInputError",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "BusinessError",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "BusinessError",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "VoidKeyword",
                                      "label": "void",
                                      "children": []
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "Logger.info(TAG, `onCameraInputChange cameraInput error code: ${cameraInputError.code}`)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "Logger.info",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "TAG",
                                                  "children": []
                                                },
                                                {
                                                  "type": "TemplateExpression",
                                                  "label": "`onCameraInputChange cameraInput error code: ${cameraInputError.code}`",
                                                  "children": [
                                                    {
                                                      "type": "TemplateHead",
                                                      "label": "`onCameraInputChange cameraInput error code: ${",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "TemplateSpan",
                                                      "label": "cameraInputError.code}`",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "cameraInputError.code",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "cameraInputError",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "code",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "LastTemplateToken",
                                                          "label": "}`",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "CatchClause",
                      "label": "catch (error) {\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "error",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "error",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(TAG, `onCameraInputChange cameraInput occur error: error`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstTemplateToken",
                                      "label": "`onCameraInputChange cameraInput occur error: error`",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onFocusStateChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onFocusStateChange",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.on('focusStateChange', (err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.on",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'focusStateChange'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(err: BusinessError, focusState: camera.FocusState): void => {\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "focusState: camera.FocusState",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "focusState",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.FocusState",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.FocusState",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FocusState",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `onFocusStateChange captureSession focusStateChange success : ${focusState}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`onFocusStateChange captureSession focusStateChange success : ${focusState}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`onFocusStateChange captureSession focusStateChange success : ${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "focusState}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "focusState",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onAbilityChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onAbilityChange",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.on('abilityChange', async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.on",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'abilityChange'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "async (err: BusinessError): Promise<void> => {\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    }",
                          "children": [
                            {
                              "type": "AsyncKeyword",
                              "label": "async",
                              "children": []
                            },
                            {
                              "type": "Parameter",
                              "label": "err: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "err",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "TypeReference",
                              "label": "Promise<void>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Promise",
                                  "children": []
                                },
                                {
                                  "type": "VoidKeyword",
                                  "label": "void",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      let zoomRatioRange: Array<number> = session.getZoomRatioRange();\n      let isMacroSupported: bool = session.isMacroSupported();\n      Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);\n    }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let zoomRatioRange: Array<number> = session.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let zoomRatioRange: Array<number> = session.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "zoomRatioRange: Array<number> = session.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "zoomRatioRange",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "session.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "session.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "session",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstStatement",
                                  "label": "let isMacroSupported: bool = session.isMacroSupported();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let isMacroSupported: bool = session.isMacroSupported()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "isMacroSupported: bool = session.isMacroSupported()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isMacroSupported",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "bool",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "bool",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "session.isMacroSupported()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "session.isMacroSupported",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "session",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isMacroSupported",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`call abilityChange  getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]} isMacroSupported:${isMacroSupported}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`call abilityChange  getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "zoomRatioRange[0]},${",
                                              "children": [
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "zoomRatioRange[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "zoomRatioRange",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "},${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "zoomRatioRange[1]} isMacroSupported:${",
                                              "children": [
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "zoomRatioRange[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "zoomRatioRange",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "} isMacroSupported:${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "isMacroSupported}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "isMacroSupported",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "onCaptureSessionErrorChange(): void {\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "onCaptureSessionErrorChange",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();\n    if (!session) {\n      return;\n    }\n    session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });\n\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "session: camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession = this.getSession()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "UnionType",
                              "label": "camera.PortraitPhotoSession | camera.CaptureSession | camera.NightPhotoSession",
                              "children": [
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CaptureSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CaptureSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CaptureSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.NightPhotoSession",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.NightPhotoSession",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "NightPhotoSession",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getSession()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSession",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!session) {\n      return;\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!session",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "session",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return;",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "session.on('error', (captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "session.on",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "session",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "on",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'error'",
                          "children": []
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(captureSessionError: BusinessError): void => {\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "captureSessionError: BusinessError",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "captureSessionError",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "BusinessError",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "BusinessError",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code));",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, 'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code))",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "'onCaptureSessionErrorChange captureSession fail: ' + JSON.stringify(captureSessionError.code)",
                                          "children": [
                                            {
                                              "type": "StringLiteral",
                                              "label": "'onCaptureSessionErrorChange captureSession fail: '",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "JSON.stringify(captureSessionError.code)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "JSON.stringify",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "JSON",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "stringify",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "captureSessionError.code",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "captureSessionError",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "code",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "setCaptureMode(mode: number): void {\n    this.captureMode = mode;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "setCaptureMode",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "mode: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "mode",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    this.captureMode = mode;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "this.captureMode = mode;",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.captureMode = mode",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.captureMode",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "captureMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "FirstAssignment",
                          "label": "=",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "mode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "getCaptureMode(): number {\n    return this.captureMode;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "getCaptureMode",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return this.captureMode;\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return this.captureMode;",
                  "children": [
                    {
                      "type": "PropertyAccessExpression",
                      "label": "this.captureMode",
                      "children": [
                        {
                          "type": "ThisKeyword",
                          "label": "this",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "captureMode",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isDeferredImageDeliverySupported(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isDeferredImageDeliverySupported",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "deferredType: camera.DeferredDeliveryImageType",
              "children": [
                {
                  "type": "Identifier",
                  "label": "deferredType",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.DeferredDeliveryImageType",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.DeferredDeliveryImageType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "DeferredDeliveryImageType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);\n    return res;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "res: boolean = this.photoOutPut.isDeferredImageDeliverySupported(deferredType)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "res",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.photoOutPut.isDeferredImageDeliverySupported(deferredType)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut.isDeferredImageDeliverySupported",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoOutPut",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoOutPut",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isDeferredImageDeliverySupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "deferredType",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isDeferredImageDeliverySupported deferredType:${deferredType} res: ${res}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isDeferredImageDeliverySupported deferredType:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "deferredType} res: ${",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deferredType",
                                  "children": []
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "} res: ${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "res}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return res;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "res",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "isDeferredImageDeliveryEnabled(deferredType: camera.DeferredDeliveryImageType): boolean {\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "isDeferredImageDeliveryEnabled",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "deferredType: camera.DeferredDeliveryImageType",
              "children": [
                {
                  "type": "Identifier",
                  "label": "deferredType",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.DeferredDeliveryImageType",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.DeferredDeliveryImageType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "DeferredDeliveryImageType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);\n    Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "res: boolean = this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "res",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.photoOutPut.isDeferredImageDeliveryEnabled(deferredType)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.photoOutPut.isDeferredImageDeliveryEnabled",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.photoOutPut",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "photoOutPut",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isDeferredImageDeliveryEnabled",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "deferredType",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`isDeferredImageDeliveryEnabled deferredType:${deferredType} res: ${res}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`isDeferredImageDeliveryEnabled deferredType:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "deferredType} res: ${",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deferredType",
                                  "children": []
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "} res: ${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "res}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "res",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "deferImageDeliveryFor(deferredType: camera.DeferredDeliveryImageType): void {\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "deferImageDeliveryFor",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "deferredType: camera.DeferredDeliveryImageType",
              "children": [
                {
                  "type": "Identifier",
                  "label": "deferredType",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.DeferredDeliveryImageType",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.DeferredDeliveryImageType",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "DeferredDeliveryImageType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);\n    this.photoOutPut.deferImageDelivery(deferredType);\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG, `deferImageDeliveryFor type: ${deferredType}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`deferImageDeliveryFor type: ${deferredType}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`deferImageDeliveryFor type: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "deferredType}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "deferredType",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.photoOutPut.deferImageDelivery(deferredType);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.photoOutPut.deferImageDelivery(deferredType)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.photoOutPut.deferImageDelivery",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.photoOutPut",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoOutPut",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "deferImageDelivery",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "deferredType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "testAbilityFunction(): void {\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "testAbilityFunction",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (this.cameraMode === CameraMode.PORTRAIT) {\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    } else if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "this.cameraMode === CameraMode.PORTRAIT",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.cameraMode",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "cameraMode",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsEqualsToken",
                          "label": "===",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "CameraMode.PORTRAIT",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "CameraMode",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "PORTRAIT",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Logger.info(TAG_AB, `portraitSession ability`);\n      let session: camera.PortraitPhotoSession = this.getSession();\n      this.logPortraitSession(session);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Logger.info(TAG_AB, `portraitSession ability`);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Logger.info(TAG_AB, `portraitSession ability`)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Logger.info",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Logger",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG_AB",
                                  "children": []
                                },
                                {
                                  "type": "FirstTemplateToken",
                                  "label": "`portraitSession ability`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "FirstStatement",
                          "label": "let session: camera.PortraitPhotoSession = this.getSession();",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let session: camera.PortraitPhotoSession = this.getSession()",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "session: camera.PortraitPhotoSession = this.getSession()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "camera.PortraitPhotoSession",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "camera.PortraitPhotoSession",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "PortraitPhotoSession",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "this.getSession()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.getSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSession",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "this.logPortraitSession(session);",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "this.logPortraitSession(session)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.logPortraitSession",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "logPortraitSession",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "session",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "label": "if (this.cameraMode === CameraMode.VIDEO) {\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    } else if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "this.cameraMode === CameraMode.VIDEO",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.cameraMode",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "cameraMode",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "CameraMode.VIDEO",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "CameraMode",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "VIDEO",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Block",
                          "label": "{\n      Logger.info(TAG_AB, `videoSession ability`);\n      let session: camera.VideoSession = this.getSession();\n      this.logVideoSession(session);\n    }",
                          "children": [
                            {
                              "type": "ExpressionStatement",
                              "label": "Logger.info(TAG_AB, `videoSession ability`);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Logger.info(TAG_AB, `videoSession ability`)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "Logger.info",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Logger",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TAG_AB",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstTemplateToken",
                                      "label": "`videoSession ability`",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "FirstStatement",
                              "label": "let session: camera.VideoSession = this.getSession();",
                              "children": [
                                {
                                  "type": "VariableDeclarationList",
                                  "label": "let session: camera.VideoSession = this.getSession()",
                                  "children": [
                                    {
                                      "type": "VariableDeclaration",
                                      "label": "session: camera.VideoSession = this.getSession()",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "session",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.VideoSession",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.VideoSession",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "VideoSession",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "this.getSession()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.getSession",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "getSession",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ExpressionStatement",
                              "label": "this.logVideoSession(session);",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "this.logVideoSession(session)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.logVideoSession",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "logVideoSession",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (this.cameraMode === CameraMode.NORMAL) {\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    } else {\n      Logger.info(TAG, `not support ability`);\n    }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.cameraMode === CameraMode.NORMAL",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.cameraMode",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "cameraMode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "CameraMode.NORMAL",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "CameraMode",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "NORMAL",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG_AB, `photoSession ability`);\n      let session: camera.PhotoSession = this.getSession();\n      this.logPhotoSession(session);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `photoSession ability`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `photoSession ability`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstTemplateToken",
                                          "label": "`photoSession ability`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstStatement",
                                  "label": "let session: camera.PhotoSession = this.getSession();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let session: camera.PhotoSession = this.getSession()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "session: camera.PhotoSession = this.getSession()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "camera.PhotoSession",
                                              "children": [
                                                {
                                                  "type": "FirstNode",
                                                  "label": "camera.PhotoSession",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "camera",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "PhotoSession",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "this.getSession()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.getSession",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getSession",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.logPhotoSession(session);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.logPhotoSession(session)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.logPhotoSession",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "logPhotoSession",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "session",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG, `not support ability`);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG, `not support ability`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG, `not support ability`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG",
                                          "children": []
                                        },
                                        {
                                          "type": "FirstTemplateToken",
                                          "label": "`not support ability`",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logPortraitSession(session: camera.PortraitPhotoSession): void {\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logPortraitSession",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "session: camera.PortraitPhotoSession",
              "children": [
                {
                  "type": "Identifier",
                  "label": "session",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.PortraitPhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PortraitPhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PortraitPhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "list: Array<camera.PortraitPhotoConflictFunctions> = session.getSessionConflictFunctions()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "list",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PortraitPhotoConflictFunctions>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoConflictFunctions",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoConflictFunctions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoConflictFunctions",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getSessionConflictFunctions()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getSessionConflictFunctions",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSessionConflictFunctions",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "list.forEach((conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "list.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "list",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(conflictFunctions) => {\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "conflictFunctions",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "conflictFunctions",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      this.logPortraitPhotoConflictFunctions(conflictFunctions);\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "this.logPortraitPhotoConflictFunctions(conflictFunctions);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.logPortraitPhotoConflictFunctions(conflictFunctions)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.logPortraitPhotoConflictFunctions",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "logPortraitPhotoConflictFunctions",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "conflictFunctions",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cocList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.CameraOutputCapability>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CameraOutputCapability",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CameraOutputCapability",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CameraOutputCapability",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getCameraOutputCapabilities",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getCameraOutputCapabilities",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameras",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameras",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraDeviceIndex') as number)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraDeviceIndex') as number",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraDeviceIndex')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraDeviceIndex'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "NumberKeyword",
                                              "label": "number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let coc: camera.CameraOutputCapability = cocList[0];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let coc: camera.CameraOutputCapability = cocList[0]",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "coc: camera.CameraOutputCapability = cocList[0]",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "coc",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.CameraOutputCapability",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.CameraOutputCapability",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CameraOutputCapability",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "cocList[0]",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "cocList",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.logCameraOutputCapabilities(coc);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.logCameraOutputCapabilities(coc)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.logCameraOutputCapabilities",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "logCameraOutputCapabilities",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "coc",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (coc) {\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "coc",
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "functionsList: Array<camera.PortraitPhotoFunctions> = session.getSessionFunctions(coc)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functionsList",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Array<camera.PortraitPhotoFunctions>",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Array",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.PortraitPhotoFunctions",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.PortraitPhotoFunctions",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "PortraitPhotoFunctions",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "session.getSessionFunctions(coc)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.getSessionFunctions",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSessionFunctions",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "coc",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "functionsList.forEach((functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functionsList.forEach",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functionsList",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forEach",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(functions) => {\n        this.logPortraitPhotoFunctions(functions);\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "functions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "functions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        this.logPortraitPhotoFunctions(functions);\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.logPortraitPhotoFunctions(functions);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.logPortraitPhotoFunctions(functions)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.logPortraitPhotoFunctions",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "logPortraitPhotoFunctions",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "functions",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logVideoSession(session: camera.VideoSession): void {\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logVideoSession",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "session: camera.VideoSession",
              "children": [
                {
                  "type": "Identifier",
                  "label": "session",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.VideoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "list: Array<camera.PortraitPhotoFunctions> = session.getSessionConflictFunctions()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "list",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PortraitPhotoFunctions>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitPhotoFunctions",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitPhotoFunctions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitPhotoFunctions",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getSessionConflictFunctions()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getSessionConflictFunctions",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSessionConflictFunctions",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "list.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "list",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "conflictFunctions",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "conflictFunctions",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "zoomRatioRange",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "conflictFunctions.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "conflictFunctions.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "conflictFunctions",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`VideoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`VideoConflictFunctions getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "zoomRatioRange[0]},${",
                                              "children": [
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "zoomRatioRange[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "zoomRatioRange",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "},${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "zoomRatioRange[1]}`",
                                              "children": [
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "zoomRatioRange[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "zoomRatioRange",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstStatement",
                                  "label": "let isMacroSupported: bool = conflictFunctions.isMacroSupported();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let isMacroSupported: bool = conflictFunctions.isMacroSupported()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "isMacroSupported: bool = conflictFunctions.isMacroSupported()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isMacroSupported",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "bool",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "bool",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "conflictFunctions.isMacroSupported()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "conflictFunctions.isMacroSupported",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "conflictFunctions",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isMacroSupported",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `VideoConflictFunctions isMacroSupported:${isMacroSupported}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`VideoConflictFunctions isMacroSupported:${isMacroSupported}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`VideoConflictFunctions isMacroSupported:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "isMacroSupported}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "isMacroSupported",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cocList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.CameraOutputCapability>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CameraOutputCapability",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CameraOutputCapability",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CameraOutputCapability",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getCameraOutputCapabilities",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getCameraOutputCapabilities",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameras",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameras",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraDeviceIndex') as number)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraDeviceIndex') as number",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraDeviceIndex')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraDeviceIndex'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "NumberKeyword",
                                              "label": "number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let coc: camera.CameraOutputCapability = cocList[0];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let coc: camera.CameraOutputCapability = cocList[0]",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "coc: camera.CameraOutputCapability = cocList[0]",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "coc",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.CameraOutputCapability",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.CameraOutputCapability",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CameraOutputCapability",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "cocList[0]",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "cocList",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.logCameraOutputCapabilities(coc);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.logCameraOutputCapabilities(coc)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.logCameraOutputCapabilities",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "logCameraOutputCapabilities",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "coc",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (coc) {\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "coc",
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "functionsList: Array<camera.VideoFunctions> = session.getSessionFunctions(coc)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functionsList",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Array<camera.VideoFunctions>",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Array",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.VideoFunctions",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.VideoFunctions",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "VideoFunctions",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "session.getSessionFunctions(coc)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.getSessionFunctions",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSessionFunctions",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "coc",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "functionsList.forEach((functions) => {\n        this.logVideoFunctions(functions);\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functionsList.forEach",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functionsList",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forEach",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(functions) => {\n        this.logVideoFunctions(functions);\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "functions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "functions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        this.logVideoFunctions(functions);\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.logVideoFunctions(functions);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.logVideoFunctions(functions)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.logVideoFunctions",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "logVideoFunctions",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "functions",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logPhotoSession(session: camera.PhotoSession): void {\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logPhotoSession",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "session: camera.PhotoSession",
              "children": [
                {
                  "type": "Identifier",
                  "label": "session",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.PhotoSession",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PhotoSession",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PhotoSession",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();\n    list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });\n    let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);\n    let coc: camera.CameraOutputCapability = cocList[0];\n    this.logCameraOutputCapabilities(coc);\n    if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "list: Array<camera.PhotoConflictFunctions> = session.getSessionConflictFunctions()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "list",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PhotoConflictFunctions>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PhotoConflictFunctions",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PhotoConflictFunctions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PhotoConflictFunctions",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getSessionConflictFunctions()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getSessionConflictFunctions",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSessionConflictFunctions",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "list.forEach((conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "list.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "list",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(conflictFunctions) => {\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "conflictFunctions",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "conflictFunctions",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n      Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n      let isMacroSupported: bool = conflictFunctions.isMacroSupported();\n      Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);\n    }",
                              "children": [
                                {
                                  "type": "FirstStatement",
                                  "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "zoomRatioRange",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "Array<number>",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "Array",
                                                  "children": []
                                                },
                                                {
                                                  "type": "NumberKeyword",
                                                  "label": "number",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "conflictFunctions.getZoomRatioRange()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "conflictFunctions.getZoomRatioRange",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "conflictFunctions",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getZoomRatioRange",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`PhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`PhotoConflictFunctions getZoomRatioRange:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "zoomRatioRange[0]},${",
                                              "children": [
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "zoomRatioRange[0]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "zoomRatioRange",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "},${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "zoomRatioRange[1]}`",
                                              "children": [
                                                {
                                                  "type": "ElementAccessExpression",
                                                  "label": "zoomRatioRange[1]",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "zoomRatioRange",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "FirstLiteralToken",
                                                      "label": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstStatement",
                                  "label": "let isMacroSupported: bool = conflictFunctions.isMacroSupported();",
                                  "children": [
                                    {
                                      "type": "VariableDeclarationList",
                                      "label": "let isMacroSupported: bool = conflictFunctions.isMacroSupported()",
                                      "children": [
                                        {
                                          "type": "VariableDeclaration",
                                          "label": "isMacroSupported: bool = conflictFunctions.isMacroSupported()",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "isMacroSupported",
                                              "children": []
                                            },
                                            {
                                              "type": "TypeReference",
                                              "label": "bool",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "bool",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "conflictFunctions.isMacroSupported()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "conflictFunctions.isMacroSupported",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "conflictFunctions",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "isMacroSupported",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `PhotoConflictFunctions isMacroSupported:${isMacroSupported}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`PhotoConflictFunctions isMacroSupported:${isMacroSupported}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`PhotoConflictFunctions isMacroSupported:${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "isMacroSupported}`",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "isMacroSupported",
                                                  "children": []
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "cocList: Array<camera.CameraOutputCapability> = session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "cocList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.CameraOutputCapability>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.CameraOutputCapability",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.CameraOutputCapability",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "CameraOutputCapability",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "session.getCameraOutputCapabilities(this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "session.getCameraOutputCapabilities",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "session",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getCameraOutputCapabilities",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "this.cameras[(this.globalContext.getObject('cameraDeviceIndex') as number)]",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.cameras",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "cameras",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(this.globalContext.getObject('cameraDeviceIndex') as number)",
                                      "children": [
                                        {
                                          "type": "AsExpression",
                                          "label": "this.globalContext.getObject('cameraDeviceIndex') as number",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.globalContext.getObject('cameraDeviceIndex')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.globalContext.getObject",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "this.globalContext",
                                                      "children": [
                                                        {
                                                          "type": "ThisKeyword",
                                                          "label": "this",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "globalContext",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "getObject",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'cameraDeviceIndex'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "NumberKeyword",
                                              "label": "number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let coc: camera.CameraOutputCapability = cocList[0];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let coc: camera.CameraOutputCapability = cocList[0]",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "coc: camera.CameraOutputCapability = cocList[0]",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "coc",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "camera.CameraOutputCapability",
                              "children": [
                                {
                                  "type": "FirstNode",
                                  "label": "camera.CameraOutputCapability",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "camera",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "CameraOutputCapability",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "cocList[0]",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "cocList",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "this.logCameraOutputCapabilities(coc);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.logCameraOutputCapabilities(coc)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.logCameraOutputCapabilities",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "logCameraOutputCapabilities",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "coc",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (coc) {\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "coc",
                      "children": []
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);\n      functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc);",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc)",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "functionsList: Array<camera.PhotoFunctions> = session.getSessionFunctions(coc)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functionsList",
                                      "children": []
                                    },
                                    {
                                      "type": "TypeReference",
                                      "label": "Array<camera.PhotoFunctions>",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Array",
                                          "children": []
                                        },
                                        {
                                          "type": "TypeReference",
                                          "label": "camera.PhotoFunctions",
                                          "children": [
                                            {
                                              "type": "FirstNode",
                                              "label": "camera.PhotoFunctions",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "camera",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "PhotoFunctions",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "session.getSessionFunctions(coc)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "session.getSessionFunctions",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "session",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSessionFunctions",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "coc",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      });",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "functionsList.forEach((functions) => {\n        this.logPhotoFunctions(functions);\n      })",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functionsList.forEach",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functionsList",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "forEach",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ArrowFunction",
                                  "label": "(functions) => {\n        this.logPhotoFunctions(functions);\n      }",
                                  "children": [
                                    {
                                      "type": "Parameter",
                                      "label": "functions",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "functions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "EqualsGreaterThanToken",
                                      "label": "=>",
                                      "children": []
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        this.logPhotoFunctions(functions);\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "this.logPhotoFunctions(functions);",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "this.logPhotoFunctions(functions)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "this.logPhotoFunctions",
                                                  "children": [
                                                    {
                                                      "type": "ThisKeyword",
                                                      "label": "this",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "logPhotoFunctions",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "functions",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logPortraitPhotoFunctions(functions: camera.PortraitPhotoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logPortraitPhotoFunctions",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "functions: camera.PortraitPhotoFunctions",
              "children": [
                {
                  "type": "Identifier",
                  "label": "functions",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.PortraitPhotoFunctions",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PortraitPhotoFunctions",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PortraitPhotoFunctions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let hasFlash: bool = functions.hasFlash();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hasFlash: bool = functions.hasFlash()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hasFlash: bool = functions.hasFlash()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hasFlash",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.hasFlash()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.hasFlash",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hasFlash",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions hasFlash:${hasFlash}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions hasFlash:${hasFlash}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions hasFlash:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "hasFlash}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "hasFlash",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFlashModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isFlashModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFlashModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.FlashMode.FLASH_MODE_CLOSE",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.FlashMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FlashMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "FLASH_MODE_CLOSE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions isFlashModeSupported:${isFlashModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions isFlashModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFlashModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFlashModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isLcdFlashSupported: bool = functions.isLcdFlashSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isLcdFlashSupported: bool = functions.isLcdFlashSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isLcdFlashSupported: bool = functions.isLcdFlashSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isLcdFlashSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isLcdFlashSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isLcdFlashSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isLcdFlashSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions isLcdFlashSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isLcdFlashSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isLcdFlashSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isExposureModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isExposureModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isExposureModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.ExposureMode.EXPOSURE_MODE_LOCKED",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.ExposureMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ExposureMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "EXPOSURE_MODE_LOCKED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions isExposureModeSupported:${isExposureModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions isExposureModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isExposureModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isExposureModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposureBiasRange: Array<number> = functions.getExposureBiasRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposureBiasRange: Array<number> = functions.getExposureBiasRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposureBiasRange: Array<number> = functions.getExposureBiasRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposureBiasRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getExposureBiasRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getExposureBiasRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getExposureBiasRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getExposureBiasRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBiasRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "exposureBiasRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureBiasRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBiasRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "exposureBiasRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureBiasRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFocusModeSupported",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isFocusModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.FocusMode.FOCUS_MODE_MANUAL",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.FocusMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FocusMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "FOCUS_MODE_MANUAL",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions isFocusModeSupported:${isFocusModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions isFocusModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFocusModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFocusModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let zoomRatioRange: Array<number> = functions.getZoomRatioRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let zoomRatioRange: Array<number> = functions.getZoomRatioRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "zoomRatioRange: Array<number> = functions.getZoomRatioRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "zoomRatioRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getZoomRatioRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getZoomRatioRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getZoomRatioRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getZoomRatioRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beautyTypeList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.BeautyType>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.BeautyType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.BeautyType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "BeautyType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedBeautyTypes()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedBeautyTypes",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedBeautyTypes",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getSupportedBeautyTypes:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyTypeList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyTypeList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0])",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0])",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beautyRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedBeautyRange(beautyTypeList[0])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedBeautyRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedBeautyRange",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getSupportedBeautyRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorEffectList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.ColorEffectType>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.ColorEffectType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.ColorEffectType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorEffectType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedColorEffects()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedColorEffects",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedColorEffects",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getSupportedColorEffects:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorEffectList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorEffectList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorEffectList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorEffectList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorEffectList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorEffectList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorSpacesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.colorSpaceManager.ColorSpace>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.colorSpaceManager.ColorSpace",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.colorSpaceManager.ColorSpace",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "camera.colorSpaceManager",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "colorSpaceManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorSpace",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedColorSpaces()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedColorSpaces",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedColorSpaces",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getSupportedColorSpaces:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorSpacesList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorSpacesList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpacesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorSpacesList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorSpacesList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpacesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "portraitEffectsList: Array<camera.PortraitEffect> = functions.getSupportedPortraitEffects()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "portraitEffectsList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PortraitEffect>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitEffect",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitEffect",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitEffect",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedPortraitEffects()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedPortraitEffects",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedPortraitEffects",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getSupportedPortraitEffects:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "portraitEffectsList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "portraitEffectsList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "portraitEffectsList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "portraitEffectsList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "portraitEffectsList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "portraitEffectsList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "virtualAperturesList: Array<number> = functions.getSupportedVirtualApertures()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "virtualAperturesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedVirtualApertures()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedVirtualApertures",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedVirtualApertures",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoFunctions getSupportedVirtualApertures:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "virtualAperturesList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "virtualAperturesList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "virtualAperturesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "virtualAperturesList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "virtualAperturesList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "virtualAperturesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "physicalAperturesList: Array<camera.PhysicalAperture> = functions.getSupportedPhysicalApertures()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "physicalAperturesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PhysicalAperture>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PhysicalAperture",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PhysicalAperture",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PhysicalAperture",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedPhysicalApertures()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedPhysicalApertures",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedPhysicalApertures",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "physicalAperturesList.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "physicalAperturesList",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "physicalAperture",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "physicalAperture",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`PortraitPhotoFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`PortraitPhotoFunctions PhysicalAperture: zoomRange${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "physicalAperture.zoomRange.min},${",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "physicalAperture.zoomRange.min",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "physicalAperture.zoomRange",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "physicalAperture",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "zoomRange",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "min",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "},${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "physicalAperture.zoomRange.max}`",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "physicalAperture.zoomRange.max",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "physicalAperture.zoomRange",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "physicalAperture",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "zoomRange",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "max",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "physicalAperture.apertures.forEach",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "physicalAperture.apertures",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "physicalAperture",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "apertures",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "aperture",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "aperture",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.info(TAG_AB, `           with aperture: ${aperture} `);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.info(TAG_AB, `           with aperture: ${aperture} `)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG_AB",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`           with aperture: ${aperture} `",
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`           with aperture: ${",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "aperture} `",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "aperture",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "} `",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logVideoFunctions(functions: camera.VideoFunctions): void {\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logVideoFunctions",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "functions: camera.VideoFunctions",
              "children": [
                {
                  "type": "Identifier",
                  "label": "functions",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.VideoFunctions",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.VideoFunctions",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "VideoFunctions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();\n    Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let hasFlash: bool = functions.hasFlash();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hasFlash: bool = functions.hasFlash()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hasFlash: bool = functions.hasFlash()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hasFlash",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.hasFlash()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.hasFlash",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hasFlash",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions hasFlash:${hasFlash}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions hasFlash:${hasFlash}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions hasFlash:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "hasFlash}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "hasFlash",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFlashModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isFlashModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFlashModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.FlashMode.FLASH_MODE_CLOSE",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.FlashMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FlashMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "FLASH_MODE_CLOSE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions isFlashModeSupported:${isFlashModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions isFlashModeSupported:${isFlashModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions isFlashModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFlashModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFlashModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isLcdFlashSupported: bool = functions.isLcdFlashSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isLcdFlashSupported: bool = functions.isLcdFlashSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isLcdFlashSupported: bool = functions.isLcdFlashSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isLcdFlashSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isLcdFlashSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isLcdFlashSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isLcdFlashSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions isLcdFlashSupported:${isLcdFlashSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions isLcdFlashSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isLcdFlashSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isLcdFlashSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isExposureModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isExposureModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isExposureModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.ExposureMode.EXPOSURE_MODE_LOCKED",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.ExposureMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ExposureMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "EXPOSURE_MODE_LOCKED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions isExposureModeSupported:${isExposureModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions isExposureModeSupported:${isExposureModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions isExposureModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isExposureModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isExposureModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposureBiasRange: Array<number> = functions.getExposureBiasRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposureBiasRange: Array<number> = functions.getExposureBiasRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposureBiasRange: Array<number> = functions.getExposureBiasRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposureBiasRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getExposureBiasRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getExposureBiasRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getExposureBiasRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions getExposureBiasRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBiasRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "exposureBiasRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureBiasRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBiasRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "exposureBiasRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureBiasRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFocusModeSupported",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isFocusModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.FocusMode.FOCUS_MODE_MANUAL",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.FocusMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FocusMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "FOCUS_MODE_MANUAL",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions isFocusModeSupported:${isFocusModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions isFocusModeSupported:${isFocusModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions isFocusModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFocusModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFocusModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let zoomRatioRange: Array<number> = functions.getZoomRatioRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let zoomRatioRange: Array<number> = functions.getZoomRatioRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "zoomRatioRange: Array<number> = functions.getZoomRatioRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "zoomRatioRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getZoomRatioRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getZoomRatioRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getZoomRatioRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions getZoomRatioRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beautyTypeList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.BeautyType>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.BeautyType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.BeautyType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "BeautyType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedBeautyTypes()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedBeautyTypes",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedBeautyTypes",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions getSupportedBeautyTypes:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyTypeList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyTypeList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0])",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0])",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beautyRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedBeautyRange(beautyTypeList[0])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedBeautyRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedBeautyRange",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions getSupportedBeautyRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorEffectList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.ColorEffectType>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.ColorEffectType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.ColorEffectType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorEffectType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedColorEffects()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedColorEffects",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedColorEffects",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions getSupportedColorEffects:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorEffectList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorEffectList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorEffectList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorEffectList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorEffectList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorEffectList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorSpacesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.colorSpaceManager.ColorSpace>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.colorSpaceManager.ColorSpace",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.colorSpaceManager.ColorSpace",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "camera.colorSpaceManager",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "colorSpaceManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorSpace",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedColorSpaces()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedColorSpaces",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedColorSpaces",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions getSupportedColorSpaces:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorSpacesList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorSpacesList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpacesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorSpacesList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorSpacesList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpacesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isVideoStabilizationModeSupported: bool = functions.isVideoStabilizationModeSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isVideoStabilizationModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isVideoStabilizationModeSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isVideoStabilizationModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isVideoStabilizationModeSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions isVideoStabilizationModeSupported:${isVideoStabilizationModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions isVideoStabilizationModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isVideoStabilizationModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isVideoStabilizationModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isMacroSupported: bool = functions.isMacroSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isMacroSupported: bool = functions.isMacroSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isMacroSupported: bool = functions.isMacroSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isMacroSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isMacroSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isMacroSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isMacroSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `VideoFunctions isMacroSupported:${isMacroSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`VideoFunctions isMacroSupported:${isMacroSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`VideoFunctions isMacroSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isMacroSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isMacroSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logPhotoFunctions(functions: camera.PhotoFunctions): void {\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logPhotoFunctions",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "functions: camera.PhotoFunctions",
              "children": [
                {
                  "type": "Identifier",
                  "label": "functions",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.PhotoFunctions",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PhotoFunctions",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PhotoFunctions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);\n    let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);\n    let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);\n    Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);\n    let exposureRange: Array<number> = functions.getSupportedExposureRange();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);\n    let hasFlash: bool = functions.hasFlash();\n    Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);\n    let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);\n    Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);\n    let isLcdFlashSupported: bool = functions.isLcdFlashSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);\n    let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);\n    Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);\n    let exposureBiasRange: Array<number> = functions.getExposureBiasRange();\n    Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);\n    let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);\n    Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);\n    let zoomRatioRange: Array<number> = functions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);\n    let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);\n    let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);\n    let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();\n    Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);\n    let isMacroSupported: bool = functions.isMacroSupported();\n    Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isMoonSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isMoonSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isSceneFeatureSupported(camera.SceneFeatureType.MOON_CAPTURE_BOOST)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isSceneFeatureSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSceneFeatureSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.SceneFeatureType.MOON_CAPTURE_BOOST",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneFeatureType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SceneFeatureType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "MOON_CAPTURE_BOOST",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isSceneFeatureSupported moon:${isMoonSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isSceneFeatureSupported moon:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isMoonSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isMoonSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isTripodDetectionSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isTripodDetectionSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isSceneFeatureSupported(camera.SceneFeatureType.TRIPOD_DETECTION)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isSceneFeatureSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSceneFeatureSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.SceneFeatureType.TRIPOD_DETECTION",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneFeatureType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SceneFeatureType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "TRIPOD_DETECTION",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isSceneFeatureSupported tripod:${isTripodDetectionSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isSceneFeatureSupported tripod:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isTripodDetectionSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isTripodDetectionSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isLowLightSupported: bool = functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isLowLightSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isSceneFeatureSupported(camera.SceneFeatureType.LOW_LIGHT_BOOTST)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isSceneFeatureSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isSceneFeatureSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.SceneFeatureType.LOW_LIGHT_BOOTST",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.SceneFeatureType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SceneFeatureType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "LOW_LIGHT_BOOTST",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isSceneFeatureSupported lowlight:${isLowLightSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isSceneFeatureSupported lowlight:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isLowLightSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isLowLightSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposureRange: Array<number> = functions.getSupportedExposureRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposureRange: Array<number> = functions.getSupportedExposureRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposureRange: Array<number> = functions.getSupportedExposureRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposureRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedExposureRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedExposureRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedExposureRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getSupportedExposureRange size:${exposureRange.length}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getSupportedExposureRange size:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureRange.length}`",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "exposureRange.length",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureRange",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "length",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let hasFlash: bool = functions.hasFlash();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hasFlash: bool = functions.hasFlash()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hasFlash: bool = functions.hasFlash()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hasFlash",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.hasFlash()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.hasFlash",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hasFlash",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions hasFlash:${hasFlash}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions hasFlash:${hasFlash}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions hasFlash:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "hasFlash}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "hasFlash",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFlashModeSupported: bool = functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFlashModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isFlashModeSupported(camera.FlashMode.FLASH_MODE_CLOSE)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isFlashModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFlashModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.FlashMode.FLASH_MODE_CLOSE",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.FlashMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FlashMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "FLASH_MODE_CLOSE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isFlashModeSupported:${isFlashModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isFlashModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFlashModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFlashModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isLcdFlashSupported: bool = functions.isLcdFlashSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isLcdFlashSupported: bool = functions.isLcdFlashSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isLcdFlashSupported: bool = functions.isLcdFlashSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isLcdFlashSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isLcdFlashSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isLcdFlashSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isLcdFlashSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isLcdFlashSupported:${isLcdFlashSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isLcdFlashSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isLcdFlashSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isLcdFlashSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isExposureModeSupported: bool = functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isExposureModeSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isExposureModeSupported(camera.ExposureMode.EXPOSURE_MODE_LOCKED)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isExposureModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isExposureModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.ExposureMode.EXPOSURE_MODE_LOCKED",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.ExposureMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ExposureMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "EXPOSURE_MODE_LOCKED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isExposureModeSupported:${isExposureModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isExposureModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isExposureModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isExposureModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let exposureBiasRange: Array<number> = functions.getExposureBiasRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let exposureBiasRange: Array<number> = functions.getExposureBiasRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "exposureBiasRange: Array<number> = functions.getExposureBiasRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "exposureBiasRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getExposureBiasRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getExposureBiasRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getExposureBiasRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getExposureBiasRange:${exposureBiasRange[0]},${exposureBiasRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getExposureBiasRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBiasRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "exposureBiasRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureBiasRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "exposureBiasRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "exposureBiasRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "exposureBiasRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isFocusModeSupported: boolean = functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isFocusModeSupported",
                              "children": []
                            },
                            {
                              "type": "BooleanKeyword",
                              "label": "boolean",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_MANUAL)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isFocusModeSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isFocusModeSupported",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "camera.FocusMode.FOCUS_MODE_MANUAL",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "camera.FocusMode",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "FocusMode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "FOCUS_MODE_MANUAL",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isFocusModeSupported:${isFocusModeSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isFocusModeSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isFocusModeSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isFocusModeSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let zoomRatioRange: Array<number> = functions.getZoomRatioRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let zoomRatioRange: Array<number> = functions.getZoomRatioRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "zoomRatioRange: Array<number> = functions.getZoomRatioRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "zoomRatioRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getZoomRatioRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getZoomRatioRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getZoomRatioRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getZoomRatioRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "beautyTypeList: Array<camera.BeautyType> = functions.getSupportedBeautyTypes()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beautyTypeList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.BeautyType>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.BeautyType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.BeautyType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "BeautyType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedBeautyTypes()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedBeautyTypes",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedBeautyTypes",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getSupportedBeautyTypes:${beautyTypeList[0]},${beautyTypeList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getSupportedBeautyTypes:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyTypeList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyTypeList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0]);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0])",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "beautyRange: Array<number> = functions.getSupportedBeautyRange(beautyTypeList[0])",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "beautyRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedBeautyRange(beautyTypeList[0])",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedBeautyRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedBeautyRange",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyTypeList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyTypeList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getSupportedBeautyRange:${beautyRange[0]},${beautyRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getSupportedBeautyRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "beautyRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "beautyRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "beautyRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorEffectList: Array<camera.ColorEffectType> = functions.getSupportedColorEffects()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorEffectList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.ColorEffectType>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.ColorEffectType",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.ColorEffectType",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorEffectType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedColorEffects()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedColorEffects",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedColorEffects",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getSupportedColorEffects:${colorEffectList[0]},${colorEffectList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getSupportedColorEffects:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorEffectList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorEffectList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorEffectList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorEffectList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorEffectList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorEffectList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "colorSpacesList: Array<camera.colorSpaceManager.ColorSpace> = functions.getSupportedColorSpaces()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "colorSpacesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.colorSpaceManager.ColorSpace>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.colorSpaceManager.ColorSpace",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.colorSpaceManager.ColorSpace",
                                      "children": [
                                        {
                                          "type": "FirstNode",
                                          "label": "camera.colorSpaceManager",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "camera",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "colorSpaceManager",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "ColorSpace",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.getSupportedColorSpaces()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.getSupportedColorSpaces",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedColorSpaces",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions getSupportedColorSpaces:${colorSpacesList[0]},${colorSpacesList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions getSupportedColorSpaces:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorSpacesList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorSpacesList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpacesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "colorSpacesList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "colorSpacesList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "colorSpacesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let isMacroSupported: bool = functions.isMacroSupported();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let isMacroSupported: bool = functions.isMacroSupported()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "isMacroSupported: bool = functions.isMacroSupported()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isMacroSupported",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "bool",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "functions.isMacroSupported()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "functions.isMacroSupported",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "functions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "isMacroSupported",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PhotoFunctions isMacroSupported:${isMacroSupported}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PhotoFunctions isMacroSupported:${isMacroSupported}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PhotoFunctions isMacroSupported:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "isMacroSupported}`",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "isMacroSupported",
                                  "children": []
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logPortraitPhotoConflictFunctions(conflictFunctions: camera.PortraitPhotoConflictFunctions): void {\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logPortraitPhotoConflictFunctions",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "conflictFunctions: camera.PortraitPhotoConflictFunctions",
              "children": [
                {
                  "type": "Identifier",
                  "label": "conflictFunctions",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.PortraitPhotoConflictFunctions",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.PortraitPhotoConflictFunctions",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "PortraitPhotoConflictFunctions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);\n    let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);\n    let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();\n    Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);\n    let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();\n    physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "zoomRatioRange: Array<number> = conflictFunctions.getZoomRatioRange()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "zoomRatioRange",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "conflictFunctions.getZoomRatioRange()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "conflictFunctions.getZoomRatioRange",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "conflictFunctions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getZoomRatioRange",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoConflictFunctions getZoomRatioRange:${zoomRatioRange[0]},${zoomRatioRange[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoConflictFunctions getZoomRatioRange:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "zoomRatioRange[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "zoomRatioRange[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zoomRatioRange",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "portraitEffectsList: Array<camera.PortraitEffect> = conflictFunctions.getSupportedPortraitEffects()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "portraitEffectsList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PortraitEffect>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PortraitEffect",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PortraitEffect",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PortraitEffect",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "conflictFunctions.getSupportedPortraitEffects()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "conflictFunctions.getSupportedPortraitEffects",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "conflictFunctions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedPortraitEffects",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoConflictFunctions getSupportedPortraitEffects:${portraitEffectsList[0]},${portraitEffectsList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoConflictFunctions getSupportedPortraitEffects:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "portraitEffectsList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "portraitEffectsList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "portraitEffectsList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "portraitEffectsList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "portraitEffectsList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "portraitEffectsList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "virtualAperturesList: Array<number> = conflictFunctions.getSupportedVirtualApertures()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "virtualAperturesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "conflictFunctions.getSupportedVirtualApertures()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "conflictFunctions.getSupportedVirtualApertures",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "conflictFunctions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedVirtualApertures",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`PortraitPhotoConflictFunctions getSupportedVirtualApertures:${virtualAperturesList[0]},${virtualAperturesList[1]}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`PortraitPhotoConflictFunctions getSupportedVirtualApertures:${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "virtualAperturesList[0]},${",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "virtualAperturesList[0]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "virtualAperturesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "TemplateMiddle",
                                  "label": "},${",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "virtualAperturesList[1]}`",
                              "children": [
                                {
                                  "type": "ElementAccessExpression",
                                  "label": "virtualAperturesList[1]",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "virtualAperturesList",
                                      "children": []
                                    },
                                    {
                                      "type": "FirstLiteralToken",
                                      "label": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "physicalAperturesList: Array<camera.PhysicalAperture> = conflictFunctions.getSupportedPhysicalApertures()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "physicalAperturesList",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.PhysicalAperture>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.PhysicalAperture",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.PhysicalAperture",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "PhysicalAperture",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "CallExpression",
                              "label": "conflictFunctions.getSupportedPhysicalApertures()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "conflictFunctions.getSupportedPhysicalApertures",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "conflictFunctions",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getSupportedPhysicalApertures",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "physicalAperturesList.forEach((physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "physicalAperturesList.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "physicalAperturesList",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(physicalAperture) => {\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "physicalAperture",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "physicalAperture",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);\n      physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });\n    }",
                              "children": [
                                {
                                  "type": "ExpressionStatement",
                                  "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`);",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Logger.info(TAG_AB, `PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Logger.info",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Logger",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "TAG_AB",
                                          "children": []
                                        },
                                        {
                                          "type": "TemplateExpression",
                                          "label": "`PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${physicalAperture.zoomRange.min},${physicalAperture.zoomRange.max}`",
                                          "children": [
                                            {
                                              "type": "TemplateHead",
                                              "label": "`PortraitPhotoConflictFunctions PhysicalAperture: zoomRange${",
                                              "children": []
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "physicalAperture.zoomRange.min},${",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "physicalAperture.zoomRange.min",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "physicalAperture.zoomRange",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "physicalAperture",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "zoomRange",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "min",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "TemplateMiddle",
                                                  "label": "},${",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "TemplateSpan",
                                              "label": "physicalAperture.zoomRange.max}`",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "physicalAperture.zoomRange.max",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "physicalAperture.zoomRange",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "physicalAperture",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "zoomRange",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "max",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "LastTemplateToken",
                                                  "label": "}`",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "label": "physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      });",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "physicalAperture.apertures.forEach((aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      })",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "physicalAperture.apertures.forEach",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "physicalAperture.apertures",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "physicalAperture",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "apertures",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "forEach",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ArrowFunction",
                                          "label": "(aperture) => {\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      }",
                                          "children": [
                                            {
                                              "type": "Parameter",
                                              "label": "aperture",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "aperture",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsGreaterThanToken",
                                              "label": "=>",
                                              "children": []
                                            },
                                            {
                                              "type": "Block",
                                              "label": "{\n        Logger.info(TAG_AB, `           with aperture: ${aperture} `);\n      }",
                                              "children": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "label": "Logger.info(TAG_AB, `           with aperture: ${aperture} `);",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "Logger.info(TAG_AB, `           with aperture: ${aperture} `)",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "Logger.info",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "info",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "TAG_AB",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "TemplateExpression",
                                                          "label": "`           with aperture: ${aperture} `",
                                                          "children": [
                                                            {
                                                              "type": "TemplateHead",
                                                              "label": "`           with aperture: ${",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "TemplateSpan",
                                                              "label": "aperture} `",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "aperture",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "LastTemplateToken",
                                                                  "label": "} `",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "logCameraOutputCapabilities(coc: camera.CameraOutputCapability): void {\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }",
          "children": [
            {
              "type": "Identifier",
              "label": "logCameraOutputCapabilities",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "coc: camera.CameraOutputCapability",
              "children": [
                {
                  "type": "Identifier",
                  "label": "coc",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "camera.CameraOutputCapability",
                  "children": [
                    {
                      "type": "FirstNode",
                      "label": "camera.CameraOutputCapability",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "camera",
                          "children": []
                        },
                        {
                          "type": "Identifier",
                          "label": "CameraOutputCapability",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let previewProfiles: Array<camera.Profile> = coc.previewProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);\n    let photoProfiles: Array<camera.Profile> = coc.photoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);\n    let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;\n    Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let previewProfiles: Array<camera.Profile> = coc.previewProfiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let previewProfiles: Array<camera.Profile> = coc.previewProfiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "previewProfiles: Array<camera.Profile> = coc.previewProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "previewProfiles",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.Profile>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Profile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Profile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "coc.previewProfiles",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "coc",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "previewProfiles",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getCameraOutputCapabilities previewProfiles: ${JSON.stringify(previewProfiles)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getCameraOutputCapabilities previewProfiles: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(previewProfiles)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(previewProfiles)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "previewProfiles",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let photoProfiles: Array<camera.Profile> = coc.photoProfiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let photoProfiles: Array<camera.Profile> = coc.photoProfiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "photoProfiles: Array<camera.Profile> = coc.photoProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "photoProfiles",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.Profile>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.Profile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.Profile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "Profile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "coc.photoProfiles",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "coc",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "photoProfiles",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getCameraOutputCapabilities photoProfiles: ${JSON.stringify(photoProfiles)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getCameraOutputCapabilities photoProfiles: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(photoProfiles)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(photoProfiles)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "photoProfiles",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles;",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "videoProfiles: Array<camera.VideoProfile> = coc.videoProfiles",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "videoProfiles",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Array<camera.VideoProfile>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Array",
                                  "children": []
                                },
                                {
                                  "type": "TypeReference",
                                  "label": "camera.VideoProfile",
                                  "children": [
                                    {
                                      "type": "FirstNode",
                                      "label": "camera.VideoProfile",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "camera",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "VideoProfile",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PropertyAccessExpression",
                              "label": "coc.videoProfiles",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "coc",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "videoProfiles",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Logger.info(TAG_AB, `getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Logger.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Logger",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG_AB",
                          "children": []
                        },
                        {
                          "type": "TemplateExpression",
                          "label": "`getCameraOutputCapabilities videoProfiles: ${JSON.stringify(videoProfiles)}`",
                          "children": [
                            {
                              "type": "TemplateHead",
                              "label": "`getCameraOutputCapabilities videoProfiles: ${",
                              "children": []
                            },
                            {
                              "type": "TemplateSpan",
                              "label": "JSON.stringify(videoProfiles)}`",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "JSON.stringify(videoProfiles)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "JSON.stringify",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "JSON",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "stringify",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "videoProfiles",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "LastTemplateToken",
                                  "label": "}`",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ExportAssignment",
      "label": "export default new CameraService();",
      "children": [
        {
          "type": "NewExpression",
          "label": "new CameraService()",
          "children": [
            {
              "type": "Identifier",
              "label": "CameraService",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}