{
  "type": "SourceFile",
  "label": "import { Log } from './Log';\nimport i18n from '@ohos.i18n';\nimport Intl from '@ohos.intl';\n\nconst TAG = 'DateUtil';\n\nexport class DateUtil {\n  private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;\n\n  private static readonly FORMAT_DECIMAL: number = 10;\n  public static readonly MILLISECONDS_PER_SECOND: number = 1000;\n  public static readonly SECONDS_PER_MINUTE: number = 60;\n  public static readonly SECONDS_PER_HOUR: number = 3600;\n\n  private static readonly NEW_NAME_IMG: string = 'IMG_';\n  private static readonly NEW_NAME_EDIT: string = 'edit_';\n\n\n  private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }\n\n  // Get the date after localization (year-month-day)\n  public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }\n\n  public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }\n\n  public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }\n\n  // Gets the localization date of the photo page grouping data\n  public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }\n\n  public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }\n\n  public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }\n\n  public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }\n\n  public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }\n\n  static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }\n\n  // Format duration\n  public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }\n\n  private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }\n\n  public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }\n\n  public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }\n\n  public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }\n\n  public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }\n\n  public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }\n}\n",
  "children": [
    {
      "type": "ImportDeclaration",
      "label": "import { Log } from './Log';",
      "children": [
        {
          "type": "ImportClause",
          "label": "{ Log }",
          "children": [
            {
              "type": "NamedImports",
              "label": "{ Log }",
              "children": [
                {
                  "type": "ImportSpecifier",
                  "label": "Log",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Log",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'./Log'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import i18n from '@ohos.i18n';",
      "children": [
        {
          "type": "ImportClause",
          "label": "i18n",
          "children": [
            {
              "type": "Identifier",
              "label": "i18n",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.i18n'",
          "children": []
        }
      ]
    },
    {
      "type": "ImportDeclaration",
      "label": "import Intl from '@ohos.intl';",
      "children": [
        {
          "type": "ImportClause",
          "label": "Intl",
          "children": [
            {
              "type": "Identifier",
              "label": "Intl",
              "children": []
            }
          ]
        },
        {
          "type": "StringLiteral",
          "label": "'@ohos.intl'",
          "children": []
        }
      ]
    },
    {
      "type": "FirstStatement",
      "label": "const TAG = 'DateUtil';",
      "children": [
        {
          "type": "VariableDeclarationList",
          "label": "const TAG = 'DateUtil'",
          "children": [
            {
              "type": "VariableDeclaration",
              "label": "TAG = 'DateUtil'",
              "children": [
                {
                  "type": "Identifier",
                  "label": "TAG",
                  "children": []
                },
                {
                  "type": "StringLiteral",
                  "label": "'DateUtil'",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ClassDeclaration",
      "label": "export class DateUtil {\n  private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;\n\n  private static readonly FORMAT_DECIMAL: number = 10;\n  public static readonly MILLISECONDS_PER_SECOND: number = 1000;\n  public static readonly SECONDS_PER_MINUTE: number = 60;\n  public static readonly SECONDS_PER_HOUR: number = 3600;\n\n  private static readonly NEW_NAME_IMG: string = 'IMG_';\n  private static readonly NEW_NAME_EDIT: string = 'edit_';\n\n\n  private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }\n\n  // Get the date after localization (year-month-day)\n  public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }\n\n  public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }\n\n  public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }\n\n  // Gets the localization date of the photo page grouping data\n  public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }\n\n  public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }\n\n  public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }\n\n  public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }\n\n  public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }\n\n  static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }\n\n  // Format duration\n  public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }\n\n  private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }\n\n  public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }\n\n  public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }\n\n  public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }\n\n  public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }\n\n  public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }\n}",
      "children": [
        {
          "type": "ExportKeyword",
          "label": "export",
          "children": []
        },
        {
          "type": "Identifier",
          "label": "DateUtil",
          "children": []
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static LANGUAGE_LOCALES_MAP: Map<string, string> = null;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "LANGUAGE_LOCALES_MAP",
              "children": []
            },
            {
              "type": "TypeReference",
              "label": "Map<string, string>",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Map",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "NullKeyword",
              "label": "null",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly FORMAT_DECIMAL: number = 10;",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "FORMAT_DECIMAL",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "10",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "public static readonly MILLISECONDS_PER_SECOND: number = 1000;",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "MILLISECONDS_PER_SECOND",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "1000",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "public static readonly SECONDS_PER_MINUTE: number = 60;",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "SECONDS_PER_MINUTE",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "60",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "public static readonly SECONDS_PER_HOUR: number = 3600;",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "SECONDS_PER_HOUR",
              "children": []
            },
            {
              "type": "NumberKeyword",
              "label": "number",
              "children": []
            },
            {
              "type": "FirstLiteralToken",
              "label": "3600",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly NEW_NAME_IMG: string = 'IMG_';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "NEW_NAME_IMG",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'IMG_'",
              "children": []
            }
          ]
        },
        {
          "type": "PropertyDeclaration",
          "label": "private static readonly NEW_NAME_EDIT: string = 'edit_';",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "ReadonlyKeyword",
              "label": "readonly",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "NEW_NAME_EDIT",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "StringLiteral",
              "label": "'edit_'",
              "children": []
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private static initLanguageLocalesMap(): void {\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "initLanguageLocalesMap",
              "children": []
            },
            {
              "type": "VoidKeyword",
              "label": "void",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (DateUtil.LANGUAGE_LOCALES_MAP == null) {\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "DateUtil.LANGUAGE_LOCALES_MAP == null",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "DateUtil.LANGUAGE_LOCALES_MAP",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "DateUtil",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "LANGUAGE_LOCALES_MAP",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();\n      DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');\n      DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>();",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "DateUtil.LANGUAGE_LOCALES_MAP = new Map<string, string>()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "DateUtil.LANGUAGE_LOCALES_MAP",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "DateUtil",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "LANGUAGE_LOCALES_MAP",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "NewExpression",
                                  "label": "new Map<string, string>()",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Map",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "DateUtil.LANGUAGE_LOCALES_MAP.set('zh', 'zh-CN')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "DateUtil.LANGUAGE_LOCALES_MAP.set",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "DateUtil.LANGUAGE_LOCALES_MAP",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "DateUtil",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "LANGUAGE_LOCALES_MAP",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "set",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'zh'",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'zh-CN'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "DateUtil.LANGUAGE_LOCALES_MAP.set('en', 'en-US')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "DateUtil.LANGUAGE_LOCALES_MAP.set",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "DateUtil.LANGUAGE_LOCALES_MAP",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "DateUtil",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "LANGUAGE_LOCALES_MAP",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "set",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'en'",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'en-US'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getLocalizedDate(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getLocalizedDate",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let locales: string = this.getLocales();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let locales: string = this.getLocales()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "locales: string = this.getLocales()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "locales",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getLocales()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getLocales",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getLocales",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds));",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format(new Date(milliseconds))",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')).format",
                          "children": [
                            {
                              "type": "NewExpression",
                              "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', 'numeric', '', ''))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Intl.DateTimeFormat",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Intl",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "DateTimeFormat",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "locales",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.buildDateTimeOpt('numeric', 'long', 'numeric', '', '')",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.buildDateTimeOpt",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "buildDateTimeOpt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'numeric'",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'long'",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'numeric'",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "format",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "NewExpression",
                          "label": "new Date(milliseconds)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Date",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "milliseconds",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static format(time: Date, format_s?: string): string {\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "format",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "time: Date",
              "children": [
                {
                  "type": "Identifier",
                  "label": "time",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Date",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Date",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "format_s?: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "format_s",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    let check: RegExp = new RegExp('/(y+)/');\n    if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format_s;\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (!Boolean<string>(format_s).valueOf()) {\n      return time.valueOf().toString();\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!Boolean<string>(format_s).valueOf()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "Boolean<string>(format_s).valueOf()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Boolean<string>(format_s).valueOf",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Boolean<string>(format_s)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "format_s",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "valueOf",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return time.valueOf().toString();\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return time.valueOf().toString();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "time.valueOf().toString()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "time.valueOf().toString",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "time.valueOf()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "time.valueOf",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "time",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "valueOf",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "toString",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let opts: Map<string, number> = new Map<string, number>();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let opts: Map<string, number> = new Map<string, number>()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "opts: Map<string, number> = new Map<string, number>()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Map<string, number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Map",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "NewExpression",
                              "label": "new Map<string, number>()",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Map",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('MM', time.getMonth() + 1);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('MM', time.getMonth() + 1)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'MM'",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "time.getMonth() + 1",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "time.getMonth()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "time.getMonth",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "time",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getMonth",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('dd', time.getDate());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('dd', time.getDate())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'dd'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getDate()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getDate",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getDate",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('HH', time.getHours());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('HH', time.getHours())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'HH'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getHours()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getHours",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getHours",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('mm', time.getMinutes());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('mm', time.getMinutes())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'mm'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getMinutes()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getMinutes",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getMinutes",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('ss', time.getSeconds());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('ss', time.getSeconds())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'ss'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getSeconds()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getSeconds",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getSeconds",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let check: RegExp = new RegExp('/(y+)/');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let check: RegExp = new RegExp('/(y+)/')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "check: RegExp = new RegExp('/(y+)/')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "check",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "RegExp",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "NewExpression",
                              "label": "new RegExp('/(y+)/')",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'/(y+)/'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (check.test(format_s)) {\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "check.test(format_s)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "check.test",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "check",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "test",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "format_s",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0));",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "format_s = format_s.replace('yyyy', time.getFullYear().toString().substr(0))",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "format_s",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "format_s.replace('yyyy', time.getFullYear().toString().substr(0))",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "format_s.replace",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "format_s",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "replace",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'yyyy'",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "time.getFullYear().toString().substr(0)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "time.getFullYear().toString().substr",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "time.getFullYear().toString()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "time.getFullYear().toString",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "time.getFullYear()",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "time.getFullYear",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "time",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getFullYear",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "toString",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "substr",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "value: number",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "value",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "key: string",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "key",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (new RegExp('(' + key + ')').test(format_s)) {\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "new RegExp('(' + key + ')').test(format_s)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "new RegExp('(' + key + ')').test",
                                          "children": [
                                            {
                                              "type": "NewExpression",
                                              "label": "new RegExp('(' + key + ')')",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "RegExp",
                                                  "children": []
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "'(' + key + ')'",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "'(' + key",
                                                      "children": [
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'('",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PlusToken",
                                                          "label": "+",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "key",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PlusToken",
                                                      "label": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "')'",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "test",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "format_s",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "format_s = format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        )",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "format_s",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstAssignment",
                                                  "label": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "format_s.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        )",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "format_s.replace",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "format_s",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "replace",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "key",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "(key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))",
                                                      "children": [
                                                        {
                                                          "type": "ParenthesizedExpression",
                                                          "label": "(key.length === 1)",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "key.length === 1",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "key.length",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "key",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "length",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "value.toString()",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "value.toString",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "value",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toString",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ParenthesizedExpression",
                                                          "label": "(('00' + value).substr(value.toString().length))",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "('00' + value).substr(value.toString().length)",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "('00' + value).substr",
                                                                  "children": [
                                                                    {
                                                                      "type": "ParenthesizedExpression",
                                                                      "label": "('00' + value)",
                                                                      "children": [
                                                                        {
                                                                          "type": "BinaryExpression",
                                                                          "label": "'00' + value",
                                                                          "children": [
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "'00'",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PlusToken",
                                                                              "label": "+",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "value",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "substr",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "value.toString().length",
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "value.toString()",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "value.toString",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "value",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "toString",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "length",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return format_s;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "format_s",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getDateTimeFormat(milliseconds: number): string {\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getDateTimeFormat",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');\n  }",
              "children": [
                {
                  "type": "ReturnStatement",
                  "label": "return DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss');",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "DateUtil.format(new Date(milliseconds), 'yyyy/MM/dd HH:mm:ss')",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "DateUtil.format",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "DateUtil",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "format",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "NewExpression",
                          "label": "new Date(milliseconds)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Date",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "milliseconds",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'yyyy/MM/dd HH:mm:ss'",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getGroupDataLocalizedDate(milliseconds: number): Resource {\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getGroupDataLocalizedDate",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Resource",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Resource",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let date = new Date(milliseconds);\n    let today = new Date();\n    if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }\n    return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let date = new Date(milliseconds);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let date = new Date(milliseconds)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "date = new Date(milliseconds)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "date",
                              "children": []
                            },
                            {
                              "type": "NewExpression",
                              "label": "new Date(milliseconds)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Date",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "milliseconds",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let today = new Date();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let today = new Date()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "today = new Date()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "today",
                              "children": []
                            },
                            {
                              "type": "NewExpression",
                              "label": "new Date()",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Date",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()) {\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth()",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "date.getFullYear() === today.getFullYear()",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "date.getFullYear()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "date.getFullYear",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "date",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getFullYear",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "today.getFullYear()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "today.getFullYear",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "today",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getFullYear",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "AmpersandAmpersandToken",
                          "label": "&&",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "date.getMonth() === today.getMonth()",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "date.getMonth()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "date.getMonth",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "date",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getMonth",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "today.getMonth()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "today.getMonth",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "today",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getMonth",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }\n      if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }\n    }",
                      "children": [
                        {
                          "type": "IfStatement",
                          "label": "if (date.getDate() === today.getDate()) {\n        return $r('app.string.date_today');\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "date.getDate() === today.getDate()",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "date.getDate()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "date.getDate",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "date",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getDate",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "today.getDate()",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "today.getDate",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "today",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "getDate",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        return $r('app.string.date_today');\n      }",
                              "children": [
                                {
                                  "type": "ReturnStatement",
                                  "label": "return $r('app.string.date_today');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "$r('app.string.date_today')",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "$r",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'app.string.date_today'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "IfStatement",
                          "label": "if (today.getDate() - date.getDate() === 1) {\n        return $r('app.string.date_yesterday');\n      }",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "today.getDate() - date.getDate() === 1",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "today.getDate() - date.getDate()",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "today.getDate()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "today.getDate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "today",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getDate",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "MinusToken",
                                      "label": "-",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "date.getDate()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "date.getDate",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "date",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getDate",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "EqualsEqualsEqualsToken",
                                  "label": "===",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Block",
                              "label": "{\n        return $r('app.string.date_yesterday');\n      }",
                              "children": [
                                {
                                  "type": "ReturnStatement",
                                  "label": "return $r('app.string.date_yesterday');",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "$r('app.string.date_yesterday')",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "$r",
                                          "children": []
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "label": "'app.string.date_yesterday'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return $r('app.string.common_place_holder', this.getLocalizedDate(milliseconds));",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "$r('app.string.common_place_holder', this.getLocalizedDate(milliseconds))",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "$r",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'app.string.common_place_holder'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "this.getLocalizedDate(milliseconds)",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.getLocalizedDate",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getLocalizedDate",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "milliseconds",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getLocalizedYear(milliseconds: number): Resource {\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getLocalizedYear",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Resource",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Resource",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let locales: string = this.getLocales();\n\n    let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));\n    return $r('app.string.common_place_holder', yearText.toString());\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let locales: string = this.getLocales();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let locales: string = this.getLocales()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "locales: string = this.getLocales()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "locales",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getLocales()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getLocales",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getLocales",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds));",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds))",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "yearText = new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds))",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "yearText",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', ''))",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Intl.DateTimeFormat",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Intl",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "DateTimeFormat",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "locales",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "this.buildDateTimeOpt('numeric', '', '', '', '')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.buildDateTimeOpt",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "buildDateTimeOpt",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'numeric'",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "format",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "NewExpression",
                                  "label": "new Date(milliseconds)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Date",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "milliseconds",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return $r('app.string.common_place_holder', yearText.toString());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "$r('app.string.common_place_holder', yearText.toString())",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "$r",
                          "children": []
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'app.string.common_place_holder'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "yearText.toString()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "yearText.toString",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "yearText",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "toString",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getLocalizedYearAndMonth(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getLocalizedYearAndMonth",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let locales: string = this.getLocales();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let locales: string = this.getLocales()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "locales: string = this.getLocales()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "locales",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getLocales()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getLocales",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getLocales",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds));",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format(new Date(milliseconds))",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', '')).format",
                          "children": [
                            {
                              "type": "NewExpression",
                              "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', 'long', '', '', ''))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Intl.DateTimeFormat",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Intl",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "DateTimeFormat",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "locales",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.buildDateTimeOpt('numeric', 'long', '', '', '')",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.buildDateTimeOpt",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "buildDateTimeOpt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'numeric'",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'long'",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "format",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "NewExpression",
                          "label": "new Date(milliseconds)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Date",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "milliseconds",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getLocalizedYearString(milliseconds: number): string {\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getLocalizedYearString",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let locales: string = this.getLocales();\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let locales: string = this.getLocales();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let locales: string = this.getLocales()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "locales: string = this.getLocales()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "locales",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getLocales()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getLocales",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getLocales",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds)).toString",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format(new Date(milliseconds))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', '')).format",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('numeric', '', '', '', ''))",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Intl.DateTimeFormat",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Intl",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "DateTimeFormat",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "locales",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "this.buildDateTimeOpt('numeric', '', '', '', '')",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.buildDateTimeOpt",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "buildDateTimeOpt",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'numeric'",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "''",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "format",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "NewExpression",
                                  "label": "new Date(milliseconds)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Date",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "milliseconds",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "toString",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getLocalizedTime(milliseconds: number): string {\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getLocalizedTime",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliseconds: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliseconds",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let locales: string = this.getLocales();\n    let is24HourClock = i18n.is24HourClock();\n    Log.info(TAG, 'get is24HourClock ' + is24HourClock);\n\n    return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let locales: string = this.getLocales();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let locales: string = this.getLocales()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "locales: string = this.getLocales()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "locales",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.getLocales()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.getLocales",
                                  "children": [
                                    {
                                      "type": "ThisKeyword",
                                      "label": "this",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getLocales",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let is24HourClock = i18n.is24HourClock();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let is24HourClock = i18n.is24HourClock()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "is24HourClock = i18n.is24HourClock()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "is24HourClock",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "i18n.is24HourClock()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "i18n.is24HourClock",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "i18n",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "is24HourClock",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "Log.info(TAG, 'get is24HourClock ' + is24HourClock);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "Log.info(TAG, 'get is24HourClock ' + is24HourClock)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "Log.info",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Log",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "info",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "TAG",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "'get is24HourClock ' + is24HourClock",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'get is24HourClock '",
                              "children": []
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "is24HourClock",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds));",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format(new Date(milliseconds))",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')).format",
                          "children": [
                            {
                              "type": "NewExpression",
                              "label": "new Intl.DateTimeFormat(locales, this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit'))",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Intl.DateTimeFormat",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Intl",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "DateTimeFormat",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "locales",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.buildDateTimeOpt('', '', '', (!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'), '2-digit')",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.buildDateTimeOpt",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "buildDateTimeOpt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    },
                                    {
                                      "type": "ParenthesizedExpression",
                                      "label": "(!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric')",
                                      "children": [
                                        {
                                          "type": "ConditionalExpression",
                                          "label": "!Boolean<boolean>(is24HourClock).valueOf() ? '2-digit' : 'numeric'",
                                          "children": [
                                            {
                                              "type": "PrefixUnaryExpression",
                                              "label": "!Boolean<boolean>(is24HourClock).valueOf()",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "Boolean<boolean>(is24HourClock).valueOf()",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "Boolean<boolean>(is24HourClock).valueOf",
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "Boolean<boolean>(is24HourClock)",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "Boolean",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "BooleanKeyword",
                                                              "label": "boolean",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "is24HourClock",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "valueOf",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "QuestionToken",
                                              "label": "?",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'2-digit'",
                                              "children": []
                                            },
                                            {
                                              "type": "ColonToken",
                                              "label": ":",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "'numeric'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'2-digit'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "format",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "NewExpression",
                          "label": "new Date(milliseconds)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "Date",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "milliseconds",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "static getLocales(): string {\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }",
          "children": [
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getLocales",
              "children": []
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    DateUtil.initLanguageLocalesMap();\n    let systemLocale: string = i18n.getSystemLanguage().toString();\n    let language = systemLocale.split('-')[0];\n    let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');\n    if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }\n    return locales;\n  }",
              "children": [
                {
                  "type": "ExpressionStatement",
                  "label": "DateUtil.initLanguageLocalesMap();",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "DateUtil.initLanguageLocalesMap()",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "DateUtil.initLanguageLocalesMap",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "DateUtil",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "initLanguageLocalesMap",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let systemLocale: string = i18n.getSystemLanguage().toString();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let systemLocale: string = i18n.getSystemLanguage().toString()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "systemLocale: string = i18n.getSystemLanguage().toString()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "systemLocale",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "i18n.getSystemLanguage().toString()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "i18n.getSystemLanguage().toString",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "i18n.getSystemLanguage()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "i18n.getSystemLanguage",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "i18n",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "getSystemLanguage",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "toString",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let language = systemLocale.split('-')[0];",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let language = systemLocale.split('-')[0]",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "language = systemLocale.split('-')[0]",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "language",
                              "children": []
                            },
                            {
                              "type": "ElementAccessExpression",
                              "label": "systemLocale.split('-')[0]",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "systemLocale.split('-')",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "systemLocale.split",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "systemLocale",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "split",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'-'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let locales: string = this.LANGUAGE_LOCALES_MAP.get('en');",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let locales: string = this.LANGUAGE_LOCALES_MAP.get('en')",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "locales: string = this.LANGUAGE_LOCALES_MAP.get('en')",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "locales",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "this.LANGUAGE_LOCALES_MAP.get('en')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "this.LANGUAGE_LOCALES_MAP.get",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.LANGUAGE_LOCALES_MAP",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "LANGUAGE_LOCALES_MAP",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'en'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (this.LANGUAGE_LOCALES_MAP.has(language)) {\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "this.LANGUAGE_LOCALES_MAP.has(language)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.LANGUAGE_LOCALES_MAP.has",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "this.LANGUAGE_LOCALES_MAP",
                              "children": [
                                {
                                  "type": "ThisKeyword",
                                  "label": "this",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "LANGUAGE_LOCALES_MAP",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "has",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "language",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      locales = this.LANGUAGE_LOCALES_MAP.get(language);\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "locales = this.LANGUAGE_LOCALES_MAP.get(language);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "locales = this.LANGUAGE_LOCALES_MAP.get(language)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "locales",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.LANGUAGE_LOCALES_MAP.get(language)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.LANGUAGE_LOCALES_MAP.get",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.LANGUAGE_LOCALES_MAP",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "LANGUAGE_LOCALES_MAP",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "language",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return locales;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "locales",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static getFormattedDuration(milliSecond: number): string {\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "getFormattedDuration",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "milliSecond: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "milliSecond",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }\n    if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }\n    if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }\n    let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);\n    let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);\n    let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);\n    let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);\n    if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (milliSecond == null) {\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "milliSecond == null",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "milliSecond",
                          "children": []
                        },
                        {
                          "type": "EqualsEqualsToken",
                          "label": "==",
                          "children": []
                        },
                        {
                          "type": "NullKeyword",
                          "label": "null",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'getFormattedDuration, input is null!');\n      return '00:00';\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'getFormattedDuration, input is null!');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'getFormattedDuration, input is null!')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'getFormattedDuration, input is null!'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return '00:00';",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'00:00'",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (milliSecond <= 0) {\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "milliSecond <= 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "milliSecond",
                          "children": []
                        },
                        {
                          "type": "LessThanEqualsToken",
                          "label": "<=",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'getFormattedDuration, input is negative number!');\n      return '00:00';\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'getFormattedDuration, input is negative number!');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'getFormattedDuration, input is negative number!')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'getFormattedDuration, input is negative number!'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return '00:00';",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'00:00'",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (milliSecond < this.MILLISECONDS_PER_SECOND) {\n      return '00:01';\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "milliSecond < this.MILLISECONDS_PER_SECOND",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "milliSecond",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "this.MILLISECONDS_PER_SECOND",
                          "children": [
                            {
                              "type": "ThisKeyword",
                              "label": "this",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "MILLISECONDS_PER_SECOND",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return '00:01';\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return '00:01';",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'00:01'",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "seconds = Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "seconds",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "Math.floor(milliSecond / this.MILLISECONDS_PER_SECOND)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Math.floor",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Math",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "floor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "milliSecond / this.MILLISECONDS_PER_SECOND",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "milliSecond",
                                      "children": []
                                    },
                                    {
                                      "type": "SlashToken",
                                      "label": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.MILLISECONDS_PER_SECOND",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "MILLISECONDS_PER_SECOND",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "hourTime: number = Math.floor(seconds / this.SECONDS_PER_HOUR)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "hourTime",
                              "children": []
                            },
                            {
                              "type": "NumberKeyword",
                              "label": "number",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "Math.floor(seconds / this.SECONDS_PER_HOUR)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Math.floor",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Math",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "floor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "seconds / this.SECONDS_PER_HOUR",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "seconds",
                                      "children": []
                                    },
                                    {
                                      "type": "SlashToken",
                                      "label": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.SECONDS_PER_HOUR",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SECONDS_PER_HOUR",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "minuteTime: number = Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "minuteTime",
                              "children": []
                            },
                            {
                              "type": "NumberKeyword",
                              "label": "number",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "Math.floor(Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Math.floor",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Math",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "floor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "Math.floor(seconds / this.SECONDS_PER_MINUTE) % this.SECONDS_PER_MINUTE",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "Math.floor(seconds / this.SECONDS_PER_MINUTE)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "Math.floor",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "Math",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "floor",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "seconds / this.SECONDS_PER_MINUTE",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "seconds",
                                              "children": []
                                            },
                                            {
                                              "type": "SlashToken",
                                              "label": "/",
                                              "children": []
                                            },
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.SECONDS_PER_MINUTE",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "SECONDS_PER_MINUTE",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PercentToken",
                                      "label": "%",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.SECONDS_PER_MINUTE",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SECONDS_PER_MINUTE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "secondTime: number = Math.floor(seconds % this.SECONDS_PER_MINUTE)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "secondTime",
                              "children": []
                            },
                            {
                              "type": "NumberKeyword",
                              "label": "number",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "Math.floor(seconds % this.SECONDS_PER_MINUTE)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Math.floor",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Math",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "floor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "BinaryExpression",
                                  "label": "seconds % this.SECONDS_PER_MINUTE",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "seconds",
                                      "children": []
                                    },
                                    {
                                      "type": "PercentToken",
                                      "label": "%",
                                      "children": []
                                    },
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.SECONDS_PER_MINUTE",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "SECONDS_PER_MINUTE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (hourTime > 0) {\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    } else {\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "hourTime > 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "hourTime",
                          "children": []
                        },
                        {
                          "type": "GreaterThanToken",
                          "label": ">",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "hourTime + ':' + this.checkTime(minuteTime) + ':' + this.checkTime(secondTime)",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "hourTime + ':' + this.checkTime(minuteTime) + ':'",
                                  "children": [
                                    {
                                      "type": "BinaryExpression",
                                      "label": "hourTime + ':' + this.checkTime(minuteTime)",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "hourTime + ':'",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "hourTime",
                                              "children": []
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "StringLiteral",
                                              "label": "':'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "PlusToken",
                                          "label": "+",
                                          "children": []
                                        },
                                        {
                                          "type": "CallExpression",
                                          "label": "this.checkTime(minuteTime)",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "this.checkTime",
                                              "children": [
                                                {
                                                  "type": "ThisKeyword",
                                                  "label": "this",
                                                  "children": []
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "checkTime",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "minuteTime",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "':'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.checkTime(secondTime)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.checkTime",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "checkTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "secondTime",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return this.checkTime(minuteTime) + ':' + this.checkTime(secondTime);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "this.checkTime(minuteTime) + ':' + this.checkTime(secondTime)",
                              "children": [
                                {
                                  "type": "BinaryExpression",
                                  "label": "this.checkTime(minuteTime) + ':'",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "this.checkTime(minuteTime)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "this.checkTime",
                                          "children": [
                                            {
                                              "type": "ThisKeyword",
                                              "label": "this",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "checkTime",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "minuteTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "PlusToken",
                                      "label": "+",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "':'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "this.checkTime(secondTime)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "this.checkTime",
                                      "children": [
                                        {
                                          "type": "ThisKeyword",
                                          "label": "this",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "checkTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "secondTime",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "private static checkTime(time: number): string {\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }",
          "children": [
            {
              "type": "PrivateKeyword",
              "label": "private",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "checkTime",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "time: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "time",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }\n    let formatTime: string = time.toString();\n    if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }\n    return formatTime;\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (time < 0) {\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "time < 0",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "time",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "FirstLiteralToken",
                          "label": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      Log.warn(TAG, 'checkTime, input is negative number!');\n      return '00';\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "Log.warn(TAG, 'checkTime, input is negative number!');",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "Log.warn(TAG, 'checkTime, input is negative number!')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "Log.warn",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Log",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "warn",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "TAG",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'checkTime, input is negative number!'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ReturnStatement",
                          "label": "return '00';",
                          "children": [
                            {
                              "type": "StringLiteral",
                              "label": "'00'",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let formatTime: string = time.toString();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let formatTime: string = time.toString()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "formatTime: string = time.toString()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "formatTime",
                              "children": []
                            },
                            {
                              "type": "StringKeyword",
                              "label": "string",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "time.toString()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "time.toString",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "time",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "toString",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (time < DateUtil.FORMAT_DECIMAL) {\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "time < DateUtil.FORMAT_DECIMAL",
                      "children": [
                        {
                          "type": "Identifier",
                          "label": "time",
                          "children": []
                        },
                        {
                          "type": "FirstBinaryOperator",
                          "label": "<",
                          "children": []
                        },
                        {
                          "type": "PropertyAccessExpression",
                          "label": "DateUtil.FORMAT_DECIMAL",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "DateUtil",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "FORMAT_DECIMAL",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      let zeroString = '0';\n      formatTime = zeroString.concat(formatTime);\n    }",
                      "children": [
                        {
                          "type": "FirstStatement",
                          "label": "let zeroString = '0';",
                          "children": [
                            {
                              "type": "VariableDeclarationList",
                              "label": "let zeroString = '0'",
                              "children": [
                                {
                                  "type": "VariableDeclaration",
                                  "label": "zeroString = '0'",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "zeroString",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'0'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ExpressionStatement",
                          "label": "formatTime = zeroString.concat(formatTime);",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "formatTime = zeroString.concat(formatTime)",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "formatTime",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "zeroString.concat(formatTime)",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "zeroString.concat",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "zeroString",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "concat",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "formatTime",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return formatTime;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "formatTime",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static isTheSameDay(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "isTheSameDay",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "startTime: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "startTime",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "endTime: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "endTime",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);\n    const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);\n    return startTimeMs === endTimeMs ? true : false;\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (startTime == null || endTime == null) {\n      return false;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "startTime == null || endTime == null",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "startTime == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "startTime",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "endTime == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "endTime",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return false;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return false;",
                          "children": [
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const startTimeMs = new Date(startTime).setHours(0, 0, 0, 0)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "startTimeMs = new Date(startTime).setHours(0, 0, 0, 0)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "startTimeMs",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "new Date(startTime).setHours(0, 0, 0, 0)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new Date(startTime).setHours",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new Date(startTime)",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Date",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "startTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setHours",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0);",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const endTimeMs = new Date(endTime).setHours(0, 0, 0, 0)",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "endTimeMs = new Date(endTime).setHours(0, 0, 0, 0)",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "endTimeMs",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "new Date(endTime).setHours(0, 0, 0, 0)",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new Date(endTime).setHours",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new Date(endTime)",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Date",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "endTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "setHours",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                },
                                {
                                  "type": "FirstLiteralToken",
                                  "label": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return startTimeMs === endTimeMs ? true : false;",
                  "children": [
                    {
                      "type": "ConditionalExpression",
                      "label": "startTimeMs === endTimeMs ? true : false",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "startTimeMs === endTimeMs",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "startTimeMs",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "endTimeMs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "QuestionToken",
                          "label": "?",
                          "children": []
                        },
                        {
                          "type": "TrueKeyword",
                          "label": "true",
                          "children": []
                        },
                        {
                          "type": "ColonToken",
                          "label": ":",
                          "children": []
                        },
                        {
                          "type": "FalseKeyword",
                          "label": "false",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static isTheSameYear(startTime: number, endTime: number): boolean {\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "isTheSameYear",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "startTime: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "startTime",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "endTime: number",
              "children": [
                {
                  "type": "Identifier",
                  "label": "endTime",
                  "children": []
                },
                {
                  "type": "NumberKeyword",
                  "label": "number",
                  "children": []
                }
              ]
            },
            {
              "type": "BooleanKeyword",
              "label": "boolean",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (startTime == null || endTime == null) {\n      return false;\n    }\n    const startYear = new Date(startTime).getFullYear();\n    const endYear = new Date(endTime).getFullYear();\n    return startYear === endYear ? true : false;\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (startTime == null || endTime == null) {\n      return false;\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "startTime == null || endTime == null",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "startTime == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "startTime",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "BarBarToken",
                          "label": "||",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "endTime == null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "endTime",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsToken",
                              "label": "==",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return false;\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return false;",
                          "children": [
                            {
                              "type": "FalseKeyword",
                              "label": "false",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const startYear = new Date(startTime).getFullYear();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const startYear = new Date(startTime).getFullYear()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "startYear = new Date(startTime).getFullYear()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "startYear",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "new Date(startTime).getFullYear()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new Date(startTime).getFullYear",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new Date(startTime)",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Date",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "startTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getFullYear",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "const endYear = new Date(endTime).getFullYear();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "const endYear = new Date(endTime).getFullYear()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "endYear = new Date(endTime).getFullYear()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "endYear",
                              "children": []
                            },
                            {
                              "type": "CallExpression",
                              "label": "new Date(endTime).getFullYear()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "new Date(endTime).getFullYear",
                                  "children": [
                                    {
                                      "type": "NewExpression",
                                      "label": "new Date(endTime)",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "Date",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "endTime",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getFullYear",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return startYear === endYear ? true : false;",
                  "children": [
                    {
                      "type": "ConditionalExpression",
                      "label": "startYear === endYear ? true : false",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "startYear === endYear",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "startYear",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "endYear",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "QuestionToken",
                          "label": "?",
                          "children": []
                        },
                        {
                          "type": "TrueKeyword",
                          "label": "true",
                          "children": []
                        },
                        {
                          "type": "ColonToken",
                          "label": ":",
                          "children": []
                        },
                        {
                          "type": "FalseKeyword",
                          "label": "false",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static buildDateTimeOpt(year: string, month: string, day: string, hour: string, minute: string): Object {\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "buildDateTimeOpt",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "year: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "year",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "month: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "month",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "day: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "day",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "hour: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "hour",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "minute: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "minute",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "TypeReference",
              "label": "Object",
              "children": [
                {
                  "type": "Identifier",
                  "label": "Object",
                  "children": []
                }
              ]
            },
            {
              "type": "Block",
              "label": "{\n    let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };\n    return obj;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    };",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    }",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "obj: Object = {\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    }",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "obj",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Object",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Object",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "ObjectLiteralExpression",
                              "label": "{\n      locale: '',\n      dateStyle: '',\n      timeStyle: '',\n      hourCycle: '',\n      timeZone: '',\n      numberingSystem: '',\n      hour12: false,\n      weekday: '',\n      era: '',\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: '',\n      timeZoneName: '',\n      dayPeriod: '',\n      localeMatcher: '',\n      formatMatcher: '',\n    }",
                              "children": [
                                {
                                  "type": "PropertyAssignment",
                                  "label": "locale: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "locale",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "dateStyle: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dateStyle",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "timeStyle: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "timeStyle",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "hourCycle: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "hourCycle",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "timeZone: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "timeZone",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "numberingSystem: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "numberingSystem",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "hour12: false",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "hour12",
                                      "children": []
                                    },
                                    {
                                      "type": "FalseKeyword",
                                      "label": "false",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "weekday: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "weekday",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "era: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "era",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "year: year",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "year",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "year",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "month: month",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "month",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "month",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "day: day",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "day",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "day",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "hour: hour",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "hour",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "hour",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "minute: minute",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "minute",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "minute",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "second: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "second",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "timeZoneName: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "timeZoneName",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "dayPeriod: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "dayPeriod",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "localeMatcher: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "localeMatcher",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PropertyAssignment",
                                  "label": "formatMatcher: ''",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "formatMatcher",
                                      "children": []
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "''",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return obj;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "obj",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static formats(format?: string): string {\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "formats",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "format?: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "format",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    let time = new Date();\n    if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }\n    let opts: Map<string, number> = new Map<string, number>();\n    opts.set('MM', time.getMonth() + 1);\n    opts.set('dd', time.getDate());\n    opts.set('HH', time.getHours());\n    opts.set('mm', time.getMinutes());\n    opts.set('ss', time.getSeconds());\n\n    if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }\n    opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });\n    return format;\n  }",
              "children": [
                {
                  "type": "FirstStatement",
                  "label": "let time = new Date();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let time = new Date()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "time = new Date()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "time",
                              "children": []
                            },
                            {
                              "type": "NewExpression",
                              "label": "new Date()",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Date",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (!Boolean<string>(format).valueOf()) {\n      return time.valueOf().toString();\n    }",
                  "children": [
                    {
                      "type": "PrefixUnaryExpression",
                      "label": "!Boolean<string>(format).valueOf()",
                      "children": [
                        {
                          "type": "CallExpression",
                          "label": "Boolean<string>(format).valueOf()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "Boolean<string>(format).valueOf",
                              "children": [
                                {
                                  "type": "CallExpression",
                                  "label": "Boolean<string>(format)",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "Boolean",
                                      "children": []
                                    },
                                    {
                                      "type": "StringKeyword",
                                      "label": "string",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "format",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "label": "valueOf",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return time.valueOf().toString();\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return time.valueOf().toString();",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "time.valueOf().toString()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "time.valueOf().toString",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "time.valueOf()",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "time.valueOf",
                                          "children": [
                                            {
                                              "type": "Identifier",
                                              "label": "time",
                                              "children": []
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "valueOf",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "toString",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "FirstStatement",
                  "label": "let opts: Map<string, number> = new Map<string, number>();",
                  "children": [
                    {
                      "type": "VariableDeclarationList",
                      "label": "let opts: Map<string, number> = new Map<string, number>()",
                      "children": [
                        {
                          "type": "VariableDeclaration",
                          "label": "opts: Map<string, number> = new Map<string, number>()",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "TypeReference",
                              "label": "Map<string, number>",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Map",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "NewExpression",
                              "label": "new Map<string, number>()",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "Map",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('MM', time.getMonth() + 1);",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('MM', time.getMonth() + 1)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'MM'",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "time.getMonth() + 1",
                          "children": [
                            {
                              "type": "CallExpression",
                              "label": "time.getMonth()",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "time.getMonth",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "time",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "getMonth",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "PlusToken",
                              "label": "+",
                              "children": []
                            },
                            {
                              "type": "FirstLiteralToken",
                              "label": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('dd', time.getDate());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('dd', time.getDate())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'dd'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getDate()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getDate",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getDate",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('HH', time.getHours());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('HH', time.getHours())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'HH'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getHours()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getHours",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getHours",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('mm', time.getMinutes());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('mm', time.getMinutes())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'mm'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getMinutes()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getMinutes",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getMinutes",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.set('ss', time.getSeconds());",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.set('ss', time.getSeconds())",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.set",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "StringLiteral",
                          "label": "'ss'",
                          "children": []
                        },
                        {
                          "type": "CallExpression",
                          "label": "time.getSeconds()",
                          "children": [
                            {
                              "type": "PropertyAccessExpression",
                              "label": "time.getSeconds",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "time",
                                  "children": []
                                },
                                {
                                  "type": "Identifier",
                                  "label": "getSeconds",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "IfStatement",
                  "label": "if (new RegExp('/(y+)/').test(format)) {\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "new RegExp('/(y+)/').test(format)",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "new RegExp('/(y+)/').test",
                          "children": [
                            {
                              "type": "NewExpression",
                              "label": "new RegExp('/(y+)/')",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "RegExp",
                                  "children": []
                                },
                                {
                                  "type": "StringLiteral",
                                  "label": "'/(y+)/'",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Identifier",
                              "label": "test",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "label": "format",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n        format = format.replace('yyyy', time.getFullYear().toString().substr(0));\n    }",
                      "children": [
                        {
                          "type": "ExpressionStatement",
                          "label": "format = format.replace('yyyy', time.getFullYear().toString().substr(0));",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "format = format.replace('yyyy', time.getFullYear().toString().substr(0))",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "format",
                                  "children": []
                                },
                                {
                                  "type": "FirstAssignment",
                                  "label": "=",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "format.replace('yyyy', time.getFullYear().toString().substr(0))",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "format.replace",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "format",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "replace",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'yyyy'",
                                      "children": []
                                    },
                                    {
                                      "type": "CallExpression",
                                      "label": "time.getFullYear().toString().substr(0)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "time.getFullYear().toString().substr",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "time.getFullYear().toString()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "time.getFullYear().toString",
                                                  "children": [
                                                    {
                                                      "type": "CallExpression",
                                                      "label": "time.getFullYear()",
                                                      "children": [
                                                        {
                                                          "type": "PropertyAccessExpression",
                                                          "label": "time.getFullYear",
                                                          "children": [
                                                            {
                                                              "type": "Identifier",
                                                              "label": "time",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "label": "getFullYear",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "toString",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "substr",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "FirstLiteralToken",
                                          "label": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ExpressionStatement",
                  "label": "opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    });",
                  "children": [
                    {
                      "type": "CallExpression",
                      "label": "opts.forEach((value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    })",
                      "children": [
                        {
                          "type": "PropertyAccessExpression",
                          "label": "opts.forEach",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "opts",
                              "children": []
                            },
                            {
                              "type": "Identifier",
                              "label": "forEach",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunction",
                          "label": "(value: number, key: string): void => {\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    }",
                          "children": [
                            {
                              "type": "Parameter",
                              "label": "value: number",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "value",
                                  "children": []
                                },
                                {
                                  "type": "NumberKeyword",
                                  "label": "number",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "Parameter",
                              "label": "key: string",
                              "children": [
                                {
                                  "type": "Identifier",
                                  "label": "key",
                                  "children": []
                                },
                                {
                                  "type": "StringKeyword",
                                  "label": "string",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "VoidKeyword",
                              "label": "void",
                              "children": []
                            },
                            {
                              "type": "EqualsGreaterThanToken",
                              "label": "=>",
                              "children": []
                            },
                            {
                              "type": "Block",
                              "label": "{\n      if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }\n    }",
                              "children": [
                                {
                                  "type": "IfStatement",
                                  "label": "if (new RegExp('(' + key + ')').test(format)) {\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }",
                                  "children": [
                                    {
                                      "type": "CallExpression",
                                      "label": "new RegExp('(' + key + ')').test(format)",
                                      "children": [
                                        {
                                          "type": "PropertyAccessExpression",
                                          "label": "new RegExp('(' + key + ')').test",
                                          "children": [
                                            {
                                              "type": "NewExpression",
                                              "label": "new RegExp('(' + key + ')')",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "RegExp",
                                                  "children": []
                                                },
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "'(' + key + ')'",
                                                  "children": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "label": "'(' + key",
                                                      "children": [
                                                        {
                                                          "type": "StringLiteral",
                                                          "label": "'('",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "PlusToken",
                                                          "label": "+",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "key",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PlusToken",
                                                      "label": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "')'",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "label": "test",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "format",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Block",
                                      "label": "{\n        format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );\n      }",
                                      "children": [
                                        {
                                          "type": "ExpressionStatement",
                                          "label": "format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        );",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "format = format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        )",
                                              "children": [
                                                {
                                                  "type": "Identifier",
                                                  "label": "format",
                                                  "children": []
                                                },
                                                {
                                                  "type": "FirstAssignment",
                                                  "label": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "CallExpression",
                                                  "label": "format.replace(key,\n          (key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))\n        )",
                                                  "children": [
                                                    {
                                                      "type": "PropertyAccessExpression",
                                                      "label": "format.replace",
                                                      "children": [
                                                        {
                                                          "type": "Identifier",
                                                          "label": "format",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "label": "replace",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "key",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "label": "(key.length === 1)\n          ? value.toString()\n          : (('00' + value).substr(value.toString().length))",
                                                      "children": [
                                                        {
                                                          "type": "ParenthesizedExpression",
                                                          "label": "(key.length === 1)",
                                                          "children": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "label": "key.length === 1",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "key.length",
                                                                  "children": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "key",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "length",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "EqualsEqualsEqualsToken",
                                                                  "label": "===",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "FirstLiteralToken",
                                                                  "label": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "QuestionToken",
                                                          "label": "?",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "value.toString()",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "value.toString",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "value",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "toString",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "ColonToken",
                                                          "label": ":",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "ParenthesizedExpression",
                                                          "label": "(('00' + value).substr(value.toString().length))",
                                                          "children": [
                                                            {
                                                              "type": "CallExpression",
                                                              "label": "('00' + value).substr(value.toString().length)",
                                                              "children": [
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "('00' + value).substr",
                                                                  "children": [
                                                                    {
                                                                      "type": "ParenthesizedExpression",
                                                                      "label": "('00' + value)",
                                                                      "children": [
                                                                        {
                                                                          "type": "BinaryExpression",
                                                                          "label": "'00' + value",
                                                                          "children": [
                                                                            {
                                                                              "type": "StringLiteral",
                                                                              "label": "'00'",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "PlusToken",
                                                                              "label": "+",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "value",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "substr",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "PropertyAccessExpression",
                                                                  "label": "value.toString().length",
                                                                  "children": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "label": "value.toString()",
                                                                      "children": [
                                                                        {
                                                                          "type": "PropertyAccessExpression",
                                                                          "label": "value.toString",
                                                                          "children": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "value",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "label": "toString",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "label": "length",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ReturnStatement",
                  "label": "return format;",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "format",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "MethodDeclaration",
          "label": "public static nameByDate(isReplace: Boolean, name?: string): string {\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }",
          "children": [
            {
              "type": "PublicKeyword",
              "label": "public",
              "children": []
            },
            {
              "type": "StaticKeyword",
              "label": "static",
              "children": []
            },
            {
              "type": "Identifier",
              "label": "nameByDate",
              "children": []
            },
            {
              "type": "Parameter",
              "label": "isReplace: Boolean",
              "children": [
                {
                  "type": "Identifier",
                  "label": "isReplace",
                  "children": []
                },
                {
                  "type": "TypeReference",
                  "label": "Boolean",
                  "children": [
                    {
                      "type": "Identifier",
                      "label": "Boolean",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "Parameter",
              "label": "name?: string",
              "children": [
                {
                  "type": "Identifier",
                  "label": "name",
                  "children": []
                },
                {
                  "type": "QuestionToken",
                  "label": "?",
                  "children": []
                },
                {
                  "type": "StringKeyword",
                  "label": "string",
                  "children": []
                }
              ]
            },
            {
              "type": "StringKeyword",
              "label": "string",
              "children": []
            },
            {
              "type": "Block",
              "label": "{\n    if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }\n  }",
              "children": [
                {
                  "type": "IfStatement",
                  "label": "if (isReplace != null && isReplace === true) {\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    } else {\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }",
                  "children": [
                    {
                      "type": "BinaryExpression",
                      "label": "isReplace != null && isReplace === true",
                      "children": [
                        {
                          "type": "BinaryExpression",
                          "label": "isReplace != null",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isReplace",
                              "children": []
                            },
                            {
                              "type": "ExclamationEqualsToken",
                              "label": "!=",
                              "children": []
                            },
                            {
                              "type": "NullKeyword",
                              "label": "null",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "AmpersandAmpersandToken",
                          "label": "&&",
                          "children": []
                        },
                        {
                          "type": "BinaryExpression",
                          "label": "isReplace === true",
                          "children": [
                            {
                              "type": "Identifier",
                              "label": "isReplace",
                              "children": []
                            },
                            {
                              "type": "EqualsEqualsEqualsToken",
                              "label": "===",
                              "children": []
                            },
                            {
                              "type": "TrueKeyword",
                              "label": "true",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return (!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]);",
                          "children": [
                            {
                              "type": "ConditionalExpression",
                              "label": "(!Boolean<string>(name).valueOf()) ? null : (name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0])",
                              "children": [
                                {
                                  "type": "ParenthesizedExpression",
                                  "label": "(!Boolean<string>(name).valueOf())",
                                  "children": [
                                    {
                                      "type": "PrefixUnaryExpression",
                                      "label": "!Boolean<string>(name).valueOf()",
                                      "children": [
                                        {
                                          "type": "CallExpression",
                                          "label": "Boolean<string>(name).valueOf()",
                                          "children": [
                                            {
                                              "type": "PropertyAccessExpression",
                                              "label": "Boolean<string>(name).valueOf",
                                              "children": [
                                                {
                                                  "type": "CallExpression",
                                                  "label": "Boolean<string>(name)",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "Boolean",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "StringKeyword",
                                                      "label": "string",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "label": "valueOf",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "QuestionToken",
                                  "label": "?",
                                  "children": []
                                },
                                {
                                  "type": "NullKeyword",
                                  "label": "null",
                                  "children": []
                                },
                                {
                                  "type": "ColonToken",
                                  "label": ":",
                                  "children": []
                                },
                                {
                                  "type": "ParenthesizedExpression",
                                  "label": "(name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0])",
                                  "children": [
                                    {
                                      "type": "ConditionalExpression",
                                      "label": "name.indexOf(DateUtil.NEW_NAME_EDIT) === -1 ? name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats() : name.split('.')[0]",
                                      "children": [
                                        {
                                          "type": "BinaryExpression",
                                          "label": "name.indexOf(DateUtil.NEW_NAME_EDIT) === -1",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "name.indexOf(DateUtil.NEW_NAME_EDIT)",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "name.indexOf",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "name",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "indexOf",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "DateUtil.NEW_NAME_EDIT",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "DateUtil",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "NEW_NAME_EDIT",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "EqualsEqualsEqualsToken",
                                              "label": "===",
                                              "children": []
                                            },
                                            {
                                              "type": "PrefixUnaryExpression",
                                              "label": "-1",
                                              "children": [
                                                {
                                                  "type": "FirstLiteralToken",
                                                  "label": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "QuestionToken",
                                          "label": "?",
                                          "children": []
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "label": "name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT + DateUtil.formats()",
                                          "children": [
                                            {
                                              "type": "BinaryExpression",
                                              "label": "name.split('.')[0] + '_' + DateUtil.NEW_NAME_EDIT",
                                              "children": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "label": "name.split('.')[0] + '_'",
                                                  "children": [
                                                    {
                                                      "type": "ElementAccessExpression",
                                                      "label": "name.split('.')[0]",
                                                      "children": [
                                                        {
                                                          "type": "CallExpression",
                                                          "label": "name.split('.')",
                                                          "children": [
                                                            {
                                                              "type": "PropertyAccessExpression",
                                                              "label": "name.split",
                                                              "children": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "name",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "label": "split",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "StringLiteral",
                                                              "label": "'.'",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "FirstLiteralToken",
                                                          "label": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "PlusToken",
                                                      "label": "+",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "StringLiteral",
                                                      "label": "'_'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "PlusToken",
                                                  "label": "+",
                                                  "children": []
                                                },
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "DateUtil.NEW_NAME_EDIT",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "DateUtil",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "NEW_NAME_EDIT",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "PlusToken",
                                              "label": "+",
                                              "children": []
                                            },
                                            {
                                              "type": "CallExpression",
                                              "label": "DateUtil.formats()",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "DateUtil.formats",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "DateUtil",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "formats",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ColonToken",
                                          "label": ":",
                                          "children": []
                                        },
                                        {
                                          "type": "ElementAccessExpression",
                                          "label": "name.split('.')[0]",
                                          "children": [
                                            {
                                              "type": "CallExpression",
                                              "label": "name.split('.')",
                                              "children": [
                                                {
                                                  "type": "PropertyAccessExpression",
                                                  "label": "name.split",
                                                  "children": [
                                                    {
                                                      "type": "Identifier",
                                                      "label": "name",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "label": "split",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "StringLiteral",
                                                  "label": "'.'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "FirstLiteralToken",
                                              "label": "0",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Block",
                      "label": "{\n      return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');\n    }",
                      "children": [
                        {
                          "type": "ReturnStatement",
                          "label": "return DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss');",
                          "children": [
                            {
                              "type": "BinaryExpression",
                              "label": "DateUtil.NEW_NAME_IMG + DateUtil.formats('yyyyMMdd_HHmmss')",
                              "children": [
                                {
                                  "type": "PropertyAccessExpression",
                                  "label": "DateUtil.NEW_NAME_IMG",
                                  "children": [
                                    {
                                      "type": "Identifier",
                                      "label": "DateUtil",
                                      "children": []
                                    },
                                    {
                                      "type": "Identifier",
                                      "label": "NEW_NAME_IMG",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "PlusToken",
                                  "label": "+",
                                  "children": []
                                },
                                {
                                  "type": "CallExpression",
                                  "label": "DateUtil.formats('yyyyMMdd_HHmmss')",
                                  "children": [
                                    {
                                      "type": "PropertyAccessExpression",
                                      "label": "DateUtil.formats",
                                      "children": [
                                        {
                                          "type": "Identifier",
                                          "label": "DateUtil",
                                          "children": []
                                        },
                                        {
                                          "type": "Identifier",
                                          "label": "formats",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "StringLiteral",
                                      "label": "'yyyyMMdd_HHmmss'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "EndOfFileToken",
      "label": "",
      "children": []
    }
  ]
}