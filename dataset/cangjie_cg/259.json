{
    "SentinelManager": [
        "AtomicBool",
        "AtomicInt64",
        "AtomicUInt64",
        "LoggerFactory.getLogger",
        "RedisClientBuilder.buildThreadPool",
        "ReentrantMutex",
        "destorySentinels",
        "getMaster",
        "idGenerator.fetchAdd"
    ],
    "getSentinelManager": [
        "SentinelManager",
        "sentinelManager.initialize",
        "sentinelManager.retain",
        "sentinelManagers.get",
        "sentinelManagers.put",
        "sentinelManagers.remove"
    ],
    "getCurrentMaster": [
        "currentMaster.load"
    ],
    "checkOpen": [
        "RedisException",
        "closed.load"
    ],
    "addMasterProvider": [
        "checkOpen",
        "getSentinelManagerStatus",
        "logger.debug",
        "logger.isDebugEnabled",
        "masterProviders.append",
        "masterProviders.contains"
    ],
    "checkEquals": [
        "refCount.fetchSub",
        "refCount.load",
        "refEq"
    ],
    "removeMasterProvider": [
        "CloseSentinelManagerTask",
        "closeTask.run",
        "closeTaskRef.isNone",
        "getSentinelManagerStatus",
        "logger.debug",
        "logger.isDebugEnabled",
        "masterProviders.isEmpty",
        "masterProviders.removeIf",
        "refCount.load"
    ],
    "retain": [
        "closed.load",
        "refCount.fetchAdd"
    ],
    "initialize": [
        "initListeners",
        "initialized.compareAndSwap",
        "logger.debug",
        "logger.isDebugEnabled"
    ],
    "initListeners": [
        "SentinelListener",
        "getOrBuildSubscriber",
        "listener.run",
        "sentinelConfig.getSentinelHostAndPorts",
        "sentinelListeners.append",
        "sentinelSubscribers.clear"
    ],
    "switchMaster": [
        "checkOpen",
        "currentMaster.compareAndSwap",
        "currentMaster.load",
        "logger.info",
        "masterProvider.switchMaster",
        "switchMasterProviders.appendAll"
    ],
    "buildMasterEndPoint": [
        "ClientEndpointConfig",
        "ClientTcpEndpoint",
        "RedisClientBuilder.configEndpoint",
        "RedisSubscriberBuilder.configEndpoint",
        "RedisSubscriberHandler.getInstance",
        "currentMaster.load",
        "sentinelConfig.configTcpEndpointOptions"
    ],
    "getSentinelManagerStatus": [
        "refCount.load"
    ],
    "isClosed": [
        "closed.load"
    ],
    "close": [
        "closed.compareAndSwap",
        "destorySentinels",
        "getSentinelManagerStatus",
        "logger.debug",
        "logger.isDebugEnabled",
        "masterProviders.isEmpty",
        "refCount.load",
        "sentinelManagers.remove"
    ],
    "getMaster": [
        "HostAndPort",
        "RedisCommandBuilder.sentinelGetMasterAddrByName",
        "RedisException",
        "SentinelRedisClientBuilder.buildSentinelSubscriber",
        "UInt16.parse",
        "logger.error",
        "sentinelConfig.getSentinelHostAndPorts",
        "sentinelSubscribers.put"
    ],
    "destorySentinels": [
        "listenter.stop",
        "sentinelListeners.clear",
        "sentinelSubscribers.clear",
        "sentinelSubscribers.values",
        "subscriber.close"
    ],
    "getOrBuildSubscriber": [
        "SentinelRedisClientBuilder.buildSentinelSubscriber",
        "subscribers.get"
    ],
    "run": [
        "HostAndPort",
        "RedisCommandBuilder.sentinelGetMasterAddrByName",
        "SentinelManager.logger.warn",
        "SentinelRedisClientBuilder.buildSentinelSubscriber",
        "UInt16.parse",
        "redisSubscriber.blockSubscribe",
        "redisSubscriber.close",
        "redisSubscriber.setSubscriberListener",
        "redisSubscriberRef.load",
        "redisSubscriberRef.store",
        "running.load",
        "sentinelManager.close",
        "sentinelManager.getMasterName",
        "sentinelManager.getSentinelConfig",
        "sentinelManager.getThreadPool",
        "sentinelManager.switchMaster",
        "sleep"
    ],
    "SentinelListener": [
        "AtomicBool",
        "SwitchMasterListener",
        "redisSubscriber.setSubscriberListener",
        "sentinelManager.getSentinelConfig"
    ],
    "stop": [
        "redisSubscriber.close",
        "redisSubscriberRef.load",
        "redisSubscriberRef.store",
        "running.compareAndSwap"
    ],
    "SwitchMasterListener": [
        "LoggerFactory.getLogger"
    ],
    "onMessage": [
        "HostAndPort.toHostAndPort",
        "logger.debug",
        "logger.isDebugEnabled",
        "message.split",
        "sentinelManager.switchMaster"
    ]
}