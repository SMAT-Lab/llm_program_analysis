{
    "main": [
        "backend.util.settings.Config",
        "autogpt_libs.utils.cache.thread_cached",
        "logging.getLogger"
    ],
    "_extract_schema_from_url": [
        "urllib.parse.parse_qs",
        "urllib.parse.urlencode",
        "urllib.parse.urlunparse",
        "urllib.parse.urlparse",
        "<builtin>.str"
    ],
    "log": [],
    "job_listener": [
        "log"
    ],
    "get_execution_client": [
        "backend.util.service.get_service_client"
    ],
    "execute_graph": [
        "pydantic.BaseModel.__init__",
        "log",
        "get_execution_client"
    ],
    "JobInfo.from_db": [
        "pydantic.BaseModel.__init__",
        "pydantic.BaseModel.model_dump"
    ],
    "ExecutionScheduler.get_port": [],
    "ExecutionScheduler": [
        "autogpt_libs.utils.cache.thread_cached",
        "backend.util.service.expose"
    ],
    "ExecutionScheduler.execution_client": [
        "backend.util.service.get_service_client"
    ],
    "ExecutionScheduler.run_service": [
        "sqlalchemy.MetaData",
        "sqlalchemy.create_engine",
        "apscheduler.jobstores.sqlalchemy.SQLAlchemyJobStore",
        "_extract_schema_from_url",
        "dotenv.load_dotenv",
        "apscheduler.schedulers.blocking.BlockingScheduler",
        "os.getenv"
    ],
    "ExecutionScheduler.add_execution_schedule": [
        "pydantic.BaseModel.__init__",
        "apscheduler.triggers.cron.CronTrigger.from_crontab",
        "log",
        "JobInfo.from_db",
        "pydantic.BaseModel.model_dump"
    ],
    "ExecutionScheduler.delete_schedule": [
        "pydantic.BaseModel.__init__",
        "log",
        "<builtin>.ValueError",
        "JobInfo.from_db"
    ],
    "ExecutionScheduler.get_execution_schedules": [
        "pydantic.BaseModel.__init__",
        "JobInfo.from_db"
    ]
}