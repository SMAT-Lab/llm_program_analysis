{
    "main": [],
    "FakeResponse.__init__": [],
    "TestValidateLinks.setUp": [],
    "TestValidateLinks.test_find_link_in_text": [
        "unittest.TestCase.subTest",
        "unittest.TestCase.assertEqual",
        "validate.links.find_links_in_text",
        "<builtin>.len",
        "unittest.TestCase.assertIsInstance"
    ],
    "TestValidateLinks.test_find_link_in_text_with_invalid_argument": [
        "unittest.TestCase.assertRaises",
        "validate.links.find_links_in_text"
    ],
    "TestValidateLinks.test_if_check_duplicate_links_has_the_correct_return": [
        "unittest.TestCase.assertTrue",
        "unittest.TestCase.assertEqual",
        "unittest.TestCase.assertIsInstance",
        "<builtin>.len",
        "unittest.TestCase.assertFalse",
        "validate.links.check_duplicate_links"
    ],
    "TestValidateLinks.test_if_fake_user_agent_has_a_str_as_return": [
        "validate.links.fake_user_agent",
        "unittest.TestCase.assertIsInstance"
    ],
    "TestValidateLinks.test_get_host_from_link": [
        "validate.links.get_host_from_link",
        "unittest.TestCase.subTest",
        "unittest.TestCase.assertIsInstance",
        "unittest.TestCase.assertRaises",
        "unittest.TestCase.assertNotIn"
    ],
    "TestValidateLinks.test_has_cloudflare_protection_with_code_403_and_503_in_response": [
        "validate.links.has_cloudflare_protection",
        "FakeResponse.__init__",
        "unittest.TestCase.assertTrue"
    ],
    "TestValidateLinks.test_has_cloudflare_protection_when_there_is_no_protection": [
        "validate.links.has_cloudflare_protection",
        "FakeResponse.__init__",
        "unittest.TestCase.assertFalse"
    ]
}