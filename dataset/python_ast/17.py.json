{
    "type": "module",
    "label": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"\n\n\ndef get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:\n    \"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column\n\n\ndef exits_word(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n) -> bool:\n    \"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\n\n    if board[row][column] != word[word_index]:\n        return False\n\n    if word_index == len(word) - 1:\n        return True\n\n    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    len_board = len(board)\n    len_board_column = len(board[0])\n    for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)\n\n    return False\n\n\ndef word_exists(board: list[list[str]], word: str) -> bool:\n    \"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\n\n    # Validate board\n    board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )\n\n    len_board = len(board)\n    if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)\n\n    for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)\n\n    # Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )\n\n    len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "children": [
        {
            "type": "expression_statement",
            "label": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:\n    \"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column",
            "children": [
                {
                    "type": "identifier",
                    "label": "get_point_key",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(len_board: int, len_board_column: int, row: int, column: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "len_board: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "len_board",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "len_board_column: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "len_board_column",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "row: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "row",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "column: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "column",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "int",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return len_board * len_board_column * row + column",
                            "children": [
                                {
                                    "type": "binary_operator",
                                    "label": "len_board * len_board_column * row + column",
                                    "children": [
                                        {
                                            "type": "binary_operator",
                                            "label": "len_board * len_board_column * row",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "len_board * len_board_column",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len_board",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "len_board_column",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "row",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "column",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def exits_word(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n) -> bool:\n    \"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\n\n    if board[row][column] != word[word_index]:\n        return False\n\n    if word_index == len(word) - 1:\n        return True\n\n    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    len_board = len(board)\n    len_board_column = len(board[0])\n    for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)\n\n    return False",
            "children": [
                {
                    "type": "identifier",
                    "label": "exits_word",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "board: list[list[str]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "board",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[str]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[str]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[str]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[str]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[str]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[str]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "str",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "str",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "word: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "word",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "row: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "row",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "column: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "column",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "word_index: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "word_index",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "visited_points_set: set[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "visited_points_set",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "set[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "set[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "set",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "bool",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\n\n    if board[row][column] != word[word_index]:\n        return False\n\n    if word_index == len(word) - 1:\n        return True\n\n    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    len_board = len(board)\n    len_board_column = len(board[0])\n    for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)\n\n    return False",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if board[row][column] != word[word_index]:\n        return False",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "board[row][column] != word[word_index]",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "label": "board[row][column]",
                                            "children": [
                                                {
                                                    "type": "subscript",
                                                    "label": "board[row]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "board",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "row",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "column",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "subscript",
                                            "label": "word[word_index]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "word",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "word_index",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return False",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return False",
                                            "children": [
                                                {
                                                    "type": "false",
                                                    "label": "False",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if word_index == len(word) - 1:\n        return True",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "word_index == len(word) - 1",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "word_index",
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "len(word) - 1",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "len(word)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(word)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "word",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return True",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return True",
                                            "children": [
                                                {
                                                    "type": "true",
                                                    "label": "True",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "traverts_directions",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "label": "[(0, 1), (0, -1), (-1, 0), (1, 0)]",
                                            "children": [
                                                {
                                                    "type": "tuple",
                                                    "label": "(0, 1)",
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(0, -1)",
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "unary_operator",
                                                            "label": "-1",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(-1, 0)",
                                                    "children": [
                                                        {
                                                            "type": "unary_operator",
                                                            "label": "-1",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(1, 0)",
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "len_board = len(board)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "len_board = len(board)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "len_board",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(board)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(board)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "board",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "len_board_column = len(board[0])",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "len_board_column = len(board[0])",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "len_board_column",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(board[0])",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(board[0])",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "label": "board[0]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "direction",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "traverts_directions",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "next_i = row + direction[0]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "next_i = row + direction[0]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "next_i",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "row + direction[0]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "row",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "direction[0]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "direction",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "0",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "next_j = column + direction[1]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "next_j = column + direction[1]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "next_j",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "column + direction[1]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "column",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "direction[1]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "direction",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue",
                                            "children": [
                                                {
                                                    "type": "not_operator",
                                                    "label": "not (0 <= next_i < len_board and 0 <= next_j < len_board_column)",
                                                    "children": [
                                                        {
                                                            "type": "parenthesized_expression",
                                                            "label": "(0 <= next_i < len_board and 0 <= next_j < len_board_column)",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "0 <= next_i < len_board and 0 <= next_j < len_board_column",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "0 <= next_i < len_board",
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "0",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "next_i",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "len_board",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "0 <= next_j < len_board_column",
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "0",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "next_j",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "len_board_column",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "continue",
                                                    "children": [
                                                        {
                                                            "type": "continue_statement",
                                                            "label": "continue",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "key = get_point_key(len_board, len_board_column, next_i, next_j)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "key = get_point_key(len_board, len_board_column, next_i, next_j)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "key",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "get_point_key(len_board, len_board_column, next_i, next_j)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "get_point_key",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(len_board, len_board_column, next_i, next_j)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len_board",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len_board_column",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "next_i",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "next_j",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if key in visited_points_set:\n            continue",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "key in visited_points_set",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "key",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "visited_points_set",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "continue",
                                                    "children": [
                                                        {
                                                            "type": "continue_statement",
                                                            "label": "continue",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "visited_points_set.add(key)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "visited_points_set.add(key)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "visited_points_set.add",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "visited_points_set",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "add",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(key)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "key",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "exits_word",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(board, word, next_i, next_j, word_index + 1, visited_points_set)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "word",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "next_i",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "next_j",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "word_index + 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "word_index",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "visited_points_set",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return True",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return True",
                                                            "children": [
                                                                {
                                                                    "type": "true",
                                                                    "label": "True",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "visited_points_set.remove(key)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "visited_points_set.remove(key)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "visited_points_set.remove",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "visited_points_set",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "remove",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(key)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "key",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return False",
                            "children": [
                                {
                                    "type": "false",
                                    "label": "False",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def word_exists(board: list[list[str]], word: str) -> bool:\n    \"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\n\n    # Validate board\n    board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )\n\n    len_board = len(board)\n    if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)\n\n    for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)\n\n    # Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )\n\n    len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False",
            "children": [
                {
                    "type": "identifier",
                    "label": "word_exists",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(board: list[list[str]], word: str)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "board: list[list[str]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "board",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[str]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[str]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[str]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[str]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[str]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[str]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "str",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "str",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "word: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "word",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "bool",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\n\n    # Validate board\n    board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )\n\n    len_board = len(board)\n    if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)\n\n    for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)\n\n    # Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )\n\n    len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# Validate board",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "label": "board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "board_error_message",
                                            "children": []
                                        },
                                        {
                                            "type": "parenthesized_expression",
                                            "label": "(\n        \"The board should be a non empty matrix of single chars strings.\"\n    )",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"The board should be a non empty matrix of single chars strings.\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "The board should be a non empty matrix of single chars strings.",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "len_board = len(board)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "len_board = len(board)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "len_board",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(board)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(board)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "board",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "not isinstance(board, list) or len(board) == 0",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "label": "not isinstance(board, list)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "isinstance(board, list)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "isinstance",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(board, list)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "list",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "len(board) == 0",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "len(board)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(board)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(board_error_message)",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(board_error_message)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(board_error_message)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(board_error_message)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board_error_message",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "row",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "board",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)",
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "label": "not isinstance(row, list) or len(row) == 0",
                                                    "children": [
                                                        {
                                                            "type": "not_operator",
                                                            "label": "not isinstance(row, list)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "isinstance(row, list)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "isinstance",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(row, list)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "row",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "len(row) == 0",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(row)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(row)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "row",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "raise ValueError(board_error_message)",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "label": "raise ValueError(board_error_message)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "ValueError(board_error_message)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "ValueError",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(board_error_message)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "board_error_message",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "item",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "row",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "not isinstance(item, str) or len(item) != 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "not_operator",
                                                                            "label": "not isinstance(item, str)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "isinstance(item, str)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "isinstance",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(item, str)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "item",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "str",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "len(item) != 1",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "len(item)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "len",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(item)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "item",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise ValueError(board_error_message)",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise ValueError(board_error_message)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "ValueError(board_error_message)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "ValueError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(board_error_message)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "board_error_message",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# Validate word",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "label": "if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "not isinstance(word, str) or len(word) == 0",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "label": "not isinstance(word, str)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "isinstance(word, str)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "isinstance",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(word, str)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "word",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "str",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "len(word) == 0",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "len(word)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(word)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "word",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"The word parameter should be a string of length greater than 0.\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "The word parameter should be a string of length greater than 0.",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "len_board_column = len(board[0])",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "len_board_column = len(board[0])",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "len_board_column",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(board[0])",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(board[0])",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "label": "board[0]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "i",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "range(len_board)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(len_board)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len_board",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "j",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "range(len_board_column)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "range",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(len_board_column)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "len_board_column",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "exits_word",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "board",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "word",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "i",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "j",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "0",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "set",
                                                                                    "label": "{get_point_key(len_board, len_board_column, i, j)}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "get_point_key(len_board, len_board_column, i, j)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "get_point_key",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(len_board, len_board_column, i, j)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "len_board",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "len_board_column",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "i",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "j",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return True",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return True",
                                                                            "children": [
                                                                                {
                                                                                    "type": "true",
                                                                                    "label": "True",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return False",
                            "children": [
                                {
                                    "type": "false",
                                    "label": "False",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "import doctest\n\n    doctest.testmod()",
                    "children": [
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}