{
    "type": "module",
    "label": "# Information on binary shifts:\n# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n# https://www.interviewcake.com/concept/java/bit-shift\n\n\ndef logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number\n\n\ndef logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number\n\n\ndef arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n\n    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "start_token": 0,
    "end_token": 10,
    "children": [
        {
            "type": "comment",
            "label": "# Information on binary shifts:",
            "start_token": 0,
            "end_token": 5,
            "children": []
        },
        {
            "type": "comment",
            "label": "# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types",
            "start_token": 7,
            "end_token": 10,
            "children": []
        },
        {
            "type": "comment",
            "label": "# https://www.interviewcake.com/concept/java/bit-shift",
            "start_token": 10,
            "end_token": 10,
            "children": []
        },
        {
            "type": "function_definition",
            "label": "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number",
            "start_token": 10,
            "end_token": 10,
            "children": [
                {
                    "type": "identifier",
                    "label": "logical_left_shift",
                    "start_token": 10,
                    "end_token": 10,
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(number: int, shift_amount: int)",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "number: int",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "number",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "shift_amount: int",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "shift_amount",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "str",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "str",
                            "start_token": 10,
                            "end_token": 10,
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    ",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "number < 0 or shift_amount < 0",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "label": "number < 0",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "shift_amount < 0",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "shift_amount",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\"both inputs must be positive integers\")",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\"both inputs must be positive integers\")",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\"both inputs must be positive integers\")",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"both inputs must be positive integers\")",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"both inputs must be positive integers\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "both inputs must be positive integers",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "binary_number = str(bin(number))",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "binary_number = str(bin(number))",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "binary_number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "str(bin(number))",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(bin(number))",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "bin(number)",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "bin",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(number)",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "number",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "binary_number += \"0\" * shift_amount",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "augmented_assignment",
                                    "label": "binary_number += \"0\" * shift_amount",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "binary_number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "\"0\" * shift_amount",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"0\"",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "0",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "shift_amount",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return binary_number",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "binary_number",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
            "start_token": 10,
            "end_token": 10,
            "children": [
                {
                    "type": "identifier",
                    "label": "logical_right_shift",
                    "start_token": 10,
                    "end_token": 10,
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(number: int, shift_amount: int)",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "number: int",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "number",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "shift_amount: int",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "shift_amount",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "str",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "str",
                            "start_token": 10,
                            "end_token": 10,
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    ",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "number < 0 or shift_amount < 0",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "label": "number < 0",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "shift_amount < 0",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "shift_amount",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\"both inputs must be positive integers\")",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\"both inputs must be positive integers\")",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\"both inputs must be positive integers\")",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"both inputs must be positive integers\")",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"both inputs must be positive integers\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "both inputs must be positive integers",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "binary_number = str(bin(number))[2:]",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "binary_number = str(bin(number))[2:]",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "binary_number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "subscript",
                                            "label": "str(bin(number))[2:]",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "str(bin(number))",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(bin(number))",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "bin(number)",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "bin",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(number)",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "number",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "slice",
                                                    "label": "2:",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "label": "2",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if shift_amount >= len(binary_number):\n        return \"0b0\"",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "shift_amount >= len(binary_number)",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "shift_amount",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(binary_number)",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(binary_number)",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "binary_number",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return \"0b0\"",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return \"0b0\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"0b0\"",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "0b0",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "shifted_binary_number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "subscript",
                                            "label": "binary_number[: len(binary_number) - shift_amount]",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "binary_number",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "slice",
                                                    "label": ": len(binary_number) - shift_amount",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "len(binary_number) - shift_amount",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(binary_number)",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(binary_number)",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "binary_number",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "shift_amount",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return \"0b\" + shifted_binary_number",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "binary_operator",
                                    "label": "\"0b\" + shifted_binary_number",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"0b\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "0b",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "shifted_binary_number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n\n    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
            "start_token": 10,
            "end_token": 10,
            "children": [
                {
                    "type": "identifier",
                    "label": "arithmetic_right_shift",
                    "start_token": 10,
                    "end_token": 10,
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(number: int, shift_amount: int)",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "number: int",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "number",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "shift_amount: int",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "shift_amount",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "str",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "str",
                            "start_token": 10,
                            "end_token": 10,
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n\n    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    ",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "number >= 0",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# Get binary representation of positive number",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "binary_number",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "\"0\" + str(bin(number)).strip(\"-\")[2:]",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"0\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "0",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "str(bin(number)).strip(\"-\")[2:]",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "str(bin(number)).strip(\"-\")",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "str(bin(number)).strip",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "str(bin(number))",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "str",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(bin(number))",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "bin(number)",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "bin",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(number)",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "number",
                                                                                                                            "start_token": 10,
                                                                                                                            "end_token": 10,
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "strip",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\"-\")",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"-\"",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "-",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "slice",
                                                                            "label": "2:",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "2",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "comment",
                                            "label": "# Get binary (2's complement) representation of negative number",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "label": "binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "binary_number_length = len(bin(number)[3:])",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "binary_number_length = len(bin(number)[3:])",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "binary_number_length",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(bin(number)[3:])",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(bin(number)[3:])",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "bin(number)[3:]",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "bin(number)",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "bin",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(number)",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "number",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "slice",
                                                                                            "label": "3:",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "integer",
                                                                                                    "label": "3",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "comment",
                                                    "label": "# Find 2's complement of number",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "binary_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "binary_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "binary_number",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "bin(abs(number) - (1 << binary_number_length))[3:]",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "bin(abs(number) - (1 << binary_number_length))",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "bin",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(abs(number) - (1 << binary_number_length))",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "binary_operator",
                                                                                            "label": "abs(number) - (1 << binary_number_length)",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "abs(number)",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "abs",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(number)",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "number",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "parenthesized_expression",
                                                                                                    "label": "(1 << binary_number_length)",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "binary_operator",
                                                                                                            "label": "1 << binary_number_length",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "integer",
                                                                                                                    "label": "1",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "binary_number_length",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "slice",
                                                                            "label": "3:",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "3",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "binary_number",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "parenthesized_expression",
                                                                    "label": "(\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "label": "\"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "\"1\" + \"0\" * (binary_number_length - len(binary_number))",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"1\"",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "1",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "binary_operator",
                                                                                            "label": "\"0\" * (binary_number_length - len(binary_number))",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "\"0\"",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "\"",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "0",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "parenthesized_expression",
                                                                                                    "label": "(binary_number_length - len(binary_number))",
                                                                                                    "start_token": 10,
                                                                                                    "end_token": 10,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "binary_operator",
                                                                                                            "label": "binary_number_length - len(binary_number)",
                                                                                                            "start_token": 10,
                                                                                                            "end_token": 10,
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "binary_number_length",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "len(binary_number)",
                                                                                                                    "start_token": 10,
                                                                                                                    "end_token": 10,
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "len",
                                                                                                                            "start_token": 10,
                                                                                                                            "end_token": 10,
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(binary_number)",
                                                                                                                            "start_token": 10,
                                                                                                                            "end_token": 10,
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "binary_number",
                                                                                                                                    "start_token": 10,
                                                                                                                                    "end_token": 10,
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "binary_number",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "shift_amount >= len(binary_number)",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "shift_amount",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(binary_number)",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(binary_number)",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "binary_number",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return \"0b\" + binary_number[0] * len(binary_number)",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return \"0b\" + binary_number[0] * len(binary_number)",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "\"0b\" + binary_number[0] * len(binary_number)",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"0b\"",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "0b",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "binary_number[0] * len(binary_number)",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "binary_number[0]",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "binary_number",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "0",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(binary_number)",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(binary_number)",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "binary_number",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "parenthesized_expression",
                                    "label": "(\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "binary_operator",
                                            "label": "\"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "\"0b\"\n        + binary_number[0] * shift_amount",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"0b\"",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "0b",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "binary_number[0] * shift_amount",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "binary_number[0]",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "binary_number",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "0",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "shift_amount",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "subscript",
                                                    "label": "binary_number[: len(binary_number) - shift_amount]",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "binary_number",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "slice",
                                                            "label": ": len(binary_number) - shift_amount",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "len(binary_number) - shift_amount",
                                                                    "start_token": 10,
                                                                    "end_token": 10,
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "len(binary_number)",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "len",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(binary_number)",
                                                                                    "start_token": 10,
                                                                                    "end_token": 10,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "binary_number",
                                                                                            "start_token": 10,
                                                                                            "end_token": 10,
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "shift_amount",
                                                                            "start_token": 10,
                                                                            "end_token": 10,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "start_token": 10,
            "end_token": 10,
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "start_token": 10,
                            "end_token": 10,
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "import doctest\n\n    doctest.testmod()",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod()",
                            "start_token": 10,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod()",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "start_token": 10,
                                                    "end_token": 10,
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "start_token": 10,
                                            "end_token": 10,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}