{
    "type": "module",
    "label": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"\n\n\ndef bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n\n    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n\n    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n\n    bitwise_sum = number ^ other_number\n    carry = number & other_number\n\n    if carry == 0:\n        return bitwise_sum\n\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "children": [
        {
            "type": "expression_statement",
            "label": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n\n    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n\n    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n\n    bitwise_sum = number ^ other_number\n    carry = number & other_number\n\n    if carry == 0:\n        return bitwise_sum\n\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)",
            "children": [
                {
                    "type": "identifier",
                    "label": "bitwise_addition_recursive",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(number: int, other_number: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "other_number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "other_number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "int",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n\n    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n\n    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n\n    bitwise_sum = number ^ other_number\n    carry = number & other_number\n\n    if carry == 0:\n        return bitwise_sum\n\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "not isinstance(number, int) or not isinstance(other_number, int)",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "label": "not isinstance(number, int)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "isinstance(number, int)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "isinstance",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(number, int)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "number",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "not_operator",
                                            "label": "not isinstance(other_number, int)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "isinstance(other_number, int)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "isinstance",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(other_number, int)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "other_number",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise TypeError(\"Both arguments MUST be integers!\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise TypeError(\"Both arguments MUST be integers!\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "TypeError(\"Both arguments MUST be integers!\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "TypeError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"Both arguments MUST be integers!\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"Both arguments MUST be integers!\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "Both arguments MUST be integers!",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "number < 0 or other_number < 0",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "label": "number < 0",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "other_number < 0",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "other_number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\"Both arguments MUST be non-negative!\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\"Both arguments MUST be non-negative!\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\"Both arguments MUST be non-negative!\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"Both arguments MUST be non-negative!\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"Both arguments MUST be non-negative!\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "Both arguments MUST be non-negative!",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "bitwise_sum = number ^ other_number",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "bitwise_sum = number ^ other_number",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "bitwise_sum",
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "number ^ other_number",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "other_number",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "carry = number & other_number",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "carry = number & other_number",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "carry",
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "number & other_number",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "other_number",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if carry == 0:\n        return bitwise_sum",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "carry == 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "carry",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return bitwise_sum",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return bitwise_sum",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bitwise_sum",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return bitwise_addition_recursive(bitwise_sum, carry << 1)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "bitwise_addition_recursive(bitwise_sum, carry << 1)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "bitwise_addition_recursive",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(bitwise_sum, carry << 1)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bitwise_sum",
                                                    "children": []
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "label": "carry << 1",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "carry",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "import doctest\n\n    doctest.testmod()",
                    "children": [
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}