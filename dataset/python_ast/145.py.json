{
    "type": "module",
    "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys\n\n\nclass Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3\n\n\nclass Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass\n\n\nclass BlackJackCard(Card):\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))\n\n\nclass Hand(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value\n\n\nclass BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass\n\n\nclass Deck(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass\n",
    "children": [
        {
            "type": "import_from_statement",
            "label": "from abc import ABCMeta, abstractmethod",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "abc",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abc",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ABCMeta",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ABCMeta",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "abstractmethod",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abstractmethod",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from enum import Enum",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import sys",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "sys",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "sys",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
            "children": [
                {
                    "type": "identifier",
                    "label": "Suit",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "HEART = 0",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "HEART = 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "HEART",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "DIAMOND = 1",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "DIAMOND = 1",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "DIAMOND",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "1",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "CLUBS = 2",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "CLUBS = 2",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "CLUBS",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "2",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "SPADE = 3",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "SPADE = 3",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "SPADE",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "3",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "Card",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(metaclass=ABCMeta)",
                    "children": [
                        {
                            "type": "keyword_argument",
                            "label": "metaclass=ABCMeta",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "metaclass",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "ABCMeta",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, value, suit)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "value",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "suit",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.value = value\n        self.suit = suit\n        self.is_available = True",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.value = value",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.value = value",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.value",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.suit = suit",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.suit = suit",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.suit",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "suit",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "suit",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.is_available = True",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.is_available = True",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.is_available",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "is_available",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@property\n    @abstractmethod\n    def value(self):\n        pass",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@property",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "property",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "decorator",
                                    "label": "@abstractmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "abstractmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def value(self):\n        pass",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "value",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "pass",
                                            "children": [
                                                {
                                                    "type": "pass_statement",
                                                    "label": "pass",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@value.setter",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "value.setter",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "setter",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "decorator",
                                    "label": "@abstractmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "abstractmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def value(self, other):\n        pass",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "value",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self, other)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "other",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "pass",
                                            "children": [
                                                {
                                                    "type": "pass_statement",
                                                    "label": "pass",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class BlackJackCard(Card):\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlackJackCard",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Card)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Card",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, value, suit)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "value",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "suit",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "super(BlackJackCard, self).__init__(value, suit)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "super(BlackJackCard, self).__init__(value, suit)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "super(BlackJackCard, self).__init__(value, suit)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "super(BlackJackCard, self).__init__",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "super(BlackJackCard, self)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "super",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(BlackJackCard, self)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlackJackCard",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__init__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(value, suit)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "suit",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def is_ace(self):\n        return True if self._value == 1 else False",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "is_ace",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return True if self._value == 1 else False",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return True if self._value == 1 else False",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "label": "True if self._value == 1 else False",
                                                    "children": [
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "self._value == 1",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self._value",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "false",
                                                            "label": "False",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "is_face_card",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Jack = 11, Queen = 12, King = 13",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return True if 10 < self._value <= 13 else False",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "label": "True if 10 < self._value <= 13 else False",
                                                    "children": [
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "10 < self._value <= 13",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "10",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self._value",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "13",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "false",
                                                            "label": "False",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@property",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "property",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "value",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "label": "if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "self.is_ace() == 1",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.is_ace()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.is_ace",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "is_ace",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return 1",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif self.is_face_card():\n            return 10",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.is_face_card()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.is_face_card",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "is_face_card",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return 10",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return 10",
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "10",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "label": "else:\n            return self._value",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "label": "return self._value",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return self._value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self._value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "_value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@value.setter",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "value.setter",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "setter",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "value",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self, new_value)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "new_value",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "label": "if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "1 <= new_value <= 13",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "new_value",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "13",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "self._value = new_value",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "self._value = new_value",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "self._value = new_value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self._value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "_value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "new_value",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "label": "else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "label": "raise ValueError('Invalid card value: {}'.format(new_value))",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "label": "raise ValueError('Invalid card value: {}'.format(new_value))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "ValueError('Invalid card value: {}'.format(new_value))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "ValueError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "('Invalid card value: {}'.format(new_value))",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "'Invalid card value: {}'.format(new_value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "'Invalid card value: {}'.format",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "'Invalid card value: {}'",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "'",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "Invalid card value: {}",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "'",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "format",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(new_value)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "new_value",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Hand(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
            "children": [
                {
                    "type": "identifier",
                    "label": "Hand",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, cards):\n        self.cards = cards",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, cards)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "cards",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.cards = cards",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.cards = cards",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.cards = cards",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.cards",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cards",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "cards",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def add_card(self, card):\n        self.cards.append(card)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "add_card",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, card)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "card",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.cards.append(card)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.cards.append(card)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.cards.append(card)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.cards.append",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.cards",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "cards",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(card)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "card",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "score",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "total_value = 0",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "total_value = 0",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "total_value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for card in self.cards:\n            total_value += card.value",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "card",
                                                    "children": []
                                                },
                                                {
                                                    "type": "attribute",
                                                    "label": "self.cards",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "cards",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "total_value += card.value",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "total_value += card.value",
                                                            "children": [
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "label": "total_value += card.value",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "total_value",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "card.value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "card",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return total_value",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "total_value",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "BlackJackHand",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Hand)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Hand",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "BLACKJACK = 21",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "BLACKJACK = 21",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "BLACKJACK",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "21",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, cards)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "cards",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "super(BlackJackHand, self).__init__(cards)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "super(BlackJackHand, self).__init__(cards)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "super(BlackJackHand, self).__init__(cards)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "super(BlackJackHand, self).__init__",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "super(BlackJackHand, self)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "super",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(BlackJackHand, self)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BlackJackHand",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__init__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(cards)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cards",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "score",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "min_over = sys.MAXSIZE",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "min_over = sys.MAXSIZE",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "min_over",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "sys.MAXSIZE",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "sys",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "MAXSIZE",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "max_under = -sys.MAXSIZE",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "max_under = -sys.MAXSIZE",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "max_under",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "unary_operator",
                                                            "label": "-sys.MAXSIZE",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "sys.MAXSIZE",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "sys",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "MAXSIZE",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "score",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "self.possible_scores()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.possible_scores",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "possible_scores",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "self.BLACKJACK < score < min_over",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.BLACKJACK",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "BLACKJACK",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "score",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "min_over",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "min_over = score",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "min_over = score",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "min_over = score",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "min_over",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "score",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "elif_clause",
                                                                    "label": "elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "max_under < score <= self.BLACKJACK",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "max_under",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "score",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.BLACKJACK",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "BLACKJACK",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "max_under = score",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "max_under = score",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "label": "max_under = score",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "max_under",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "score",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return max_under if max_under != -sys.MAXSIZE else min_over",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "label": "max_under if max_under != -sys.MAXSIZE else min_over",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "max_under",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "max_under != -sys.MAXSIZE",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "max_under",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "unary_operator",
                                                                    "label": "-sys.MAXSIZE",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "sys.MAXSIZE",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "sys",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "MAXSIZE",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "min_over",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "possible_scores",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Return a list of possible scores, taking Aces into account.",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Deck(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "Deck",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, cards)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "cards",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.cards = cards\n        self.deal_index = 0",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.cards = cards",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.cards = cards",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.cards",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "cards",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "cards",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.deal_index = 0",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.deal_index = 0",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.deal_index",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "deal_index",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def remaining_cards(self):\n        return len(self.cards) - self.deal_index",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "remaining_cards",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return len(self.cards) - self.deal_index",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return len(self.cards) - self.deal_index",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "label": "len(self.cards) - self.deal_index",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "len(self.cards)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "len",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(self.cards)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.cards",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "cards",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.deal_index",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "deal_index",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "deal_card",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card",
                                    "children": [
                                        {
                                            "type": "try_statement",
                                            "label": "try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "label": "card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "card = self.cards[self.deal_index]",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "card = self.cards[self.deal_index]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "card",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "self.cards[self.deal_index]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.cards",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "cards",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.deal_index",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "deal_index",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "card.is_available = False",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "card.is_available = False",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "card.is_available",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "card",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "is_available",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "false",
                                                                            "label": "False",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "self.deal_index += 1",
                                                            "children": [
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "label": "self.deal_index += 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.deal_index",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "deal_index",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "label": "except IndexError:\n            return None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "IndexError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return None",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return None",
                                                                    "children": [
                                                                        {
                                                                            "type": "none",
                                                                            "label": "None",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return card",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "card",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def shuffle(self):\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "shuffle",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "pass",
                                    "children": [
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}