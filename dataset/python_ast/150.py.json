{
    "type": "module",
    "label": "r\"\"\"\nProblem:\n\nThe n queens problem is: placing N queens on a N * N chess board such that no queen\ncan attack any other queens placed on that chess board.  This means that one queen\ncannot have any other queen on its horizontal, vertical and diagonal lines.\n\nSolution:\n\nTo solve this problem we will use simple math. First we know the queen can move in all\nthe possible ways, we can simplify it in this: vertical, horizontal, diagonal left and\n diagonal right.\n\nWe can visualize it like this:\n\nleft diagonal = \\\nright diagonal = /\n\nOn a chessboard vertical movement could be the rows and horizontal movement could be\nthe columns.\n\nIn programming we can use an array, and in this array each index could be the rows and\neach value in the array could be the column. For example:\n\n    . Q . .     We have this chessboard with one queen in each column and each queen\n    . . . Q     can't attack to each other.\n    Q . . .     The array for this example would look like this: [1, 3, 0, 2]\n    . . Q .\n\nSo if we use an array and we verify that each value in the array is different to each\nother we know that at least the queens can't attack each other in horizontal and\nvertical.\n\nAt this point we have it halfway completed and we will treat the chessboard as a\nCartesian plane.  Hereinafter we are going to remember basic math, so in the school we\nlearned this formula:\n\n    Slope of a line:\n\n           y2 - y1\n     m = ----------\n          x2 - x1\n\nThis formula allow us to get the slope. For the angles 45º (right diagonal) and 135º\n(left diagonal) this formula gives us m = 1, and m = -1 respectively.\n\nSee::\nhttps://www.enotes.com/homework-help/write-equation-line-that-hits-origin-45-degree-1474860\n\nThen we have this other formula:\n\nSlope intercept:\n\ny = mx + b\n\nb is where the line crosses the Y axis (to get more information see:\nhttps://www.mathsisfun.com/y_intercept.html), if we change the formula to solve for b\nwe would have:\n\ny - mx = b\n\nAnd since we already have the m values for the angles 45º and 135º, this formula would\nlook like this:\n\n45º: y - (1)x = b\n45º: y - x = b\n\n135º: y - (-1)x = b\n135º: y + x = b\n\ny = row\nx = column\n\nApplying these two formulas we can check if a queen in some position is being attacked\nfor another one or vice versa.\n\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef depth_first_search(\n    possible_board: list[int],\n    diagonal_right_collisions: list[int],\n    diagonal_left_collisions: list[int],\n    boards: list[list[str]],\n    n: int,\n) -> None:\n    \"\"\"\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    \"\"\"\n\n    # Get next row in the current board (possible_board) to fill it with a queen\n    row = len(possible_board)\n\n    # If row is equal to the size of the board it means there are a queen in each row in\n    # the current board (possible_board)\n    if row == n:\n        # We convert the variable possible_board that looks like this: [1, 3, 0, 2] to\n        # this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n        boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])\n        return\n\n    # We iterate each column in the row to find all possible results in each row\n    for col in range(n):\n        # We apply that we learned previously. First we check that in the current board\n        # (possible_board) there are not other same value because if there is it means\n        # that there are a collision in vertical. Then we apply the two formulas we\n        # learned before:\n        #\n        # 45º: y - x = b or 45: row - col = b\n        # 135º: y + x = b or row + col = b.\n        #\n        # And we verify if the results of this two formulas not exist in their variables\n        # respectively.  (diagonal_right_collisions, diagonal_left_collisions)\n        #\n        # If any or these are True it means there is a collision so we continue to the\n        # next value in the for loop.\n        if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue\n\n        # If it is False we call dfs function again and we update the inputs\n        depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )\n\n\ndef n_queens_solution(n: int) -> None:\n    boards: list[list[str]] = []\n    depth_first_search([], [], [], boards, n)\n\n    # Print all the boards\n    for board in boards:\n        for column in board:\n            print(column)\n        print(\"\")\n\n    print(len(boards), \"solutions were found.\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    n_queens_solution(4)\n",
    "children": [
        {
            "type": "expression_statement",
            "label": "r\"\"\"\nProblem:\n\nThe n queens problem is: placing N queens on a N * N chess board such that no queen\ncan attack any other queens placed on that chess board.  This means that one queen\ncannot have any other queen on its horizontal, vertical and diagonal lines.\n\nSolution:\n\nTo solve this problem we will use simple math. First we know the queen can move in all\nthe possible ways, we can simplify it in this: vertical, horizontal, diagonal left and\n diagonal right.\n\nWe can visualize it like this:\n\nleft diagonal = \\\nright diagonal = /\n\nOn a chessboard vertical movement could be the rows and horizontal movement could be\nthe columns.\n\nIn programming we can use an array, and in this array each index could be the rows and\neach value in the array could be the column. For example:\n\n    . Q . .     We have this chessboard with one queen in each column and each queen\n    . . . Q     can't attack to each other.\n    Q . . .     The array for this example would look like this: [1, 3, 0, 2]\n    . . Q .\n\nSo if we use an array and we verify that each value in the array is different to each\nother we know that at least the queens can't attack each other in horizontal and\nvertical.\n\nAt this point we have it halfway completed and we will treat the chessboard as a\nCartesian plane.  Hereinafter we are going to remember basic math, so in the school we\nlearned this formula:\n\n    Slope of a line:\n\n           y2 - y1\n     m = ----------\n          x2 - x1\n\nThis formula allow us to get the slope. For the angles 45º (right diagonal) and 135º\n(left diagonal) this formula gives us m = 1, and m = -1 respectively.\n\nSee::\nhttps://www.enotes.com/homework-help/write-equation-line-that-hits-origin-45-degree-1474860\n\nThen we have this other formula:\n\nSlope intercept:\n\ny = mx + b\n\nb is where the line crosses the Y axis (to get more information see:\nhttps://www.mathsisfun.com/y_intercept.html), if we change the formula to solve for b\nwe would have:\n\ny - mx = b\n\nAnd since we already have the m values for the angles 45º and 135º, this formula would\nlook like this:\n\n45º: y - (1)x = b\n45º: y - x = b\n\n135º: y - (-1)x = b\n135º: y + x = b\n\ny = row\nx = column\n\nApplying these two formulas we can check if a queen in some position is being attacked\nfor another one or vice versa.\n\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "r\"\"\"\nProblem:\n\nThe n queens problem is: placing N queens on a N * N chess board such that no queen\ncan attack any other queens placed on that chess board.  This means that one queen\ncannot have any other queen on its horizontal, vertical and diagonal lines.\n\nSolution:\n\nTo solve this problem we will use simple math. First we know the queen can move in all\nthe possible ways, we can simplify it in this: vertical, horizontal, diagonal left and\n diagonal right.\n\nWe can visualize it like this:\n\nleft diagonal = \\\nright diagonal = /\n\nOn a chessboard vertical movement could be the rows and horizontal movement could be\nthe columns.\n\nIn programming we can use an array, and in this array each index could be the rows and\neach value in the array could be the column. For example:\n\n    . Q . .     We have this chessboard with one queen in each column and each queen\n    . . . Q     can't attack to each other.\n    Q . . .     The array for this example would look like this: [1, 3, 0, 2]\n    . . Q .\n\nSo if we use an array and we verify that each value in the array is different to each\nother we know that at least the queens can't attack each other in horizontal and\nvertical.\n\nAt this point we have it halfway completed and we will treat the chessboard as a\nCartesian plane.  Hereinafter we are going to remember basic math, so in the school we\nlearned this formula:\n\n    Slope of a line:\n\n           y2 - y1\n     m = ----------\n          x2 - x1\n\nThis formula allow us to get the slope. For the angles 45º (right diagonal) and 135º\n(left diagonal) this formula gives us m = 1, and m = -1 respectively.\n\nSee::\nhttps://www.enotes.com/homework-help/write-equation-line-that-hits-origin-45-degree-1474860\n\nThen we have this other formula:\n\nSlope intercept:\n\ny = mx + b\n\nb is where the line crosses the Y axis (to get more information see:\nhttps://www.mathsisfun.com/y_intercept.html), if we change the formula to solve for b\nwe would have:\n\ny - mx = b\n\nAnd since we already have the m values for the angles 45º and 135º, this formula would\nlook like this:\n\n45º: y - (1)x = b\n45º: y - x = b\n\n135º: y - (-1)x = b\n135º: y + x = b\n\ny = row\nx = column\n\nApplying these two formulas we can check if a queen in some position is being attacked\nfor another one or vice versa.\n\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "r\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nProblem:\n\nThe n queens problem is: placing N queens on a N * N chess board such that no queen\ncan attack any other queens placed on that chess board.  This means that one queen\ncannot have any other queen on its horizontal, vertical and diagonal lines.\n\nSolution:\n\nTo solve this problem we will use simple math. First we know the queen can move in all\nthe possible ways, we can simplify it in this: vertical, horizontal, diagonal left and\n diagonal right.\n\nWe can visualize it like this:\n\nleft diagonal = \\\nright diagonal = /\n\nOn a chessboard vertical movement could be the rows and horizontal movement could be\nthe columns.\n\nIn programming we can use an array, and in this array each index could be the rows and\neach value in the array could be the column. For example:\n\n    . Q . .     We have this chessboard with one queen in each column and each queen\n    . . . Q     can't attack to each other.\n    Q . . .     The array for this example would look like this: [1, 3, 0, 2]\n    . . Q .\n\nSo if we use an array and we verify that each value in the array is different to each\nother we know that at least the queens can't attack each other in horizontal and\nvertical.\n\nAt this point we have it halfway completed and we will treat the chessboard as a\nCartesian plane.  Hereinafter we are going to remember basic math, so in the school we\nlearned this formula:\n\n    Slope of a line:\n\n           y2 - y1\n     m = ----------\n          x2 - x1\n\nThis formula allow us to get the slope. For the angles 45º (right diagonal) and 135º\n(left diagonal) this formula gives us m = 1, and m = -1 respectively.\n\nSee::\nhttps://www.enotes.com/homework-help/write-equation-line-that-hits-origin-45-degree-1474860\n\nThen we have this other formula:\n\nSlope intercept:\n\ny = mx + b\n\nb is where the line crosses the Y axis (to get more information see:\nhttps://www.mathsisfun.com/y_intercept.html), if we change the formula to solve for b\nwe would have:\n\ny - mx = b\n\nAnd since we already have the m values for the angles 45º and 135º, this formula would\nlook like this:\n\n45º: y - (1)x = b\n45º: y - x = b\n\n135º: y - (-1)x = b\n135º: y + x = b\n\ny = row\nx = column\n\nApplying these two formulas we can check if a queen in some position is being attacked\nfor another one or vice versa.\n\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "future_import_statement",
            "label": "from __future__ import annotations",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "annotations",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "annotations",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def depth_first_search(\n    possible_board: list[int],\n    diagonal_right_collisions: list[int],\n    diagonal_left_collisions: list[int],\n    boards: list[list[str]],\n    n: int,\n) -> None:\n    \"\"\"\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    \"\"\"\n\n    # Get next row in the current board (possible_board) to fill it with a queen\n    row = len(possible_board)\n\n    # If row is equal to the size of the board it means there are a queen in each row in\n    # the current board (possible_board)\n    if row == n:\n        # We convert the variable possible_board that looks like this: [1, 3, 0, 2] to\n        # this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n        boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])\n        return\n\n    # We iterate each column in the row to find all possible results in each row\n    for col in range(n):\n        # We apply that we learned previously. First we check that in the current board\n        # (possible_board) there are not other same value because if there is it means\n        # that there are a collision in vertical. Then we apply the two formulas we\n        # learned before:\n        #\n        # 45º: y - x = b or 45: row - col = b\n        # 135º: y + x = b or row + col = b.\n        #\n        # And we verify if the results of this two formulas not exist in their variables\n        # respectively.  (diagonal_right_collisions, diagonal_left_collisions)\n        #\n        # If any or these are True it means there is a collision so we continue to the\n        # next value in the for loop.\n        if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue\n\n        # If it is False we call dfs function again and we update the inputs\n        depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
            "children": [
                {
                    "type": "identifier",
                    "label": "depth_first_search",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    possible_board: list[int],\n    diagonal_right_collisions: list[int],\n    diagonal_left_collisions: list[int],\n    boards: list[list[str]],\n    n: int,\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "possible_board: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "possible_board",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "diagonal_right_collisions: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "diagonal_right_collisions",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "diagonal_left_collisions: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "diagonal_left_collisions",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "boards: list[list[str]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "boards",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[str]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[str]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[str]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[str]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[str]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[str]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "str",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "str",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    \"\"\"\n\n    # Get next row in the current board (possible_board) to fill it with a queen\n    row = len(possible_board)\n\n    # If row is equal to the size of the board it means there are a queen in each row in\n    # the current board (possible_board)\n    if row == n:\n        # We convert the variable possible_board that looks like this: [1, 3, 0, 2] to\n        # this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n        boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])\n        return\n\n    # We iterate each column in the row to find all possible results in each row\n    for col in range(n):\n        # We apply that we learned previously. First we check that in the current board\n        # (possible_board) there are not other same value because if there is it means\n        # that there are a collision in vertical. Then we apply the two formulas we\n        # learned before:\n        #\n        # 45º: y - x = b or 45: row - col = b\n        # 135º: y + x = b or row + col = b.\n        #\n        # And we verify if the results of this two formulas not exist in their variables\n        # respectively.  (diagonal_right_collisions, diagonal_left_collisions)\n        #\n        # If any or these are True it means there is a collision so we continue to the\n        # next value in the for loop.\n        if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue\n\n        # If it is False we call dfs function again and we update the inputs\n        depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# Get next row in the current board (possible_board) to fill it with a queen",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "label": "row = len(possible_board)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "row = len(possible_board)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "row",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "len(possible_board)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(possible_board)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "possible_board",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# If row is equal to the size of the board it means there are a queen in each row in",
                            "children": []
                        },
                        {
                            "type": "comment",
                            "label": "# the current board (possible_board)",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "label": "if row == n:\n        # We convert the variable possible_board that looks like this: [1, 3, 0, 2] to\n        # this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n        boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])\n        return",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "row == n",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "row",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "n",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# We convert the variable possible_board that looks like this: [1, 3, 0, 2] to",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])\n        return",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "boards.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "boards",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])",
                                                            "children": [
                                                                {
                                                                    "type": "list_comprehension",
                                                                    "label": "[\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board]",
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "label": "\". \" * i + \"Q \" + \". \" * (n - 1 - i)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "\". \" * i + \"Q \"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "binary_operator",
                                                                                            "label": "\". \" * i",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "\". \"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": ". ",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "i",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"Q \"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "Q ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "\". \" * (n - 1 - i)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\". \"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": ". ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "parenthesized_expression",
                                                                                            "label": "(n - 1 - i)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "binary_operator",
                                                                                                    "label": "n - 1 - i",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "binary_operator",
                                                                                                            "label": "n - 1",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "n",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "integer",
                                                                                                                    "label": "1",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "i",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "for_in_clause",
                                                                            "label": "for i in possible_board",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "i",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "possible_board",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# We iterate each column in the row to find all possible results in each row",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "label": "for col in range(n):\n        # We apply that we learned previously. First we check that in the current board\n        # (possible_board) there are not other same value because if there is it means\n        # that there are a collision in vertical. Then we apply the two formulas we\n        # learned before:\n        #\n        # 45º: y - x = b or 45: row - col = b\n        # 135º: y + x = b or row + col = b.\n        #\n        # And we verify if the results of this two formulas not exist in their variables\n        # respectively.  (diagonal_right_collisions, diagonal_left_collisions)\n        #\n        # If any or these are True it means there is a collision so we continue to the\n        # next value in the for loop.\n        if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue\n\n        # If it is False we call dfs function again and we update the inputs\n        depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "col",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "range(n)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(n)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# We apply that we learned previously. First we check that in the current board",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# (possible_board) there are not other same value because if there is it means",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# that there are a collision in vertical. Then we apply the two formulas we",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# learned before:",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "#",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# 45º: y - x = b or 45: row - col = b",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# 135º: y + x = b or row + col = b.",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "#",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# And we verify if the results of this two formulas not exist in their variables",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# respectively.  (diagonal_right_collisions, diagonal_left_collisions)",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "#",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# If any or these are True it means there is a collision so we continue to the",
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# next value in the for loop.",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue\n\n        # If it is False we call dfs function again and we update the inputs\n        depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue",
                                            "children": [
                                                {
                                                    "type": "parenthesized_expression",
                                                    "label": "(\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        )",
                                                    "children": [
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "col in possible_board\n            or row - col in diagonal_right_collisions",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "col in possible_board",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "col",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "possible_board",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "row - col in diagonal_right_collisions",
                                                                            "children": [
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "row - col",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "row",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "col",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "diagonal_right_collisions",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "row + col in diagonal_left_collisions",
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "label": "row + col",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "row",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "col",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "diagonal_left_collisions",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "continue",
                                                    "children": [
                                                        {
                                                            "type": "continue_statement",
                                                            "label": "continue",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# If it is False we call dfs function again and we update the inputs",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "depth_first_search",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "list",
                                                                    "label": "[*possible_board, col]",
                                                                    "children": [
                                                                        {
                                                                            "type": "list_splat",
                                                                            "label": "*possible_board",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "possible_board",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "col",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "list",
                                                                    "label": "[*diagonal_right_collisions, row - col]",
                                                                    "children": [
                                                                        {
                                                                            "type": "list_splat",
                                                                            "label": "*diagonal_right_collisions",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "diagonal_right_collisions",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "label": "row - col",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "row",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "col",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "list",
                                                                    "label": "[*diagonal_left_collisions, row + col]",
                                                                    "children": [
                                                                        {
                                                                            "type": "list_splat",
                                                                            "label": "*diagonal_left_collisions",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "diagonal_left_collisions",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "label": "row + col",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "row",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "col",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "boards",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def n_queens_solution(n: int) -> None:\n    boards: list[list[str]] = []\n    depth_first_search([], [], [], boards, n)\n\n    # Print all the boards\n    for board in boards:\n        for column in board:\n            print(column)\n        print(\"\")\n\n    print(len(boards), \"solutions were found.\")",
            "children": [
                {
                    "type": "identifier",
                    "label": "n_queens_solution",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(n: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "boards: list[list[str]] = []\n    depth_first_search([], [], [], boards, n)\n\n    # Print all the boards\n    for board in boards:\n        for column in board:\n            print(column)\n        print(\"\")\n\n    print(len(boards), \"solutions were found.\")",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "boards: list[list[str]] = []",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "boards: list[list[str]] = []",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "boards",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "list[list[str]]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[list[str]]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[list[str]]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "list[str]",
                                                                    "children": [
                                                                        {
                                                                            "type": "generic_type",
                                                                            "label": "list[str]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "type_parameter",
                                                                                    "label": "[str]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "str",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "str",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "list",
                                            "label": "[]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "depth_first_search([], [], [], boards, n)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "depth_first_search([], [], [], boards, n)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "depth_first_search",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "([], [], [], boards, n)",
                                            "children": [
                                                {
                                                    "type": "list",
                                                    "label": "[]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "label": "[]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "list",
                                                    "label": "[]",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "boards",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# Print all the boards",
                            "children": []
                        },
                        {
                            "type": "for_statement",
                            "label": "for board in boards:\n        for column in board:\n            print(column)\n        print(\"\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "board",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "boards",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "for column in board:\n            print(column)\n        print(\"\")",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for column in board:\n            print(column)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "column",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "board",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "print(column)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "print(column)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "print(column)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "print",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(column)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "column",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "print(\"\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "print(\"\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "print",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "print(len(boards), \"solutions were found.\")",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "print(len(boards), \"solutions were found.\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "print",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(len(boards), \"solutions were found.\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "len(boards)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(boards)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "boards",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "string",
                                                    "label": "\"solutions were found.\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "solutions were found.",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    n_queens_solution(4)",
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "import doctest\n\n    doctest.testmod()\n    n_queens_solution(4)",
                    "children": [
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "n_queens_solution(4)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "n_queens_solution(4)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "n_queens_solution",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(4)",
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "label": "4",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}