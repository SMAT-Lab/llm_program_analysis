{
    "type": "module",
    "label": "import asyncio\nimport builtins\nimport logging\nimport os\nimport threading\nimport time\nimport typing\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom types import NoneType, UnionType\nfrom typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)\n\nimport Pyro5.api\nfrom pydantic import BaseModel\nfrom Pyro5 import api as pyro\nfrom Pyro5 import config as pyro_config\n\nfrom backend.data import db, redis\nfrom backend.util.process import AppProcess\nfrom backend.util.retry import conn_retry\nfrom backend.util.settings import Config, Secrets\n\nlogger = logging.getLogger(__name__)\nT = TypeVar(\"T\")\nC = TypeVar(\"C\", bound=Callable)\n\nconfig = Config()\npyro_host = config.pyro_host\npyro_config.MAX_RETRIES = config.pyro_client_comm_retry  # type: ignore\npyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout  # type: ignore\n\n\ndef expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore\n\n\ndef register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\ndef _make_custom_serializer(model: Type[BaseModel]):\n    def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict\n\n\ndef _make_custom_deserializer(model: Type[BaseModel]):\n    def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class\n\n\nclass AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n\n    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()\n\n    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()\n\n\n# --------- UTILITIES --------- #\n\n\nAS = TypeVar(\"AS\", bound=AppService)\n\n\nclass PyroClient:\n    proxy: Pyro5.api.Proxy\n\n\ndef close_service_client(client: AppService) -> None:\n    if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef get_service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())\n\n\nbuiltin_types = [*vars(builtins).values(), NoneType, Enum]\n\n\ndef _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n    if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")\n",
    "children": [
        {
            "type": "import_statement",
            "label": "import asyncio",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "asyncio",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "asyncio",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import builtins",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "builtins",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "builtins",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import logging",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "logging",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "logging",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import os",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "os",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "os",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import threading",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "threading",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "threading",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import time",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "time",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "time",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import typing",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from abc import ABC, abstractmethod",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "abc",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abc",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ABC",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ABC",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "abstractmethod",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abstractmethod",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from enum import Enum",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from types import NoneType, UnionType",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "types",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "types",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "NoneType",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "NoneType",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "UnionType",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "UnionType",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Annotated",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Annotated",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Any",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Any",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Awaitable",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Awaitable",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Callable",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Callable",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Coroutine",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Coroutine",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Dict",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Dict",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "FrozenSet",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "FrozenSet",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Iterator",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Iterator",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "List",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "List",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Set",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Set",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Tuple",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Tuple",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Type",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Type",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "TypeVar",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "TypeVar",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Union",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Union",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "cast",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "cast",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "get_args",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "get_args",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "get_origin",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "get_origin",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_statement",
            "label": "import Pyro5.api",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "Pyro5.api",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Pyro5",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "api",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from pydantic import BaseModel",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "pydantic",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "pydantic",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "BaseModel",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "BaseModel",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from Pyro5 import api as pyro",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "Pyro5",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Pyro5",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "aliased_import",
                    "label": "api as pyro",
                    "children": [
                        {
                            "type": "dotted_name",
                            "label": "api",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "api",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "label": "pyro",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from Pyro5 import config as pyro_config",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "Pyro5",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Pyro5",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "aliased_import",
                    "label": "config as pyro_config",
                    "children": [
                        {
                            "type": "dotted_name",
                            "label": "config",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "config",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "identifier",
                            "label": "pyro_config",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.data import db, redis",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.data",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "data",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "db",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "db",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "redis",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "redis",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.util.process import AppProcess",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.util.process",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "util",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "process",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "AppProcess",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "AppProcess",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.util.retry import conn_retry",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.util.retry",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "util",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "retry",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "conn_retry",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "conn_retry",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from backend.util.settings import Config, Secrets",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "backend.util.settings",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "backend",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "util",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "settings",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Config",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Config",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Secrets",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Secrets",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "logger = logging.getLogger(__name__)",
            "children": [
                {
                    "type": "assignment",
                    "label": "logger = logging.getLogger(__name__)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "logger",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "logging.getLogger(__name__)",
                            "children": [
                                {
                                    "type": "attribute",
                                    "label": "logging.getLogger",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "logging",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "getLogger",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(__name__)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "__name__",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "T = TypeVar(\"T\")",
            "children": [
                {
                    "type": "assignment",
                    "label": "T = TypeVar(\"T\")",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "T",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"T\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"T\")",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"T\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "T",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "C = TypeVar(\"C\", bound=Callable)",
            "children": [
                {
                    "type": "assignment",
                    "label": "C = TypeVar(\"C\", bound=Callable)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "C",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"C\", bound=Callable)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"C\", bound=Callable)",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"C\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "C",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "label": "bound=Callable",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bound",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "Callable",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "config = Config()",
            "children": [
                {
                    "type": "assignment",
                    "label": "config = Config()",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "config",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "Config()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Config",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "()",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "pyro_host = config.pyro_host",
            "children": [
                {
                    "type": "assignment",
                    "label": "pyro_host = config.pyro_host",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "pyro_host",
                            "children": []
                        },
                        {
                            "type": "attribute",
                            "label": "config.pyro_host",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "config",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "pyro_host",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "pyro_config.MAX_RETRIES = config.pyro_client_comm_retry",
            "children": [
                {
                    "type": "assignment",
                    "label": "pyro_config.MAX_RETRIES = config.pyro_client_comm_retry",
                    "children": [
                        {
                            "type": "attribute",
                            "label": "pyro_config.MAX_RETRIES",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "pyro_config",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "MAX_RETRIES",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "attribute",
                            "label": "config.pyro_client_comm_retry",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "config",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "pyro_client_comm_retry",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# type: ignore",
            "children": []
        },
        {
            "type": "expression_statement",
            "label": "pyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout",
            "children": [
                {
                    "type": "assignment",
                    "label": "pyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout",
                    "children": [
                        {
                            "type": "attribute",
                            "label": "pyro_config.COMMTIMEOUT",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "pyro_config",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "COMMTIMEOUT",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "attribute",
                            "label": "config.pyro_client_comm_timeout",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "config",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "pyro_client_comm_timeout",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# type: ignore",
            "children": []
        },
        {
            "type": "function_definition",
            "label": "def expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore",
            "children": [
                {
                    "type": "identifier",
                    "label": "expose",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(func: C)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "func: C",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "func",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "C",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "C",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "C",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "C",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "wrapper",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(*args, **kwargs)",
                                    "children": [
                                        {
                                            "type": "list_splat_pattern",
                                            "label": "*args",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "args",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "dictionary_splat_pattern",
                                            "label": "**kwargs",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "kwargs",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                                    "children": [
                                        {
                                            "type": "try_statement",
                                            "label": "try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "label": "return func(*args, **kwargs)",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return func(*args, **kwargs)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "func(*args, **kwargs)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "func",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(*args, **kwargs)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "list_splat",
                                                                                    "label": "*args",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "args",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "dictionary_splat",
                                                                                    "label": "**kwargs",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "kwargs",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "label": "except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                                                    "children": [
                                                        {
                                                            "type": "as_pattern",
                                                            "label": "Exception as e",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Exception",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "as_pattern_target",
                                                                    "label": "e",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "e",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "msg = f\"Error in {func.__name__}: {e.__str__()}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "msg = f\"Error in {func.__name__}: {e.__str__()}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "msg",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "f\"Error in {func.__name__}: {e.__str__()}\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "f\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "Error in ",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{func.__name__}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "func.__name__",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "func",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "__name__",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": ": ",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{e.__str__()}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "e.__str__()",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "e.__str__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "e",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__str__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "()",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "logger.exception(msg)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "logger.exception(msg)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "logger.exception",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "logger",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "exception",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(msg)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "msg",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "raise_statement",
                                                                    "label": "raise",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "register_pydantic_serializers(func)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "register_pydantic_serializers(func)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "register_pydantic_serializers",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(func)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "func",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return pyro.expose(wrapper)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "pyro.expose(wrapper)",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "pyro.expose",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "pyro",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "expose",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(wrapper)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "wrapper",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# type: ignore",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
            "children": [
                {
                    "type": "identifier",
                    "label": "register_pydantic_serializers",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(func: Callable)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "func: Callable",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "func",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Callable",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Callable",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "Register custom serializers and deserializers for annotated Pydantic models",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                            "children": [
                                {
                                    "type": "pattern_list",
                                    "label": "name, annotation",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "name",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "annotation",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "call",
                                    "label": "func.__annotations__.items()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "func.__annotations__.items",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "func.__annotations__",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "func",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "__annotations__",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "items",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                                    "children": [
                                        {
                                            "type": "try_statement",
                                            "label": "try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "label": "pydantic_types = _pydantic_models_from_type_annotation(annotation)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "pydantic_types = _pydantic_models_from_type_annotation(annotation)",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "pydantic_types = _pydantic_models_from_type_annotation(annotation)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "pydantic_types",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "_pydantic_models_from_type_annotation(annotation)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "_pydantic_models_from_type_annotation",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(annotation)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "annotation",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "label": "except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                                    "children": [
                                                        {
                                                            "type": "as_pattern",
                                                            "label": "Exception as e",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Exception",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "as_pattern_target",
                                                                    "label": "e",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "e",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                                            "children": [
                                                                {
                                                                    "type": "raise_statement",
                                                                    "label": "raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "TypeError",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"Error while exposing {func.__name__}: {e.__str__()}\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "Error while exposing ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{func.__name__}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "func.__name__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "func",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__name__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": ": ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{e.__str__()}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "e.__str__()",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "attribute",
                                                                                                                    "label": "e.__str__",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "e",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "__str__",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "()",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "for_statement",
                                            "label": "for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "model",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "pydantic_types",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "logger.debug",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "logger",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "debug",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "concatenated_string",
                                                                                    "label": "f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"Registering Pyro (de)serializers for {func.__name__} annotation \"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "Registering Pyro (de)serializers for ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{func.__name__}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "func.__name__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "func",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__name__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": " annotation ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"'{name}': {model.__qualname__}\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "'",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{name}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "name",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "': ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{model.__qualname__}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "model.__qualname__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "model",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__qualname__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "pyro.register_class_to_dict(model, _make_custom_serializer(model))",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "pyro.register_class_to_dict(model, _make_custom_serializer(model))",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "pyro.register_class_to_dict",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "pyro",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "register_class_to_dict",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(model, _make_custom_serializer(model))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "model",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "_make_custom_serializer(model)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "_make_custom_serializer",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(model)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "pyro.register_dict_to_class",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "pyro",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "register_dict_to_class",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n                model.__qualname__, _make_custom_deserializer(model)\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "model.__qualname__",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "model",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__qualname__",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "_make_custom_deserializer(model)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "_make_custom_deserializer",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(model)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "model",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def _make_custom_serializer(model: Type[BaseModel]):\n    def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict",
            "children": [
                {
                    "type": "identifier",
                    "label": "_make_custom_serializer",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(model: Type[BaseModel])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "model: Type[BaseModel]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "model",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type[BaseModel]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "Type[BaseModel]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[BaseModel]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "BaseModel",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "BaseModel",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "custom_class_to_dict",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(obj)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "obj",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "data",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "dictionary",
                                                            "label": "{\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }",
                                                            "children": [
                                                                {
                                                                    "type": "pair",
                                                                    "label": "\"__class__\": obj.__class__.__qualname__",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"__class__\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "__class__",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "obj.__class__.__qualname__",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "obj.__class__",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "obj",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__class__",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "__qualname__",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "dictionary_splat",
                                                                    "label": "**obj.model_dump()",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "obj.model_dump()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "obj.model_dump",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "obj",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "model_dump",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "logger.debug",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "logger",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "debug",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"Serializing {obj.__class__.__qualname__} with data: {data}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "Serializing ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{obj.__class__.__qualname__}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "obj.__class__.__qualname__",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "obj.__class__",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "obj",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "__class__",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__qualname__",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " with data: ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{data}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return data",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "data",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return custom_class_to_dict",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "custom_class_to_dict",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def _make_custom_deserializer(model: Type[BaseModel]):\n    def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class",
            "children": [
                {
                    "type": "identifier",
                    "label": "_make_custom_deserializer",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(model: Type[BaseModel])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "model: Type[BaseModel]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "model",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type[BaseModel]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "Type[BaseModel]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[BaseModel]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "BaseModel",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "BaseModel",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "custom_dict_to_class",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(qualname, data: dict)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "qualname",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "data: dict",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "data",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "dict",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "logger.debug",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "logger",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "debug",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(f\"Deserializing {model.__qualname__} from data: {data}\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "f\"Deserializing {model.__qualname__} from data: {data}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "f\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "Deserializing ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{model.__qualname__}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "model.__qualname__",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "model",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__qualname__",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": " from data: ",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "label": "{data}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "data",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return model(**data)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "model(**data)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "model",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(**data)",
                                                            "children": [
                                                                {
                                                                    "type": "dictionary_splat",
                                                                    "label": "**data",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "data",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return custom_dict_to_class",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "custom_dict_to_class",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n\n    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()\n\n    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()",
            "children": [
                {
                    "type": "identifier",
                    "label": "AppService",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(AppProcess, ABC)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "AppProcess",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "label": "ABC",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n\n    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()\n\n    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "shared_event_loop: asyncio.AbstractEventLoop",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "shared_event_loop: asyncio.AbstractEventLoop",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "shared_event_loop",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "asyncio.AbstractEventLoop",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "asyncio.AbstractEventLoop",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "asyncio",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "AbstractEventLoop",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "use_db: bool = False",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "use_db: bool = False",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "use_db",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "bool",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bool",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "false",
                                            "label": "False",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "use_redis: bool = False",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "use_redis: bool = False",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "use_redis",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "bool",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bool",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "false",
                                            "label": "False",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "use_supabase: bool = False",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "use_supabase: bool = False",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "use_supabase",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "bool",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bool",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "false",
                                            "label": "False",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def __init__(self):\n        self.uri = None",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.uri = None",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.uri = None",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.uri = None",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.uri",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "uri",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "decorator",
                                    "label": "@abstractmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "abstractmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def get_port(cls) -> int:\n        pass",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "get_port",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "int",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "pass",
                                            "children": [
                                                {
                                                    "type": "pass_statement",
                                                    "label": "pass",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@classmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "classmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "get_host",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(cls)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "cls",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "os.environ.get",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "os.environ",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "os",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "environ",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "get",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"{cls.service_name.upper()}_HOST\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{cls.service_name.upper()}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "cls.service_name.upper()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "cls.service_name.upper",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "cls.service_name",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "cls",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "service_name",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "upper",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "_HOST",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "config.pyro_host",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "config",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "pyro_host",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def run_service(self) -> None:\n        while True:\n            time.sleep(10)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "run_service",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "None",
                                    "children": [
                                        {
                                            "type": "none",
                                            "label": "None",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "while True:\n            time.sleep(10)",
                                    "children": [
                                        {
                                            "type": "while_statement",
                                            "label": "while True:\n            time.sleep(10)",
                                            "children": [
                                                {
                                                    "type": "true",
                                                    "label": "True",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "time.sleep(10)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "time.sleep(10)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "time.sleep(10)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "time.sleep",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "time",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "sleep",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(10)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "10",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__run_async",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, coro: Coroutine[Any, Any, T])",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "coro: Coroutine[Any, Any, T]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "coro",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Coroutine[Any, Any, T]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Coroutine[Any, Any, T]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Coroutine",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[Any, Any, T]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Any",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Any",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Any",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Any",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "label": "T",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "T",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "asyncio.run_coroutine_threadsafe",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "asyncio",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "run_coroutine_threadsafe",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(coro, self.shared_event_loop)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "coro",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.shared_event_loop",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "shared_event_loop",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "run_and_wait",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, coro: Coroutine[Any, Any, T])",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "label": "coro: Coroutine[Any, Any, T]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "coro",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Coroutine[Any, Any, T]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Coroutine[Any, Any, T]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Coroutine",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[Any, Any, T]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Any",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Any",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Any",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Any",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "label": "T",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "T",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "type",
                                    "label": "T",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "T",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "future = self.__run_async(coro)\n        return future.result()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "future = self.__run_async(coro)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "future = self.__run_async(coro)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "future",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self.__run_async(coro)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.__run_async",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "__run_async",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(coro)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "coro",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return future.result()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "future.result()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "future.result",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "future",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "result",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "run",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.shared_event_loop = asyncio.get_event_loop()",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.shared_event_loop = asyncio.get_event_loop()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.shared_event_loop",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "shared_event_loop",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "asyncio.get_event_loop()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "asyncio.get_event_loop",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "asyncio",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "get_event_loop",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.use_db",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "use_db",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "self.shared_event_loop.run_until_complete(db.connect())",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "self.shared_event_loop.run_until_complete(db.connect())",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.shared_event_loop.run_until_complete(db.connect())",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.shared_event_loop.run_until_complete",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.shared_event_loop",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "shared_event_loop",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "run_until_complete",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(db.connect())",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "db.connect()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "db.connect",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "db",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "connect",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if self.use_redis:\n            redis.connect()",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.use_redis",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "use_redis",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "redis.connect()",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "redis.connect()",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "redis.connect()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "redis.connect",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "redis",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "connect",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.use_supabase",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "use_supabase",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                                    "children": [
                                                        {
                                                            "type": "import_from_statement",
                                                            "label": "from supabase import create_client",
                                                            "children": [
                                                                {
                                                                    "type": "dotted_name",
                                                                    "label": "supabase",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "supabase",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "dotted_name",
                                                                    "label": "create_client",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "create_client",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "secrets = Secrets()",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "secrets = Secrets()",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "secrets",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "Secrets()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Secrets",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.supabase",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "supabase",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "create_client",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "secrets.supabase_url",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "secrets",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "supabase_url",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "secrets.supabase_service_role_key",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "secrets",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "supabase_service_role_key",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# Initialize the async loop.",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "async_thread = threading.Thread(target=self.__start_async_loop)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "async_thread = threading.Thread(target=self.__start_async_loop)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "async_thread",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "threading.Thread(target=self.__start_async_loop)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "threading.Thread",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "threading",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Thread",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(target=self.__start_async_loop)",
                                                                    "children": [
                                                                        {
                                                                            "type": "keyword_argument",
                                                                            "label": "target=self.__start_async_loop",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "target",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.__start_async_loop",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__start_async_loop",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "async_thread.daemon = True",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "async_thread.daemon = True",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "async_thread.daemon",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "async_thread",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "daemon",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "async_thread.start()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "async_thread.start()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "async_thread.start",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "async_thread",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "start",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# Initialize pyro service",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "daemon_thread = threading.Thread(target=self.__start_pyro)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "daemon_thread = threading.Thread(target=self.__start_pyro)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "daemon_thread",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "threading.Thread(target=self.__start_pyro)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "threading.Thread",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "threading",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "Thread",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(target=self.__start_pyro)",
                                                                    "children": [
                                                                        {
                                                                            "type": "keyword_argument",
                                                                            "label": "target=self.__start_pyro",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "target",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.__start_pyro",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__start_pyro",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "daemon_thread.daemon = True",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "daemon_thread.daemon = True",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "daemon_thread.daemon",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "daemon_thread",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "daemon",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "daemon_thread.start()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "daemon_thread.start()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "daemon_thread.start",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "daemon_thread",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "start",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# Run the main service (if it's not implemented, just sleep).",
                                            "children": []
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.run_service()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.run_service()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.run_service",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "run_service",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "cleanup",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.use_db",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "use_db",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "logger.info",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "logger",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "info",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "f\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "[",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{self.__class__.__name__}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.__class__.__name__",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.__class__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__class__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "__name__",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "] ⏳ Disconnecting DB...",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "self.run_and_wait(db.disconnect())",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "self.run_and_wait(db.disconnect())",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "self.run_and_wait",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "run_and_wait",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(db.disconnect())",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "db.disconnect()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "db.disconnect",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "db",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "disconnect",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "()",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.use_redis",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "use_redis",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "logger.info",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "logger",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "info",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "f\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "[",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{self.__class__.__name__}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.__class__.__name__",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "self.__class__",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "self",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "__class__",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "__name__",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "] ⏳ Disconnecting Redis...",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "redis.disconnect()",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "redis.disconnect()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "redis.disconnect",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "redis",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "disconnect",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@conn_retry(\"Pyro\", \"Starting Pyro Service\")",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "conn_retry(\"Pyro\", \"Starting Pyro Service\")",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "conn_retry",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(\"Pyro\", \"Starting Pyro Service\")",
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "label": "\"Pyro\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "Pyro",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "string",
                                                            "label": "\"Starting Pyro Service\"",
                                                            "children": [
                                                                {
                                                                    "type": "string_start",
                                                                    "label": "\"",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_content",
                                                                    "label": "Starting Pyro Service",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string_end",
                                                                    "label": "\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "__start_pyro",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "maximum_connection_thread_count",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "max",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "Pyro5.config.THREADPOOL_SIZE",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "Pyro5.config",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "Pyro5",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "config",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "THREADPOOL_SIZE",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "config.num_node_workers * config.num_graph_workers",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "config.num_node_workers",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "config",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "num_node_workers",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "config.num_graph_workers",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "config",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "num_graph_workers",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "Pyro5.config.THREADPOOL_SIZE",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "Pyro5.config",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Pyro5",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "config",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "THREADPOOL_SIZE",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "maximum_connection_thread_count",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "comment",
                                                    "label": "# type: ignore",
                                                    "children": []
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "daemon",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "Pyro5.api.Daemon",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "Pyro5.api",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "Pyro5",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "api",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Daemon",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(host=config.pyro_host, port=self.get_port())",
                                                                            "children": [
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "label": "host=config.pyro_host",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "host",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "config.pyro_host",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "config",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "pyro_host",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "label": "port=self.get_port()",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "port",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "self.get_port()",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "self.get_port",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "self",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "get_port",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "()",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "self.uri = daemon.register(self, objectId=self.service_name)",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "self.uri = daemon.register(self, objectId=self.service_name)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.uri",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "uri",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "daemon.register(self, objectId=self.service_name)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "daemon.register",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "daemon",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "register",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(self, objectId=self.service_name)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "label": "objectId=self.service_name",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "objectId",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.service_name",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "service_name",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "logger.info",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "logger",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "info",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "[",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{self.service_name}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.service_name",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "service_name",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "] Connected to Pyro; URI = ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{self.uri}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.uri",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "uri",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "daemon.requestLoop()",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "daemon.requestLoop()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "daemon.requestLoop",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "daemon",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "requestLoop",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def __start_async_loop(self):\n        self.shared_event_loop.run_forever()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__start_async_loop",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.shared_event_loop.run_forever()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.shared_event_loop.run_forever()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.shared_event_loop.run_forever()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.shared_event_loop.run_forever",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.shared_event_loop",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "shared_event_loop",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "run_forever",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "label": "# --------- UTILITIES --------- #",
            "children": []
        },
        {
            "type": "expression_statement",
            "label": "AS = TypeVar(\"AS\", bound=AppService)",
            "children": [
                {
                    "type": "assignment",
                    "label": "AS = TypeVar(\"AS\", bound=AppService)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "AS",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"AS\", bound=AppService)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"AS\", bound=AppService)",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"AS\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "AS",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "keyword_argument",
                                            "label": "bound=AppService",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "bound",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "AppService",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class PyroClient:\n    proxy: Pyro5.api.Proxy",
            "children": [
                {
                    "type": "identifier",
                    "label": "PyroClient",
                    "children": []
                },
                {
                    "type": "block",
                    "label": "proxy: Pyro5.api.Proxy",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "proxy: Pyro5.api.Proxy",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "proxy: Pyro5.api.Proxy",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "proxy",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "Pyro5.api.Proxy",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "Pyro5.api.Proxy",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "Pyro5.api",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Pyro5",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "api",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "Proxy",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def close_service_client(client: AppService) -> None:\n    if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
            "children": [
                {
                    "type": "identifier",
                    "label": "close_service_client",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(client: AppService)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "client: AppService",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "client",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "AppService",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "AppService",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(client, PyroClient)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(client, PyroClient)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "client",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "PyroClient",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "client.proxy._pyroRelease()",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "client.proxy._pyroRelease()",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "client.proxy._pyroRelease()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "client.proxy._pyroRelease",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "client.proxy",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "client",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "proxy",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "_pyroRelease",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "label": "raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "RuntimeError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(f\"Client {client.__class__} is not a Pyro client.\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"Client {client.__class__} is not a Pyro client.\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Client ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{client.__class__}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "client.__class__",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "client",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "__class__",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": " is not a Pyro client.",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def get_service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())",
            "children": [
                {
                    "type": "identifier",
                    "label": "get_service_client",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(service_type: Type[AS])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "service_type: Type[AS]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "service_type",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type[AS]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "Type[AS]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[AS]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "AS",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "AS",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "AS",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "AS",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "service_name = service_type.service_name",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "service_name = service_type.service_name",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "service_name",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "label": "service_type.service_name",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "service_type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "service_name",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "class_definition",
                            "label": "class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "DynamicClient",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(PyroClient)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "PyroClient",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "@conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res",
                                    "children": [
                                        {
                                            "type": "decorated_definition",
                                            "label": "@conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                                            "children": [
                                                {
                                                    "type": "decorator",
                                                    "label": "@conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "conn_retry",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(\"Pyro\", f\"Connecting to [{service_name}]\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"Pyro\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Pyro",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"Connecting to [{service_name}]\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Connecting to [",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{service_name}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "service_name",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "]",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "function_definition",
                                                    "label": "def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "__init__",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "parameters",
                                                            "label": "(self)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "host",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "os.environ.get",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "os.environ",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "os",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "environ",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "get",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(f\"{service_name.upper()}_HOST\", pyro_host)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "label": "f\"{service_name.upper()}_HOST\"",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "label": "f\"",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "interpolation",
                                                                                                            "label": "{service_name.upper()}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "service_name.upper()",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "service_name.upper",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "service_name",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "upper",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "()",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "label": "_HOST",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_end",
                                                                                                            "label": "\"",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "pyro_host",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "uri",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "f\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "PYRO:",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{service_type.service_name}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "service_type.service_name",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "service_type",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "service_name",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "@",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{host}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "host",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": ":",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "interpolation",
                                                                                            "label": "{service_type.get_port()}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "service_type.get_port()",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "attribute",
                                                                                                            "label": "service_type.get_port",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "service_type",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "get_port",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "()",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "logger.debug",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "logger",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "debug",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(f\"Connecting to service [{service_name}]. URI = {uri}\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"Connecting to service [{service_name}]. URI = {uri}\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "Connecting to service [",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{service_name}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "service_name",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "]. URI = ",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{uri}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "uri",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "self.proxy = Pyro5.api.Proxy(uri)",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "self.proxy = Pyro5.api.Proxy(uri)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.proxy",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "self",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "proxy",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "Pyro5.api.Proxy(uri)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "Pyro5.api.Proxy",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "Pyro5.api",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "Pyro5",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "api",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "Proxy",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(uri)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "uri",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "comment",
                                                                    "label": "# Attempt to bind to ensure the connection is established",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "self.proxy._pyroBind()",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "self.proxy._pyroBind()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "self.proxy._pyroBind",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.proxy",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "proxy",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "_pyroBind",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "logger.debug(f\"Successfully connected to service [{service_name}]\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "logger.debug(f\"Successfully connected to service [{service_name}]\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "logger.debug",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "logger",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "debug",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(f\"Successfully connected to service [{service_name}]\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "f\"Successfully connected to service [{service_name}]\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "f\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "Successfully connected to service [",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "label": "{service_name}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "service_name",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "]",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function_definition",
                                            "label": "def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "__getattr__",
                                                    "children": []
                                                },
                                                {
                                                    "type": "parameters",
                                                    "label": "(self, name: str)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "typed_parameter",
                                                            "label": "name: str",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "name",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "label": "str",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "str",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "type",
                                                    "label": "Callable[..., Any]",
                                                    "children": [
                                                        {
                                                            "type": "generic_type",
                                                            "label": "Callable[..., Any]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "Callable",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type_parameter",
                                                                    "label": "[..., Any]",
                                                                    "children": [
                                                                        {
                                                                            "type": "type",
                                                                            "label": "...",
                                                                            "children": [
                                                                                {
                                                                                    "type": "ellipsis",
                                                                                    "label": "...",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "label": "Any",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Any",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "res = getattr(self.proxy, name)\n            return res",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "res = getattr(self.proxy, name)",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "res = getattr(self.proxy, name)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "res",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "getattr(self.proxy, name)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "getattr",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(self.proxy, name)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "label": "self.proxy",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "self",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "proxy",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "name",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return res",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "res",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return cast(AS, DynamicClient())",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "cast(AS, DynamicClient())",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "cast",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(AS, DynamicClient())",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "AS",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "DynamicClient()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "DynamicClient",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "builtin_types = [*vars(builtins).values(), NoneType, Enum]",
            "children": [
                {
                    "type": "assignment",
                    "label": "builtin_types = [*vars(builtins).values(), NoneType, Enum]",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "builtin_types",
                            "children": []
                        },
                        {
                            "type": "list",
                            "label": "[*vars(builtins).values(), NoneType, Enum]",
                            "children": [
                                {
                                    "type": "list_splat",
                                    "label": "*vars(builtins).values()",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "vars(builtins).values()",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "vars(builtins).values",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "vars(builtins)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "vars",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(builtins)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "builtins",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "values",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "()",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "identifier",
                                    "label": "NoneType",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "Enum",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n    if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
            "children": [
                {
                    "type": "identifier",
                    "label": "_pydantic_models_from_type_annotation",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(annotation)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "annotation",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "Iterator[type[BaseModel]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "Iterator[type[BaseModel]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "Iterator",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[type[BaseModel]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "type[BaseModel]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "type[BaseModel]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "type",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[BaseModel]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "BaseModel",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "BaseModel",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "comment",
                    "label": "# Peel Annotated parameters",
                    "children": []
                },
                {
                    "type": "block",
                    "label": "if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "(origin := get_origin(annotation)) and origin is Annotated",
                                    "children": [
                                        {
                                            "type": "parenthesized_expression",
                                            "label": "(origin := get_origin(annotation))",
                                            "children": [
                                                {
                                                    "type": "named_expression",
                                                    "label": "origin := get_origin(annotation)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "origin",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "get_origin(annotation)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "get_origin",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(annotation)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "annotation",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "origin is Annotated",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "origin",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "Annotated",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "annotation = get_args(annotation)[0]",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "annotation = get_args(annotation)[0]",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "annotation = get_args(annotation)[0]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "annotation",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "subscript",
                                                            "label": "get_args(annotation)[0]",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "get_args(annotation)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "get_args",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(annotation)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "annotation",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "origin = get_origin(annotation)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "origin = get_origin(annotation)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "origin",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "get_origin(annotation)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "get_origin",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(annotation)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "annotation",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "args = get_args(annotation)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "args = get_args(annotation)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "args",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "get_args(annotation)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "get_args",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(annotation)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "annotation",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    )",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "origin",
                                            "children": []
                                        },
                                        {
                                            "type": "tuple",
                                            "label": "(\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Union",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "UnionType",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "List",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "tuple",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "Tuple",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "set",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "Set",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "frozenset",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "FrozenSet",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "arg",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "args",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "yield from _pydantic_models_from_type_annotation(arg)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "yield from _pydantic_models_from_type_annotation(arg)",
                                                            "children": [
                                                                {
                                                                    "type": "yield",
                                                                    "label": "yield from _pydantic_models_from_type_annotation(arg)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "_pydantic_models_from_type_annotation(arg)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "_pydantic_models_from_type_annotation",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(arg)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "arg",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "label": "origin in (dict, Dict)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "origin",
                                                    "children": []
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(dict, Dict)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "Dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "key_type, value_type = args",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "key_type, value_type = args",
                                                            "children": [
                                                                {
                                                                    "type": "pattern_list",
                                                                    "label": "key_type, value_type",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "key_type",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "value_type",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "args",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "yield from _pydantic_models_from_type_annotation(key_type)",
                                                    "children": [
                                                        {
                                                            "type": "yield",
                                                            "label": "yield from _pydantic_models_from_type_annotation(key_type)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "_pydantic_models_from_type_annotation(key_type)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_pydantic_models_from_type_annotation",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(key_type)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "key_type",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "yield from _pydantic_models_from_type_annotation(value_type)",
                                                    "children": [
                                                        {
                                                            "type": "yield",
                                                            "label": "yield from _pydantic_models_from_type_annotation(value_type)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "_pydantic_models_from_type_annotation(value_type)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_pydantic_models_from_type_annotation",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(value_type)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value_type",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "label": "origin in (Awaitable, Coroutine)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "origin",
                                                    "children": []
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(Awaitable, Coroutine)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "Awaitable",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "Coroutine",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# For coroutines and awaitables, check the return type",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "label": "return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "return_type = args[-1]",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "return_type = args[-1]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "return_type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "args[-1]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "args",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "unary_operator",
                                                                            "label": "-1",
                                                                            "children": [
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "expression_statement",
                                                    "label": "yield from _pydantic_models_from_type_annotation(return_type)",
                                                    "children": [
                                                        {
                                                            "type": "yield",
                                                            "label": "yield from _pydantic_models_from_type_annotation(return_type)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "_pydantic_models_from_type_annotation(return_type)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_pydantic_models_from_type_annotation",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(return_type)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "return_type",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "annotype = annotation if origin is None else origin",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "annotype = annotation if origin is None else origin",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "annotype",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "conditional_expression",
                                                                    "label": "annotation if origin is None else origin",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "annotation",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "origin is None",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "origin",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "none",
                                                                                    "label": "None",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "comment",
                                                    "label": "# Exclude generic types and aliases",
                                                    "children": []
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "label": "if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                    "children": [
                                                        {
                                                            "type": "parenthesized_expression",
                                                            "label": "(\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "label": "annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)",
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "label": "annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "annotype is not None",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "annotype",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "none",
                                                                                            "label": "None",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "not_operator",
                                                                                    "label": "not hasattr(typing, getattr(annotype, \"__name__\", \"\"))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "hasattr(typing, getattr(annotype, \"__name__\", \"\"))",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "hasattr",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(typing, getattr(annotype, \"__name__\", \"\"))",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "typing",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "getattr(annotype, \"__name__\", \"\")",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "getattr",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(annotype, \"__name__\", \"\")",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "annotype",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string",
                                                                                                                            "label": "\"__name__\"",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "string_start",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_content",
                                                                                                                                    "label": "__name__",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_end",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string",
                                                                                                                            "label": "\"\"",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "string_start",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "string_end",
                                                                                                                                    "label": "\"",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "isinstance(annotype, type)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "isinstance",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(annotype, type)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "annotype",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "type",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "label": "if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "issubclass(annotype, BaseModel)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "issubclass",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(annotype, BaseModel)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "annotype",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "BaseModel",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "yield annotype",
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "label": "yield annotype",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "yield",
                                                                                            "label": "yield annotype",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "annotype",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "elif_clause",
                                                                            "label": "elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "boolean_operator",
                                                                                    "label": "annotype not in builtin_types and not issubclass(annotype, Enum)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "comparison_operator",
                                                                                            "label": "annotype not in builtin_types",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "annotype",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "builtin_types",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "not_operator",
                                                                                            "label": "not issubclass(annotype, Enum)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "issubclass(annotype, Enum)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "issubclass",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(annotype, Enum)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "annotype",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "Enum",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "label": "raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "TypeError(f\"Unsupported type encountered: {annotype}\")",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "TypeError",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(f\"Unsupported type encountered: {annotype}\")",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "label": "f\"Unsupported type encountered: {annotype}\"",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "string_start",
                                                                                                                            "label": "f\"",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_content",
                                                                                                                            "label": "Unsupported type encountered: ",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "interpolation",
                                                                                                                            "label": "{annotype}",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "annotype",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "string_end",
                                                                                                                            "label": "\"",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}