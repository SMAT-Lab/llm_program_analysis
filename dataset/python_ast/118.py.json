{
    "type": "module",
    "label": "\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"\n\n\ndef backtrack(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n) -> None:\n    \"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\n    if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return\n\n    if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)\n\n    if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)\n\n\ndef generate_parenthesis(n: int) -> list[str]:\n    \"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "start_token": 0,
    "end_token": 206,
    "children": [
        {
            "type": "expression_statement",
            "label": "\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"",
            "start_token": 0,
            "end_token": 12,
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"",
                    "start_token": 0,
                    "end_token": 12,
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "start_token": 0,
                            "end_token": 1,
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n",
                            "start_token": 1,
                            "end_token": 11,
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "start_token": 11,
                            "end_token": 12,
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def backtrack(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n) -> None:\n    \"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\n    if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return\n\n    if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)\n\n    if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)",
            "start_token": 16,
            "end_token": 147,
            "children": [
                {
                    "type": "identifier",
                    "label": "backtrack",
                    "start_token": 17,
                    "end_token": 17,
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n)",
                    "start_token": 18,
                    "end_token": 43,
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "partial: str",
                            "start_token": 20,
                            "end_token": 22,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "partial",
                                    "start_token": 20,
                                    "end_token": 20,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "str",
                                    "start_token": 22,
                                    "end_token": 22,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "str",
                                            "start_token": 22,
                                            "end_token": 22,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "open_count: int",
                            "start_token": 24,
                            "end_token": 26,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "open_count",
                                    "start_token": 24,
                                    "end_token": 24,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 26,
                                    "end_token": 26,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 26,
                                            "end_token": 26,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "close_count: int",
                            "start_token": 28,
                            "end_token": 30,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "close_count",
                                    "start_token": 28,
                                    "end_token": 28,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 30,
                                    "end_token": 30,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 30,
                                            "end_token": 30,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "start_token": 32,
                            "end_token": 34,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "start_token": 32,
                                    "end_token": 32,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 34,
                                    "end_token": 34,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 34,
                                            "end_token": 34,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "result: list[str]",
                            "start_token": 36,
                            "end_token": 41,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "result",
                                    "start_token": 36,
                                    "end_token": 36,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[str]",
                                    "start_token": 38,
                                    "end_token": 41,
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[str]",
                                            "start_token": 38,
                                            "end_token": 41,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "start_token": 38,
                                                    "end_token": 38,
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[str]",
                                                    "start_token": 39,
                                                    "end_token": 41,
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "str",
                                                            "start_token": 40,
                                                            "end_token": 40,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "str",
                                                                    "start_token": 40,
                                                                    "end_token": 40,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "start_token": 46,
                    "end_token": 46,
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "start_token": 46,
                            "end_token": 46,
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\n    if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return\n\n    if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)\n\n    if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)",
                    "start_token": 49,
                    "end_token": 147,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"",
                            "start_token": 49,
                            "end_token": 52,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"",
                                    "start_token": 49,
                                    "end_token": 52,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 49,
                                            "end_token": 50,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    ",
                                            "start_token": 50,
                                            "end_token": 51,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 51,
                                            "end_token": 52,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return",
                            "start_token": 54,
                            "end_token": 87,
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "len(partial) == 2 * n",
                                    "start_token": 55,
                                    "end_token": 63,
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "len(partial)",
                                            "start_token": 55,
                                            "end_token": 58,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "len",
                                                    "start_token": 55,
                                                    "end_token": 55,
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(partial)",
                                                    "start_token": 56,
                                                    "end_token": 58,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "partial",
                                                            "start_token": 57,
                                                            "end_token": 57,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "2 * n",
                                            "start_token": 61,
                                            "end_token": 63,
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "label": "2",
                                                    "start_token": 61,
                                                    "end_token": 61,
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "n",
                                                    "start_token": 63,
                                                    "end_token": 63,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# When the combination is complete, add it to the result.",
                                    "start_token": 66,
                                    "end_token": 78,
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "result.append(partial)\n        return",
                                    "start_token": 80,
                                    "end_token": 87,
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "result.append(partial)",
                                            "start_token": 80,
                                            "end_token": 85,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "result.append(partial)",
                                                    "start_token": 80,
                                                    "end_token": 85,
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "result.append",
                                                            "start_token": 80,
                                                            "end_token": 82,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "result",
                                                                    "start_token": 80,
                                                                    "end_token": 80,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "start_token": 82,
                                                                    "end_token": 82,
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(partial)",
                                                            "start_token": 83,
                                                            "end_token": 85,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "partial",
                                                                    "start_token": 84,
                                                                    "end_token": 84,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "start_token": 87,
                                            "end_token": 87,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)",
                            "start_token": 90,
                            "end_token": 127,
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "open_count < n",
                                    "start_token": 91,
                                    "end_token": 93,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "open_count",
                                            "start_token": 91,
                                            "end_token": 91,
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "n",
                                            "start_token": 93,
                                            "end_token": 93,
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# If we can add an open parenthesis, do so, and recurse.",
                                    "start_token": 96,
                                    "end_token": 110,
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "backtrack(partial + \"(\", open_count + 1, close_count, n, result)",
                                    "start_token": 112,
                                    "end_token": 127,
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "backtrack(partial + \"(\", open_count + 1, close_count, n, result)",
                                            "start_token": 112,
                                            "end_token": 127,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "backtrack(partial + \"(\", open_count + 1, close_count, n, result)",
                                                    "start_token": 112,
                                                    "end_token": 127,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "backtrack",
                                                            "start_token": 112,
                                                            "end_token": 112,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(partial + \"(\", open_count + 1, close_count, n, result)",
                                                            "start_token": 113,
                                                            "end_token": 127,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "partial + \"(\"",
                                                                    "start_token": 114,
                                                                    "end_token": 116,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "partial",
                                                                            "start_token": 114,
                                                                            "end_token": 114,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"(\"",
                                                                            "start_token": 116,
                                                                            "end_token": 116,
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "start_token": 116,
                                                                                    "end_token": 116,
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "(",
                                                                                    "start_token": 116,
                                                                                    "end_token": 116,
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "start_token": 116,
                                                                                    "end_token": 116,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "open_count + 1",
                                                                    "start_token": 118,
                                                                    "end_token": 120,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "open_count",
                                                                            "start_token": 118,
                                                                            "end_token": 118,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "start_token": 120,
                                                                            "end_token": 120,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "close_count",
                                                                    "start_token": 122,
                                                                    "end_token": 122,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "start_token": 124,
                                                                    "end_token": 124,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "result",
                                                                    "start_token": 126,
                                                                    "end_token": 126,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)",
                            "start_token": 130,
                            "end_token": 147,
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "close_count < open_count",
                                    "start_token": 131,
                                    "end_token": 133,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "close_count",
                                            "start_token": 131,
                                            "end_token": 131,
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "open_count",
                                            "start_token": 133,
                                            "end_token": 133,
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "comment",
                                    "label": "# If we can add a close parenthesis (it won't make the combination invalid),",
                                    "start_token": 136,
                                    "end_token": 147,
                                    "children": []
                                },
                                {
                                    "type": "comment",
                                    "label": "# do so, and recurse.",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "backtrack(partial + \")\", open_count, close_count + 1, n, result)",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "backtrack(partial + \")\", open_count, close_count + 1, n, result)",
                                            "start_token": 147,
                                            "end_token": 147,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "backtrack(partial + \")\", open_count, close_count + 1, n, result)",
                                                    "start_token": 147,
                                                    "end_token": 147,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "backtrack",
                                                            "start_token": 147,
                                                            "end_token": 147,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(partial + \")\", open_count, close_count + 1, n, result)",
                                                            "start_token": 147,
                                                            "end_token": 147,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "partial + \")\"",
                                                                    "start_token": 147,
                                                                    "end_token": 147,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "partial",
                                                                            "start_token": 147,
                                                                            "end_token": 147,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\")\"",
                                                                            "start_token": 147,
                                                                            "end_token": 147,
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "start_token": 147,
                                                                                    "end_token": 147,
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": ")",
                                                                                    "start_token": 147,
                                                                                    "end_token": 147,
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "start_token": 147,
                                                                                    "end_token": 147,
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "open_count",
                                                                    "start_token": 147,
                                                                    "end_token": 147,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "close_count + 1",
                                                                    "start_token": 147,
                                                                    "end_token": 147,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "close_count",
                                                                            "start_token": 147,
                                                                            "end_token": 147,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "start_token": 147,
                                                                            "end_token": 147,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "start_token": 147,
                                                                    "end_token": 147,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "result",
                                                                    "start_token": 147,
                                                                    "end_token": 147,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def generate_parenthesis(n: int) -> list[str]:\n    \"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\n    return result",
            "start_token": 147,
            "end_token": 192,
            "children": [
                {
                    "type": "identifier",
                    "label": "generate_parenthesis",
                    "start_token": 147,
                    "end_token": 147,
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(n: int)",
                    "start_token": 147,
                    "end_token": 147,
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "start_token": 147,
                            "end_token": 147,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 147,
                                            "end_token": 147,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list[str]",
                    "start_token": 147,
                    "end_token": 147,
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "list[str]",
                            "start_token": 147,
                            "end_token": 147,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "list",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[str]",
                                    "start_token": 147,
                                    "end_token": 147,
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "str",
                                            "start_token": 147,
                                            "end_token": 147,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "start_token": 147,
                                                    "end_token": 147,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\n    return result",
                    "start_token": 147,
                    "end_token": 192,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"",
                            "start_token": 147,
                            "end_token": 191,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"",
                                    "start_token": 147,
                                    "end_token": 191,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 147,
                                            "end_token": 147,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    ",
                                            "start_token": 147,
                                            "end_token": -1,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 190,
                                            "end_token": 191,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "result: list[str] = []",
                            "start_token": 191,
                            "end_token": 191,
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "result: list[str] = []",
                                    "start_token": 191,
                                    "end_token": 191,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "result",
                                            "start_token": 191,
                                            "end_token": 191,
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "list[str]",
                                            "start_token": 191,
                                            "end_token": 191,
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[str]",
                                                    "start_token": 191,
                                                    "end_token": 191,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "start_token": 191,
                                                            "end_token": 191,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[str]",
                                                            "start_token": 191,
                                                            "end_token": 191,
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "str",
                                                                    "start_token": 191,
                                                                    "end_token": 191,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "str",
                                                                            "start_token": 191,
                                                                            "end_token": 191,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "list",
                                            "label": "[]",
                                            "start_token": 191,
                                            "end_token": 191,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "backtrack(\"\", 0, 0, n, result)",
                            "start_token": 191,
                            "end_token": 192,
                            "children": [
                                {
                                    "type": "call",
                                    "label": "backtrack(\"\", 0, 0, n, result)",
                                    "start_token": 191,
                                    "end_token": 192,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "backtrack",
                                            "start_token": 191,
                                            "end_token": 191,
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(\"\", 0, 0, n, result)",
                                            "start_token": 191,
                                            "end_token": 192,
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"",
                                                    "start_token": 191,
                                                    "end_token": 192,
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"",
                                                            "start_token": 191,
                                                            "end_token": 191,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"",
                                                            "start_token": 192,
                                                            "end_token": 192,
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 192,
                                                    "end_token": 192,
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 192,
                                                    "end_token": 192,
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "n",
                                                    "start_token": 192,
                                                    "end_token": 192,
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "result",
                                                    "start_token": 192,
                                                    "end_token": 192,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return result",
                            "start_token": 192,
                            "end_token": 192,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "result",
                                    "start_token": 192,
                                    "end_token": 192,
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "start_token": 192,
            "end_token": 205,
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "start_token": 192,
                    "end_token": 194,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "start_token": 192,
                            "end_token": 192,
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "start_token": 192,
                            "end_token": 194,
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "start_token": 192,
                                    "end_token": 192,
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "start_token": 193,
                                    "end_token": 193,
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "start_token": 194,
                                    "end_token": 194,
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "import doctest\n\n    doctest.testmod()",
                    "start_token": 197,
                    "end_token": 205,
                    "children": [
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "start_token": 197,
                            "end_token": 198,
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "start_token": 198,
                                    "end_token": 198,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "start_token": 198,
                                            "end_token": 198,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod()",
                            "start_token": 201,
                            "end_token": 205,
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod()",
                                    "start_token": 201,
                                    "end_token": 205,
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "start_token": 201,
                                            "end_token": 203,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "start_token": 201,
                                                    "end_token": 201,
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "start_token": 203,
                                                    "end_token": 203,
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "start_token": 204,
                                            "end_token": 205,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}