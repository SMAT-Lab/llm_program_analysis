{
    "type": "module",
    "label": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM\n\nfrom __future__ import annotations\n\n\ndef get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions\n\n\ndef is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)\n\n\ndef open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False\n\n\ndef open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "children": [
        {
            "type": "comment",
            "label": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM",
            "children": []
        },
        {
            "type": "future_import_statement",
            "label": "from __future__ import annotations",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "annotations",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "annotations",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions",
            "children": [
                {
                    "type": "identifier",
                    "label": "get_valid_pos",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(position: tuple[int, int], n: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "position: tuple[int, int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "position",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "tuple[int, int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "tuple[int, int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "tuple",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int, int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list[tuple[int, int]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "list[tuple[int, int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "list",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[tuple[int, int]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "tuple[int, int]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "tuple[int, int]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[int, int]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "y, x = position",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "y, x = position",
                                    "children": [
                                        {
                                            "type": "pattern_list",
                                            "label": "y, x",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "y",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "x",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "position",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "positions",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "label": "[\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]",
                                            "children": [
                                                {
                                                    "type": "tuple",
                                                    "label": "(y + 1, x + 2)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y + 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x + 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y - 1, x + 2)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y - 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x + 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y + 1, x - 2)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y + 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x - 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y - 1, x - 2)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y - 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x - 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y + 2, x + 1)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y + 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x + 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y + 2, x - 1)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y + 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x - 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y - 2, x + 1)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y - 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x + 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(y - 2, x - 1)",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "y - 2",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "2",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "x - 1",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "permissible_positions = []",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "permissible_positions = []",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "permissible_positions",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "label": "[]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "inner_position",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "positions",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "y_test, x_test = inner_position",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "y_test, x_test = inner_position",
                                                    "children": [
                                                        {
                                                            "type": "pattern_list",
                                                            "label": "y_test, x_test",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y_test",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x_test",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "inner_position",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "label": "0 <= y_test < n and 0 <= x_test < n",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "0 <= y_test < n",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y_test",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "0 <= x_test < n",
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x_test",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "permissible_positions.append(inner_position)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "permissible_positions.append(inner_position)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "permissible_positions.append(inner_position)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "permissible_positions.append",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "permissible_positions",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "append",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(inner_position)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "inner_position",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return permissible_positions",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "permissible_positions",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)",
            "children": [
                {
                    "type": "identifier",
                    "label": "is_complete",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(board: list[list[int]])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "board: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "board",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[int]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[int]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[int]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[int]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[int]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "int",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "int",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "bool",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return not any(elem == 0 for row in board for elem in row)",
                            "children": [
                                {
                                    "type": "not_operator",
                                    "label": "not any(elem == 0 for row in board for elem in row)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "any(elem == 0 for row in board for elem in row)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "any",
                                                    "children": []
                                                },
                                                {
                                                    "type": "generator_expression",
                                                    "label": "(elem == 0 for row in board for elem in row)",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "elem == 0",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "elem",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "label": "0",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "for_in_clause",
                                                            "label": "for row in board",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "row",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "for_in_clause",
                                                            "label": "for elem in row",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "elem",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "row",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False",
            "children": [
                {
                    "type": "identifier",
                    "label": "open_knight_tour_helper",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "board: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "board",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[int]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[int]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[int]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[int]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[int]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "int",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "int",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "pos: tuple[int, int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "pos",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "tuple[int, int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "tuple[int, int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "tuple",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int, int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "curr: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "curr",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "bool",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Helper function to solve knight tour problem.\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if is_complete(board):\n        return True",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "is_complete(board)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "is_complete",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(board)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "board",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return True",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return True",
                                            "children": [
                                                {
                                                    "type": "true",
                                                    "label": "True",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "position",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "get_valid_pos(pos, len(board))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "get_valid_pos",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(pos, len(board))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "pos",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "len(board)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(board)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "board",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "y, x = position",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "y, x = position",
                                                    "children": [
                                                        {
                                                            "type": "pattern_list",
                                                            "label": "y, x",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "y",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "position",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "board[y][x] == 0",
                                                    "children": [
                                                        {
                                                            "type": "subscript",
                                                            "label": "board[y][x]",
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "label": "board[y]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "board",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "y",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "x",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "board[y][x] = curr + 1",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "board[y][x] = curr + 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "board[y][x]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "board[y]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "board",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "y",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "x",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "label": "curr + 1",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "curr",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if open_knight_tour_helper(board, position, curr + 1):\n                return True",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "open_knight_tour_helper(board, position, curr + 1)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "open_knight_tour_helper",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(board, position, curr + 1)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "board",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "position",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "label": "curr + 1",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "curr",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "integer",
                                                                                            "label": "1",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return True",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return True",
                                                                            "children": [
                                                                                {
                                                                                    "type": "true",
                                                                                    "label": "True",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "board[y][x] = 0",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "board[y][x] = 0",
                                                                    "children": [
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "board[y][x]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "board[y]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "board",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "y",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "x",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "0",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return False",
                            "children": [
                                {
                                    "type": "false",
                                    "label": "False",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
            "children": [
                {
                    "type": "identifier",
                    "label": "open_knight_tour",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(n: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "n: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "n",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list[list[int]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "list",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[list[int]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[int]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[int]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "board = [[0 for i in range(n)] for j in range(n)]",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "board = [[0 for i in range(n)] for j in range(n)]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "board",
                                            "children": []
                                        },
                                        {
                                            "type": "list_comprehension",
                                            "label": "[[0 for i in range(n)] for j in range(n)]",
                                            "children": [
                                                {
                                                    "type": "list_comprehension",
                                                    "label": "[0 for i in range(n)]",
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "for_in_clause",
                                                            "label": "for i in range(n)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "i",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "range(n)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "range",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(n)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "n",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "for_in_clause",
                                                    "label": "for j in range(n)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "j",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "range(n)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "range",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(n)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "n",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "i",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "range(n)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(n)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "n",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "j",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "range(n)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "range",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(n)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "board[i][j] = 1",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "board[i][j] = 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "board[i][j]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "board[i]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "board",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "i",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "j",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if open_knight_tour_helper(board, (i, j), 1):\n                return board",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "open_knight_tour_helper(board, (i, j), 1)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "open_knight_tour_helper",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(board, (i, j), 1)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "board",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "tuple",
                                                                                    "label": "(i, j)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "i",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "j",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return board",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return board",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "board",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "board[i][j] = 0",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "board[i][j] = 0",
                                                                    "children": [
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "board[i][j]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "subscript",
                                                                                    "label": "board[i]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "board",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "i",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "j",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "0",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "msg",
                                            "children": []
                                        },
                                        {
                                            "type": "string",
                                            "label": "f\"Open Knight Tour cannot be performed on a board of size {n}\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "f\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "Open Knight Tour cannot be performed on a board of size ",
                                                    "children": []
                                                },
                                                {
                                                    "type": "interpolation",
                                                    "label": "{n}",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "n",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "raise_statement",
                            "label": "raise ValueError(msg)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "ValueError(msg)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "ValueError",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(msg)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "msg",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "import doctest\n\n    doctest.testmod()",
                    "children": [
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}