{
    "type": "module",
    "label": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result\n\n\ndef create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )\n\n\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"\nnums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)\n",
    "children": [
        {
            "type": "expression_statement",
            "label": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "future_import_statement",
            "label": "from __future__ import annotations",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "annotations",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "annotations",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
            "children": [
                {
                    "type": "identifier",
                    "label": "generate_sum_of_subsets_soln",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(nums: list[int], max_sum: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "nums: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "nums",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "max_sum: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "max_sum",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list[list[int]]",
                    "children": [
                        {
                            "type": "generic_type",
                            "label": "list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "list",
                                    "children": []
                                },
                                {
                                    "type": "type_parameter",
                                    "label": "[list[int]]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[int]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[int]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "result: list[list[int]] = []",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "result: list[list[int]] = []",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "result",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "list[list[int]]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[list[int]]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[list[int]]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "list[int]",
                                                                    "children": [
                                                                        {
                                                                            "type": "generic_type",
                                                                            "label": "list[int]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "type_parameter",
                                                                                    "label": "[int]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "type",
                                                                                            "label": "int",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "int",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "list",
                                            "label": "[]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "path: list[int] = []",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "path: list[int] = []",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "path",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "generic_type",
                                                    "label": "list[int]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "label": "[int]",
                                                            "children": [
                                                                {
                                                                    "type": "type",
                                                                    "label": "int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "list",
                                            "label": "[]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "num_index = 0",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "num_index = 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "num_index",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "remaining_nums_sum = sum(nums)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "remaining_nums_sum = sum(nums)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "remaining_nums_sum",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "sum(nums)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "sum",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(nums)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "nums",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "create_state_space_tree",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(nums, max_sum, num_index, path, result, remaining_nums_sum)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "nums",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "max_sum",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "num_index",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "path",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "result",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "remaining_nums_sum",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return result",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "result",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
            "children": [
                {
                    "type": "identifier",
                    "label": "create_state_space_tree",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "nums: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "nums",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "max_sum: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "max_sum",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "num_index: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "num_index",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "path: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "path",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[int]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "result: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "result",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "list[list[int]]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[list[int]]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "list[int]",
                                                            "children": [
                                                                {
                                                                    "type": "generic_type",
                                                                    "label": "list[int]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "list",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "type_parameter",
                                                                            "label": "[int]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "type",
                                                                                    "label": "int",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "int",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "remaining_nums_sum: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "remaining_nums_sum",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "None",
                    "children": [
                        {
                            "type": "none",
                            "label": "None",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"",
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    ",
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "label": "sum(path) > max_sum",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "sum(path)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "sum",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(path)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "path",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "max_sum",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "(remaining_nums_sum + sum(path)) < max_sum",
                                            "children": [
                                                {
                                                    "type": "parenthesized_expression",
                                                    "label": "(remaining_nums_sum + sum(path))",
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "label": "remaining_nums_sum + sum(path)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "remaining_nums_sum",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "sum(path)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "sum",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(path)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "path",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "max_sum",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if sum(path) == max_sum:\n        result.append(path)\n        return",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "sum(path) == max_sum",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "sum(path)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "sum",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(path)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "path",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "max_sum",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "result.append(path)\n        return",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "result.append(path)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "result.append(path)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "result.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "result",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(path)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "path",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "label": "for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "index",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "label": "range(num_index, len(nums))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(num_index, len(nums))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "num_index",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "len(nums)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "len",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(nums)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "nums",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "create_state_space_tree",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "nums",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "max_sum",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "index + 1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "index",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "list",
                                                                    "label": "[*path, nums[index]]",
                                                                    "children": [
                                                                        {
                                                                            "type": "list_splat",
                                                                            "label": "*path",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "path",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "nums[index]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "nums",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "index",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "result",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "remaining_nums_sum - nums[index]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "remaining_nums_sum",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "nums[index]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "nums",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "index",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"",
            "children": [
                {
                    "type": "string",
                    "label": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"",
                    "children": [
                        {
                            "type": "string_start",
                            "label": "\"\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "label": "\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "label": "\"\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "nums = [3, 34, 4, 12, 5, 2]",
            "children": [
                {
                    "type": "assignment",
                    "label": "nums = [3, 34, 4, 12, 5, 2]",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "nums",
                            "children": []
                        },
                        {
                            "type": "list",
                            "label": "[3, 34, 4, 12, 5, 2]",
                            "children": [
                                {
                                    "type": "integer",
                                    "label": "3",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "label": "34",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "label": "4",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "label": "12",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "label": "5",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "label": "2",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "max_sum = 9",
            "children": [
                {
                    "type": "assignment",
                    "label": "max_sum = 9",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "max_sum",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "label": "9",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "result = generate_sum_of_subsets_soln(nums, max_sum)",
            "children": [
                {
                    "type": "assignment",
                    "label": "result = generate_sum_of_subsets_soln(nums, max_sum)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "result",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "generate_sum_of_subsets_soln(nums, max_sum)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "generate_sum_of_subsets_soln",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(nums, max_sum)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "nums",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "max_sum",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "print(*result)",
            "children": [
                {
                    "type": "call",
                    "label": "print(*result)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "print",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "label": "(*result)",
                            "children": [
                                {
                                    "type": "list_splat",
                                    "label": "*result",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "result",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}