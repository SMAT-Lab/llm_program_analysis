{
    "type": "module",
    "label": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/\n\n\ndef get_index_of_rightmost_set_bit(number: int) -> int:\n    \"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    intermediate = number & ~(number - 1)\n    index = 0\n    while intermediate:\n        intermediate >>= 1\n        index += 1\n    return index - 1\n\n\nif __name__ == \"__main__\":\n    \"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"\n    import doctest\n\n    doctest.testmod(verbose=True)\n",
    "start_token": 0,
    "end_token": 5,
    "children": [
        {
            "type": "comment",
            "label": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/",
            "start_token": 0,
            "end_token": 5,
            "children": []
        },
        {
            "type": "function_definition",
            "label": "def get_index_of_rightmost_set_bit(number: int) -> int:\n    \"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    intermediate = number & ~(number - 1)\n    index = 0\n    while intermediate:\n        intermediate >>= 1\n        index += 1\n    return index - 1",
            "start_token": 5,
            "end_token": 5,
            "children": [
                {
                    "type": "identifier",
                    "label": "get_index_of_rightmost_set_bit",
                    "start_token": 5,
                    "end_token": 5,
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(number: int)",
                    "start_token": 5,
                    "end_token": 5,
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "number: int",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "number",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "int",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "int",
                    "start_token": 5,
                    "end_token": 5,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "int",
                            "start_token": 5,
                            "end_token": 5,
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    intermediate = number & ~(number - 1)\n    index = 0\n    while intermediate:\n        intermediate >>= 1\n        index += 1\n    return index - 1",
                    "start_token": 5,
                    "end_token": 5,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    ",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "label": "not isinstance(number, int) or number < 0",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "label": "not isinstance(number, int)",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "isinstance(number, int)",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "isinstance",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(number, int)",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "number",
                                                                    "start_token": 5,
                                                                    "end_token": 5,
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "start_token": 5,
                                                                    "end_token": 5,
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "label": "number < 0",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "label": "0",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "raise ValueError(\"Input must be a non-negative integer\")",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "label": "raise ValueError(\"Input must be a non-negative integer\")",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "ValueError(\"Input must be a non-negative integer\")",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "ValueError",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(\"Input must be a non-negative integer\")",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "label": "\"Input must be a non-negative integer\"",
                                                                    "start_token": 5,
                                                                    "end_token": 5,
                                                                    "children": [
                                                                        {
                                                                            "type": "string_start",
                                                                            "label": "\"",
                                                                            "start_token": 5,
                                                                            "end_token": 5,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "label": "Input must be a non-negative integer",
                                                                            "start_token": 5,
                                                                            "end_token": 5,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_end",
                                                                            "label": "\"",
                                                                            "start_token": 5,
                                                                            "end_token": 5,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "intermediate = number & ~(number - 1)",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "intermediate = number & ~(number - 1)",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "intermediate",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "binary_operator",
                                            "label": "number & ~(number - 1)",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "number",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": []
                                                },
                                                {
                                                    "type": "unary_operator",
                                                    "label": "~(number - 1)",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [
                                                        {
                                                            "type": "parenthesized_expression",
                                                            "label": "(number - 1)",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "label": "number - 1",
                                                                    "start_token": 5,
                                                                    "end_token": 5,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "number",
                                                                            "start_token": 5,
                                                                            "end_token": 5,
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "start_token": 5,
                                                                            "end_token": 5,
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "index = 0",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "index = 0",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "index",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "while_statement",
                            "label": "while intermediate:\n        intermediate >>= 1\n        index += 1",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "intermediate",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "label": "intermediate >>= 1\n        index += 1",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "intermediate >>= 1",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "augmented_assignment",
                                                    "label": "intermediate >>= 1",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "intermediate",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "index += 1",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "augmented_assignment",
                                                    "label": "index += 1",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "index",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "label": "return index - 1",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "binary_operator",
                                    "label": "index - 1",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "index",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "1",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "if_statement",
            "label": "if __name__ == \"__main__\":\n    \"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"\n    import doctest\n\n    doctest.testmod(verbose=True)",
            "start_token": 5,
            "end_token": 5,
            "children": [
                {
                    "type": "comparison_operator",
                    "label": "__name__ == \"__main__\"",
                    "start_token": 5,
                    "end_token": 5,
                    "children": [
                        {
                            "type": "identifier",
                            "label": "__name__",
                            "start_token": 5,
                            "end_token": 5,
                            "children": []
                        },
                        {
                            "type": "string",
                            "label": "\"__main__\"",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "string_start",
                                    "label": "\"",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "label": "__main__",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "label": "\"",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "\"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"\n    import doctest\n\n    doctest.testmod(verbose=True)",
                    "start_token": 5,
                    "end_token": 5,
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "\"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "string",
                                    "label": "\"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "label": "\"\"\"",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "string_content",
                                            "label": "\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    ",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        },
                                        {
                                            "type": "string_end",
                                            "label": "\"\"\"",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "import_statement",
                            "label": "import doctest",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "label": "doctest",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "doctest",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "doctest.testmod(verbose=True)",
                            "start_token": 5,
                            "end_token": 5,
                            "children": [
                                {
                                    "type": "call",
                                    "label": "doctest.testmod(verbose=True)",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "label": "doctest.testmod",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "doctest",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "testmod",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(verbose=True)",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "keyword_argument",
                                                    "label": "verbose=True",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "verbose",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "start_token": 5,
                                                            "end_token": 5,
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}