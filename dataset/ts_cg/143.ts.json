{
  "@test/143.ts: Region.getCenter()": [
    "@test/143.ts: GeoJSONRegion.calcCenter()"
  ],
  "@test/143.ts: GeoJSONRegion.calcCenter()": [
    "@test/143.ts: %dflt.centroid(number[][])",
    "@test/143.ts: GeoJSONRegion.getBoundingRect(GeoProjection)"
  ],
  "@test/143.ts: GeoJSONRegion.getBoundingRect(GeoProjection)": [
    "@test/143.ts: GeoJSONRegion.%AM0$getBoundingRect([min, max, projection], unknown)"
  ],
  "@test/143.ts: GeoJSONRegion.contain(number[])": [
    "@test/143.ts: GeoJSONRegion.getBoundingRect(GeoProjection)"
  ],
  "@test/143.ts: GeoJSONRegion.transformTo(number, number, number, number)": [
    "@test/143.ts: GeoJSONRegion.getBoundingRect(GeoProjection)",
    "@test/143.ts: %dflt.transformPoints(number[][], matrix.MatrixArray)",
    "@test/143.ts: GeoJSONRegion.%AM2$transformTo([transform], unknown)",
    "@test/143.ts: GeoJSONRegion.%AM3$transformTo([transform], unknown)"
  ],
  "@test/143.ts: GeoJSONRegion.cloneShallow(string)": [
    "@test/143.ts: GeoJSONRegion.constructor(string, IndexedAccessType, IndexedAccessType)"
  ],
  "@test/143.ts: GeoJSONRegion.%AM1$%AM0$getBoundingRect(unknown)": [
    "@test/143.ts: %dflt.updateBBoxFromPoints(ArrayLike<number>[], vec2.VectorArray, vec2.VectorArray, GeoProjection)"
  ],
  "@test/143.ts: GeoJSONRegion.%AM0$getBoundingRect([min, max, projection], unknown)": [
    "@test/143.ts: %dflt.updateBBoxFromPoints(ArrayLike<number>[], vec2.VectorArray, vec2.VectorArray, GeoProjection)",
    "@test/143.ts: GeoJSONRegion.%AM1$%AM0$getBoundingRect(unknown)"
  ],
  "@test/143.ts: GeoJSONRegion.%AM2$transformTo([transform], unknown)": [
    "@test/143.ts: %dflt.transformPoints(number[][], matrix.MatrixArray)"
  ],
  "@test/143.ts: GeoJSONRegion.%AM3$transformTo([transform], unknown)": [
    "@test/143.ts: %dflt.transformPoints(number[][], matrix.MatrixArray)"
  ]
}