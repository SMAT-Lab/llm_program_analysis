{
  "@test/12.ts: %dflt.[static]%dflt()": [
    "@test/12.ts: CameraService.constructor()"
  ],
  "@test/12.ts: CameraService.constructor()": [
    "@test/12.ts: %dflt.mockInterface()",
    "@test/12.ts: CameraService.%AM2$constructor()"
  ],
  "@test/12.ts: CameraService.switchProfiles(camera.CameraOutputCapability)": [
    "@test/12.ts: CameraService.%AM5$switchProfiles(camera.Profile)",
    "@test/12.ts: CameraService.%AM6$switchProfiles(camera.Profile)",
    "@test/12.ts: CameraService.%AM7$switchProfiles(camera.Profile)",
    "@test/12.ts: CameraService.%AM8$switchProfiles(camera.Profile)",
    "@test/12.ts: CameraService.%AM9$switchProfiles(camera.VideoProfile)",
    "@test/12.ts: CameraService.withinErrorMargin(number, number)",
    "@test/12.ts: CameraService.%AM10$switchProfiles(camera.Profile)",
    "@test/12.ts: CameraService.%AM11$switchProfiles(camera.Profile)"
  ],
  "@test/12.ts: CameraService.initProfile(number)": [
    "@test/12.ts: CameraService.switchProfiles(camera.CameraOutputCapability)"
  ],
  "@test/12.ts: CameraService.initCamera(string, number)": [
    "@test/12.ts: CameraService.releaseCamera()",
    "@test/12.ts: CameraService.getCameraManagerFn()",
    "@test/12.ts: CameraService.getModeManagerFn()",
    "@test/12.ts: CameraService.getSupportedCamerasFn()",
    "@test/12.ts: CameraService.getSupportedModeFn(number)",
    "@test/12.ts: CameraService.initProfile(number)",
    "@test/12.ts: CameraService.createPreviewOutputFn(camera.Profile, string)",
    "@test/12.ts: CameraService.previewOutputCallBack()",
    "@test/12.ts: CameraService.createAVRecorder()",
    "@test/12.ts: CameraService.createVideoOutput()",
    "@test/12.ts: CameraService.onVideoOutputChange()",
    "@test/12.ts: CameraService.createPhotoOutputFn(camera.Profile, string)",
    "@test/12.ts: CameraService.photoOutPutCallBack()",
    "@test/12.ts: CameraService.createCameraInputFn(camera.CameraDevice)",
    "@test/12.ts: CameraService.cameraInputOpenFn()",
    "@test/12.ts: CameraService.onCameraStatusChange()",
    "@test/12.ts: CameraService.onCameraInputChange()",
    "@test/12.ts: CameraService.portraitSessionFlowFn(number)",
    "@test/12.ts: CameraService.nightSessionFlowFn(number)",
    "@test/12.ts: CameraService.macroPhotoSessionFlowFn(number)",
    "@test/12.ts: CameraService.videoSessionFlowFn()",
    "@test/12.ts: CameraService.photoSessionFlowFn()",
    "@test/12.ts: CameraService.testAbilityFunction()"
  ],
  "@test/12.ts: CameraService.isVideoFrameSupportedFn(number)": [
    "@test/12.ts: CameraService.%AM12$isVideoFrameSupportedFn([videoFrame], camera.VideoProfile)"
  ],
  "@test/12.ts: CameraService.isExposureModeSupportedFn(camera.ExposureMode)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.setExposureMode(camera.ExposureMode)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.isMeteringPoint(camera.Point)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.isExposureBiasRange(number)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.isFocusModeSupported(camera.FocusMode)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.isFocusMode(camera.FocusMode)": [
    "@test/12.ts: CameraService.isFocusModeSupported(camera.FocusMode)",
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.isFocusPoint(camera.Point)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.hasFlashFn(camera.FlashMode)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.setZoomRatioFn(number)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.setVideoStabilizationMode(camera.VideoStabilizationMode)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.takePicture(boolean)": [
    "@test/12.ts: CameraService.isMirrorSupportedFn()"
  ],
  "@test/12.ts: CameraService.prepareAVRecorder()": [
    "@test/12.ts: CameraService.initUrl()",
    "@test/12.ts: CameraService.%AM13$prepareAVRecorder(@test/12.ts: %AC$29)"
  ],
  "@test/12.ts: CameraService.createVideoOutput()": [
    "@test/12.ts: CameraService.prepareAVRecorder()",
    "@test/12.ts: CameraService.getAVRecorderSurfaceId()"
  ],
  "@test/12.ts: CameraService.pauseVideo()": [
    "@test/12.ts: CameraService.%AM15$pauseVideo()",
    "@test/12.ts: CameraService.%AM14$pauseVideo(BusinessError)"
  ],
  "@test/12.ts: CameraService.resumeVideo()": [
    "@test/12.ts: CameraService.%AM16$resumeVideo()"
  ],
  "@test/12.ts: CameraService.startVideo()": [
    "@test/12.ts: CameraService.prepareAVRecorder()",
    "@test/12.ts: CameraService.getAVRecorderSurfaceId()"
  ],
  "@test/12.ts: CameraService.releaseCamera()": [
    "@test/12.ts: CameraService.stopVideo()",
    "@test/12.ts: CameraService.releaseVideoRecorder()"
  ],
  "@test/12.ts: CameraService.configMoonCaptureBoost()": [
    "@test/12.ts: CameraService.%AM19$configMoonCaptureBoost(unknown, unknown)"
  ],
  "@test/12.ts: CameraService.photoSessionFlowFn()": [
    "@test/12.ts: CameraService.onFocusStateChange()",
    "@test/12.ts: CameraService.onCaptureSessionErrorChange()",
    "@test/12.ts: CameraService.setColorSpace(camera.PhotoSession|camera.VideoSession, colorSpaceManager.ColorSpace)",
    "@test/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.setColorEffect(camera.ColorEffectType)",
    "@test/12.ts: CameraService.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode)",
    "@test/12.ts: CameraService.setVideoStabilizationMode(camera.VideoStabilizationMode)",
    "@test/12.ts: CameraService.isFocusMode(camera.FocusMode)",
    "@test/12.ts: CameraService.configMoonCaptureBoost()",
    "@test/12.ts: CameraService.getSupportedColorEffects()"
  ],
  "@test/12.ts: CameraService.videoSessionFlowFn()": [
    "@test/12.ts: CameraService.onFocusStateChange()",
    "@test/12.ts: CameraService.onCaptureSessionErrorChange()",
    "@test/12.ts: CameraService.isVideoStabilizationModeSupportedFn(camera.VideoStabilizationMode)",
    "@test/12.ts: CameraService.setVideoStabilizationMode(camera.VideoStabilizationMode)",
    "@test/12.ts: CameraService.setColorSpace(camera.PhotoSession|camera.VideoSession, colorSpaceManager.ColorSpace)",
    "@test/12.ts: CameraService.setColorEffect(camera.ColorEffectType)",
    "@test/12.ts: CameraService.isFocusMode(camera.FocusMode)",
    "@test/12.ts: CameraService.getSupportedColorEffects()"
  ],
  "@test/12.ts: CameraService.portraitSessionFlowFn(number)": [
    "@test/12.ts: CameraService.onFocusStateChange()",
    "@test/12.ts: CameraService.onAbilityChange()",
    "@test/12.ts: CameraService.onCaptureSessionErrorChange()",
    "@test/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.setPortraitEffect()",
    "@test/12.ts: CameraService.setColorEffect(camera.ColorEffectType)",
    "@test/12.ts: CameraService.isFocusMode(camera.FocusMode)",
    "@test/12.ts: CameraService.getSupportedColorEffects()"
  ],
  "@test/12.ts: CameraService.nightSessionFlowFn(number)": [
    "@test/12.ts: CameraService.onFocusStateChange()",
    "@test/12.ts: CameraService.onCaptureSessionErrorChange()",
    "@test/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.setColorEffect(camera.ColorEffectType)",
    "@test/12.ts: CameraService.isFocusMode(camera.FocusMode)",
    "@test/12.ts: CameraService.getSupportedColorEffects()"
  ],
  "@test/12.ts: CameraService.macroPhotoSessionFlowFn(number)": [
    "@test/12.ts: CameraService.onFocusStateChange()",
    "@test/12.ts: CameraService.onCaptureSessionErrorChange()",
    "@test/12.ts: CameraService.isDeferredImageDeliverySupported(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.deferImageDeliveryFor(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.isDeferredImageDeliveryEnabled(camera.DeferredDeliveryImageType)",
    "@test/12.ts: CameraService.setColorEffect(camera.ColorEffectType)",
    "@test/12.ts: CameraService.isFocusMode(camera.FocusMode)",
    "@test/12.ts: CameraService.getSupportedColorEffects()"
  ],
  "@test/12.ts: CameraService.setPortraitEffect()": [
    "@test/12.ts: CameraService.getPortraitEffect()"
  ],
  "@test/12.ts: CameraService.setMoonCaptureBoostEnable(Boolean)": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.setColorEffect(camera.ColorEffectType)": [
    "@test/12.ts: CameraService.getSupportedColorEffects()",
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.getColorEffect()": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.getSupportedColorEffects()": [
    "@test/12.ts: CameraService.getSession()"
  ],
  "@test/12.ts: CameraService.photoOutPutCallBack()": [
    "@test/12.ts: CameraService.%AM20$photoOutPutCallBack(BusinessError, number)",
    "@test/12.ts: CameraService.%AM21$photoOutPutCallBack(BusinessError, camera.FrameShutterInfo)",
    "@test/12.ts: CameraService.%AM22$photoOutPutCallBack(BusinessError, camera.CaptureEndInfo)",
    "@test/12.ts: CameraService.%AM23$photoOutPutCallBack(BusinessError)",
    "@test/12.ts: CameraService.%AM24$photoOutPutCallBack(BusinessError, camera.Photo)",
    "@test/12.ts: CameraService.%AM26$photoOutPutCallBack(BusinessError, camera.DeferredPhotoProxy)"
  ],
  "@test/12.ts: CameraService.previewOutputCallBack()": [
    "@test/12.ts: CameraService.%AM28$previewOutputCallBack()",
    "@test/12.ts: CameraService.%AM29$previewOutputCallBack()",
    "@test/12.ts: CameraService.%AM30$previewOutputCallBack(BusinessError)"
  ],
  "@test/12.ts: CameraService.onVideoOutputChange()": [
    "@test/12.ts: CameraService.%AM31$onVideoOutputChange()",
    "@test/12.ts: CameraService.%AM32$onVideoOutputChange()",
    "@test/12.ts: CameraService.%AM33$onVideoOutputChange(BusinessError)"
  ],
  "@test/12.ts: CameraService.onCameraStatusChange()": [
    "@test/12.ts: CameraService.%AM34$onCameraStatusChange(BusinessError, camera.CameraStatusInfo)"
  ],
  "@test/12.ts: CameraService.onCameraInputChange()": [
    "@test/12.ts: CameraService.%AM35$onCameraInputChange(BusinessError)"
  ],
  "@test/12.ts: CameraService.onFocusStateChange()": [
    "@test/12.ts: CameraService.getSession()",
    "@test/12.ts: CameraService.%AM36$onFocusStateChange(BusinessError, camera.FocusState)"
  ],
  "@test/12.ts: CameraService.onAbilityChange()": [
    "@test/12.ts: CameraService.getSession()",
    "@test/12.ts: CameraService.%AM37$onAbilityChange([session], BusinessError)"
  ],
  "@test/12.ts: CameraService.onCaptureSessionErrorChange()": [
    "@test/12.ts: CameraService.getSession()",
    "@test/12.ts: CameraService.%AM38$onCaptureSessionErrorChange(BusinessError)"
  ],
  "@test/12.ts: CameraService.testAbilityFunction()": [
    "@test/12.ts: CameraService.getSession()",
    "@test/12.ts: CameraService.logPortraitSession(camera.PortraitPhotoSession)",
    "@test/12.ts: CameraService.logVideoSession(camera.VideoSession)",
    "@test/12.ts: CameraService.logPhotoSession(camera.PhotoSession)"
  ],
  "@test/12.ts: CameraService.logPortraitSession(camera.PortraitPhotoSession)": [
    "@test/12.ts: CameraService.%AM39$logPortraitSession(unknown)",
    "@test/12.ts: CameraService.logCameraOutputCapabilities(camera.CameraOutputCapability)",
    "@test/12.ts: CameraService.%AM40$logPortraitSession(unknown)"
  ],
  "@test/12.ts: CameraService.logVideoSession(camera.VideoSession)": [
    "@test/12.ts: CameraService.%AM41$logVideoSession(unknown)",
    "@test/12.ts: CameraService.logCameraOutputCapabilities(camera.CameraOutputCapability)",
    "@test/12.ts: CameraService.%AM42$logVideoSession(unknown)"
  ],
  "@test/12.ts: CameraService.logPhotoSession(camera.PhotoSession)": [
    "@test/12.ts: CameraService.%AM43$logPhotoSession(unknown)",
    "@test/12.ts: CameraService.logCameraOutputCapabilities(camera.CameraOutputCapability)",
    "@test/12.ts: CameraService.%AM44$logPhotoSession(unknown)"
  ],
  "@test/12.ts: CameraService.logPortraitPhotoFunctions(camera.PortraitPhotoFunctions)": [
    "@test/12.ts: CameraService.%AM45$logPortraitPhotoFunctions(unknown)"
  ],
  "@test/12.ts: CameraService.logPortraitPhotoConflictFunctions(camera.PortraitPhotoConflictFunctions)": [
    "@test/12.ts: CameraService.%AM47$logPortraitPhotoConflictFunctions(unknown)"
  ],
  "@test/12.ts: CameraService.%AM4$%AM3$%AM2$constructor(BusinessError, image.Component)": [
    "@test/12.ts: CameraService.savePicture(ArrayBuffer, image.Image)"
  ],
  "@test/12.ts: CameraService.%AM3$%AM2$constructor(BusinessError, image.Image)": [
    "@test/12.ts: CameraService.%AM4$%AM3$%AM2$constructor(BusinessError, image.Component)"
  ],
  "@test/12.ts: CameraService.%AM2$constructor()": [
    "@test/12.ts: CameraService.%AM3$%AM2$constructor(BusinessError, image.Image)"
  ],
  "@test/12.ts: CameraService.%AM16$resumeVideo()": [
    "@test/12.ts: CameraService.%AM18$%AM16$resumeVideo()",
    "@test/12.ts: CameraService.%AM17$%AM16$resumeVideo(@test/12.ts: %AC$30)"
  ],
  "@test/12.ts: CameraService.%AM19$configMoonCaptureBoost(unknown, unknown)": [
    "@test/12.ts: CameraService.setMoonCaptureBoostEnable(Boolean)"
  ],
  "@test/12.ts: CameraService.%AM25$%AM24$photoOutPutCallBack(BusinessError, image.Component)": [
    "@test/12.ts: CameraService.savePicture(ArrayBuffer, image.Image)"
  ],
  "@test/12.ts: CameraService.%AM24$photoOutPutCallBack(BusinessError, camera.Photo)": [
    "@test/12.ts: CameraService.%AM25$%AM24$photoOutPutCallBack(BusinessError, image.Component)"
  ],
  "@test/12.ts: CameraService.%AM26$photoOutPutCallBack(BusinessError, camera.DeferredPhotoProxy)": [
    "@test/12.ts: CameraService.%AM27$%AM26$photoOutPutCallBack(image.PixelMap)",
    "@test/12.ts: CameraService.saveDeferredPhoto(camera.DeferredPhotoProxy)"
  ],
  "@test/12.ts: CameraService.%AM39$logPortraitSession(unknown)": [
    "@test/12.ts: CameraService.logPortraitPhotoConflictFunctions(camera.PortraitPhotoConflictFunctions)"
  ],
  "@test/12.ts: CameraService.%AM40$logPortraitSession(unknown)": [
    "@test/12.ts: CameraService.logPortraitPhotoFunctions(camera.PortraitPhotoFunctions)"
  ],
  "@test/12.ts: CameraService.%AM42$logVideoSession(unknown)": [
    "@test/12.ts: CameraService.logVideoFunctions(camera.VideoFunctions)"
  ],
  "@test/12.ts: CameraService.%AM44$logPhotoSession(unknown)": [
    "@test/12.ts: CameraService.logPhotoFunctions(camera.PhotoFunctions)"
  ],
  "@test/12.ts: CameraService.%AM45$logPortraitPhotoFunctions(unknown)": [
    "@test/12.ts: CameraService.%AM46$%AM45$logPortraitPhotoFunctions(unknown)"
  ],
  "@test/12.ts: CameraService.%AM47$logPortraitPhotoConflictFunctions(unknown)": [
    "@test/12.ts: CameraService.%AM48$%AM47$logPortraitPhotoConflictFunctions(unknown)"
  ]
}