{
  "@test/32.ts: %dflt.[static]%dflt()": [
    "@test/32.ts: ScreenManager.constructor()"
  ],
  "@test/32.ts: ScreenManager.initializationSize(unknown)": [
    "@test/32.ts: ScreenManager.setMainWindow(window.Window)",
    "@test/32.ts: ScreenManager.checkWindowMode()",
    "@test/32.ts: ScreenManager.getWindowProperties(window.Window)"
  ],
  "@test/32.ts: ScreenManager.on(unknown, unknown)": [
    "@test/32.ts: ScreenManager.on(unknown, unknown)"
  ],
  "@test/32.ts: ScreenManager.off(unknown, unknown)": [
    "@test/32.ts: ScreenManager.off(unknown, unknown)"
  ],
  "@test/32.ts: ScreenManager.checkWindowMode()": [
    "@test/32.ts: GetWindowMode.getWindowMode()",
    "@test/32.ts: ScreenManager.setFullScreen()",
    "@test/32.ts: ScreenManager.setSplitScreen()"
  ],
  "@test/32.ts: ScreenManager.setMainWindow(window.Window)": [
    "@test/32.ts: ScreenManager.%AM0$setMainWindow(window.Size)"
  ],
  "@test/32.ts: ScreenManager.setFullScreen()": [
    "@test/32.ts: ScreenManager.hideStatusBar(window.Window)"
  ],
  "@test/32.ts: ScreenManager.hideStatusBar(window.Window)": [
    "@test/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)"
  ],
  "@test/32.ts: ScreenManager.setNavigationBarColor(string, string)": [
    "@test/32.ts: ScreenManager.%AM1$setNavigationBarColor()"
  ],
  "@test/32.ts: ScreenManager.setSystemUi(boolean)": [
    "@test/32.ts: ScreenManager.%AM2$setSystemUi([isShowBar, topWindow])"
  ],
  "@test/32.ts: ScreenManager.onWinSizeChanged(unknown)": [
    "@test/32.ts: ScreenManager.emit(unknown, Object[])"
  ],
  "@test/32.ts: ScreenManager.getColumnsWidth(number)": [
    "@test/32.ts: ScreenManager.getScreenColumns()"
  ],
  "@test/32.ts: ScreenManager.setKeepScreenOn()": [
    "@test/32.ts: ScreenManager.%AM3$setKeepScreenOn()"
  ],
  "@test/32.ts: ScreenManager.setKeepScreenOff()": [
    "@test/32.ts: ScreenManager.%AM4$setKeepScreenOff()"
  ],
  "@test/32.ts: ScreenManager.%AM0$setMainWindow(window.Size)": [
    "@test/32.ts: ScreenManager.checkWindowMode()",
    "@test/32.ts: ScreenManager.onWinSizeChanged(unknown)"
  ],
  "@test/32.ts: ScreenManager.%AM2$setSystemUi([isShowBar, topWindow])": [
    "@test/32.ts: ScreenManager.onLeftBlankChanged(window.AvoidArea)"
  ]
}