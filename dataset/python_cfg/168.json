{
  "name": "168.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport time\nfrom typing import Tuple\nfrom redis import Redis\nfrom .config import RATE_LIMIT_SETTINGS",
      "start_line": 1,
      "end_line": 51,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "RateLimiter",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 10,
          "end_line": 51,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.redis = Redis(host=redis_host, port=int(redis_port), password=\n    redis_password, decode_responses=True)\nself.window = 60\nself.max_requests = requests_per_minute",
              "start_line": 17,
              "end_line": 24,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "check_rate_limit",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\n\"\"\"\n        Check if request is within rate limits.\n\n        Args:\n            api_key_id: The API key identifier to check\n\n        Returns:\n            Tuple of (is_allowed, remaining_requests, reset_time)\n        \"\"\"\nnow = time.time()\nwindow_start = now - self.window\nkey = f'ratelimit:{api_key_id}:1min'\npipe = self.redis.pipeline()\npipe.zremrangebyscore(key, 0, window_start)\npipe.zadd(key, {str(now): now})\npipe.zcount(key, window_start, now)\npipe.expire(key, self.window)\n_, _, request_count, _ = pipe.execute()\nremaining = max(0, self.max_requests - request_count)\nreset_time = int(now + self.window)\nreturn request_count <= self.max_requests, remaining, reset_time",
              "start_line": 27,
              "end_line": 51,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}