{
  "name": "20.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 15,
          "label": "#15\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "bitwise_addition_recursive",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\nif not isinstance(number, int) or not isinstance(other_number, int):",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise TypeError('Both arguments MUST be integers!')",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nif number < 0 or other_number < 0:",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nraise ValueError('Both arguments MUST be non-negative!')",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "#8\nbitwise_sum = number ^ other_number\ncarry = number & other_number\nif carry == 0:",
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nreturn bitwise_sum",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "#11\nreturn bitwise_addition_recursive(bitwise_sum, carry << 1)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}