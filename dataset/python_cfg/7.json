{
  "name": "7.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\nconfig = Config()",
      "start_line": 1,
      "end_line": 234,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_user_credit_model",
      "type": "CFG",
      "blocks": [
        {
          "id": 96,
          "label": "#96\nif config.enable_credit.lower() == 'true':",
          "start_line": 227,
          "end_line": 230,
          "successors": [
            {
              "id": 97,
              "label": "#97\nreturn UserCredit(config.num_user_credits_refill)",
              "start_line": 228,
              "end_line": 228,
              "successors": []
            },
            {
              "id": 99,
              "label": "#99\nreturn DisabledUserCredit(0)",
              "start_line": 230,
              "end_line": 230,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_block_costs",
      "type": "CFG",
      "blocks": [
        {
          "id": 104,
          "label": "#104\nreturn {block().id: costs for block, costs in BLOCK_COSTS.items()}",
          "start_line": 234,
          "end_line": 234,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "UserCreditBase",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 18,
          "end_line": 66,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.num_user_credits_refill = num_user_credits_refill",
              "start_line": 19,
              "end_line": 19,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_or_refill_credit",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\n\"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\npass",
              "start_line": 23,
              "end_line": 29,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spend_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\n\"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\npass",
              "start_line": 41,
              "end_line": 55,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "top_up_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\n\"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\npass",
              "start_line": 59,
              "end_line": 66,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "UserCredit",
      "type": "CFG",
      "blocks": [
        {
          "id": 18,
          "label": "#18",
          "start_line": 70,
          "end_line": 212,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\ncur_time = self.time_now()\ncur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\nnxt_month = cur_month.replace(month=cur_month.month + 1\n    ) if cur_month.month < 12 else cur_month.replace(year=cur_month.year + \n    1, month=1)\nuser_credit = await CreditTransaction.prisma().group_by(by=['userId'], sum=\n    {'amount': True}, where={'userId': user_id, 'createdAt': {'gte':\n    cur_month, 'lt': nxt_month}, 'isActive': True})",
              "start_line": 71,
              "end_line": 87,
              "successors": [
                {
                  "id": 21,
                  "label": "#21\nif user_credit:",
                  "start_line": 89,
                  "end_line": 91,
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\ncredit_sum = user_credit[0].get('_sum') or {}\nreturn credit_sum.get('amount', 0)",
                      "start_line": 90,
                      "end_line": 91,
                      "successors": []
                    },
                    {
                      "id": 23,
                      "label": "#23\nkey = f'MONTHLY-CREDIT-TOP-UP-{cur_month}'\ntry:",
                      "start_line": 93,
                      "end_line": 106,
                      "successors": [
                        {
                          "id": 25,
                          "label": "#25\nawait CreditTransaction.prisma().create(data={'amount': self.\n    num_user_credits_refill, 'type': CreditTransactionType.TOP_UP, 'userId':\n    user_id, 'transactionKey': key, 'createdAt': self.time_now()})",
                          "start_line": 96,
                          "end_line": 104,
                          "successors": [
                            {
                              "id": 27,
                              "label": "#27\nreturn self.num_user_credits_refill",
                              "start_line": 108,
                              "end_line": 108,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 26,
                          "label": "#26\npass",
                          "start_line": 106,
                          "end_line": 106,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "time_now",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nreturn datetime.now(timezone.utc)",
              "start_line": 112,
              "end_line": 112,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_block_usage_cost",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\nblock_costs = BLOCK_COSTS.get(type(block))\nif not block_costs:",
              "start_line": 121,
              "end_line": 123,
              "successors": [
                {
                  "id": 37,
                  "label": "#37\nreturn 0, {}",
                  "start_line": 123,
                  "end_line": 123,
                  "successors": []
                },
                {
                  "id": 38,
                  "label": "#38\nfor block_cost in block_costs:",
                  "start_line": 125,
                  "end_line": 142,
                  "successors": [
                    {
                      "id": 40,
                      "label": "#40\nif not self._is_cost_filter_match(block_cost.cost_filter, input_data):",
                      "start_line": 126,
                      "end_line": 127,
                      "successors": [
                        {
                          "id": 43,
                          "label": "#43\nif block_cost.cost_type == BlockCostType.RUN:",
                          "start_line": 129,
                          "end_line": 130,
                          "successors": [
                            {
                              "id": 44,
                              "label": "#44\nreturn block_cost.cost_amount, block_cost.cost_filter",
                              "start_line": 130,
                              "end_line": 130,
                              "successors": []
                            },
                            {
                              "id": 45,
                              "label": "#45\nif block_cost.cost_type == BlockCostType.SECOND:",
                              "start_line": 132,
                              "end_line": 136,
                              "successors": [
                                {
                                  "id": 47,
                                  "label": "#47\nreturn int(run_time * block_cost.cost_amount), block_cost.cost_filter",
                                  "start_line": 133,
                                  "end_line": 136,
                                  "successors": []
                                },
                                {
                                  "id": 48,
                                  "label": "#48\nif block_cost.cost_type == BlockCostType.BYTE:",
                                  "start_line": 138,
                                  "end_line": 142,
                                  "successors": [
                                    {
                                      "id": 50,
                                      "label": "#50\nreturn int(data_size * block_cost.cost_amount), block_cost.cost_filter",
                                      "start_line": 139,
                                      "end_line": 142,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 41,
                      "label": "#41\nreturn 0, {}",
                      "start_line": 144,
                      "end_line": 144,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_is_cost_filter_match",
          "type": "CFG",
          "blocks": [
            {
              "id": 56,
              "label": "#56\n\"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\nif not isinstance(cost_filter, dict) or not isinstance(input_data, dict):",
              "start_line": 149,
              "end_line": 156,
              "successors": [
                {
                  "id": 57,
                  "label": "#57\nreturn cost_filter == input_data",
                  "start_line": 156,
                  "end_line": 156,
                  "successors": []
                },
                {
                  "id": 58,
                  "label": "#58\nreturn all(not input_data.get(k) and not v or input_data.get(k) and self.\n    _is_cost_filter_match(v, input_data[k]) for k, v in cost_filter.items())",
                  "start_line": 158,
                  "end_line": 162,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spend_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 63,
              "label": "#63\nblock = get_block(block_id)\nif not block:",
              "start_line": 174,
              "end_line": 176,
              "successors": [
                {
                  "id": 64,
                  "label": "#64\nraise ValueError(f'Block not found: {block_id}')",
                  "start_line": 176,
                  "end_line": 176,
                  "successors": []
                },
                {
                  "id": 65,
                  "label": "#65\ncost, matching_filter = self._block_usage_cost(block=block, input_data=\n    input_data, data_size=data_size, run_time=run_time)\nif cost <= 0:",
                  "start_line": 178,
                  "end_line": 182,
                  "successors": [
                    {
                      "id": 67,
                      "label": "#67\nreturn 0",
                      "start_line": 182,
                      "end_line": 182,
                      "successors": []
                    },
                    {
                      "id": 68,
                      "label": "#68\nif validate_balance and user_credit < cost:",
                      "start_line": 184,
                      "end_line": 185,
                      "successors": [
                        {
                          "id": 70,
                          "label": "#70\nraise ValueError(f'Insufficient credit: {user_credit} < {cost}')",
                          "start_line": 185,
                          "end_line": 185,
                          "successors": []
                        },
                        {
                          "id": 71,
                          "label": "#71\nawait CreditTransaction.prisma().create(data={'userId': user_id, 'amount': \n    -cost, 'type': CreditTransactionType.USAGE, 'blockId': block.id,\n    'metadata': Json({'block': block.name, 'input': matching_filter}),\n    'createdAt': self.time_now()})",
                          "start_line": 187,
                          "end_line": 201,
                          "successors": [
                            {
                              "id": 73,
                              "label": "#73\nreturn cost",
                              "start_line": 202,
                              "end_line": 202,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "top_up_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\nawait CreditTransaction.prisma().create(data={'userId': user_id, 'amount':\n    amount, 'type': CreditTransactionType.TOP_UP, 'createdAt': self.time_now()}\n    )",
              "start_line": 205,
              "end_line": 212,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "DisabledUserCredit",
      "type": "CFG",
      "blocks": [
        {
          "id": 82,
          "label": "#82",
          "start_line": 216,
          "end_line": 223,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "CFG",
          "blocks": [
            {
              "id": 84,
              "label": "#84\nreturn 0",
              "start_line": 217,
              "end_line": 217,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spend_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 88,
              "label": "#88\nreturn 0",
              "start_line": 220,
              "end_line": 220,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "top_up_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 92,
              "label": "#92\npass",
              "start_line": 223,
              "end_line": 223,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}