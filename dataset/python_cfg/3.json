{
  "name": "3.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import Type\nfrom backend.blocks.ai_music_generator import AIMusicGeneratorBlock\nfrom backend.blocks.ai_shortform_video_block import AIShortformVideoCreatorBlock\nfrom backend.blocks.ideogram import IdeogramModelBlock\nfrom backend.blocks.jina.embeddings import JinaEmbeddingBlock\nfrom backend.blocks.jina.search import ExtractWebsiteContentBlock, SearchTheWebBlock\nfrom backend.blocks.llm import MODEL_METADATA, AIConversationBlock, AIListGeneratorBlock, AIStructuredResponseGeneratorBlock, AITextGeneratorBlock, AITextSummarizerBlock, LlmModel\nfrom backend.blocks.replicate_flux_advanced import ReplicateFluxAdvancedModelBlock\nfrom backend.blocks.talking_head import CreateTalkingAvatarVideoBlock\nfrom backend.blocks.text_to_speech_block import UnrealTextToSpeechBlock\nfrom backend.data.block import Block\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.integrations.credentials_store import anthropic_credentials, did_credentials, groq_credentials, ideogram_credentials, jina_credentials, open_router_credentials, openai_credentials, replicate_credentials, revid_credentials, unreal_credentials\nMODEL_COST: dict[LlmModel, int] = {LlmModel.O1_PREVIEW: 16, LlmModel.\n    O1_MINI: 4, LlmModel.GPT4O_MINI: 1, LlmModel.GPT4O: 3, LlmModel.\n    GPT4_TURBO: 10, LlmModel.GPT3_5_TURBO: 1, LlmModel.CLAUDE_3_5_SONNET: 4,\n    LlmModel.CLAUDE_3_HAIKU: 1, LlmModel.LLAMA3_8B: 1, LlmModel.LLAMA3_70B:\n    1, LlmModel.MIXTRAL_8X7B: 1, LlmModel.GEMMA_7B: 1, LlmModel.GEMMA2_9B: \n    1, LlmModel.LLAMA3_1_405B: 1, LlmModel.LLAMA3_1_70B: 1, LlmModel.\n    LLAMA3_1_8B: 1, LlmModel.OLLAMA_LLAMA3_8B: 1, LlmModel.\n    OLLAMA_LLAMA3_405B: 1, LlmModel.OLLAMA_DOLPHIN: 1, LlmModel.\n    GEMINI_FLASH_1_5_8B: 1, LlmModel.GROK_BETA: 5, LlmModel.MISTRAL_NEMO: 1,\n    LlmModel.COHERE_COMMAND_R_08_2024: 1, LlmModel.\n    COHERE_COMMAND_R_PLUS_08_2024: 3, LlmModel.EVA_QWEN_2_5_32B: 1,\n    LlmModel.DEEPSEEK_CHAT: 2, LlmModel.\n    PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: 1, LlmModel.\n    QWEN_QWQ_32B_PREVIEW: 2, LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B:\n    1, LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: 1, LlmModel.\n    AMAZON_NOVA_LITE_V1: 1, LlmModel.AMAZON_NOVA_MICRO_V1: 1, LlmModel.\n    AMAZON_NOVA_PRO_V1: 1, LlmModel.MICROSOFT_WIZARDLM_2_8X22B: 1, LlmModel\n    .GRYPHE_MYTHOMAX_L2_13B: 1}",
      "start_line": 1,
      "end_line": 73,
      "successors": [
        {
          "id": 2,
          "label": "#2\nfor model in LlmModel:",
          "start_line": 75,
          "end_line": 77,
          "successors": [
            {
              "id": 3,
              "label": "#3\nif model not in MODEL_COST:",
              "start_line": 76,
              "end_line": 77,
              "successors": [
                {
                  "id": 5,
                  "label": "#5\nraise ValueError(f'Missing MODEL_COST for model: {model}')",
                  "start_line": 77,
                  "end_line": 77,
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "#4\nLLM_COST = [BlockCost(cost_type=BlockCostType.RUN, cost_filter={'model':\n    model, 'credentials': {'id': anthropic_credentials.id, 'provider':\n    anthropic_credentials.provider, 'type': anthropic_credentials.type}},\n    cost_amount=cost) for model, cost in MODEL_COST.items() if \n    MODEL_METADATA[model].provider == 'anthropic'] + [BlockCost(cost_type=\n    BlockCostType.RUN, cost_filter={'model': model, 'credentials': {'id':\n    openai_credentials.id, 'provider': openai_credentials.provider, 'type':\n    openai_credentials.type}}, cost_amount=cost) for model, cost in\n    MODEL_COST.items() if MODEL_METADATA[model].provider == 'openai'] + [\n    BlockCost(cost_type=BlockCostType.RUN, cost_filter={'model': model,\n    'credentials': {'id': groq_credentials.id}}, cost_amount=cost) for \n    model, cost in MODEL_COST.items() if MODEL_METADATA[model].provider ==\n    'groq'] + [BlockCost(cost_type=BlockCostType.RUN, cost_filter={'model':\n    model, 'credentials': {'id': open_router_credentials.id, 'provider':\n    open_router_credentials.provider, 'type': open_router_credentials.type}\n    }, cost_amount=cost) for model, cost in MODEL_COST.items() if \n    MODEL_METADATA[model].provider == 'open_router']\nBLOCK_COSTS: dict[Type[Block], list[BlockCost]] = {AIConversationBlock:\n    LLM_COST, AITextGeneratorBlock: LLM_COST,\n    AIStructuredResponseGeneratorBlock: LLM_COST, AITextSummarizerBlock:\n    LLM_COST, AIListGeneratorBlock: LLM_COST, CreateTalkingAvatarVideoBlock:\n    [BlockCost(cost_amount=15, cost_filter={'credentials': {'id':\n    did_credentials.id, 'provider': did_credentials.provider, 'type':\n    did_credentials.type}})], SearchTheWebBlock: [BlockCost(cost_amount=1,\n    cost_filter={'credentials': {'id': jina_credentials.id, 'provider':\n    jina_credentials.provider, 'type': jina_credentials.type}})],\n    ExtractWebsiteContentBlock: [BlockCost(cost_amount=1, cost_filter={\n    'raw_content': False, 'credentials': {'id': jina_credentials.id,\n    'provider': jina_credentials.provider, 'type': jina_credentials.type}})\n    ], IdeogramModelBlock: [BlockCost(cost_amount=16, cost_filter={\n    'credentials': {'id': ideogram_credentials.id, 'provider':\n    ideogram_credentials.provider, 'type': ideogram_credentials.type}})],\n    AIShortformVideoCreatorBlock: [BlockCost(cost_amount=50, cost_filter={\n    'credentials': {'id': revid_credentials.id, 'provider':\n    revid_credentials.provider, 'type': revid_credentials.type}})],\n    ReplicateFluxAdvancedModelBlock: [BlockCost(cost_amount=10, cost_filter\n    ={'credentials': {'id': replicate_credentials.id, 'provider':\n    replicate_credentials.provider, 'type': replicate_credentials.type}})],\n    AIMusicGeneratorBlock: [BlockCost(cost_amount=11, cost_filter={\n    'credentials': {'id': replicate_credentials.id, 'provider':\n    replicate_credentials.provider, 'type': replicate_credentials.type}})],\n    JinaEmbeddingBlock: [BlockCost(cost_amount=12, cost_filter={\n    'credentials': {'id': jina_credentials.id, 'provider': jina_credentials\n    .provider, 'type': jina_credentials.type}})], UnrealTextToSpeechBlock:\n    [BlockCost(cost_amount=5, cost_filter={'credentials': {'id':\n    unreal_credentials.id, 'provider': unreal_credentials.provider, 'type':\n    unreal_credentials.type}})]}",
              "start_line": 80,
              "end_line": 264,
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [],
  "classes": []
}