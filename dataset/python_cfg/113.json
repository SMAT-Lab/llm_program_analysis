{
  "name": "113.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import Literal\nimport googlemaps\nfrom pydantic import BaseModel, SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='google_maps', api_key\n    =SecretStr('mock-google-maps-api-key'), title=\n    'Mock Google Maps API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Place",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nname: str\naddress: str\nphone: str\nrating: float\nreviews: int\nwebsite: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "GoogleMapsSearchBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='f47ac10b-58cc-4372-a567-0e02b2c3d479', description=\n    'This block searches for local businesses using Google Maps API.',\n    categories={BlockCategory.SEARCH}, input_schema=GoogleMapsSearchBlock.\n    Input, output_schema=GoogleMapsSearchBlock.Output, test_input={\n    'credentials': TEST_CREDENTIALS_INPUT, 'query':\n    'restaurants in new york', 'radius': 5000, 'max_results': 5},\n    test_output=[('place', {'name': 'Test Restaurant', 'address':\n    '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567',\n    'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'}\n    )], test_mock={'search_places': lambda *args, **kwargs: [{'name':\n    'Test Restaurant', 'address': '123 Test St, New York, NY 10001',\n    'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website':\n    'https://testrestaurant.com'}]}, test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\nplaces = self.search_places(credentials.api_key, input_data.query,\n    input_data.radius, input_data.max_results)",
              "successors": [
                {
                  "id": 18,
                  "label": "#18\nfor place in places:",
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nyield 'place', place",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "search_places",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nclient = googlemaps.Client(key=api_key.get_secret_value())\nreturn self._search_places(client, query, radius, max_results)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_search_places",
          "type": "CFG",
          "blocks": [
            {
              "id": 28,
              "label": "#28\nresults = []\nnext_page_token = None",
              "successors": [
                {
                  "id": 29,
                  "label": "#29\nwhile len(results) < max_results:",
                  "successors": [
                    {
                      "id": 30,
                      "label": "#30\nresponse = client.places(query=query, radius=radius, page_token=next_page_token\n    )",
                      "successors": [
                        {
                          "id": 32,
                          "label": "#32\nfor place in response['results']:",
                          "successors": [
                            {
                              "id": 33,
                              "label": "#33\nif len(results) >= max_results:",
                              "successors": [
                                {
                                  "id": 36,
                                  "label": "#36\nplace_details = client.place(place['place_id'])['result']\nresults.append(Place(name=place_details.get('name', ''), address=\n    place_details.get('formatted_address', ''), phone=place_details.get(\n    'formatted_phone_number', ''), rating=place_details.get('rating', 0),\n    reviews=place_details.get('user_ratings_total', 0), website=\n    place_details.get('website', '')))",
                                  "successors": []
                                },
                                {
                                  "id": 34,
                                  "label": "#34\nnext_page_token = response.get('next_page_token')\nif not next_page_token:",
                                  "successors": [
                                    {
                                      "id": 31,
                                      "label": "#31\nreturn results",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\ncredentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS],\n    Literal['api_key']] = CredentialsField(description='Google Maps API Key')\nquery: str = SchemaField(description='Search query for local businesses',\n    placeholder=\"e.g., 'restaurants in New York'\")\nradius: int = SchemaField(description='Search radius in meters (max 50000)',\n    default=5000, ge=1, le=50000)\nmax_results: int = SchemaField(description=\n    'Maximum number of results to return (max 60)', default=20, ge=1, le=60)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nplace: Place = SchemaField(description='Place found')\nerror: str = SchemaField(description='Error message if the search failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}