{
  "name": "180.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nfrom typing import Optional, cast\nfrom autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\nfrom backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\nlogger = logging.getLogger(__name__)",
      "start_line": 1,
      "end_line": 130,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_or_create_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nuser_id = user_data.get('sub')\nif not user_id:",
          "start_line": 17,
          "end_line": 19,
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise HTTPException(status_code=401, detail='User ID not found in token')",
              "start_line": 19,
              "end_line": 19,
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nuser_email = user_data.get('email')\nif not user_email:",
              "start_line": 21,
              "end_line": 23,
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nraise HTTPException(status_code=401, detail='Email not found in token')",
                  "start_line": 23,
                  "end_line": 23,
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "#8\nuser = await prisma.user.find_unique(where={'id': user_id})",
                  "start_line": 25,
                  "end_line": 25,
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nif not user:",
                      "start_line": 26,
                      "end_line": 33,
                      "successors": [
                        {
                          "id": 11,
                          "label": "#11\nuser = await prisma.user.create(data={'id': user_id, 'email': user_email,\n    'name': user_data.get('user_metadata', {}).get('name')})",
                          "start_line": 27,
                          "end_line": 33,
                          "successors": [
                            {
                              "id": 12,
                              "label": "#12\nreturn User.model_validate(user)",
                              "start_line": 34,
                              "end_line": 34,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_user_by_id",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\nuser = await prisma.user.find_unique(where={'id': user_id})",
          "start_line": 38,
          "end_line": 38,
          "successors": [
            {
              "id": 18,
              "label": "#18\nreturn User.model_validate(user) if user else None",
              "start_line": 39,
              "end_line": 39,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_default_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 22,
          "label": "#22\nuser = await prisma.user.find_unique(where={'id': DEFAULT_USER_ID})",
          "start_line": 43,
          "end_line": 43,
          "successors": [
            {
              "id": 23,
              "label": "#23\nif not user:",
              "start_line": 44,
              "end_line": 51,
              "successors": [
                {
                  "id": 24,
                  "label": "#24\nuser = await prisma.user.create(data={'id': DEFAULT_USER_ID, 'email':\n    'default@example.com', 'name': 'Default User'})",
                  "start_line": 45,
                  "end_line": 51,
                  "successors": [
                    {
                      "id": 25,
                      "label": "#25\nreturn User.model_validate(user)",
                      "start_line": 52,
                      "end_line": 52,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_user_metadata",
      "type": "CFG",
      "blocks": [
        {
          "id": 30,
          "label": "#30\nuser = await User.prisma().find_unique_or_raise(where={'id': user_id})",
          "start_line": 56,
          "end_line": 58,
          "successors": [
            {
              "id": 31,
              "label": "#31\nmetadata = cast(UserMetadataRaw, user.metadata)\nreturn UserMetadata.model_validate(metadata)",
              "start_line": 60,
              "end_line": 61,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_user_metadata",
      "type": "CFG",
      "blocks": [
        {
          "id": 35,
          "label": "#35\nawait User.prisma().update(where={'id': user_id}, data={'metadata': Json(\n    metadata.model_dump())})",
          "start_line": 65,
          "end_line": 68,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_user_integrations",
      "type": "CFG",
      "blocks": [
        {
          "id": 39,
          "label": "#39\nuser = await User.prisma().find_unique_or_raise(where={'id': user_id})",
          "start_line": 72,
          "end_line": 74,
          "successors": [
            {
              "id": 40,
              "label": "#40\nencrypted_integrations = user.integrations\nif not encrypted_integrations:",
              "start_line": 76,
              "end_line": 82,
              "successors": [
                {
                  "id": 41,
                  "label": "#41\nreturn UserIntegrations()",
                  "start_line": 78,
                  "end_line": 78,
                  "successors": []
                },
                {
                  "id": 43,
                  "label": "#43\nreturn UserIntegrations.model_validate(JSONCryptor().decrypt(\n    encrypted_integrations))",
                  "start_line": 80,
                  "end_line": 82,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_user_integrations",
      "type": "CFG",
      "blocks": [
        {
          "id": 48,
          "label": "#48\nencrypted_data = JSONCryptor().encrypt(data.model_dump())\nawait User.prisma().update(where={'id': user_id}, data={'integrations':\n    encrypted_data})",
          "start_line": 86,
          "end_line": 90,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "migrate_and_encrypt_user_integrations",
      "type": "CFG",
      "blocks": [
        {
          "id": 52,
          "label": "#52\n\"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\nusers = await User.prisma().find_many(where={'metadata': {'path': [\n    'integration_credentials'], 'not': Json({'a': 'yolo'})}})",
          "start_line": 94,
          "end_line": 102,
          "successors": [
            {
              "id": 53,
              "label": "#53\nlogger.info(f'Migrating integration credentials for {len(users)} users')",
              "start_line": 103,
              "end_line": 103,
              "successors": [
                {
                  "id": 54,
                  "label": "#54\nfor user in users:",
                  "start_line": 105,
                  "end_line": 130,
                  "successors": [
                    {
                      "id": 55,
                      "label": "#55\nraw_metadata = cast(UserMetadataRaw, user.metadata)\nmetadata = UserMetadata.model_validate(raw_metadata)\nintegrations = await get_user_integrations(user_id=user.id)",
                      "start_line": 106,
                      "end_line": 110,
                      "successors": [
                        {
                          "id": 57,
                          "label": "#57\nif metadata.integration_credentials and not integrations.credentials:",
                          "start_line": 113,
                          "end_line": 114,
                          "successors": [
                            {
                              "id": 58,
                              "label": "#58\nintegrations.credentials = metadata.integration_credentials",
                              "start_line": 114,
                              "end_line": 114,
                              "successors": [
                                {
                                  "id": 59,
                                  "label": "#59\nif metadata.integration_oauth_states:",
                                  "start_line": 115,
                                  "end_line": 116,
                                  "successors": [
                                    {
                                      "id": 60,
                                      "label": "#60\nintegrations.oauth_states = metadata.integration_oauth_states",
                                      "start_line": 116,
                                      "end_line": 116,
                                      "successors": [
                                        {
                                          "id": 61,
                                          "label": "#61\nawait update_user_integrations(user_id=user.id, data=integrations)",
                                          "start_line": 119,
                                          "end_line": 119,
                                          "successors": [
                                            {
                                              "id": 62,
                                              "label": "#62\nraw_metadata = dict(raw_metadata)\nraw_metadata.pop('integration_credentials', None)\nraw_metadata.pop('integration_oauth_states', None)\nawait User.prisma().update(where={'id': user.id}, data={'metadata': Json(\n    raw_metadata)})",
                                              "start_line": 122,
                                              "end_line": 130,
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}