{
  "name": "54.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\npunctuation = punctuation.replace('()', '')\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\nanchor_re = re.compile(anchor + '\\\\s(.+)')\ncategory_title_in_index_re = re.compile('\\\\*\\\\s\\\\[(.*)\\\\]')\nlink_re = re.compile('\\\\[(.+)\\\\]\\\\((http.*)\\\\)')\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]\nif __name__ == '__main__':",
      "start_line": 3,
      "end_line": 277,
      "successors": [
        {
          "id": 106,
          "label": "#106\nnum_args = len(sys.argv)\nif num_args < 2:",
          "start_line": 269,
          "end_line": 273,
          "successors": [
            {
              "id": 108,
              "label": "#108\nprint('No .md file passed (file should contain Markdown table syntax)')\nsys.exit(1)",
              "start_line": 272,
              "end_line": 273,
              "successors": [
                {
                  "id": 109,
                  "label": "#109\nfilename = sys.argv[1]\nmain(filename)",
                  "start_line": 275,
                  "end_line": 277,
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "error_message",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nline = line_number + 1\nreturn f'(L{line:03d}) {message}'",
          "start_line": 38,
          "end_line": 39,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_categories_content",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\ncategories = {}\ncategory_line_num = {}",
          "start_line": 44,
          "end_line": 45,
          "successors": [
            {
              "id": 8,
              "label": "#8\nfor line_num, line_content in enumerate(contents):",
              "start_line": 47,
              "end_line": 65,
              "successors": [
                {
                  "id": 9,
                  "label": "#9\nif line_content.startswith(anchor):",
                  "start_line": 49,
                  "end_line": 53,
                  "successors": [
                    {
                      "id": 11,
                      "label": "#11\ncategory = line_content.split(anchor)[1].strip()\ncategories[category] = []\ncategory_line_num[category] = line_num",
                      "start_line": 50,
                      "end_line": 52,
                      "successors": []
                    },
                    {
                      "id": 12,
                      "label": "#12\nif not line_content.startswith('|') or line_content.startswith('|---'):",
                      "start_line": 55,
                      "end_line": 56,
                      "successors": [
                        {
                          "id": 14,
                          "label": "#14\nraw_title = [raw_content.strip() for raw_content in line_content.split('|')\n    [1:-1]][0]\ntitle_match = link_re.match(raw_title)\nif title_match:",
                          "start_line": 58,
                          "end_line": 65,
                          "successors": [
                            {
                              "id": 15,
                              "label": "#15\ntitle = title_match.group(1).upper()\ncategories[category].append(title)",
                              "start_line": 64,
                              "end_line": 65,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "#10\nreturn categories, category_line_num",
                  "start_line": 67,
                  "end_line": 67,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_alphabetical_order",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\nerr_msgs = []\ncategories, category_line_num = get_categories_content(contents=lines)",
          "start_line": 72,
          "end_line": 74,
          "successors": [
            {
              "id": 21,
              "label": "#21\nfor category, api_list in categories.items():",
              "start_line": 76,
              "end_line": 82,
              "successors": [
                {
                  "id": 22,
                  "label": "#22\nif sorted(api_list) != api_list:",
                  "start_line": 77,
                  "end_line": 82,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nerr_msg = error_message(category_line_num[category],\n    f'{category} category is not alphabetical order')\nerr_msgs.append(err_msg)",
                      "start_line": 78,
                      "end_line": 82,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 23,
                  "label": "#23\nreturn err_msgs",
                  "start_line": 84,
                  "end_line": 84,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_title",
      "type": "CFG",
      "blocks": [
        {
          "id": 29,
          "label": "#29\nerr_msgs = []\ntitle_match = link_re.match(raw_title)\nif not title_match:",
          "start_line": 89,
          "end_line": 102,
          "successors": [
            {
              "id": 30,
              "label": "#30\nerr_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append(err_msg)",
              "start_line": 95,
              "end_line": 96,
              "successors": [
                {
                  "id": 31,
                  "label": "#31\nreturn err_msgs",
                  "start_line": 104,
                  "end_line": 104,
                  "successors": []
                }
              ]
            },
            {
              "id": 32,
              "label": "#32\ntitle = title_match.group(1)\nif title.upper().endswith(' API'):",
              "start_line": 99,
              "end_line": 102,
              "successors": [
                {
                  "id": 33,
                  "label": "#33\nerr_msg = error_message(line_num,\nerr_msgs.append(err_msg)",
                  "start_line": 101,
                  "end_line": 102,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_description",
      "type": "CFG",
      "blocks": [
        {
          "id": 38,
          "label": "#38\nerr_msgs = []\nfirst_char = description[0]\nif first_char.upper() != first_char:",
          "start_line": 109,
          "end_line": 114,
          "successors": [
            {
              "id": 39,
              "label": "#39\nerr_msg = error_message(line_num,\n    'first character of description is not capitalized')\nerr_msgs.append(err_msg)",
              "start_line": 113,
              "end_line": 114,
              "successors": [
                {
                  "id": 40,
                  "label": "#40\nlast_char = description[-1]\nif last_char in punctuation:",
                  "start_line": 116,
                  "end_line": 119,
                  "successors": [
                    {
                      "id": 41,
                      "label": "#41\nerr_msg = error_message(line_num,\n    f'description should not end with {last_char}')\nerr_msgs.append(err_msg)",
                      "start_line": 118,
                      "end_line": 119,
                      "successors": [
                        {
                          "id": 42,
                          "label": "#42\ndesc_length = len(description)\nif desc_length > max_description_length:",
                          "start_line": 121,
                          "end_line": 124,
                          "successors": [
                            {
                              "id": 43,
                              "label": "#43\nerr_msg = error_message(line_num,\n    f'description should not exceed {max_description_length} characters (currently {desc_length})'\n    )\nerr_msgs.append(err_msg)",
                              "start_line": 123,
                              "end_line": 124,
                              "successors": [
                                {
                                  "id": 44,
                                  "label": "#44\nreturn err_msgs",
                                  "start_line": 126,
                                  "end_line": 126,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_auth",
      "type": "CFG",
      "blocks": [
        {
          "id": 48,
          "label": "#48\nerr_msgs = []\nbacktick = '`'\nif auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(",
          "start_line": 131,
          "end_line": 136,
          "successors": [
            {
              "id": 49,
              "label": "#49\nerr_msg = error_message(line_num, 'auth value is not enclosed with `backticks`'\n    )\nerr_msgs.append(err_msg)",
              "start_line": 135,
              "end_line": 136,
              "successors": [
                {
                  "id": 50,
                  "label": "#50\nif auth.replace(backtick, '') not in auth_keys:",
                  "start_line": 138,
                  "end_line": 140,
                  "successors": [
                    {
                      "id": 51,
                      "label": "#51\nerr_msg = error_message(line_num, f'{auth} is not a valid Auth option')\nerr_msgs.append(err_msg)",
                      "start_line": 139,
                      "end_line": 140,
                      "successors": [
                        {
                          "id": 52,
                          "label": "#52\nreturn err_msgs",
                          "start_line": 142,
                          "end_line": 142,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_https",
      "type": "CFG",
      "blocks": [
        {
          "id": 56,
          "label": "#56\nerr_msgs = []\nif https not in https_keys:",
          "start_line": 147,
          "end_line": 151,
          "successors": [
            {
              "id": 57,
              "label": "#57\nerr_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\nerr_msgs.append(err_msg)",
              "start_line": 150,
              "end_line": 151,
              "successors": [
                {
                  "id": 58,
                  "label": "#58\nreturn err_msgs",
                  "start_line": 153,
                  "end_line": 153,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_cors",
      "type": "CFG",
      "blocks": [
        {
          "id": 62,
          "label": "#62\nerr_msgs = []\nif cors not in cors_keys:",
          "start_line": 158,
          "end_line": 162,
          "successors": [
            {
              "id": 63,
              "label": "#63\nerr_msg = error_message(line_num, f'{cors} is not a valid CORS option')\nerr_msgs.append(err_msg)",
              "start_line": 161,
              "end_line": 162,
              "successors": [
                {
                  "id": 64,
                  "label": "#64\nreturn err_msgs",
                  "start_line": 164,
                  "end_line": 164,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_entry",
      "type": "CFG",
      "blocks": [
        {
          "id": 68,
          "label": "#68\nraw_title = segments[index_title]\ndescription = segments[index_desc]\nauth = segments[index_auth]\nhttps = segments[index_https]\ncors = segments[index_cors]\ntitle_err_msgs = check_title(line_num, raw_title)\ndesc_err_msgs = check_description(line_num, description)\nauth_err_msgs = check_auth(line_num, auth)\nhttps_err_msgs = check_https(line_num, https)\ncors_err_msgs = check_cors(line_num, cors)\nerr_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *\n    https_err_msgs, *cors_err_msgs]\nreturn err_msgs",
          "start_line": 169,
          "end_line": 189,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_file_format",
      "type": "CFG",
      "blocks": [
        {
          "id": 72,
          "label": "#72\nerr_msgs = []\ncategory_title_in_index = []\nalphabetical_err_msgs = check_alphabetical_order(lines)\nerr_msgs.extend(alphabetical_err_msgs)\nnum_in_category = min_entries_per_category + 1\ncategory = ''\ncategory_line = 0",
          "start_line": 194,
          "end_line": 202,
          "successors": [
            {
              "id": 73,
              "label": "#73\nfor line_num, line_content in enumerate(lines):",
              "start_line": 204,
              "end_line": 249,
              "successors": [
                {
                  "id": 74,
                  "label": "#74\ncategory_title_match = category_title_in_index_re.match(line_content)\nif category_title_match:",
                  "start_line": 206,
                  "end_line": 208,
                  "successors": [
                    {
                      "id": 76,
                      "label": "#76\ncategory_title_in_index.append(category_title_match.group(1))",
                      "start_line": 208,
                      "end_line": 208,
                      "successors": [
                        {
                          "id": 77,
                          "label": "#77\nif line_content.startswith(anchor):",
                          "start_line": 211,
                          "end_line": 228,
                          "successors": [
                            {
                              "id": 78,
                              "label": "#78\ncategory_match = anchor_re.match(line_content)\nif category_match:",
                              "start_line": 212,
                              "end_line": 219,
                              "successors": [
                                {
                                  "id": 80,
                                  "label": "#80\nif category_match.group(1) not in category_title_in_index:",
                                  "start_line": 214,
                                  "end_line": 216,
                                  "successors": [
                                    {
                                      "id": 83,
                                      "label": "#83\nerr_msg = error_message(line_num,\n    f'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)",
                                      "start_line": 215,
                                      "end_line": 216,
                                      "successors": [
                                        {
                                          "id": 81,
                                          "label": "#81\nif num_in_category < min_entries_per_category:",
                                          "start_line": 221,
                                          "end_line": 223,
                                          "successors": [
                                            {
                                              "id": 85,
                                              "label": "#85\nerr_msg = error_message(category_line,\n    f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n    )\nerr_msgs.append(err_msg)",
                                              "start_line": 222,
                                              "end_line": 223,
                                              "successors": [
                                                {
                                                  "id": 86,
                                                  "label": "#86\ncategory = line_content.split(' ')[1]\ncategory_line = line_num\nnum_in_category = 0",
                                                  "start_line": 225,
                                                  "end_line": 227,
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 82,
                                  "label": "#82\nerr_msg = error_message(line_num, 'category header is not formatted correctly')\nerr_msgs.append(err_msg)",
                                  "start_line": 218,
                                  "end_line": 219,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 79,
                              "label": "#79\nif not line_content.startswith('|') or line_content.startswith('|---'):",
                              "start_line": 231,
                              "end_line": 232,
                              "successors": [
                                {
                                  "id": 88,
                                  "label": "#88\nnum_in_category += 1\nsegments = line_content.split('|')[1:-1]\nif len(segments) < num_segments:",
                                  "start_line": 234,
                                  "end_line": 239,
                                  "successors": [
                                    {
                                      "id": 89,
                                      "label": "#89\nerr_msg = error_message(line_num,\n    f'entry does not have all the required columns (have {len(segments)}, need {num_segments})'\n    )\nerr_msgs.append(err_msg)",
                                      "start_line": 237,
                                      "end_line": 238,
                                      "successors": []
                                    },
                                    {
                                      "id": 90,
                                      "label": "#90\nfor segment in segments:",
                                      "start_line": 241,
                                      "end_line": 245,
                                      "successors": [
                                        {
                                          "id": 91,
                                          "label": "#91\nif len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.",
                                          "start_line": 243,
                                          "end_line": 245,
                                          "successors": [
                                            {
                                              "id": 93,
                                              "label": "#93\nerr_msg = error_message(line_num,\n    'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)",
                                              "start_line": 244,
                                              "end_line": 245,
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 92,
                                          "label": "#92\nsegments = [segment.strip() for segment in segments]\nentry_err_msgs = check_entry(line_num, segments)\nerr_msgs.extend(entry_err_msgs)",
                                          "start_line": 247,
                                          "end_line": 249,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 75,
                  "label": "#75\nreturn err_msgs",
                  "start_line": 251,
                  "end_line": 251,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 98,
          "label": "#98\nwith open(filename, mode='r', encoding='utf-8') as file:",
          "start_line": 256,
          "end_line": 257,
          "successors": [
            {
              "id": 99,
              "label": "#99\nlines = list(line.rstrip() for line in file)",
              "start_line": 257,
              "end_line": 257,
              "successors": [
                {
                  "id": 100,
                  "label": "#100\nfile_format_err_msgs = check_file_format(lines)\nif file_format_err_msgs:",
                  "start_line": 259,
                  "end_line": 264,
                  "successors": [
                    {
                      "id": 101,
                      "label": "#101\nfor err_msg in file_format_err_msgs:",
                      "start_line": 262,
                      "end_line": 263,
                      "successors": [
                        {
                          "id": 103,
                          "label": "#103\nprint(err_msg)",
                          "start_line": 263,
                          "end_line": 263,
                          "successors": []
                        },
                        {
                          "id": 104,
                          "label": "#104\nsys.exit(1)",
                          "start_line": 264,
                          "end_line": 264,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}