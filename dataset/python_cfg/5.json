{
  "name": "5.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\nfrom __future__ import annotations\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"\nnums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)",
      "start_line": 1,
      "end_line": 66,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "generate_sum_of_subsets_soln",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nresult: list[list[int]] = []\npath: list[int] = []\nnum_index = 0\nremaining_nums_sum = sum(nums)\ncreate_state_space_tree(nums, max_sum, num_index, path, result,\n    remaining_nums_sum)\nreturn result",
          "start_line": 14,
          "end_line": 19,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_state_space_tree",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\nif sum(path) > max_sum or remaining_nums_sum + sum(path) < max_sum:",
          "start_line": 30,
          "end_line": 39,
          "successors": [
            {
              "id": 8,
              "label": "#8\nreturn",
              "start_line": 39,
              "end_line": 39,
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nif sum(path) == max_sum:",
              "start_line": 40,
              "end_line": 42,
              "successors": [
                {
                  "id": 11,
                  "label": "#11\nresult.append(path)\nreturn",
                  "start_line": 41,
                  "end_line": 42,
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "#12\nfor index in range(num_index, len(nums)):",
                  "start_line": 43,
                  "end_line": 51,
                  "successors": [
                    {
                      "id": 14,
                      "label": "#14\ncreate_state_space_tree(nums, max_sum, index + 1, [*path, nums[index]],\n    result, remaining_nums_sum - nums[index])",
                      "start_line": 44,
                      "end_line": 51,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}