{
  "name": "77.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom math import cos, sin, sqrt, tau\nfrom audio_filters.iir_filter import IIRFilter\n\"\"\"\nCreate 2nd-order IIR filters with Butterworth design.\n\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\nAlternatively you can use scipy.signal.butter, which should yield the same results.\n\"\"\"",
      "start_line": 1,
      "end_line": 234,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "make_lowpass",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = (1 - _cos) / 2\nb1 = 1 - _cos\na0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b0])\nreturn filt",
          "start_line": 18,
          "end_line": 40,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_highpass",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = (1 + _cos) / 2\nb1 = -1 - _cos\na0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b0])\nreturn filt",
          "start_line": 48,
          "end_line": 70,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_bandpass",
      "type": "CFG",
      "blocks": [
        {
          "id": 11,
          "label": "#11\n\"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = _sin / 2\nb1 = 0\nb2 = -b0\na0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt",
          "start_line": 78,
          "end_line": 101,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_allpass",
      "type": "CFG",
      "blocks": [
        {
          "id": 15,
          "label": "#15\n\"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = 1 - alpha\nb1 = -2 * _cos\nb2 = 1 + alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([b2, b1, b0], [b0, b1, b2])\nreturn filt",
          "start_line": 109,
          "end_line": 128,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_peak",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19\n\"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nbig_a = 10 ** (gain_db / 40)\nb0 = 1 + alpha * big_a\nb1 = -2 * _cos\nb2 = 1 - alpha * big_a\na0 = 1 + alpha / big_a\na1 = -2 * _cos\na2 = 1 - alpha / big_a\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt",
          "start_line": 137,
          "end_line": 160,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_lowshelf",
      "type": "CFG",
      "blocks": [
        {
          "id": 23,
          "label": "#23\n\"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nbig_a = 10 ** (gain_db / 40)\npmc = big_a + 1 - (big_a - 1) * _cos\nppmc = big_a + 1 + (big_a - 1) * _cos\nmpc = big_a - 1 - (big_a + 1) * _cos\npmpc = big_a - 1 + (big_a + 1) * _cos\naa2 = 2 * sqrt(big_a) * alpha\nb0 = big_a * (pmc + aa2)\nb1 = 2 * big_a * mpc\nb2 = big_a * (pmc - aa2)\na0 = ppmc + aa2\na1 = -2 * pmpc\na2 = ppmc - aa2\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt",
          "start_line": 169,
          "end_line": 197,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_highshelf",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27\n\"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nbig_a = 10 ** (gain_db / 40)\npmc = big_a + 1 - (big_a - 1) * _cos\nppmc = big_a + 1 + (big_a - 1) * _cos\nmpc = big_a - 1 - (big_a + 1) * _cos\npmpc = big_a - 1 + (big_a + 1) * _cos\naa2 = 2 * sqrt(big_a) * alpha\nb0 = big_a * (ppmc + aa2)\nb1 = -2 * big_a * pmpc\nb2 = big_a * (ppmc - aa2)\na0 = pmc + aa2\na1 = 2 * mpc\na2 = pmc - aa2\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt",
          "start_line": 206,
          "end_line": 234,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}