{
  "name": "165.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport pytest\nfrom ldclient import LDClient\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "ld_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nclient = mocker.Mock(spec=LDClient)\nmocker.patch('ldclient.get', return_value=client)\nclient.is_initialized.return_value = True\nreturn client",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_feature_flag_enabled",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nld_client.variation.return_value = True\nresult = test_function(user_id='test-user')\nassert result == 'success'",
          "successors": [
            {
              "id": 13,
              "label": "#13\nld_client.variation.assert_called_once()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "test_function",
          "type": "CFG",
          "blocks": [
            {
              "id": 9,
              "label": "#9\nreturn 'success'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "test_feature_flag_unauthorized_response",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\nld_client.variation.return_value = False\nresult = test_function(user_id='test-user')\nassert result == {'error': 'disabled'}",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "test_function",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\nreturn 'success'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "test_mock_flag_variation",
      "type": "CFG",
      "blocks": [
        {
          "id": 25,
          "label": "#25\nwith mock_flag_variation('test-flag', True):",
          "successors": [
            {
              "id": 26,
              "label": "#26\nassert ld_client.variation('test-flag', None, False)",
              "successors": [
                {
                  "id": 27,
                  "label": "#27\nwith mock_flag_variation('test-flag', False):",
                  "successors": [
                    {
                      "id": 30,
                      "label": "#30\nassert ld_client.variation('test-flag', None, False)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}