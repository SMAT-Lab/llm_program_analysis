{
  "name": "153.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom datetime import datetime, timezone\nfrom typing import Iterator\nimport praw\nfrom pydantic import BaseModel, ConfigDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\nfrom backend.util.mock import MockObject",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_praw",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\nclient = praw.Reddit(client_id=creds.client_id.get_secret_value(),\n    client_secret=creds.client_secret.get_secret_value(), username=creds.\n    username.get_secret_value(), password=creds.password.get_secret_value(),\n    user_agent=creds.user_agent)\nme = client.user.me()\nif not me:",
          "successors": [
            {
              "id": 13,
              "label": "#13\nraise ValueError('Invalid Reddit credentials.')",
              "successors": []
            },
            {
              "id": 14,
              "label": "#14\nprint(f'Logged in as Reddit user: {me.name}')\nreturn client",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "RedditCredentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nclient_id: BlockSecret = SecretField(key='reddit_client_id')\nclient_secret: BlockSecret = SecretField(key='reddit_client_secret')\nusername: BlockSecret = SecretField(key='reddit_username')\npassword: BlockSecret = SecretField(key='reddit_password')\nuser_agent: str = 'AutoGPT:1.0 (by /u/autogpt)'\nmodel_config = ConfigDict(title='Reddit Credentials')",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "RedditPost",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\nid: str\nsubreddit: str\ntitle: str\nbody: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "RedditComment",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\npost_id: str\ncomment: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "GetRedditPostsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\nsuper().__init__(disabled=True, id='c6731acb-4285-4ee1-bc9b-03d0766c370f',\n    description=\n    'This block fetches Reddit posts from a defined subreddit name.',\n    categories={BlockCategory.SOCIAL}, input_schema=GetRedditPostsBlock.\n    Input, output_schema=GetRedditPostsBlock.Output, test_input={'creds': {\n    'client_id': 'client_id', 'client_secret': 'client_secret', 'username':\n    'username', 'password': 'password', 'user_agent': 'user_agent'},\n    'subreddit': 'subreddit', 'last_post': 'id3', 'post_limit': 2},\n    test_output=[('post', RedditPost(id='id1', subreddit='subreddit', title\n    ='title1', body='body1')), ('post', RedditPost(id='id2', subreddit=\n    'subreddit', title='title2', body='body2'))], test_mock={'get_posts': \n    lambda _: [MockObject(id='id1', title='title1', selftext='body1'),\n    MockObject(id='id2', title='title2', selftext='body2'), MockObject(id=\n    'id3', title='title2', selftext='body2')]})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_posts",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nclient = get_praw(input_data.creds)\nsubreddit = client.subreddit(input_data.subreddit)\nreturn subreddit.new(limit=input_data.post_limit or 10)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 34,
              "label": "#34\ncurrent_time = datetime.now(tz=timezone.utc)",
              "successors": [
                {
                  "id": 35,
                  "label": "#35\nfor post in self.get_posts(input_data):",
                  "successors": [
                    {
                      "id": 36,
                      "label": "#36\nif input_data.last_minutes:",
                      "successors": [
                        {
                          "id": 38,
                          "label": "#38\npost_datetime = datetime.fromtimestamp(post.created_utc, tz=timezone.utc)\ntime_difference = current_time - post_datetime\nif time_difference.total_seconds() / 60 > input_data.last_minutes:",
                          "successors": [
                            {
                              "id": 39,
                              "label": "#39\nif input_data.last_post and post.id == input_data.last_post:",
                              "successors": [
                                {
                                  "id": 43,
                                  "label": "#43\nyield 'post', RedditPost(id=post.id, subreddit=input_data.subreddit, title=\n    post.title, body=post.selftext)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\nsubreddit: str = SchemaField(description='Subreddit name')\ncreds: RedditCredentials = SchemaField(description='Reddit credentials',\n    default=RedditCredentials())\nlast_minutes: int | None = SchemaField(description=\n    'Post time to stop minutes ago while fetching posts', default=None)\nlast_post: str | None = SchemaField(description=\n    'Post ID to stop when reached while fetching posts', default=None)\npost_limit: int | None = SchemaField(description='Number of posts to fetch',\n    default=10)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\npost: RedditPost = SchemaField(description='Reddit post')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "PostRedditCommentBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 48,
          "label": "#48",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 56,
              "label": "#56\nsuper().__init__(id='4a92261b-701e-4ffb-8970-675fd28e261f', description=\n    'This block posts a Reddit comment on a specified Reddit post.',\n    categories={BlockCategory.SOCIAL}, input_schema=PostRedditCommentBlock.\n    Input, output_schema=PostRedditCommentBlock.Output, test_input={'data':\n    {'post_id': 'id', 'comment': 'comment'}}, test_output=[('comment_id',\n    'dummy_comment_id')], test_mock={'reply_post': lambda creds, comment:\n    'dummy_comment_id'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "reply_post",
          "type": "CFG",
          "blocks": [
            {
              "id": 59,
              "label": "#59\nclient = get_praw(creds)\nsubmission = client.submission(id=comment.post_id)\nnew_comment = submission.reply(comment.comment)\nif not new_comment:",
              "successors": [
                {
                  "id": 60,
                  "label": "#60\nraise ValueError('Failed to post comment.')",
                  "successors": []
                },
                {
                  "id": 61,
                  "label": "#61\nreturn new_comment.id",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 66,
              "label": "#66\nyield 'comment_id', self.reply_post(input_data.creds, input_data.data)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 50,
              "label": "#50\ncreds: RedditCredentials = SchemaField(description='Reddit credentials',\n    default=RedditCredentials())\ndata: RedditComment = SchemaField(description='Reddit comment')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 53,
              "label": "#53\ncomment_id: str = SchemaField(description='Posted comment ID')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}