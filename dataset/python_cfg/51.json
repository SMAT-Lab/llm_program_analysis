{
  "name": "51.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 19,
          "label": "#19\nimport doctest\ndoctest.testmod()\nmain()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\nif target == 0:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nanswer.append(path.copy())",
              "successors": []
            },
            {
              "id": 6,
              "label": "#6\nfor index in range(previous_index, len(candidates)):",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nif target >= candidates[index]:",
                  "successors": [
                    {
                      "id": 9,
                      "label": "#9\npath.append(candidates[index])\nbacktrack(candidates, path, answer, target - candidates[index], index)\npath.pop(len(path) - 1)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "combination_sum",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\n\"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\npath = []\nanswer = []\nbacktrack(candidates, path, answer, target, 0)\nreturn answer",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\nprint(combination_sum([-8, 2.3, 0], 1))",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}