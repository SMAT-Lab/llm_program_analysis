{
  "name": "71.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\n\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.\n\"\"\"\nfrom __future__ import annotations\nMatrix = list[list[int]]\ninitial_grid: Matrix = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, \n    0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0,\n    0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2,\n    5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]\nno_solution: Matrix = [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0,\n    2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0,\n    8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5,\n    0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]\nif __name__ == '__main__':",
      "start_line": 1,
      "end_line": 133,
      "successors": [
        {
          "id": 54,
          "label": "#54\nfor example_grid in (initial_grid, no_solution):",
          "start_line": 125,
          "end_line": 133,
          "successors": [
            {
              "id": 56,
              "label": "#56\nprint('\\nExample grid:\\n' + '=' * 20)\nprint_solution(example_grid)\nprint(\"\"\"\nExample grid solution:\"\"\")\nsolution = sudoku(example_grid)\nif solution is not None:",
              "start_line": 126,
              "end_line": 133,
              "successors": [
                {
                  "id": 58,
                  "label": "#58\nprint_solution(solution)",
                  "start_line": 131,
                  "end_line": 131,
                  "successors": []
                },
                {
                  "id": 60,
                  "label": "#60\nprint('Cannot find a solution.')",
                  "start_line": 133,
                  "end_line": 133,
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_safe",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"",
          "start_line": 45,
          "end_line": 50,
          "successors": [
            {
              "id": 4,
              "label": "#4\nfor i in range(9):",
              "start_line": 51,
              "end_line": 53,
              "successors": [
                {
                  "id": 5,
                  "label": "#5\nif n in {grid[row][i], grid[i][column]}:",
                  "start_line": 52,
                  "end_line": 53,
                  "successors": [
                    {
                      "id": 7,
                      "label": "#7\nreturn False",
                      "start_line": 53,
                      "end_line": 53,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "#6\nfor i in range(3):",
                  "start_line": 55,
                  "end_line": 58,
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nfor j in range(3):",
                      "start_line": 56,
                      "end_line": 58,
                      "successors": [
                        {
                          "id": 12,
                          "label": "#12\nif grid[row - row % 3 + i][column - column % 3 + j] == n:",
                          "start_line": 57,
                          "end_line": 58,
                          "successors": [
                            {
                              "id": 14,
                              "label": "#14\nreturn False",
                              "start_line": 58,
                              "end_line": 58,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "#11\nreturn True",
                      "start_line": 60,
                      "end_line": 60,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "find_empty_location",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\n\"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"",
          "start_line": 64,
          "end_line": 67,
          "successors": [
            {
              "id": 21,
              "label": "#21\nfor i in range(9):",
              "start_line": 68,
              "end_line": 71,
              "successors": [
                {
                  "id": 22,
                  "label": "#22\nfor j in range(9):",
                  "start_line": 69,
                  "end_line": 71,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nif grid[i][j] == 0:",
                      "start_line": 70,
                      "end_line": 71,
                      "successors": [
                        {
                          "id": 26,
                          "label": "#26\nreturn i, j",
                          "start_line": 71,
                          "end_line": 71,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 23,
                  "label": "#23\nreturn None",
                  "start_line": 72,
                  "end_line": 72,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "sudoku",
      "type": "CFG",
      "blocks": [
        {
          "id": 32,
          "label": "#32\n\"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"\nif (location := find_empty_location(grid)):",
          "start_line": 76,
          "end_line": 98,
          "successors": [
            {
              "id": 33,
              "label": "#33\nrow, column = location",
              "start_line": 95,
              "end_line": 95,
              "successors": [
                {
                  "id": 34,
                  "label": "#34\nfor digit in range(1, 10):",
                  "start_line": 100,
                  "end_line": 107,
                  "successors": [
                    {
                      "id": 37,
                      "label": "#37\nif is_safe(grid, row, column, digit):",
                      "start_line": 101,
                      "end_line": 107,
                      "successors": [
                        {
                          "id": 39,
                          "label": "#39\ngrid[row][column] = digit\nif sudoku(grid) is not None:",
                          "start_line": 102,
                          "end_line": 105,
                          "successors": [
                            {
                              "id": 41,
                              "label": "#41\nreturn grid",
                              "start_line": 105,
                              "end_line": 105,
                              "successors": []
                            },
                            {
                              "id": 42,
                              "label": "#42\ngrid[row][column] = 0",
                              "start_line": 107,
                              "end_line": 107,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 38,
                      "label": "#38\nreturn None",
                      "start_line": 109,
                      "end_line": 109,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 35,
              "label": "#35\nreturn grid",
              "start_line": 98,
              "end_line": 98,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "print_solution",
      "type": "CFG",
      "blocks": [
        {
          "id": 47,
          "label": "#47\n\"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"",
          "start_line": 113,
          "end_line": 116,
          "successors": [
            {
              "id": 48,
              "label": "#48\nfor row in grid:",
              "start_line": 117,
              "end_line": 120,
              "successors": [
                {
                  "id": 49,
                  "label": "#49\nfor cell in row:",
                  "start_line": 118,
                  "end_line": 119,
                  "successors": [
                    {
                      "id": 51,
                      "label": "#51\nprint(cell, end=' ')",
                      "start_line": 119,
                      "end_line": 119,
                      "successors": []
                    },
                    {
                      "id": 52,
                      "label": "#52\nprint()",
                      "start_line": 120,
                      "end_line": 120,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}