{
  "name": "175.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport os\nfrom urllib.parse import parse_qs, urlencode, urlparse, urlunparse\nfrom apscheduler.events import EVENT_JOB_ERROR, EVENT_JOB_EXECUTED\nfrom apscheduler.job import Job as JobObj\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom autogpt_libs.utils.cache import thread_cached\nfrom dotenv import load_dotenv\nfrom pydantic import BaseModel\nfrom sqlalchemy import MetaData, create_engine\nfrom backend.data.block import BlockInput\nfrom backend.executor.manager import ExecutionManager\nfrom backend.util.service import AppService, expose, get_service_client\nfrom backend.util.settings import Config\nlogger = logging.getLogger(__name__)\nconfig = Config()",
      "start_line": 1,
      "end_line": 175,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_extract_schema_from_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL.\n    \"\"\"\nparsed_url = urlparse(database_url)\nquery_params = parse_qs(parsed_url.query)\nschema_list = query_params.pop('schema', None)\nschema = schema_list[0] if schema_list else 'public'\nnew_query = urlencode(query_params, doseq=True)\nnew_parsed_url = parsed_url._replace(query=new_query)\ndatabase_url_clean = str(urlunparse(new_parsed_url))\nreturn schema, database_url_clean",
          "start_line": 22,
          "end_line": 37,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "log",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nlogger.info('[ExecutionScheduler] ' + msg, **kwargs)",
          "start_line": 45,
          "end_line": 45,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "job_listener",
      "type": "CFG",
      "blocks": [
        {
          "id": 10,
          "label": "#10\n\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\nif event.exception:",
          "start_line": 49,
          "end_line": 53,
          "successors": [
            {
              "id": 11,
              "label": "#11\nlog(f'Job {event.job_id} failed.')",
              "start_line": 51,
              "end_line": 51,
              "successors": []
            },
            {
              "id": 13,
              "label": "#13\nlog(f'Job {event.job_id} completed successfully.')",
              "start_line": 53,
              "end_line": 53,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_execution_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\nreturn get_service_client(ExecutionManager)",
          "start_line": 58,
          "end_line": 58,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\nargs = JobArgs(**kwargs)\ntry:",
          "start_line": 62,
          "end_line": 69,
          "successors": [
            {
              "id": 21,
              "label": "#21\nlog(f'Executing recurring job for graph #{args.graph_id}')\nget_execution_client().add_execution(args.graph_id, args.input_data, args.\n    user_id)",
              "start_line": 64,
              "end_line": 67,
              "successors": []
            },
            {
              "id": 22,
              "label": "#22\nlogger.exception(f'Error executing graph {args.graph_id}: {e}')",
              "start_line": 69,
              "end_line": 69,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "JobArgs",
      "type": "CFG",
      "blocks": [
        {
          "id": 26,
          "label": "#26\ngraph_id: str\ninput_data: BlockInput\nuser_id: str\ngraph_version: int\ncron: str",
          "start_line": 73,
          "end_line": 77,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "JobInfo",
      "type": "CFG",
      "blocks": [
        {
          "id": 29,
          "label": "#29\nid: str\nname: str\nnext_run_time: str",
          "start_line": 81,
          "end_line": 92,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "from_db",
          "type": "CFG",
          "blocks": [
            {
              "id": 31,
              "label": "#31\nreturn JobInfo(id=job_obj.id, name=job_obj.name, next_run_time=job_obj.\n    next_run_time.isoformat(), **job_args.model_dump())",
              "start_line": 87,
              "end_line": 92,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "ExecutionScheduler",
      "type": "CFG",
      "blocks": [
        {
          "id": 36,
          "label": "#36\nscheduler: BlockingScheduler",
          "start_line": 96,
          "end_line": 175,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "get_port",
          "type": "CFG",
          "blocks": [
            {
              "id": 38,
              "label": "#38\nreturn config.execution_scheduler_port",
              "start_line": 100,
              "end_line": 100,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execution_client",
          "type": "CFG",
          "blocks": [
            {
              "id": 42,
              "label": "#42\nreturn get_service_client(ExecutionManager)",
              "start_line": 105,
              "end_line": 105,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_service",
          "type": "CFG",
          "blocks": [
            {
              "id": 46,
              "label": "#46\nload_dotenv()\ndb_schema, db_url = _extract_schema_from_url(os.getenv('DATABASE_URL'))\nself.scheduler = BlockingScheduler(jobstores={'default': SQLAlchemyJobStore\n    (engine=create_engine(db_url), metadata=MetaData(schema=db_schema))})\nself.scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)\nself.scheduler.start()",
              "start_line": 108,
              "end_line": 119,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "add_execution_schedule",
          "type": "CFG",
          "blocks": [
            {
              "id": 49,
              "label": "#49\njob_args = JobArgs(graph_id=graph_id, input_data=input_data, user_id=\n    user_id, graph_version=graph_version, cron=cron)\njob = self.scheduler.add_job(execute_graph, CronTrigger.from_crontab(cron),\n    kwargs=job_args.model_dump(), replace_existing=True)\nlog(f\"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")\nreturn JobInfo.from_db(job_args, job)",
              "start_line": 130,
              "end_line": 144,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete_schedule",
          "type": "CFG",
          "blocks": [
            {
              "id": 53,
              "label": "#53\njob = self.scheduler.get_job(schedule_id)\nif not job:",
              "start_line": 148,
              "end_line": 151,
              "successors": [
                {
                  "id": 54,
                  "label": "#54\nlog(f'Job {schedule_id} not found.')\nraise ValueError(f'Job #{schedule_id} not found.')",
                  "start_line": 150,
                  "end_line": 151,
                  "successors": []
                },
                {
                  "id": 55,
                  "label": "#55\njob_args = JobArgs(**job.kwargs)\nif job_args.user_id != user_id:",
                  "start_line": 153,
                  "end_line": 155,
                  "successors": [
                    {
                      "id": 57,
                      "label": "#57\nraise ValueError(\"User ID does not match the job's user ID.\")",
                      "start_line": 155,
                      "end_line": 155,
                      "successors": []
                    },
                    {
                      "id": 58,
                      "label": "#58\nlog(f'Deleting job {schedule_id}')\njob.remove()\nreturn JobInfo.from_db(job_args, job)",
                      "start_line": 157,
                      "end_line": 160,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_execution_schedules",
          "type": "CFG",
          "blocks": [
            {
              "id": 63,
              "label": "#63\nschedules = []",
              "start_line": 166,
              "end_line": 166,
              "successors": [
                {
                  "id": 64,
                  "label": "#64\nfor job in self.scheduler.get_jobs():",
                  "start_line": 167,
                  "end_line": 174,
                  "successors": [
                    {
                      "id": 65,
                      "label": "#65\njob_args = JobArgs(**job.kwargs)\nif job.next_run_time is not None and (graph_id is None or job_args.graph_id ==",
                      "start_line": 168,
                      "end_line": 174,
                      "successors": [
                        {
                          "id": 67,
                          "label": "#67\nschedules.append(JobInfo.from_db(job_args, job))",
                          "start_line": 174,
                          "end_line": 174,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 66,
                      "label": "#66\nreturn schedules",
                      "start_line": 175,
                      "end_line": 175,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}