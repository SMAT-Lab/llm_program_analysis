{
  "name": "13.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import Any, Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='unreal_speech',\n    api_key=SecretStr('mock-unreal-speech-api-key'), title=\n    'Mock Unreal Speech API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "start_line": 1,
      "end_line": 102,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "UnrealTextToSpeechBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 31,
          "end_line": 102,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='4ff1ff6d-cc40-4caa-ae69-011daa20c378', description=\n    'Converts text to speech using the Unreal Speech API', categories={\n    BlockCategory.AI, BlockCategory.TEXT}, input_schema=\n    UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.\n    Output, test_input={'text': 'This is a test of the text to speech API.',\n    'voice_id': 'Scarlett', 'credentials': TEST_CREDENTIALS_INPUT},\n    test_output=[('mp3_url', 'https://example.com/test.mp3')], test_mock={\n    'call_unreal_speech_api': lambda *args, **kwargs: {'OutputUri':\n    'https://example.com/test.mp3'}}, test_credentials=TEST_CREDENTIALS)",
              "start_line": 53,
              "end_line": 71,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "call_unreal_speech_api",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nurl = 'https://api.v7.unrealspeech.com/speech'\nheaders = {'Authorization': f'Bearer {api_key.get_secret_value()}',\n    'Content-Type': 'application/json'}\ndata = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0',\n    'Pitch': '1', 'TimestampType': 'sentence'}\nresponse = requests.post(url, headers=headers, json=data)\nreturn response.json()",
              "start_line": 77,
              "end_line": 92,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\napi_response = self.call_unreal_speech_api(credentials.api_key, input_data.\n    text, input_data.voice_id)\nyield 'mp3_url', api_response['OutputUri']",
              "start_line": 97,
              "end_line": 102,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ntext: str = SchemaField(description='The text to be converted to speech',\n    placeholder='Enter the text you want to convert to speech')\nvoice_id: str = SchemaField(description=\n    'The voice ID to use for text-to-speech conversion', placeholder=\n    'Scarlett', default='Scarlett')\ncredentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH],\n    Literal['api_key']] = CredentialsField(description=\n    'The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )",
              "start_line": 32,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nmp3_url: str = SchemaField(description='The URL of the generated MP3 file')\nerror: str = SchemaField(description='Error message if the API call failed')",
              "start_line": 49,
              "end_line": 50,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}