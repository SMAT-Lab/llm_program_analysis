{
  "name": "17.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 54,
          "label": "#54\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_point_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\nreturn len_board * len_board_column * row + column",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "exits_word",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\nif board[row][column] != word[word_index]:",
          "successors": [
            {
              "id": 8,
              "label": "#8\nreturn False",
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nif word_index == len(word) - 1:",
              "successors": [
                {
                  "id": 11,
                  "label": "#11\nreturn True",
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "#12\ntraverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\nlen_board = len(board)\nlen_board_column = len(board[0])",
                  "successors": [
                    {
                      "id": 14,
                      "label": "#14\nfor direction in traverts_directions:",
                      "successors": [
                        {
                          "id": 15,
                          "label": "#15\nnext_i = row + direction[0]\nnext_j = column + direction[1]\nif not (0 <= next_i < len_board and 0 <= next_j < len_board_column):",
                          "successors": [
                            {
                              "id": 18,
                              "label": "#18\nkey = get_point_key(len_board, len_board_column, next_i, next_j)\nif key in visited_points_set:",
                              "successors": [
                                {
                                  "id": 20,
                                  "label": "#20\nvisited_points_set.add(key)\nif exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):",
                                  "successors": [
                                    {
                                      "id": 21,
                                      "label": "#21\nreturn True",
                                      "successors": []
                                    },
                                    {
                                      "id": 22,
                                      "label": "#22\nvisited_points_set.remove(key)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 16,
                          "label": "#16\nreturn False",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "word_exists",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27\n\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\nboard_error_message = (\n    'The board should be a non empty matrix of single chars strings.')\nlen_board = len(board)\nif not isinstance(board, list) or len(board) == 0:",
          "successors": [
            {
              "id": 28,
              "label": "#28\nraise ValueError(board_error_message)",
              "successors": []
            },
            {
              "id": 29,
              "label": "#29\nfor row in board:",
              "successors": [
                {
                  "id": 31,
                  "label": "#31\nif not isinstance(row, list) or len(row) == 0:",
                  "successors": [
                    {
                      "id": 33,
                      "label": "#33\nraise ValueError(board_error_message)",
                      "successors": []
                    },
                    {
                      "id": 34,
                      "label": "#34\nfor item in row:",
                      "successors": [
                        {
                          "id": 36,
                          "label": "#36\nif not isinstance(item, str) or len(item) != 1:",
                          "successors": [
                            {
                              "id": 38,
                              "label": "#38\nraise ValueError(board_error_message)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 32,
                  "label": "#32\nif not isinstance(word, str) or len(word) == 0:",
                  "successors": [
                    {
                      "id": 41,
                      "label": "#41\nraise ValueError(\n    'The word parameter should be a string of length greater than 0.')",
                      "successors": []
                    },
                    {
                      "id": 42,
                      "label": "#42\nlen_board_column = len(board[0])",
                      "successors": [
                        {
                          "id": 44,
                          "label": "#44\nfor i in range(len_board):",
                          "successors": [
                            {
                              "id": 45,
                              "label": "#45\nfor j in range(len_board_column):",
                              "successors": [
                                {
                                  "id": 47,
                                  "label": "#47\nif exits_word(board, word, i, j, 0, {get_point_key(len_board,",
                                  "successors": [
                                    {
                                      "id": 49,
                                      "label": "#49\nreturn True",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 46,
                              "label": "#46\nreturn False",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}