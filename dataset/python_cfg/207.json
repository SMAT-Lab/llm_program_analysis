{
  "name": "207.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nWord Ladder is a classic problem in computer science.\nThe problem is to transform a start word into an end word\nby changing one letter at a time.\nEach intermediate word must be a valid word from a given list of words.\nThe goal is to find a transformation sequence\nfrom the start word to the end word.\n\nWikipedia: https://en.wikipedia.org/wiki/Word_ladder\n\"\"\"\nimport string",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Helper function to perform backtracking to find the transformation\n    from the current_word to the end_word.\n\n    Parameters:\n    current_word (str): The current word in the transformation sequence.\n    path (list[str]): The list of transformations from begin_word to current_word.\n    end_word (str): The target word for transformation.\n    word_set (set[str]): The set of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid\n                transformation from current_word to end_word.\n\n    Example:\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\n    []\n\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\nif current_word == end_word:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nreturn path",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nfor i in range(len(current_word)):",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nfor c in string.ascii_lowercase:",
                  "successors": [
                    {
                      "id": 9,
                      "label": "#9\ntransformed_word = current_word[:i] + c + current_word[i + 1:]\nif transformed_word in word_set:",
                      "successors": [
                        {
                          "id": 11,
                          "label": "#11\nword_set.remove(transformed_word)\nresult = backtrack(transformed_word, [*path, transformed_word], end_word,\n    word_set)\nif result:",
                          "successors": [
                            {
                              "id": 13,
                              "label": "#13\nreturn result",
                              "successors": []
                            },
                            {
                              "id": 14,
                              "label": "#14\nword_set.add(transformed_word)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "#8\nreturn []",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "word_ladder",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19\n\"\"\"\n    Solve the Word Ladder problem using Backtracking and return\n    the list of transformations from begin_word to end_word.\n\n    Parameters:\n    begin_word (str): The word from which the transformation starts.\n    end_word (str): The target word for transformation.\n    word_list (list[str]): The list of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid transformation.\n\n    Example:\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\n    []\n\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\nif end_word not in word_set:",
          "successors": [
            {
              "id": 20,
              "label": "#20\nreturn []",
              "successors": []
            },
            {
              "id": 21,
              "label": "#21\nreturn backtrack(begin_word, [begin_word], end_word, word_set)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}