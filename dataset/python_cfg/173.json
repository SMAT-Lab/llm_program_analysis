{
  "name": "173.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom mrjob.job import MRJob\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 30,
          "label": "#30\nSalesRanker.run()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "SalesRanker",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "within_past_week",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\n\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\n\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\ntimestamp, product_id, category, quantity = line.split('\\t')\nif self.within_past_week(timestamp):",
              "successors": [
                {
                  "id": 9,
                  "label": "#9\nyield (category, product_id), quantity",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "reducer",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\n\"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\nyield key, sum(values)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mapper_sort",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\n\"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\ncategory, product_id = key\nquantity = value\nyield (category, quantity), product_id",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "reducer_identity",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nyield key, value",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "steps",
          "type": "CFG",
          "blocks": [
            {
              "id": 26,
              "label": "#26\n\"\"\"Run the map and reduce steps.\"\"\"\nreturn [self.mr(mapper=self.mapper, reducer=self.reducer), self.mr(mapper=\n    self.mapper_sort, reducer=self.reducer_identity)]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}