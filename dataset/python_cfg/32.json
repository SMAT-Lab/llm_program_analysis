{
  "name": "32.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport datetime\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.testclient\nimport prisma.enums\nimport pytest_mock\nimport backend.server.v2.store.model\nimport backend.server.v2.store.routes\napp = fastapi.FastAPI()\napp.include_router(backend.server.v2.store.routes.router)\nclient = fastapi.testclient.TestClient(app)\napp.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware\n    ] = override_auth_middleware\napp.dependency_overrides[autogpt_libs.auth.depends.get_user_id\n    ] = override_get_user_id",
      "start_line": 1,
      "end_line": 552,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "override_auth_middleware",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Override auth middleware for testing\"\"\"\nreturn {'sub': 'test-user-id'}",
          "start_line": 20,
          "end_line": 21,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "override_get_user_id",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"Override get_user_id for testing\"\"\"\nreturn 'test-user-id'",
          "start_line": 25,
          "end_line": 26,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_defaults",
      "type": "CFG",
      "blocks": [
        {
          "id": 11,
          "label": "#11\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[],\n    pagination=backend.server.v2.store.model.Pagination(current_page=0,\n    total_items=0, total_pages=0, page_size=10))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents')\nassert response.status_code == 200",
          "start_line": 36,
          "end_line": 48,
          "successors": [
            {
              "id": 13,
              "label": "#13\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert data.pagination.total_pages == 0",
              "start_line": 50,
              "end_line": 53,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nassert data.agents == []",
                  "start_line": 54,
                  "end_line": 54,
                  "successors": [
                    {
                      "id": 17,
                      "label": "#17\nmock_db_call.assert_called_once_with(featured=False, creator=None,\n    sorted_by=None, search_query=None, category=None, page=1, page_size=20)",
                      "start_line": 55,
                      "end_line": 63,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_featured",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[\n    backend.server.v2.store.model.StoreAgent(slug='featured-agent',\n    agent_name='Featured Agent', agent_image='featured.jpg', creator=\n    'creator1', creator_avatar='avatar1.jpg', sub_heading=\n    'Featured agent subheading', description='Featured agent description',\n    runs=100, rating=4.5)], pagination=backend.server.v2.store.model.\n    Pagination(current_page=1, total_items=1, total_pages=1, page_size=20))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents?featured=true')\nassert response.status_code == 200",
          "start_line": 67,
          "end_line": 91,
          "successors": [
            {
              "id": 22,
              "label": "#22\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert len(data.agents) == 1",
              "start_line": 92,
              "end_line": 95,
              "successors": [
                {
                  "id": 24,
                  "label": "#24\nassert data.agents[0].slug == 'featured-agent'",
                  "start_line": 96,
                  "end_line": 96,
                  "successors": [
                    {
                      "id": 26,
                      "label": "#26\nmock_db_call.assert_called_once_with(featured=True, creator=None, sorted_by\n    =None, search_query=None, category=None, page=1, page_size=20)",
                      "start_line": 97,
                      "end_line": 105,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_by_creator",
      "type": "CFG",
      "blocks": [
        {
          "id": 29,
          "label": "#29\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[\n    backend.server.v2.store.model.StoreAgent(slug='creator-agent',\n    agent_name='Creator Agent', agent_image='agent.jpg', creator=\n    'specific-creator', creator_avatar='avatar.jpg', sub_heading=\n    'Creator agent subheading', description='Creator agent description',\n    runs=50, rating=4.0)], pagination=backend.server.v2.store.model.\n    Pagination(current_page=1, total_items=1, total_pages=1, page_size=20))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents?creator=specific-creator')\nassert response.status_code == 200",
          "start_line": 109,
          "end_line": 133,
          "successors": [
            {
              "id": 31,
              "label": "#31\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert len(data.agents) == 1",
              "start_line": 134,
              "end_line": 137,
              "successors": [
                {
                  "id": 33,
                  "label": "#33\nassert data.agents[0].creator == 'specific-creator'",
                  "start_line": 138,
                  "end_line": 138,
                  "successors": [
                    {
                      "id": 35,
                      "label": "#35\nmock_db_call.assert_called_once_with(featured=False, creator=\n    'specific-creator', sorted_by=None, search_query=None, category=None,\n    page=1, page_size=20)",
                      "start_line": 139,
                      "end_line": 147,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_sorted",
      "type": "CFG",
      "blocks": [
        {
          "id": 38,
          "label": "#38\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[\n    backend.server.v2.store.model.StoreAgent(slug='top-agent', agent_name=\n    'Top Agent', agent_image='top.jpg', creator='creator1', creator_avatar=\n    'avatar1.jpg', sub_heading='Top agent subheading', description=\n    'Top agent description', runs=1000, rating=5.0)], pagination=backend.\n    server.v2.store.model.Pagination(current_page=1, total_items=1,\n    total_pages=1, page_size=20))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents?sorted_by=runs')\nassert response.status_code == 200",
          "start_line": 151,
          "end_line": 175,
          "successors": [
            {
              "id": 40,
              "label": "#40\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert len(data.agents) == 1",
              "start_line": 176,
              "end_line": 179,
              "successors": [
                {
                  "id": 42,
                  "label": "#42\nassert data.agents[0].runs == 1000",
                  "start_line": 180,
                  "end_line": 180,
                  "successors": [
                    {
                      "id": 44,
                      "label": "#44\nmock_db_call.assert_called_once_with(featured=False, creator=None,\n    sorted_by='runs', search_query=None, category=None, page=1, page_size=20)",
                      "start_line": 181,
                      "end_line": 189,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_search",
      "type": "CFG",
      "blocks": [
        {
          "id": 47,
          "label": "#47\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[\n    backend.server.v2.store.model.StoreAgent(slug='search-agent',\n    agent_name='Search Agent', agent_image='search.jpg', creator='creator1',\n    creator_avatar='avatar1.jpg', sub_heading='Search agent subheading',\n    description='Specific search term description', runs=75, rating=4.2)],\n    pagination=backend.server.v2.store.model.Pagination(current_page=1,\n    total_items=1, total_pages=1, page_size=20))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents?search_query=specific')\nassert response.status_code == 200",
          "start_line": 193,
          "end_line": 217,
          "successors": [
            {
              "id": 49,
              "label": "#49\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert len(data.agents) == 1",
              "start_line": 218,
              "end_line": 221,
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nassert 'specific' in data.agents[0].description.lower()",
                  "start_line": 222,
                  "end_line": 222,
                  "successors": [
                    {
                      "id": 53,
                      "label": "#53\nmock_db_call.assert_called_once_with(featured=False, creator=None,\n    sorted_by=None, search_query='specific', category=None, page=1,\n    page_size=20)",
                      "start_line": 223,
                      "end_line": 231,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_category",
      "type": "CFG",
      "blocks": [
        {
          "id": 56,
          "label": "#56\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[\n    backend.server.v2.store.model.StoreAgent(slug='category-agent',\n    agent_name='Category Agent', agent_image='category.jpg', creator=\n    'creator1', creator_avatar='avatar1.jpg', sub_heading=\n    'Category agent subheading', description='Category agent description',\n    runs=60, rating=4.1)], pagination=backend.server.v2.store.model.\n    Pagination(current_page=1, total_items=1, total_pages=1, page_size=20))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents?category=test-category')\nassert response.status_code == 200",
          "start_line": 235,
          "end_line": 259,
          "successors": [
            {
              "id": 58,
              "label": "#58\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert len(data.agents) == 1",
              "start_line": 260,
              "end_line": 263,
              "successors": [
                {
                  "id": 60,
                  "label": "#60\nmock_db_call.assert_called_once_with(featured=False, creator=None,\n    sorted_by=None, search_query=None, category='test-category', page=1,\n    page_size=20)",
                  "start_line": 264,
                  "end_line": 272,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_pagination",
      "type": "CFG",
      "blocks": [
        {
          "id": 63,
          "label": "#63\nmocked_value = backend.server.v2.store.model.StoreAgentsResponse(agents=[\n    backend.server.v2.store.model.StoreAgent(slug=f'agent-{i}', agent_name=\n    f'Agent {i}', agent_image=f'agent{i}.jpg', creator='creator1',\n    creator_avatar='avatar1.jpg', sub_heading=f'Agent {i} subheading',\n    description=f'Agent {i} description', runs=i * 10, rating=4.0) for i in\n    range(5)], pagination=backend.server.v2.store.model.Pagination(\n    current_page=2, total_items=15, total_pages=3, page_size=5))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents?page=2&page_size=5')\nassert response.status_code == 200",
          "start_line": 276,
          "end_line": 301,
          "successors": [
            {
              "id": 65,
              "label": "#65\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json())\nassert len(data.agents) == 5",
              "start_line": 302,
              "end_line": 305,
              "successors": [
                {
                  "id": 67,
                  "label": "#67\nassert data.pagination.current_page == 2",
                  "start_line": 306,
                  "end_line": 306,
                  "successors": [
                    {
                      "id": 69,
                      "label": "#69\nassert data.pagination.page_size == 5",
                      "start_line": 307,
                      "end_line": 307,
                      "successors": [
                        {
                          "id": 71,
                          "label": "#71\nmock_db_call.assert_called_once_with(featured=False, creator=None,\n    sorted_by=None, search_query=None, category=None, page=2, page_size=5)",
                          "start_line": 308,
                          "end_line": 316,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agents_malformed_request",
      "type": "CFG",
      "blocks": [
        {
          "id": 74,
          "label": "#74\nresponse = client.get('/agents?page=-1')\nassert response.status_code == 422",
          "start_line": 321,
          "end_line": 322,
          "successors": [
            {
              "id": 76,
              "label": "#76\nresponse = client.get('/agents?page_size=0')\nassert response.status_code == 422",
              "start_line": 325,
              "end_line": 326,
              "successors": [
                {
                  "id": 78,
                  "label": "#78\nresponse = client.get('/agents?page=abc&page_size=def')\nassert response.status_code == 422",
                  "start_line": 329,
                  "end_line": 330,
                  "successors": [
                    {
                      "id": 80,
                      "label": "#80\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_agents')\nmock_db_call.assert_not_called()",
                      "start_line": 333,
                      "end_line": 334,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_agent_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 83,
          "label": "#83\nmocked_value = backend.server.v2.store.model.StoreAgentDetails(\n    store_listing_version_id='test-version-id', slug='test-agent',\n    agent_name='Test Agent', agent_video='video.mp4', agent_image=[\n    'image1.jpg', 'image2.jpg'], creator='creator1', creator_avatar=\n    'avatar1.jpg', sub_heading='Test agent subheading', description=\n    'Test agent description', categories=['category1', 'category2'], runs=\n    100, rating=4.5, versions=['1.0.0', '1.1.0'], last_updated=datetime.\n    datetime.now())\nmock_db_call = mocker.patch(\n    'backend.server.v2.store.db.get_store_agent_details')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/agents/creator1/test-agent')\nassert response.status_code == 200",
          "start_line": 338,
          "end_line": 358,
          "successors": [
            {
              "id": 85,
              "label": "#85\ndata = backend.server.v2.store.model.StoreAgentDetails.model_validate(response\n    .json())\nassert data.agent_name == 'Test Agent'",
              "start_line": 360,
              "end_line": 363,
              "successors": [
                {
                  "id": 87,
                  "label": "#87\nassert data.creator == 'creator1'",
                  "start_line": 364,
                  "end_line": 364,
                  "successors": [
                    {
                      "id": 89,
                      "label": "#89\nmock_db_call.assert_called_once_with(username='creator1', agent_name=\n    'test-agent')",
                      "start_line": 365,
                      "end_line": 365,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_creators_defaults",
      "type": "CFG",
      "blocks": [
        {
          "id": 92,
          "label": "#92\nmocked_value = backend.server.v2.store.model.CreatorsResponse(creators=[],\n    pagination=backend.server.v2.store.model.Pagination(current_page=0,\n    total_items=0, total_pages=0, page_size=10))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_creators')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/creators')\nassert response.status_code == 200",
          "start_line": 369,
          "end_line": 382,
          "successors": [
            {
              "id": 94,
              "label": "#94\ndata = backend.server.v2.store.model.CreatorsResponse.model_validate(response\n    .json())\nassert data.pagination.total_pages == 0",
              "start_line": 384,
              "end_line": 387,
              "successors": [
                {
                  "id": 96,
                  "label": "#96\nassert data.creators == []",
                  "start_line": 388,
                  "end_line": 388,
                  "successors": [
                    {
                      "id": 98,
                      "label": "#98\nmock_db_call.assert_called_once_with(featured=False, search_query=None,\n    sorted_by=None, page=1, page_size=20)",
                      "start_line": 389,
                      "end_line": 391,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_creators_pagination",
      "type": "CFG",
      "blocks": [
        {
          "id": 101,
          "label": "#101\nmocked_value = backend.server.v2.store.model.CreatorsResponse(creators=[\n    backend.server.v2.store.model.Creator(name=f'Creator {i}', username=\n    f'creator{i}', description=f'Creator {i} description', avatar_url=\n    f'avatar{i}.jpg', num_agents=1, agent_rating=4.5, agent_runs=100,\n    is_featured=False) for i in range(5)], pagination=backend.server.v2.\n    store.model.Pagination(current_page=2, total_items=15, total_pages=3,\n    page_size=5))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_creators')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/creators?page=2&page_size=5')\nassert response.status_code == 200",
          "start_line": 395,
          "end_line": 420,
          "successors": [
            {
              "id": 103,
              "label": "#103\ndata = backend.server.v2.store.model.CreatorsResponse.model_validate(response\n    .json())\nassert len(data.creators) == 5",
              "start_line": 422,
              "end_line": 425,
              "successors": [
                {
                  "id": 105,
                  "label": "#105\nassert data.pagination.current_page == 2",
                  "start_line": 426,
                  "end_line": 426,
                  "successors": [
                    {
                      "id": 107,
                      "label": "#107\nassert data.pagination.page_size == 5",
                      "start_line": 427,
                      "end_line": 427,
                      "successors": [
                        {
                          "id": 109,
                          "label": "#109\nmock_db_call.assert_called_once_with(featured=False, search_query=None,\n    sorted_by=None, page=2, page_size=5)",
                          "start_line": 428,
                          "end_line": 430,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_creators_malformed_request",
      "type": "CFG",
      "blocks": [
        {
          "id": 112,
          "label": "#112\nresponse = client.get('/creators?page=-1')\nassert response.status_code == 422",
          "start_line": 435,
          "end_line": 436,
          "successors": [
            {
              "id": 114,
              "label": "#114\nresponse = client.get('/creators?page_size=0')\nassert response.status_code == 422",
              "start_line": 439,
              "end_line": 440,
              "successors": [
                {
                  "id": 116,
                  "label": "#116\nresponse = client.get('/creators?page=abc&page_size=def')\nassert response.status_code == 422",
                  "start_line": 443,
                  "end_line": 444,
                  "successors": [
                    {
                      "id": 118,
                      "label": "#118\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_creators')\nmock_db_call.assert_not_called()",
                      "start_line": 447,
                      "end_line": 448,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_creator_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 121,
          "label": "#121\nmocked_value = backend.server.v2.store.model.CreatorDetails(name=\n    'Test User', username='creator1', description=\n    'Test creator description', links=['link1.com', 'link2.com'],\n    avatar_url='avatar.jpg', agent_rating=4.8, agent_runs=1000,\n    top_categories=['category1', 'category2'])\nmock_db_call = mocker.patch(\n    'backend.server.v2.store.db.get_store_creator_details')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/creator/creator1')\nassert response.status_code == 200",
          "start_line": 452,
          "end_line": 466,
          "successors": [
            {
              "id": 123,
              "label": "#123\ndata = backend.server.v2.store.model.CreatorDetails.model_validate(response\n    .json())\nassert data.username == 'creator1'",
              "start_line": 468,
              "end_line": 469,
              "successors": [
                {
                  "id": 125,
                  "label": "#125\nassert data.name == 'Test User'",
                  "start_line": 470,
                  "end_line": 470,
                  "successors": [
                    {
                      "id": 127,
                      "label": "#127\nmock_db_call.assert_called_once_with(username='creator1')",
                      "start_line": 471,
                      "end_line": 471,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_submissions_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 130,
          "label": "#130\nmocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n    submissions=[backend.server.v2.store.model.StoreSubmission(name=\n    'Test Agent', description='Test agent description', image_urls=[\n    'test.jpg'], date_submitted=datetime.datetime.now(), status=prisma.\n    enums.SubmissionStatus.APPROVED, runs=50, rating=4.2, agent_id=\n    'test-agent-id', agent_version=1, sub_heading='Test agent subheading',\n    slug='test-agent')], pagination=backend.server.v2.store.model.\n    Pagination(current_page=1, total_items=1, total_pages=1, page_size=20))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_submissions')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/submissions')\nassert response.status_code == 200",
          "start_line": 475,
          "end_line": 502,
          "successors": [
            {
              "id": 132,
              "label": "#132\ndata = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n    response.json())\nassert len(data.submissions) == 1",
              "start_line": 504,
              "end_line": 507,
              "successors": [
                {
                  "id": 134,
                  "label": "#134\nassert data.submissions[0].name == 'Test Agent'",
                  "start_line": 508,
                  "end_line": 508,
                  "successors": [
                    {
                      "id": 136,
                      "label": "#136\nassert data.pagination.current_page == 1",
                      "start_line": 509,
                      "end_line": 509,
                      "successors": [
                        {
                          "id": 138,
                          "label": "#138\nmock_db_call.assert_called_once_with(user_id='test-user-id', page=1,\n    page_size=20)",
                          "start_line": 510,
                          "end_line": 510,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_submissions_pagination",
      "type": "CFG",
      "blocks": [
        {
          "id": 141,
          "label": "#141\nmocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n    submissions=[], pagination=backend.server.v2.store.model.Pagination(\n    current_page=2, total_items=10, total_pages=2, page_size=5))\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_submissions')\nmock_db_call.return_value = mocked_value\nresponse = client.get('/submissions?page=2&page_size=5')\nassert response.status_code == 200",
          "start_line": 514,
          "end_line": 527,
          "successors": [
            {
              "id": 143,
              "label": "#143\ndata = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n    response.json())\nassert data.pagination.current_page == 2",
              "start_line": 529,
              "end_line": 532,
              "successors": [
                {
                  "id": 145,
                  "label": "#145\nassert data.pagination.page_size == 5",
                  "start_line": 533,
                  "end_line": 533,
                  "successors": [
                    {
                      "id": 147,
                      "label": "#147\nmock_db_call.assert_called_once_with(user_id='test-user-id', page=2,\n    page_size=5)",
                      "start_line": 534,
                      "end_line": 534,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_submissions_malformed_request",
      "type": "CFG",
      "blocks": [
        {
          "id": 150,
          "label": "#150\nresponse = client.get('/submissions?page=-1')\nassert response.status_code == 422",
          "start_line": 539,
          "end_line": 540,
          "successors": [
            {
              "id": 152,
              "label": "#152\nresponse = client.get('/submissions?page_size=0')\nassert response.status_code == 422",
              "start_line": 543,
              "end_line": 544,
              "successors": [
                {
                  "id": 154,
                  "label": "#154\nresponse = client.get('/submissions?page=abc&page_size=def')\nassert response.status_code == 422",
                  "start_line": 547,
                  "end_line": 548,
                  "successors": [
                    {
                      "id": 156,
                      "label": "#156\nmock_db_call = mocker.patch('backend.server.v2.store.db.get_store_submissions')\nmock_db_call.assert_not_called()",
                      "start_line": 551,
                      "end_line": 552,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}