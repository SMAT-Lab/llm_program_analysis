{
  "name": "109.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "start_line": 6,
      "end_line": 109,
      "successors": [
        {
          "id": 29,
          "label": "#29\nimport doctest\ndoctest.testmod()",
          "start_line": 107,
          "end_line": 109,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "logical_left_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n    ValueError: both inputs must be positive integers\n    \"\"\"\nif number < 0 or shift_amount < 0:",
          "start_line": 7,
          "end_line": 29,
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('both inputs must be positive integers')",
              "start_line": 29,
              "end_line": 29,
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nbinary_number = str(bin(number))\nbinary_number += '0' * shift_amount\nreturn binary_number",
              "start_line": 31,
              "end_line": 33,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "logical_right_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 10,
          "label": "#10\n\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n    ValueError: both inputs must be positive integers\n    \"\"\"\nif number < 0 or shift_amount < 0:",
          "start_line": 37,
          "end_line": 59,
          "successors": [
            {
              "id": 11,
              "label": "#11\nraise ValueError('both inputs must be positive integers')",
              "start_line": 59,
              "end_line": 59,
              "successors": []
            },
            {
              "id": 12,
              "label": "#12\nbinary_number = str(bin(number))[2:]\nif shift_amount >= len(binary_number):",
              "start_line": 61,
              "end_line": 63,
              "successors": [
                {
                  "id": 14,
                  "label": "#14\nreturn '0b0'",
                  "start_line": 63,
                  "end_line": 63,
                  "successors": []
                },
                {
                  "id": 15,
                  "label": "#15\nshifted_binary_number = binary_number[:len(binary_number) - shift_amount]\nreturn '0b' + shifted_binary_number",
                  "start_line": 64,
                  "end_line": 65,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "arithmetic_right_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\n\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\nif number >= 0:",
          "start_line": 69,
          "end_line": 95,
          "successors": [
            {
              "id": 21,
              "label": "#21\nbinary_number = '0' + str(bin(number)).strip('-')[2:]",
              "start_line": 89,
              "end_line": 89,
              "successors": [
                {
                  "id": 22,
                  "label": "#22\nif shift_amount >= len(binary_number):",
                  "start_line": 97,
                  "end_line": 98,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nreturn '0b' + binary_number[0] * len(binary_number)",
                      "start_line": 98,
                      "end_line": 98,
                      "successors": []
                    },
                    {
                      "id": 25,
                      "label": "#25\nreturn '0b' + binary_number[0] * shift_amount + binary_number[:len(\n    binary_number) - shift_amount]",
                      "start_line": 99,
                      "end_line": 103,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 23,
              "label": "#23\nbinary_number_length = len(bin(number)[3:])\nbinary_number = bin(abs(number) - (1 << binary_number_length))[3:]\nbinary_number = '1' + '0' * (binary_number_length - len(binary_number)\n    ) + binary_number",
              "start_line": 91,
              "end_line": 95,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}