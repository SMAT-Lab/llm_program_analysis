{
  "name": "93.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "start_line": 4,
      "end_line": 131,
      "successors": [
        {
          "id": 57,
          "label": "#57\nPUZZLE = [([''] * 3) for _ in range(3)]\nWORDS = ['cat', 'dog', 'car']\nif solve_crossword(PUZZLE, WORDS):",
          "start_line": 123,
          "end_line": 131,
          "successors": [
            {
              "id": 59,
              "label": "#59\nprint('Solution found:')",
              "start_line": 127,
              "end_line": 127,
              "successors": [
                {
                  "id": 62,
                  "label": "#62\nfor row in PUZZLE:",
                  "start_line": 128,
                  "end_line": 129,
                  "successors": [
                    {
                      "id": 63,
                      "label": "#63\nprint(' '.join(row))",
                      "start_line": 129,
                      "end_line": 129,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 61,
              "label": "#61\nprint('No solution found:')",
              "start_line": 131,
              "end_line": 131,
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_valid",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"",
          "start_line": 7,
          "end_line": 26,
          "successors": [
            {
              "id": 4,
              "label": "#4\nfor i in range(len(word)):",
              "start_line": 27,
              "end_line": 32,
              "successors": [
                {
                  "id": 5,
                  "label": "#5\nif vertical:",
                  "start_line": 28,
                  "end_line": 32,
                  "successors": [
                    {
                      "id": 7,
                      "label": "#7\nif row + i >= len(puzzle) or puzzle[row + i][col] != '':",
                      "start_line": 29,
                      "end_line": 30,
                      "successors": [
                        {
                          "id": 13,
                          "label": "#13\nreturn False",
                          "start_line": 30,
                          "end_line": 30,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "#9\nif col + i >= len(puzzle[0]) or puzzle[row][col + i] != '':",
                      "start_line": 31,
                      "end_line": 32,
                      "successors": [
                        {
                          "id": 10,
                          "label": "#10\nreturn False",
                          "start_line": 32,
                          "end_line": 32,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "#6\nreturn True",
                  "start_line": 33,
                  "end_line": 33,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "place_word",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19\n\"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"",
          "start_line": 39,
          "end_line": 51,
          "successors": [
            {
              "id": 20,
              "label": "#20\nfor i, char in enumerate(word):",
              "start_line": 52,
              "end_line": 56,
              "successors": [
                {
                  "id": 21,
                  "label": "#21\nif vertical:",
                  "start_line": 53,
                  "end_line": 56,
                  "successors": [
                    {
                      "id": 23,
                      "label": "#23\npuzzle[row + i][col] = char",
                      "start_line": 54,
                      "end_line": 54,
                      "successors": []
                    },
                    {
                      "id": 25,
                      "label": "#25\npuzzle[row][col + i] = char",
                      "start_line": 56,
                      "end_line": 56,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "remove_word",
      "type": "CFG",
      "blocks": [
        {
          "id": 28,
          "label": "#28\n\"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"",
          "start_line": 62,
          "end_line": 74,
          "successors": [
            {
              "id": 29,
              "label": "#29\nfor i in range(len(word)):",
              "start_line": 75,
              "end_line": 79,
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nif vertical:",
                  "start_line": 76,
                  "end_line": 79,
                  "successors": [
                    {
                      "id": 32,
                      "label": "#32\npuzzle[row + i][col] = ''",
                      "start_line": 77,
                      "end_line": 77,
                      "successors": []
                    },
                    {
                      "id": 34,
                      "label": "#34\npuzzle[row][col + i] = ''",
                      "start_line": 79,
                      "end_line": 79,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "solve_crossword",
      "type": "CFG",
      "blocks": [
        {
          "id": 37,
          "label": "#37\n\"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"",
          "start_line": 83,
          "end_line": 105,
          "successors": [
            {
              "id": 38,
              "label": "#38\nfor row in range(len(puzzle)):",
              "start_line": 106,
              "end_line": 118,
              "successors": [
                {
                  "id": 39,
                  "label": "#39\nfor col in range(len(puzzle[0])):",
                  "start_line": 107,
                  "end_line": 118,
                  "successors": [
                    {
                      "id": 41,
                      "label": "#41\nif puzzle[row][col] == '':",
                      "start_line": 108,
                      "end_line": 118,
                      "successors": [
                        {
                          "id": 43,
                          "label": "#43\nfor word in words:",
                          "start_line": 109,
                          "end_line": 117,
                          "successors": [
                            {
                              "id": 45,
                              "label": "#45\nfor vertical in [True, False]:",
                              "start_line": 110,
                              "end_line": 117,
                              "successors": [
                                {
                                  "id": 47,
                                  "label": "#47\nif is_valid(puzzle, word, row, col, vertical):",
                                  "start_line": 111,
                                  "end_line": 117,
                                  "successors": [
                                    {
                                      "id": 49,
                                      "label": "#49\nplace_word(puzzle, word, row, col, vertical)\nwords.remove(word)\nif solve_crossword(puzzle, words):",
                                      "start_line": 112,
                                      "end_line": 115,
                                      "successors": [
                                        {
                                          "id": 51,
                                          "label": "#51\nreturn True",
                                          "start_line": 115,
                                          "end_line": 115,
                                          "successors": []
                                        },
                                        {
                                          "id": 52,
                                          "label": "#52\nwords.append(word)\nremove_word(puzzle, word, row, col, vertical)",
                                          "start_line": 116,
                                          "end_line": 117,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 46,
                              "label": "#46\nreturn False",
                              "start_line": 118,
                              "end_line": 118,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 40,
                  "label": "#40\nreturn True",
                  "start_line": 119,
                  "end_line": 119,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}