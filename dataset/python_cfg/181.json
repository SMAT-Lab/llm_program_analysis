{
  "name": "181.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport secrets\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar, Generic, Optional, TypeVar\nfrom uuid import uuid4\nfrom fastapi import Request\nfrom strenum import StrEnum\nfrom backend.data import integrations\nfrom backend.data.model import Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Config\nlogger = logging.getLogger(__name__)\napp_config = Config()\nWT = TypeVar('WT', bound=StrEnum)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "BaseWebhooksManager",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nPROVIDER_NAME: ClassVar[ProviderName]\nWebhookType: WT",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "get_suitable_auto_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nif not app_config.platform_base_url:",
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nraise MissingConfigError(\n    'PLATFORM_BASE_URL must be set to use Webhook functionality')",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "#7\nif (webhook := await integrations.find_webhook_by_credentials_and_props(",
                  "successors": [
                    {
                      "id": 9,
                      "label": "#9\nreturn webhook",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "#10\nreturn await self._create_webhook(user_id, webhook_type, events, resource,\n    credentials)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_manual_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nif (current_webhook := await integrations.find_webhook_by_graph_and_props(",
              "successors": [
                {
                  "id": 16,
                  "label": "#16\nreturn current_webhook",
                  "successors": []
                },
                {
                  "id": 17,
                  "label": "#17\nreturn await self._create_webhook(user_id, webhook_type, events, register=False\n    )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "prune_webhook_if_dangling",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nwebhook = await integrations.get_webhook(webhook_id)",
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nif webhook.attached_nodes is None:",
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nraise ValueError('Error retrieving webhook including attached nodes')",
                      "successors": []
                    },
                    {
                      "id": 25,
                      "label": "#25\nif webhook.attached_nodes:",
                      "successors": [
                        {
                          "id": 27,
                          "label": "#27\nreturn False",
                          "successors": []
                        },
                        {
                          "id": 28,
                          "label": "#28\nif credentials:",
                          "successors": [
                            {
                              "id": 30,
                              "label": "#30\nawait self._deregister_webhook(webhook, credentials)",
                              "successors": [
                                {
                                  "id": 31,
                                  "label": "#31\nawait integrations.delete_webhook(webhook.id)",
                                  "successors": [
                                    {
                                      "id": 33,
                                      "label": "#33\nreturn True",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "validate_payload",
          "type": "CFG",
          "blocks": [
            {
              "id": 37,
              "label": "#37\n\"\"\"\n        Validates an incoming webhook request and returns its payload and type.\n\n        Params:\n            webhook: Object representing the configured webhook and its properties in our system.\n            request: Incoming FastAPI `Request`\n\n        Returns:\n            dict: The validated payload\n            str: The event type associated with the payload\n        \"\"\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "trigger_ping",
          "type": "CFG",
          "blocks": [
            {
              "id": 40,
              "label": "#40\n\"\"\"\n        Triggers a ping to the given webhook.\n\n        Raises:\n            NotImplementedError: if the provider doesn't support pinging\n        \"\"\"\nraise NotImplementedError(f\"{self.__class__.__name__} doesn't support pinging\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_register_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 44,
              "label": "#44\n\"\"\"\n        Registers a new webhook with the provider.\n\n        Params:\n            credentials: The credentials with which to create the webhook\n            webhook_type: The provider-specific webhook type to create\n            resource: The resource to receive events for\n            events: The events to subscribe to\n            ingress_url: The ingress URL for webhook payloads\n            secret: Secret used to verify webhook payloads\n\n        Returns:\n            str: Webhook ID assigned by the provider\n            config: Provider-specific configuration for the webhook\n        \"\"\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_deregister_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 47,
              "label": "#47",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_create_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 50,
              "label": "#50\nif not app_config.platform_base_url:",
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nraise MissingConfigError(\n    'PLATFORM_BASE_URL must be set to use Webhook functionality')",
                  "successors": []
                },
                {
                  "id": 52,
                  "label": "#52\nid = str(uuid4())\nsecret = secrets.token_hex(32)\nprovider_name = self.PROVIDER_NAME\ningress_url = webhook_ingress_url(provider_name=provider_name, webhook_id=id)\nif register:",
                  "successors": [
                    {
                      "id": 54,
                      "label": "#54\nif not credentials:",
                      "successors": [
                        {
                          "id": 57,
                          "label": "#57\nraise TypeError('credentials are required if register = True')",
                          "successors": []
                        },
                        {
                          "id": 58,
                          "label": "#58\nprovider_webhook_id, config = await self._register_webhook(credentials,\n    webhook_type, resource, events, ingress_url, secret)",
                          "successors": [
                            {
                              "id": 55,
                              "label": "#55\nreturn await integrations.create_webhook(integrations.Webhook(id=id,\n    user_id=user_id, provider=provider_name, credentials_id=credentials.id if\n    credentials else '', webhook_type=webhook_type, resource=resource,\n    events=events, provider_webhook_id=provider_webhook_id, config=config,\n    secret=secret))",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 56,
                      "label": "#56\nprovider_webhook_id, config = '', {}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}