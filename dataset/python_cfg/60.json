{
  "name": "60.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import BaseSettings, JsonConfigSettingsSource, PydanticBaseSettingsSource, SettingsConfigDict\nfrom backend.util.data import get_data_path\nT = TypeVar('T', bound=BaseSettings)",
      "start_line": 1,
      "end_line": 328,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "AppEnvironment",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nLOCAL = 'local'\nDEVELOPMENT = 'dev'\nPRODUCTION = 'prod'",
          "start_line": 20,
          "end_line": 22,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "BehaveAs",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\nLOCAL = 'local'\nCLOUD = 'cloud'",
          "start_line": 26,
          "end_line": 27,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "UpdateTrackingModel",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\n_updated_fields: Set[str] = PrivateAttr(default_factory=set)",
          "start_line": 31,
          "end_line": 50,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__setattr__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nif name in self.model_fields:",
              "start_line": 34,
              "end_line": 35,
              "successors": [
                {
                  "id": 12,
                  "label": "#12\nself._updated_fields.add(name)",
                  "start_line": 35,
                  "end_line": 35,
                  "successors": [
                    {
                      "id": 13,
                      "label": "#13\nsuper().__setattr__(name, value)",
                      "start_line": 36,
                      "end_line": 36,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mark_updated",
          "type": "CFG",
          "blocks": [
            {
              "id": 16,
              "label": "#16\nif field_name in self.model_fields:",
              "start_line": 39,
              "end_line": 40,
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nself._updated_fields.add(field_name)",
                  "start_line": 40,
                  "end_line": 40,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "clear_updates",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\nself._updated_fields.clear()",
              "start_line": 43,
              "end_line": 43,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_updates",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nreturn {field: getattr(self, field) for field in self._updated_fields}",
              "start_line": 46,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "updated_fields",
          "type": "CFG",
          "blocks": [
            {
              "id": 28,
              "label": "#28\nreturn self._updated_fields",
              "start_line": 50,
              "end_line": 50,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Config",
      "type": "CFG",
      "blocks": [
        {
          "id": 33,
          "label": "#33\n\"\"\"Config for the server.\"\"\"\nnum_graph_workers: int = Field(default=10, ge=1, le=1000, description=\n    'Maximum number of workers to use for graph execution.')\nnum_node_workers: int = Field(default=5, ge=1, le=1000, description=\n    'Maximum number of workers to use for node execution within a single graph.'\n    )\npyro_host: str = Field(default='localhost', description=\n    'The default hostname of the Pyro server.')\npyro_client_comm_timeout: float = Field(default=15, description=\n    'The default timeout in seconds, for Pyro client connections.')\npyro_client_comm_retry: int = Field(default=3, description=\n    'The default number of retries for Pyro client connections.')\nenable_auth: bool = Field(default=True, description=\n    'If authentication is enabled or not')\nenable_credit: str = Field(default='false', description=\n    'If user credit system is enabled or not')\nnum_user_credits_refill: int = Field(default=1500, description=\n    'Number of credits to refill for each user')\nmodel_config = SettingsConfigDict(env_file='.env', extra='allow')\nwebsocket_server_host: str = Field(default='0.0.0.0', description=\n    'The host for the websocket server to run on')\nwebsocket_server_port: int = Field(default=8001, description=\n    'The port for the websocket server to run on')\nexecution_manager_port: int = Field(default=8002, description=\n    'The port for execution manager daemon to run on')\nexecution_scheduler_port: int = Field(default=8003, description=\n    'The port for execution scheduler daemon to run on')\nagent_server_port: int = Field(default=8004, description=\n    'The port for agent server daemon to run on')\ndatabase_api_port: int = Field(default=8005, description=\n    'The port for database server API to run on')\nagent_api_host: str = Field(default='0.0.0.0', description=\n    'The host for agent server API to run on')\nagent_api_port: int = Field(default=8006, description=\n    'The port for agent server API to run on')\nplatform_base_url: str = Field(default='', description=\n    \"Must be set so the application knows where it's hosted at. This is necessary to make sure webhooks find their way.\"\n    )\nfrontend_base_url: str = Field(default='', description=\n    'Can be used to explicitly set the base URL for the frontend. This value is then used to generate redirect URLs for OAuth flows.'\n    )\nmedia_gcs_bucket_name: str = Field(default='', description=\n    'The name of the Google Cloud Storage bucket for media files')\napp_env: AppEnvironment = Field(default=AppEnvironment.LOCAL, description=\n    'The name of the app environment: local or dev or prod')\nbehave_as: BehaveAs = Field(default=BehaveAs.LOCAL, description=\n    'What environment to behave as: local or cloud')\nexecution_event_bus_name: str = Field(default='execution_event',\n    description='Name of the event bus')\ntrust_endpoints_for_requests: List[str] = Field(default_factory=list,\n    description=\n    'A whitelist of trusted internal endpoints for the backend to make requests to.'\n    )\nbackend_cors_allow_origins: List[str] = Field(default_factory=list)",
          "start_line": 54,
          "end_line": 234,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "validate_platform_base_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35\nif not v:",
              "start_line": 159,
              "end_line": 160,
              "successors": [
                {
                  "id": 36,
                  "label": "#36\nreturn v",
                  "start_line": 160,
                  "end_line": 160,
                  "successors": []
                },
                {
                  "id": 37,
                  "label": "#37\nif not v.startswith(('http://', 'https://')):",
                  "start_line": 161,
                  "end_line": 165,
                  "successors": [
                    {
                      "id": 39,
                      "label": "#39\nraise ValueError(\n    f'{info.field_name} must be a full URL including a http:// or https:// schema'\n    )",
                      "start_line": 162,
                      "end_line": 165,
                      "successors": []
                    },
                    {
                      "id": 40,
                      "label": "#40\nif v.endswith('/'):",
                      "start_line": 166,
                      "end_line": 167,
                      "successors": [
                        {
                          "id": 42,
                          "label": "#42\nreturn v.rstrip('/')",
                          "start_line": 167,
                          "end_line": 167,
                          "successors": []
                        },
                        {
                          "id": 43,
                          "label": "#43\nreturn v",
                          "start_line": 168,
                          "end_line": 168,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "validate_cors_allow_origins",
          "type": "CFG",
          "blocks": [
            {
              "id": 48,
              "label": "#48\nout = []\nport = None\nhas_localhost = False\nhas_127_0_0_1 = False",
              "start_line": 195,
              "end_line": 198,
              "successors": [
                {
                  "id": 49,
                  "label": "#49\nfor url in v:",
                  "start_line": 199,
                  "end_line": 210,
                  "successors": [
                    {
                      "id": 50,
                      "label": "#50\nurl = url.strip()\nif url.startswith(('http://', 'https://')):",
                      "start_line": 200,
                      "end_line": 210,
                      "successors": [
                        {
                          "id": 52,
                          "label": "#52\nif 'localhost' in url:",
                          "start_line": 202,
                          "end_line": 204,
                          "successors": [
                            {
                              "id": 56,
                              "label": "#56\nport = url.split(':')[2]\nhas_localhost = True",
                              "start_line": 203,
                              "end_line": 204,
                              "successors": [
                                {
                                  "id": 57,
                                  "label": "#57\nif '127.0.0.1' in url:",
                                  "start_line": 205,
                                  "end_line": 207,
                                  "successors": [
                                    {
                                      "id": 58,
                                      "label": "#58\nport = url.split(':')[2]\nhas_127_0_0_1 = True",
                                      "start_line": 206,
                                      "end_line": 207,
                                      "successors": [
                                        {
                                          "id": 59,
                                          "label": "#59\nout.append(url)",
                                          "start_line": 208,
                                          "end_line": 208,
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 54,
                          "label": "#54\nraise ValueError(f'Invalid URL: {url}')",
                          "start_line": 210,
                          "end_line": 210,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 51,
                      "label": "#51\nif has_127_0_0_1 and not has_localhost:",
                      "start_line": 212,
                      "end_line": 213,
                      "successors": [
                        {
                          "id": 60,
                          "label": "#60\nout.append(f'http://localhost:{port}')",
                          "start_line": 213,
                          "end_line": 213,
                          "successors": [
                            {
                              "id": 61,
                              "label": "#61\nif has_localhost and not has_127_0_0_1:",
                              "start_line": 214,
                              "end_line": 215,
                              "successors": [
                                {
                                  "id": 62,
                                  "label": "#62\nout.append(f'http://127.0.0.1:{port}')",
                                  "start_line": 215,
                                  "end_line": 215,
                                  "successors": [
                                    {
                                      "id": 63,
                                      "label": "#63\nreturn out",
                                      "start_line": 217,
                                      "end_line": 217,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "settings_customise_sources",
          "type": "CFG",
          "blocks": [
            {
              "id": 67,
              "label": "#67\nreturn env_settings, file_secret_settings, dotenv_settings, JsonConfigSettingsSource(\n    settings_cls), init_settings",
              "start_line": 228,
              "end_line": 234,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Secrets",
      "type": "CFG",
      "blocks": [
        {
          "id": 72,
          "label": "#72\n\"\"\"Secrets for the server.\"\"\"\nsupabase_url: str = Field(default='', description='Supabase URL')\nsupabase_service_role_key: str = Field(default='', description=\n    'Supabase service role key')\nencryption_key: str = Field(default='', description='Encryption key')\ngithub_client_id: str = Field(default='', description='GitHub OAuth client ID')\ngithub_client_secret: str = Field(default='', description=\n    'GitHub OAuth client secret')\ngoogle_client_id: str = Field(default='', description='Google OAuth client ID')\ngoogle_client_secret: str = Field(default='', description=\n    'Google OAuth client secret')\nnotion_client_id: str = Field(default='', description='Notion OAuth client ID')\nnotion_client_secret: str = Field(default='', description=\n    'Notion OAuth client secret')\nopenai_api_key: str = Field(default='', description='OpenAI API key')\nanthropic_api_key: str = Field(default='', description='Anthropic API key')\ngroq_api_key: str = Field(default='', description='Groq API key')\nopen_router_api_key: str = Field(default='', description='Open Router API Key')\nreddit_client_id: str = Field(default='', description='Reddit client ID')\nreddit_client_secret: str = Field(default='', description=\n    'Reddit client secret')\nreddit_username: str = Field(default='', description='Reddit username')\nreddit_password: str = Field(default='', description='Reddit password')\nopenweathermap_api_key: str = Field(default='', description=\n    'OpenWeatherMap API key')\nmedium_api_key: str = Field(default='', description='Medium API key')\nmedium_author_id: str = Field(default='', description='Medium author ID')\ndid_api_key: str = Field(default='', description='D-ID API Key')\nrevid_api_key: str = Field(default='', description='revid.ai API key')\ndiscord_bot_token: str = Field(default='', description='Discord bot token')\nsmtp_server: str = Field(default='', description='SMTP server IP')\nsmtp_port: str = Field(default='', description='SMTP server port')\nsmtp_username: str = Field(default='', description='SMTP username')\nsmtp_password: str = Field(default='', description='SMTP password')\nsentry_dsn: str = Field(default='', description='Sentry DSN')\ngoogle_maps_api_key: str = Field(default='', description='Google Maps API Key')\nreplicate_api_key: str = Field(default='', description='Replicate API Key')\nunreal_speech_api_key: str = Field(default='', description=\n    'Unreal Speech API Key')\nideogram_api_key: str = Field(default='', description='Ideogram API Key')\njina_api_key: str = Field(default='', description='Jina API Key')\nunreal_speech_api_key: str = Field(default='', description=\n    'Unreal Speech API Key')\nfal_key: str = Field(default='', description='FAL API key')\nmodel_config = SettingsConfigDict(env_file='.env', env_file_encoding=\n    'utf-8', extra='allow')",
          "start_line": 238,
          "end_line": 306,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "Settings",
      "type": "CFG",
      "blocks": [
        {
          "id": 75,
          "label": "#75\nconfig: Config = Config()\nsecrets: Secrets = Secrets()",
          "start_line": 310,
          "end_line": 328,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "save",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\nif self.config.updated_fields:",
              "start_line": 315,
              "end_line": 328,
              "successors": [
                {
                  "id": 78,
                  "label": "#78\nconfig_to_save = self.config.get_updates()\nconfig_path = os.path.join(get_data_path(), 'config.json')\nif os.path.exists(config_path):",
                  "start_line": 316,
                  "end_line": 327,
                  "successors": [
                    {
                      "id": 80,
                      "label": "#80\nwith open(config_path, 'r+') as f:",
                      "start_line": 319,
                      "end_line": 324,
                      "successors": [
                        {
                          "id": 85,
                          "label": "#85\nexisting_config: Dict[str, Any] = json.load(f)\nexisting_config.update(config_to_save)\nf.seek(0)\njson.dump(existing_config, f, indent=2)\nf.truncate()",
                          "start_line": 320,
                          "end_line": 324,
                          "successors": [
                            {
                              "id": 81,
                              "label": "#81\nself.config.clear_updates()",
                              "start_line": 328,
                              "end_line": 328,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 82,
                      "label": "#82\nwith open(config_path, 'w') as f:",
                      "start_line": 326,
                      "end_line": 327,
                      "successors": [
                        {
                          "id": 83,
                          "label": "#83\njson.dump(config_to_save, f, indent=2)",
                          "start_line": 327,
                          "end_line": 327,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}