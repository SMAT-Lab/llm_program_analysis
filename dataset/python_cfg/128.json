{
  "name": "128.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nlogger = logging.getLogger(__name__)",
      "start_line": 1,
      "end_line": 84,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "BaseOAuthHandler",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nPROVIDER_NAME: ClassVar[ProviderName]\nDEFAULT_SCOPES: ClassVar[list[str]] = []",
          "start_line": 14,
          "end_line": 84,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5",
              "start_line": 20,
              "end_line": 20,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_login_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\n\"\"\"Constructs a login URL that the user can be redirected to\"\"\"",
              "start_line": 28,
              "end_line": 29,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\n\"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"",
              "start_line": 37,
              "end_line": 38,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_refresh_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\n\"\"\"Implements the token refresh mechanism\"\"\"",
              "start_line": 44,
              "end_line": 45,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "revoke_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\n\"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"",
              "start_line": 51,
              "end_line": 53,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "refresh_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\nif credentials.provider != self.PROVIDER_NAME:",
              "start_line": 56,
              "end_line": 60,
              "successors": [
                {
                  "id": 21,
                  "label": "#21\nraise ValueError(\n    f\"{self.__class__.__name__} can not refresh tokens for other provider '{credentials.provider}'\"\n    )",
                  "start_line": 57,
                  "end_line": 60,
                  "successors": []
                },
                {
                  "id": 22,
                  "label": "#22\nreturn self._refresh_tokens(credentials)",
                  "start_line": 61,
                  "end_line": 61,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_access_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\n\"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\nif self.needs_refresh(credentials):",
              "start_line": 64,
              "end_line": 66,
              "successors": [
                {
                  "id": 28,
                  "label": "#28\ncredentials = self.refresh_tokens(credentials)",
                  "start_line": 66,
                  "end_line": 66,
                  "successors": [
                    {
                      "id": 29,
                      "label": "#29\nreturn credentials.access_token.get_secret_value()",
                      "start_line": 67,
                      "end_line": 67,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "needs_refresh",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\n\"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\nreturn credentials.access_token_expires_at is not None and credentials.access_token_expires_at < int(\n    time.time()) + 300",
              "start_line": 70,
              "end_line": 74,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "handle_default_scopes",
          "type": "CFG",
          "blocks": [
            {
              "id": 37,
              "label": "#37\n\"\"\"Handles the default scopes for the provider\"\"\"\nif not scopes:",
              "start_line": 77,
              "end_line": 83,
              "successors": [
                {
                  "id": 38,
                  "label": "#38\nlogger.debug(f'Using default scopes for provider {self.PROVIDER_NAME.value}')\nscopes = self.DEFAULT_SCOPES",
                  "start_line": 80,
                  "end_line": 83,
                  "successors": [
                    {
                      "id": 39,
                      "label": "#39\nreturn scopes",
                      "start_line": 84,
                      "end_line": 84,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}