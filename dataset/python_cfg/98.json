{
  "name": "98.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport unittest\nfrom validate.format import error_message\nfrom validate.format import get_categories_content\nfrom validate.format import check_alphabetical_order\nfrom validate.format import check_title\nfrom validate.format import check_description, max_description_length\nfrom validate.format import check_auth, auth_keys\nfrom validate.format import check_https, https_keys\nfrom validate.format import check_cors, cors_keys\nfrom validate.format import check_entry\nfrom validate.format import check_file_format, min_entries_per_category, num_segments",
      "start_line": 3,
      "end_line": 466,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "TestValidadeFormat",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 19,
          "end_line": 466,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "test_error_message_return_and_return_type",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nline_num_unity = 1\nline_num_ten = 10\nline_num_hundred = 100\nline_num_thousand = 1000\nmsg = 'This is a unit test'\nerr_msg_unity = error_message(line_num_unity, msg)\nerr_msg_ten = error_message(line_num_ten, msg)\nerr_msg_hundred = error_message(line_num_hundred, msg)\nerr_msg_thousand = error_message(line_num_thousand, msg)\nself.assertIsInstance(err_msg_unity, str)\nself.assertIsInstance(err_msg_ten, str)\nself.assertIsInstance(err_msg_hundred, str)\nself.assertIsInstance(err_msg_thousand, str)\nself.assertEqual(err_msg_unity, '(L002) This is a unit test')\nself.assertEqual(err_msg_ten, '(L011) This is a unit test')\nself.assertEqual(err_msg_hundred, '(L101) This is a unit test')\nself.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
              "start_line": 20,
              "end_line": 40,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_get_categories_content_return_correct_data_of_categories",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nfake_contents = ['### A', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |', '',\n    '### B', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\nresult = get_categories_content(fake_contents)\nself.assertIsInstance(result, tuple)\ncategories, category_line_num = result\nself.assertIsInstance(categories, dict)\nself.assertIsInstance(category_line_num, dict)\nexpected_result = {'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6}",
              "start_line": 43,
              "end_line": 64,
              "successors": [
                {
                  "id": 9,
                  "label": "#9\nfor res, ex_res in zip(result, expected_result):",
                  "start_line": 66,
                  "end_line": 69,
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nwith self.subTest():",
                      "start_line": 68,
                      "end_line": 69,
                      "successors": [
                        {
                          "id": 12,
                          "label": "#12\nself.assertEqual(res, ex_res)",
                          "start_line": 69,
                          "end_line": 69,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_check_alphabetical_order_return_correct_msg_error",
          "type": "CFG",
          "blocks": [
            {
              "id": 16,
              "label": "#16\ncorrect_lines = ['### A', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |', '',\n    '### B', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\nincorrect_lines = ['### A', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |', '',\n    '### B', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\nerr_msgs_1 = check_alphabetical_order(correct_lines)\nerr_msgs_2 = check_alphabetical_order(incorrect_lines)\nself.assertIsInstance(err_msgs_1, list)\nself.assertIsInstance(err_msgs_2, list)\nself.assertEqual(len(err_msgs_1), 0)\nself.assertEqual(len(err_msgs_2), 2)\nexpected_err_msgs = ['(L001) A category is not alphabetical order',\n    '(L007) B category is not alphabetical order']",
              "start_line": 72,
              "end_line": 113,
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nfor err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):",
                  "start_line": 115,
                  "end_line": 118,
                  "successors": [
                    {
                      "id": 18,
                      "label": "#18\nwith self.subTest():",
                      "start_line": 117,
                      "end_line": 118,
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\nself.assertEqual(err_msg, ex_err_msg)",
                          "start_line": 118,
                          "end_line": 118,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_title_with_correct_title",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nraw_title = '[A](https://www.ex.com)'\nerr_msgs = check_title(0, raw_title)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
              "start_line": 121,
              "end_line": 127,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_title_with_markdown_syntax_incorrect",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\nraw_title = '[A(https://www.ex.com)'\nerr_msgs = check_title(0, raw_title)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 130,
              "end_line": 140,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_title_with_api_at_the_end_of_the_title",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nraw_title = '[A API](https://www.ex.com)'\nerr_msgs = check_title(0, raw_title)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = (\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 143,
              "end_line": 153,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_with_correct_description",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\ndesc = 'This is a fake description'\nerr_msgs = check_description(0, desc)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
              "start_line": 156,
              "end_line": 162,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_with_first_char_is_not_capitalized",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\ndesc = 'this is a fake description'\nerr_msgs = check_description(0, desc)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = '(L001) first character of description is not capitalized'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 165,
              "end_line": 176,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_with_punctuation_in_the_end",
          "type": "CFG",
          "blocks": [
            {
              "id": 39,
              "label": "#39\nbase_desc = 'This is a fake description'\npunctuation = '!\"#$%&\\'*+,-./:;<=>?@[\\\\]^_`{|}~'\ndesc_with_punc = [(base_desc + punc) for punc in punctuation]",
              "start_line": 179,
              "end_line": 181,
              "successors": [
                {
                  "id": 40,
                  "label": "#40\nfor desc in desc_with_punc:",
                  "start_line": 183,
                  "end_line": 195,
                  "successors": [
                    {
                      "id": 41,
                      "label": "#41\nwith self.subTest():",
                      "start_line": 185,
                      "end_line": 195,
                      "successors": [
                        {
                          "id": 43,
                          "label": "#43\nerr_msgs = check_description(0, desc)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = f'(L001) description should not end with {desc[-1]}'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
                          "start_line": 186,
                          "end_line": 195,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_that_exceeds_the_character_limit",
          "type": "CFG",
          "blocks": [
            {
              "id": 47,
              "label": "#47\nlong_desc = 'Desc' * max_description_length\nlong_desc_length = len(long_desc)\nerr_msgs = check_description(0, long_desc)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = (\n    f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n    )\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 198,
              "end_line": 210,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_auth_with_valid_auth",
          "type": "CFG",
          "blocks": [
            {
              "id": 50,
              "label": "#50\nauth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\nauth_valid.append('No')",
              "start_line": 213,
              "end_line": 214,
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nfor auth in auth_valid:",
                  "start_line": 216,
                  "end_line": 221,
                  "successors": [
                    {
                      "id": 52,
                      "label": "#52\nwith self.subTest():",
                      "start_line": 217,
                      "end_line": 221,
                      "successors": [
                        {
                          "id": 54,
                          "label": "#54\nerr_msgs = check_auth(0, auth)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
                          "start_line": 218,
                          "end_line": 221,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_auth_without_backtick",
          "type": "CFG",
          "blocks": [
            {
              "id": 58,
              "label": "#58\nauth_without_backtick = [auth for auth in auth_keys if auth != 'No']",
              "start_line": 224,
              "end_line": 224,
              "successors": [
                {
                  "id": 59,
                  "label": "#59\nfor auth in auth_without_backtick:",
                  "start_line": 226,
                  "end_line": 236,
                  "successors": [
                    {
                      "id": 60,
                      "label": "#60\nwith self.subTest():",
                      "start_line": 227,
                      "end_line": 236,
                      "successors": [
                        {
                          "id": 62,
                          "label": "#62\nerr_msgs = check_auth(0, auth)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = '(L001) auth value is not enclosed with `backticks`'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
                          "start_line": 228,
                          "end_line": 236,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_auth_with_invalid_auth",
          "type": "CFG",
          "blocks": [
            {
              "id": 66,
              "label": "#66\nauth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\nauth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`'\n    ]",
              "start_line": 239,
              "end_line": 240,
              "successors": [
                {
                  "id": 67,
                  "label": "#67\nfor auth in auth_invalid_without_backtick:",
                  "start_line": 242,
                  "end_line": 257,
                  "successors": [
                    {
                      "id": 68,
                      "label": "#68\nwith self.subTest():",
                      "start_line": 243,
                      "end_line": 257,
                      "successors": [
                        {
                          "id": 70,
                          "label": "#70\nerr_msgs = check_auth(0, auth)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 2)\nerr_msg_1 = err_msgs[0]\nerr_msg_2 = err_msgs[1]\nexpected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\nexpected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\nself.assertIsInstance(err_msg_1, str)\nself.assertIsInstance(err_msg_2, str)\nself.assertEqual(err_msg_1, expected_err_msg_1)\nself.assertEqual(err_msg_2, expected_err_msg_2)",
                          "start_line": 244,
                          "end_line": 257,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 69,
                      "label": "#69\nfor auth in auth_invalid_with_backtick:",
                      "start_line": 259,
                      "end_line": 269,
                      "successors": [
                        {
                          "id": 72,
                          "label": "#72\nwith self.subTest():",
                          "start_line": 260,
                          "end_line": 269,
                          "successors": [
                            {
                              "id": 74,
                              "label": "#74\nerr_msgs = check_auth(0, auth)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = f'(L001) {auth} is not a valid Auth option'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
                              "start_line": 261,
                              "end_line": 269,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_https_with_valid_https",
          "type": "CFG",
          "blocks": [
            {
              "id": 78,
              "label": "#78\nfor https in https_keys:",
              "start_line": 272,
              "end_line": 277,
              "successors": [
                {
                  "id": 79,
                  "label": "#79\nwith self.subTest():",
                  "start_line": 273,
                  "end_line": 277,
                  "successors": [
                    {
                      "id": 81,
                      "label": "#81\nerr_msgs = check_https(0, https)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
                      "start_line": 274,
                      "end_line": 277,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_https_with_invalid_https",
          "type": "CFG",
          "blocks": [
            {
              "id": 85,
              "label": "#85\ninvalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']",
              "start_line": 280,
              "end_line": 280,
              "successors": [
                {
                  "id": 86,
                  "label": "#86\nfor https in invalid_https_keys:",
                  "start_line": 282,
                  "end_line": 292,
                  "successors": [
                    {
                      "id": 87,
                      "label": "#87\nwith self.subTest():",
                      "start_line": 283,
                      "end_line": 292,
                      "successors": [
                        {
                          "id": 89,
                          "label": "#89\nerr_msgs = check_https(0, https)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = f'(L001) {https} is not a valid HTTPS option'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
                          "start_line": 284,
                          "end_line": 292,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_cors_with_valid_cors",
          "type": "CFG",
          "blocks": [
            {
              "id": 93,
              "label": "#93\nfor cors in cors_keys:",
              "start_line": 295,
              "end_line": 300,
              "successors": [
                {
                  "id": 94,
                  "label": "#94\nwith self.subTest():",
                  "start_line": 296,
                  "end_line": 300,
                  "successors": [
                    {
                      "id": 96,
                      "label": "#96\nerr_msgs = check_cors(0, cors)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
                      "start_line": 297,
                      "end_line": 300,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_cors_with_invalid_cors",
          "type": "CFG",
          "blocks": [
            {
              "id": 100,
              "label": "#100\ninvalid_cors_keys = ['yes', 'no', 'unknown', 'cors']",
              "start_line": 303,
              "end_line": 303,
              "successors": [
                {
                  "id": 101,
                  "label": "#101\nfor cors in invalid_cors_keys:",
                  "start_line": 305,
                  "end_line": 315,
                  "successors": [
                    {
                      "id": 102,
                      "label": "#102\nwith self.subTest():",
                      "start_line": 306,
                      "end_line": 315,
                      "successors": [
                        {
                          "id": 104,
                          "label": "#104\nerr_msgs = check_cors(0, cors)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nexpected_err_msg = f'(L001) {cors} is not a valid CORS option'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
                          "start_line": 307,
                          "end_line": 315,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_entry_with_correct_segments",
          "type": "CFG",
          "blocks": [
            {
              "id": 108,
              "label": "#108\ncorrect_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes'\n    ]\nerr_msgs = check_entry(0, correct_segments)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
              "start_line": 318,
              "end_line": 324,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_entry_with_incorrect_segments",
          "type": "CFG",
          "blocks": [
            {
              "id": 111,
              "label": "#111\nincorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes',\n    'yes']\nerr_msgs = check_entry(0, incorrect_segments)\nexpected_err_msgs = [\n    '(L001) first character of description is not capitalized',\n    '(L001) description should not end with .',\n    '(L001) auth value is not enclosed with `backticks`',\n    '(L001) yes is not a valid Auth option',\n    '(L001) yes is not a valid HTTPS option',\n    '(L001) yes is not a valid CORS option']\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 7)",
              "start_line": 327,
              "end_line": 341,
              "successors": [
                {
                  "id": 112,
                  "label": "#112\nfor err_msg in err_msgs:",
                  "start_line": 342,
                  "end_line": 344,
                  "successors": [
                    {
                      "id": 113,
                      "label": "#113\nwith self.subTest():",
                      "start_line": 343,
                      "end_line": 344,
                      "successors": [
                        {
                          "id": 115,
                          "label": "#115\nself.assertIsInstance(err_msg, str)",
                          "start_line": 344,
                          "end_line": 344,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 114,
                      "label": "#114\nself.assertEqual(err_msgs, expected_err_msgs)",
                      "start_line": 345,
                      "end_line": 345,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_with_correct_format",
          "type": "CFG",
          "blocks": [
            {
              "id": 119,
              "label": "#119\ncorrect_format = ['## Index', '* [A](#a)', '* [B](#b)', '', '### A',\n    'API | Description | Auth | HTTPS | CORS |', '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |', '',\n    '### B', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\nerr_msgs = check_file_format(lines=correct_format)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 0)\nself.assertEqual(err_msgs, [])",
              "start_line": 348,
              "end_line": 372,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_with_category_header_not_added_to_index",
          "type": "CFG",
          "blocks": [
            {
              "id": 122,
              "label": "#122\nincorrect_format = ['## Index', '', '### A',\n    'API | Description | Auth | HTTPS | CORS |', '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\nerr_msgs = check_file_format(lines=incorrect_format)\nexpected_err_msg = '(L003) category header (A) not added to Index section'\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 375,
              "end_line": 392,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_with_category_without_min_entries",
          "type": "CFG",
          "blocks": [
            {
              "id": 125,
              "label": "#125\nincorrect_format = ['## Index', '* [A](#a)', '* [B](#b)', '', '### A',\n    'API | Description | Auth | HTTPS | CORS |', '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |', '',\n    '### B', 'API | Description | Auth | HTTPS | CORS |',\n    '|---|---|---|---|---|',\n    '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\ncategory_with_err = 'A'\nnum_in_category = 1\nerr_msgs = check_file_format(lines=incorrect_format)\nexpected_err_msg = (\n    f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n    )\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 395,
              "end_line": 422,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_entry_without_all_necessary_columns",
          "type": "CFG",
          "blocks": [
            {
              "id": 128,
              "label": "#128\nincorrect_format = ['## Index', '* [A](#a)', '', '### A',\n    'API | Description | Auth | HTTPS | CORS |', '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` |',\n    '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\ncurrent_segments_num = 3\nerr_msgs = check_file_format(lines=incorrect_format)\nexpected_err_msg = (\n    f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n    )\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 425,
              "end_line": 445,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_without_1_space_between_the_segments",
          "type": "CFG",
          "blocks": [
            {
              "id": 131,
              "label": "#131\nincorrect_format = ['## Index', '* [A](#a)', '', '### A',\n    'API | Description | Auth | HTTPS | CORS |', '|---|---|---|---|---|',\n    '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',\n    '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n    '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |']\nerr_msgs = check_file_format(lines=incorrect_format)\nexpected_err_msg = (\n    f'(L007) each segment must start and end with exactly 1 space')\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)\nerr_msg = err_msgs[0]\nself.assertEqual(err_msg, expected_err_msg)",
              "start_line": 448,
              "end_line": 466,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}