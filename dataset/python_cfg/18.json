{
  "name": "18.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"",
      "start_line": 1,
      "end_line": 113,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "valid_coloring",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\nreturn not any(neighbour == 1 and colored_vertices[i] == color for i,\n    neighbour in enumerate(neighbours))",
          "start_line": 13,
          "end_line": 33,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "util_color",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored the graph)\n\n    Recursive Step:\n    2. Iterates over each color:\n        Check if the current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call, check if this coloring leads to a solution\n            2.4. if current coloring leads to a solution return\n            2.5. Uncolor given vertex\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    >>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3\n\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    >>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False\n    \"\"\"\nif index == len(graph):",
          "start_line": 39,
          "end_line": 73,
          "successors": [
            {
              "id": 8,
              "label": "#8\nreturn True",
              "start_line": 73,
              "end_line": 73,
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nfor i in range(max_colors):",
              "start_line": 76,
              "end_line": 84,
              "successors": [
                {
                  "id": 11,
                  "label": "#11\nif valid_coloring(graph[index], colored_vertices, i):",
                  "start_line": 77,
                  "end_line": 84,
                  "successors": [
                    {
                      "id": 13,
                      "label": "#13\ncolored_vertices[index] = i\nif util_color(graph, max_colors, colored_vertices, index + 1):",
                      "start_line": 79,
                      "end_line": 82,
                      "successors": [
                        {
                          "id": 15,
                          "label": "#15\nreturn True",
                          "start_line": 82,
                          "end_line": 82,
                          "successors": []
                        },
                        {
                          "id": 16,
                          "label": "#16\ncolored_vertices[index] = -1",
                          "start_line": 84,
                          "end_line": 84,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "#12\nreturn False",
                  "start_line": 85,
                  "end_line": 85,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "color",
      "type": "CFG",
      "blocks": [
        {
          "id": 21,
          "label": "#21\n\"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\ncolored_vertices = [-1] * len(graph)\nif util_color(graph, max_colors, colored_vertices, 0):",
          "start_line": 89,
          "end_line": 111,
          "successors": [
            {
              "id": 22,
              "label": "#22\nreturn colored_vertices",
              "start_line": 111,
              "end_line": 111,
              "successors": []
            },
            {
              "id": 23,
              "label": "#23\nreturn []",
              "start_line": 113,
              "end_line": 113,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}