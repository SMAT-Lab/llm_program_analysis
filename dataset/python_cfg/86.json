{
  "name": "86.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom datetime import datetime\nimport pytest\nfrom prisma.models import CreditTransaction\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer\nREFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_block_credit_usage",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\ncurrent_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
          "successors": [
            {
              "id": 4,
              "label": "#4\nspending_amount_1 = await user_credit.spend_credits(DEFAULT_USER_ID,\n    current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo',\n    'credentials': {'id': openai_credentials.id, 'provider':\n    openai_credentials.provider, 'type': openai_credentials.type}}, 0.0, \n    0.0, validate_balance=False)",
              "successors": [
                {
                  "id": 5,
                  "label": "#5\nassert spending_amount_1 > 0",
                  "successors": [
                    {
                      "id": 7,
                      "label": "#7\nspending_amount_2 = await user_credit.spend_credits(DEFAULT_USER_ID,\n    current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo',\n    'api_key': 'owned_api_key'}, 0.0, 0.0, validate_balance=False)",
                      "successors": [
                        {
                          "id": 8,
                          "label": "#8\nassert spending_amount_2 == 0",
                          "successors": [
                            {
                              "id": 10,
                              "label": "#10\nnew_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "#11\nassert new_credit == current_credit - spending_amount_1 - spending_amount_2",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_block_credit_top_up",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\ncurrent_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
          "successors": [
            {
              "id": 17,
              "label": "#17\nawait user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
              "successors": [
                {
                  "id": 18,
                  "label": "#18\nnew_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nassert new_credit == current_credit + 100",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_block_credit_reset",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24\nmonth1 = datetime(2022, 1, 15)\nmonth2 = datetime(2022, 2, 15)\nuser_credit.time_now = lambda : month2\nmonth2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
          "successors": [
            {
              "id": 25,
              "label": "#25\nuser_credit.time_now = lambda : month1\nmonth1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 26,
                  "label": "#26\nawait user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
                  "successors": [
                    {
                      "id": 27,
                      "label": "#27\nassert await user_credit.get_or_refill_credit(DEFAULT_USER_ID\n    ) == month1credit + 100",
                      "successors": [
                        {
                          "id": 30,
                          "label": "#30\nuser_credit.time_now = lambda : month2\nassert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_credit_refill",
      "type": "CFG",
      "blocks": [
        {
          "id": 36,
          "label": "#36\nawait CreditTransaction.prisma().update_many(where={'userId':\n    DEFAULT_USER_ID, 'createdAt': {'gte': datetime(2022, 2, 1), 'lt':\n    datetime(2022, 3, 1)}}, data={'isActive': False})",
          "successors": [
            {
              "id": 37,
              "label": "#37\nuser_credit.time_now = lambda : datetime(2022, 2, 15)\nbalance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 38,
                  "label": "#38\nassert balance == REFILL_VALUE",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}