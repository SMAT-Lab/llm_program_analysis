{
  "name": "46.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom datetime import datetime\nfrom typing import Any, List\nfrom backend.blocks.exa._auth import ExaCredentials, ExaCredentialsField, ExaCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\nfrom .helpers import ContentSettings",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ExaFindSimilarBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='5e7315d1-af61-4a0c-9350-7c868fa7438a', description=\n    \"Finds similar links using Exa's findSimilar API\", categories={\n    BlockCategory.SEARCH}, input_schema=ExaFindSimilarBlock.Input,\n    output_schema=ExaFindSimilarBlock.Output)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nurl = 'https://api.exa.ai/findSimilar'\nheaders = {'Content-Type': 'application/json', 'x-api-key': credentials.\n    api_key.get_secret_value()}\npayload = {'url': input_data.url, 'numResults': input_data.\n    number_of_results, 'contents': input_data.contents.dict()}\noptional_field_mapping = {'include_domains': 'includeDomains',\n    'exclude_domains': 'excludeDomains', 'include_text': 'includeText',\n    'exclude_text': 'excludeText'}",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nfor input_field, api_field in optional_field_mapping.items():",
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\nvalue = getattr(input_data, input_field)\nif value:",
                      "successors": [
                        {
                          "id": 18,
                          "label": "#18\npayload[api_field] = value",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "#17\ndate_field_mapping = {'start_crawl_date': 'startCrawlDate',\n    'end_crawl_date': 'endCrawlDate', 'start_published_date':\n    'startPublishedDate', 'end_published_date': 'endPublishedDate'}",
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\nfor input_field, api_field in date_field_mapping.items():",
                          "successors": [
                            {
                              "id": 21,
                              "label": "#21\nvalue = getattr(input_data, input_field, None)\nif value:",
                              "successors": [
                                {
                                  "id": 23,
                                  "label": "#23\npayload[api_field] = value.strftime('%Y-%m-%dT%H:%M:%S.000Z')",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 22,
                              "label": "#22\ntry:",
                              "successors": [
                                {
                                  "id": 25,
                                  "label": "#25\nresponse = requests.post(url, headers=headers, json=payload)\nresponse.raise_for_status()\ndata = response.json()\nyield 'results', data.get('results', [])",
                                  "successors": []
                                },
                                {
                                  "id": 26,
                                  "label": "#26\nyield 'error', str(e)",
                                  "successors": [
                                    {
                                      "id": 29,
                                      "label": "#29\nyield 'results', []",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: ExaCredentialsInput = ExaCredentialsField()\nurl: str = SchemaField(description=\n    'The url for which you would like to find similar links')\nnumber_of_results: int = SchemaField(description=\n    'Number of results to return', default=10, advanced=True)\ninclude_domains: List[str] = SchemaField(description=\n    'Domains to include in search', default=[], advanced=True)\nexclude_domains: List[str] = SchemaField(description=\n    'Domains to exclude from search', default=[], advanced=True)\nstart_crawl_date: datetime = SchemaField(description=\n    'Start date for crawled content')\nend_crawl_date: datetime = SchemaField(description=\n    'End date for crawled content')\nstart_published_date: datetime = SchemaField(description=\n    'Start date for published content')\nend_published_date: datetime = SchemaField(description=\n    'End date for published content')\ninclude_text: List[str] = SchemaField(description=\n    'Text patterns to include (max 1 string, up to 5 words)', default=[],\n    advanced=True)\nexclude_text: List[str] = SchemaField(description=\n    'Text patterns to exclude (max 1 string, up to 5 words)', default=[],\n    advanced=True)\ncontents: ContentSettings = SchemaField(description=\n    'Content retrieval settings', default=ContentSettings(), advanced=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nresults: List[Any] = SchemaField(description=\n    'List of similar documents with title, URL, published date, author, and score'\n    , default=[])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}