{
  "name": "24.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\nfrom ._api import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, Slant3DCredentialsField, Slant3DCredentialsInput\nfrom .base import Slant3DBlockBase",
      "start_line": 1,
      "end_line": 61,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Slant3DSlicerBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Block for slicing 3D model files\"\"\"",
          "start_line": 14,
          "end_line": 61,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h', description=\n    'Slice a 3D model file and get pricing information', input_schema=self.\n    Input, output_schema=self.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'file_url': 'https://example.com/model.stl'},\n    test_credentials=TEST_CREDENTIALS, test_output=[('message',\n    'Slicing successful'), ('price', 8.23)], test_mock={'_make_request': lambda\n    *args, **kwargs: {'message': 'Slicing successful', 'data': {'price': \n    8.23}}})",
              "start_line": 28,
              "end_line": 45,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ntry:",
              "start_line": 50,
              "end_line": 61,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nresult = self._make_request('POST', 'slicer', credentials.api_key.\n    get_secret_value(), json={'fileURL': input_data.file_url})\nyield 'message', result['message']",
                  "start_line": 51,
                  "end_line": 57,
                  "successors": [
                    {
                      "id": 18,
                      "label": "#18\nyield 'price', result['data']['price']",
                      "start_line": 58,
                      "end_line": 58,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 16,
                  "label": "#16\nyield 'error', str(e)",
                  "start_line": 60,
                  "end_line": 60,
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nraise",
                      "start_line": 61,
                      "end_line": 61,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()\nfile_url: str = SchemaField(description=\n    'URL of the 3D model file to slice (STL)')",
              "start_line": 17,
              "end_line": 20,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nmessage: str = SchemaField(description='Response message')\nprice: float = SchemaField(description='Calculated price for printing')\nerror: str = SchemaField(description='Error message if slicing failed')",
              "start_line": 23,
              "end_line": 25,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}