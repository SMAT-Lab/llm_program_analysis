{
  "name": "85.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._auth import GOOGLE_OAUTH_IS_CONFIGURED, TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GoogleCredentials, GoogleCredentialsField, GoogleCredentialsInput",
      "start_line": 1,
      "end_line": 184,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "GoogleSheetsReadBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 18,
          "end_line": 98,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='5724e902-3635-47e9-a108-aaa0263a4988', description=\n    'This block reads data from a Google Sheets spreadsheet.', categories={\n    BlockCategory.DATA}, input_schema=GoogleSheetsReadBlock.Input,\n    output_schema=GoogleSheetsReadBlock.Output, disabled=not\n    GOOGLE_OAUTH_IS_CONFIGURED, test_input={'spreadsheet_id':\n    '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms', 'range': 'Sheet1!A1:B2',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('result', [['Name', 'Score'], ['Alice',\n    '85']])], test_mock={'_read_sheet': lambda *args, **kwargs: [['Name',\n    'Score'], ['Alice', '85']]})",
              "start_line": 38,
              "end_line": 66,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nservice = self._build_service(credentials, **kwargs)\ndata = self._read_sheet(service, input_data.spreadsheet_id, input_data.range)\nyield 'result', data",
              "start_line": 71,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_build_service",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\ncreds = Credentials(token=credentials.access_token.get_secret_value() if\n    credentials.access_token else None, refresh_token=credentials.\n    refresh_token.get_secret_value() if credentials.refresh_token else None,\n    token_uri='https://oauth2.googleapis.com/token', client_id=kwargs.get(\n    'client_id'), client_secret=kwargs.get('client_secret'), scopes=\n    credentials.scopes)\nreturn build('sheets', 'v4', credentials=creds)",
              "start_line": 77,
              "end_line": 93,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_read_sheet",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nsheet = service.spreadsheets()\nresult = sheet.values().get(spreadsheetId=spreadsheet_id, range=range).execute(\n    )\nreturn result.get('values', [])",
              "start_line": 96,
              "end_line": 98,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/spreadsheets.readonly'])\nspreadsheet_id: str = SchemaField(description=\n    'The ID of the spreadsheet to read from')\nrange: str = SchemaField(description='The A1 notation of the range to read')",
              "start_line": 19,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nresult: list[list[str]] = SchemaField(description=\n    'The data read from the spreadsheet')\nerror: str = SchemaField(description='Error message if any')",
              "start_line": 30,
              "end_line": 35,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GoogleSheetsWriteBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27",
          "start_line": 102,
          "end_line": 184,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35\nsuper().__init__(id='d9291e87-301d-47a8-91fe-907fb55460e5', description=\n    'This block writes data to a Google Sheets spreadsheet.', categories={\n    BlockCategory.DATA}, input_schema=GoogleSheetsWriteBlock.Input,\n    output_schema=GoogleSheetsWriteBlock.Output, disabled=not\n    GOOGLE_OAUTH_IS_CONFIGURED, test_input={'spreadsheet_id':\n    '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms', 'range': 'Sheet1!A1:B2',\n    'values': [['Name', 'Score'], ['Bob', '90']], 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('result', {'updatedCells': 4, 'updatedColumns': 2, 'updatedRows': 2}\n    )], test_mock={'_write_sheet': lambda *args, **kwargs: {'updatedCells':\n    4, 'updatedColumns': 2, 'updatedRows': 2}})",
              "start_line": 125,
              "end_line": 155,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 38,
              "label": "#38\nservice = GoogleSheetsReadBlock._build_service(credentials, **kwargs)\nresult = self._write_sheet(service, input_data.spreadsheet_id, input_data.\n    range, input_data.values)\nyield 'result', result",
              "start_line": 160,
              "end_line": 167,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_write_sheet",
          "type": "CFG",
          "blocks": [
            {
              "id": 42,
              "label": "#42\nbody = {'values': values}\nresult = service.spreadsheets().values().update(spreadsheetId=\n    spreadsheet_id, range=range, valueInputOption='USER_ENTERED', body=body\n    ).execute()\nreturn result",
              "start_line": 172,
              "end_line": 184,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/spreadsheets'])\nspreadsheet_id: str = SchemaField(description=\n    'The ID of the spreadsheet to write to')\nrange: str = SchemaField(description='The A1 notation of the range to write')\nvalues: list[list[str]] = SchemaField(description=\n    'The data to write to the spreadsheet')",
              "start_line": 103,
              "end_line": 114,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nresult: dict = SchemaField(description='The result of the write operation')\nerror: str = SchemaField(description='Error message if any')",
              "start_line": 117,
              "end_line": 122,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}