{
  "name": "0.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom prisma.models import User\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\nif __name__ == '__main__':",
      "start_line": 1,
      "end_line": 92,
      "successors": [
        {
          "id": 20,
          "label": "#20\nimport asyncio\nasyncio.run(sample_agent())",
          "start_line": 90,
          "end_line": 92,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "create_test_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\ntest_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email':\n    'testuser#example.com', 'name': 'Test User'}\nuser = await get_or_create_user(test_user_data)",
          "start_line": 12,
          "end_line": 17,
          "successors": [
            {
              "id": 4,
              "label": "#4\nreturn user",
              "start_line": 18,
              "end_line": 18,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_test_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 8,
          "label": "#8\n\"\"\"\n    InputBlock\n                                ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\nnodes = [graph.Node(block_id=AgentInputBlock().id, input_default={'name':\n    'input_1'}), graph.Node(block_id=AgentInputBlock().id, input_default={\n    'name': 'input_2'}), graph.Node(block_id=FillTextTemplateBlock().id,\n    input_default={'format': '{a}, {b}{c}', 'values_#_c': '!!!'}), graph.\n    Node(block_id=PrintToConsoleBlock().id)]\nlinks = [graph.Link(source_id=nodes[0].id, sink_id=nodes[2].id, source_name\n    ='result', sink_name='values_#_a'), graph.Link(source_id=nodes[1].id,\n    sink_id=nodes[2].id, source_name='result', sink_name='values_#_b'),\n    graph.Link(source_id=nodes[2].id, sink_id=nodes[3].id, source_name=\n    'output', sink_name='text')]\nreturn graph.Graph(name='TestGraph', description='Test graph', nodes=nodes,\n    links=links)",
          "start_line": 22,
          "end_line": 73,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "sample_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\nasync with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), test_user.id)\n    input_data = {'input_1': 'Hello', 'input_2': 'World'}\n    response = await server.agent_server.test_execute_graph(test_graph.id,\n        input_data, test_user.id)\n    print(response)\n    result = await wait_execution(test_user.id, test_graph.id, response[\n        'id'], 10)\n    print(result)",
          "start_line": 77,
          "end_line": 86,
          "successors": [
            {
              "id": 13,
              "label": "#13\ntest_user = await create_test_user()",
              "start_line": 78,
              "end_line": 78,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\ntest_graph = await create_graph(create_test_graph(), test_user.id)",
                  "start_line": 79,
                  "end_line": 79,
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\ninput_data = {'input_1': 'Hello', 'input_2': 'World'}\nresponse = await server.agent_server.test_execute_graph(test_graph.id,\n    input_data, test_user.id)",
                      "start_line": 80,
                      "end_line": 83,
                      "successors": [
                        {
                          "id": 17,
                          "label": "#17\nprint(response)\nresult = await wait_execution(test_user.id, test_graph.id, response['id'], 10)",
                          "start_line": 84,
                          "end_line": 85,
                          "successors": [
                            {
                              "id": 18,
                              "label": "#18\nprint(result)",
                              "start_line": 86,
                              "end_line": 86,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}