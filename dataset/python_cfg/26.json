{
  "name": "26.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom enum import Enum\nfrom typing import Literal\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\nfrom backend.data.block import Block, BlockCategory, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nSIZE_TO_SD_RATIO = {ImageSize.SQUARE: '1:1', ImageSize.LANDSCAPE: '4:3',\n    ImageSize.PORTRAIT: '3:4', ImageSize.WIDE: '16:9', ImageSize.TALL: '9:16'}\nSIZE_TO_FLUX_RATIO = {ImageSize.SQUARE: '1:1', ImageSize.LANDSCAPE: '4:3',\n    ImageSize.PORTRAIT: '3:4', ImageSize.WIDE: '16:9', ImageSize.TALL: '9:16'}\nSIZE_TO_FLUX_DIMENSIONS = {ImageSize.SQUARE: (1024, 1024), ImageSize.\n    LANDSCAPE: (1365, 1024), ImageSize.PORTRAIT: (1024, 1365), ImageSize.\n    WIDE: (1440, 810), ImageSize.TALL: (810, 1440)}\nSIZE_TO_RECRAFT_DIMENSIONS = {ImageSize.SQUARE: '1024x1024', ImageSize.\n    LANDSCAPE: '1365x1024', ImageSize.PORTRAIT: '1024x1365', ImageSize.WIDE:\n    '1536x1024', ImageSize.TALL: '1024x1536'}\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='replicate', api_key=\n    SecretStr('mock-replicate-api-key'), title='Mock Replicate API key',\n    expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.title}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ImageSize",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Semantic sizes that map reliably across all models\n    \"\"\"\nSQUARE = 'square'\nLANDSCAPE = 'landscape'\nPORTRAIT = 'portrait'\nWIDE = 'wide'\nTALL = 'tall'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ImageStyle",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\n\"\"\"\n    Complete set of supported styles\n    \"\"\"\nANY = 'any'\nREALISTIC = 'realistic_image'\nREALISTIC_BW = 'realistic_image/b_and_w'\nREALISTIC_HDR = 'realistic_image/hdr'\nREALISTIC_NATURAL = 'realistic_image/natural_light'\nREALISTIC_STUDIO = 'realistic_image/studio_portrait'\nREALISTIC_ENTERPRISE = 'realistic_image/enterprise'\nREALISTIC_HARD_FLASH = 'realistic_image/hard_flash'\nREALISTIC_MOTION_BLUR = 'realistic_image/motion_blur'\nDIGITAL_ART = 'digital_illustration'\nPIXEL_ART = 'digital_illustration/pixel_art'\nHAND_DRAWN = 'digital_illustration/hand_drawn'\nGRAIN = 'digital_illustration/grain'\nSKETCH = 'digital_illustration/infantile_sketch'\nPOSTER = 'digital_illustration/2d_art_poster'\nPOSTER_2 = 'digital_illustration/2d_art_poster_2'\nHANDMADE_3D = 'digital_illustration/handmade_3d'\nHAND_DRAWN_OUTLINE = 'digital_illustration/hand_drawn_outline'\nENGRAVING_COLOR = 'digital_illustration/engraving_color'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ImageGenModel",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\n\"\"\"\n    Available model providers\n    \"\"\"\nFLUX = 'Flux 1.1 Pro'\nFLUX_ULTRA = 'Flux 1.1 Pro Ultra'\nRECRAFT = 'Recraft v3'\nSD3_5 = 'Stable Diffusion 3.5 Medium'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AIImageGeneratorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\nsuper().__init__(id='ed1ae7a0-b770-4089-b520-1f0005fad19a', description=\n    'Generate images using various AI models through a unified interface',\n    categories={BlockCategory.AI}, input_schema=AIImageGeneratorBlock.Input,\n    output_schema=AIImageGeneratorBlock.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'prompt':\n    \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\"\n    , 'model': ImageGenModel.RECRAFT, 'size': ImageSize.SQUARE, 'style':\n    ImageStyle.REALISTIC}, test_credentials=TEST_CREDENTIALS, test_output=[\n    ('image_url', 'https://replicate.delivery/generated-image.webp')],\n    test_mock={'_run_client': lambda *args, **kwargs:\n    'https://replicate.delivery/generated-image.webp'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_run_client",
          "type": "CFG",
          "blocks": [
            {
              "id": 23,
              "label": "#23\ntry:",
              "successors": [
                {
                  "id": 24,
                  "label": "#24\nclient = replicate.Client(api_token=credentials.api_key.get_secret_value())\noutput = client.run(model_name, input=input_params, wait=False)\nif isinstance(output, list) and len(output) > 0:",
                  "successors": [
                    {
                      "id": 28,
                      "label": "#28\nif isinstance(output[0], FileOutput):",
                      "successors": [
                        {
                          "id": 37,
                          "label": "#37\nresult_url = output[0].url",
                          "successors": [
                            {
                              "id": 29,
                              "label": "#29\nreturn result_url",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 39,
                          "label": "#39\nresult_url = output[0]",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 30,
                      "label": "#30\nif isinstance(output, FileOutput):",
                      "successors": [
                        {
                          "id": 31,
                          "label": "#31\nresult_url = output.url",
                          "successors": []
                        },
                        {
                          "id": 33,
                          "label": "#33\nif isinstance(output, str):",
                          "successors": [
                            {
                              "id": 34,
                              "label": "#34\nresult_url = output",
                              "successors": []
                            },
                            {
                              "id": 36,
                              "label": "#36\nresult_url = None",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 25,
                  "label": "#25\nraise TypeError(f'Error during model execution: {e}')",
                  "successors": []
                },
                {
                  "id": 26,
                  "label": "#26\nraise RuntimeError(f'Unexpected error during model execution: {e}')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "generate_image",
          "type": "CFG",
          "blocks": [
            {
              "id": 45,
              "label": "#45\ntry:",
              "successors": [
                {
                  "id": 46,
                  "label": "#46\nmodified_prompt = input_data.prompt\nif input_data.model not in [ImageGenModel.RECRAFT]:",
                  "successors": [
                    {
                      "id": 49,
                      "label": "#49\nstyle_prefix = self._style_to_prompt_prefix(input_data.style)\nmodified_prompt = f'{style_prefix} {modified_prompt}'.strip()",
                      "successors": [
                        {
                          "id": 50,
                          "label": "#50\nif input_data.model == ImageGenModel.SD3_5:",
                          "successors": [
                            {
                              "id": 51,
                              "label": "#51\ninput_params = {'prompt': modified_prompt, 'aspect_ratio': SIZE_TO_SD_RATIO\n    [input_data.size], 'output_format': 'webp', 'output_quality': 90,\n    'steps': 40, 'cfg_scale': 7.0}\noutput = self._run_client(credentials,\n    'stability-ai/stable-diffusion-3.5-medium', input_params)\nreturn output",
                              "successors": []
                            },
                            {
                              "id": 53,
                              "label": "#53\nif input_data.model == ImageGenModel.FLUX:",
                              "successors": [
                                {
                                  "id": 54,
                                  "label": "#54\nwidth, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\ninput_params = {'prompt': modified_prompt, 'width': width, 'height': height,\n    'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format':\n    'jpg', 'output_quality': 90}\noutput = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro',\n    input_params)\nreturn output",
                                  "successors": []
                                },
                                {
                                  "id": 56,
                                  "label": "#56\nif input_data.model == ImageGenModel.FLUX_ULTRA:",
                                  "successors": [
                                    {
                                      "id": 57,
                                      "label": "#57\nwidth, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\ninput_params = {'prompt': modified_prompt, 'width': width, 'height': height,\n    'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format':\n    'jpg', 'output_quality': 90}\noutput = self._run_client(credentials,\n    'black-forest-labs/flux-1.1-pro-ultra', input_params)\nreturn output",
                                      "successors": []
                                    },
                                    {
                                      "id": 59,
                                      "label": "#59\nif input_data.model == ImageGenModel.RECRAFT:",
                                      "successors": [
                                        {
                                          "id": 60,
                                          "label": "#60\ninput_params = {'prompt': input_data.prompt, 'size':\n    SIZE_TO_RECRAFT_DIMENSIONS[input_data.size], 'style': input_data.style.\n    value}\noutput = self._run_client(credentials, 'recraft-ai/recraft-v3', input_params)\nreturn output",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 47,
                  "label": "#47\nraise RuntimeError(f'Failed to generate image: {str(e)}')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_style_to_prompt_prefix",
          "type": "CFG",
          "blocks": [
            {
              "id": 69,
              "label": "#69\n\"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\nif style == ImageStyle.ANY:",
              "successors": [
                {
                  "id": 70,
                  "label": "#70\nreturn ''",
                  "successors": []
                },
                {
                  "id": 71,
                  "label": "#71\nstyle_map = {ImageStyle.REALISTIC: 'photorealistic', ImageStyle.\n    REALISTIC_BW: 'black and white photograph', ImageStyle.REALISTIC_HDR:\n    'HDR photograph', ImageStyle.REALISTIC_NATURAL:\n    'natural light photograph', ImageStyle.REALISTIC_STUDIO:\n    'studio portrait photograph', ImageStyle.REALISTIC_ENTERPRISE:\n    'enterprise photograph', ImageStyle.REALISTIC_HARD_FLASH:\n    'hard flash photograph', ImageStyle.REALISTIC_MOTION_BLUR:\n    'motion blur photograph', ImageStyle.DIGITAL_ART: 'digital art',\n    ImageStyle.PIXEL_ART: 'pixel art', ImageStyle.HAND_DRAWN:\n    'hand drawn illustration', ImageStyle.GRAIN:\n    'grainy digital illustration', ImageStyle.SKETCH:\n    'sketchy illustration', ImageStyle.POSTER: '2D art poster', ImageStyle.\n    POSTER_2: 'alternate 2D art poster', ImageStyle.HANDMADE_3D:\n    'handmade 3D illustration', ImageStyle.HAND_DRAWN_OUTLINE:\n    'hand drawn outline illustration', ImageStyle.ENGRAVING_COLOR:\n    'color engraving illustration'}\nstyle_text = style_map.get(style, '')\nreturn f'{style_text} of' if style_text else ''",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 76,
              "label": "#76\ntry:",
              "successors": [
                {
                  "id": 77,
                  "label": "#77\nurl = self.generate_image(input_data, credentials)\nif url:",
                  "successors": [
                    {
                      "id": 80,
                      "label": "#80\nyield 'image_url', url",
                      "successors": []
                    },
                    {
                      "id": 82,
                      "label": "#82\nyield 'error', 'Image generation returned an empty result.'",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 78,
                  "label": "#78\nyield 'error', str(e)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ncredentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal[\n    'api_key']] = CredentialsField(description=\n    'Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.'\n    )\nprompt: str = SchemaField(description='Text prompt for image generation',\n    placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\",\n    title='Prompt')\nmodel: ImageGenModel = SchemaField(description=\n    'The AI model to use for image generation', default=ImageGenModel.SD3_5,\n    title='Model')\nsize: ImageSize = SchemaField(description=\n    \"\"\"Format of the generated image:\n- Square: Perfect for profile pictures, icons\n- Landscape: Traditional photo format\n- Portrait: Vertical photos, portraits\n- Wide: Cinematic format, desktop wallpapers\n- Tall: Mobile wallpapers, social media stories\"\"\"\n    , default=ImageSize.SQUARE, title='Image Format')\nstyle: ImageStyle = SchemaField(description=\n    'Visual style for the generated image', default=ImageStyle.ANY, title=\n    'Image Style')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\nimage_url: str = SchemaField(description='URL of the generated image')\nerror: str = SchemaField(description='Error message if generation failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}