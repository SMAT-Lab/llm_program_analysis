{
  "name": "27.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import cast\nfrom unittest.mock import AsyncMock\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import Methods, WsMessage, handle_subscribe, handle_unsubscribe, websocket_router",
      "start_line": 1,
      "end_line": 154,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "mock_websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nreturn AsyncMock(spec=WebSocket)",
          "start_line": 19,
          "end_line": 19,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mock_manager",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nreturn AsyncMock(spec=ConnectionManager)",
          "start_line": 24,
          "end_line": 24,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_websocket_router_subscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 11,
          "label": "#11\nmock_websocket.receive_text.side_effect = [WsMessage(method=Methods.\n    SUBSCRIBE, data={'graph_id': 'test_graph'}).model_dump_json(),\n    WebSocketDisconnect()]\nawait websocket_router(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager))",
          "start_line": 31,
          "end_line": 40,
          "successors": [
            {
              "id": 12,
              "label": "#12\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.subscribe.assert_called_once_with('test_graph', mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 42,
              "end_line": 45,
              "successors": [
                {
                  "id": 14,
                  "label": "#14\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 46,
                  "end_line": 46,
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "start_line": 47,
                      "end_line": 47,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_websocket_router_unsubscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19\nmock_websocket.receive_text.side_effect = [WsMessage(method=Methods.\n    UNSUBSCRIBE, data={'graph_id': 'test_graph'}).model_dump_json(),\n    WebSocketDisconnect()]\nawait websocket_router(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager))",
          "start_line": 54,
          "end_line": 63,
          "successors": [
            {
              "id": 20,
              "label": "#20\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe.assert_called_once_with('test_graph', mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 65,
              "end_line": 68,
              "successors": [
                {
                  "id": 22,
                  "label": "#22\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 69,
                  "end_line": 69,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "start_line": 70,
                      "end_line": 70,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_websocket_router_invalid_method",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27\nmock_websocket.receive_text.side_effect = [WsMessage(method=Methods.\n    EXECUTION_EVENT).model_dump_json(), WebSocketDisconnect()]\nawait websocket_router(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager))",
          "start_line": 77,
          "end_line": 84,
          "successors": [
            {
              "id": 28,
              "label": "#28\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 86,
              "end_line": 88,
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 89,
                  "end_line": 89,
                  "successors": [
                    {
                      "id": 32,
                      "label": "#32\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "start_line": 90,
                      "end_line": 90,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_subscribe_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 35,
          "label": "#35\nmessage = WsMessage(method=Methods.SUBSCRIBE, data={'graph_id': 'test_graph'})\nawait handle_subscribe(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager), message)",
          "start_line": 97,
          "end_line": 101,
          "successors": [
            {
              "id": 36,
              "label": "#36\nmock_manager.subscribe.assert_called_once_with('test_graph', mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 103,
              "end_line": 105,
              "successors": [
                {
                  "id": 38,
                  "label": "#38\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 106,
                  "end_line": 106,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_subscribe_missing_data",
      "type": "CFG",
      "blocks": [
        {
          "id": 43,
          "label": "#43\nmessage = WsMessage(method=Methods.SUBSCRIBE)\nawait handle_subscribe(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager), message)",
          "start_line": 113,
          "end_line": 117,
          "successors": [
            {
              "id": 44,
              "label": "#44\nmock_manager.subscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 119,
              "end_line": 121,
              "successors": [
                {
                  "id": 46,
                  "label": "#46\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 122,
                  "end_line": 122,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_unsubscribe_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 51,
          "label": "#51\nmessage = WsMessage(method=Methods.UNSUBSCRIBE, data={'graph_id': 'test_graph'}\n    )\nawait handle_unsubscribe(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager), message)",
          "start_line": 129,
          "end_line": 133,
          "successors": [
            {
              "id": 52,
              "label": "#52\nmock_manager.unsubscribe.assert_called_once_with('test_graph', mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 135,
              "end_line": 137,
              "successors": [
                {
                  "id": 54,
                  "label": "#54\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 138,
                  "end_line": 138,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_unsubscribe_missing_data",
      "type": "CFG",
      "blocks": [
        {
          "id": 59,
          "label": "#59\nmessage = WsMessage(method=Methods.UNSUBSCRIBE)\nawait handle_unsubscribe(cast(WebSocket, mock_websocket), cast(\n    ConnectionManager, mock_manager), message)",
          "start_line": 145,
          "end_line": 149,
          "successors": [
            {
              "id": 60,
              "label": "#60\nmock_manager.unsubscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
              "start_line": 151,
              "end_line": 153,
              "successors": [
                {
                  "id": 62,
                  "label": "#62\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "start_line": 154,
                  "end_line": 154,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}