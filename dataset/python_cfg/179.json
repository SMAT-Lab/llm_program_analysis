{
  "name": "179.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import List\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\nfrom ._api import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, Filament, Slant3DCredentialsField, Slant3DCredentialsInput\nfrom .base import Slant3DBlockBase",
      "start_line": 1,
      "end_line": 85,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Slant3DFilamentBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Block for retrieving available filaments\"\"\"",
          "start_line": 17,
          "end_line": 85,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='7cc416f4-f305-4606-9b3b-452b8a81031c', description=\n    'Get list of available filaments', input_schema=self.Input,\n    output_schema=self.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('filaments', [{'filament': 'PLA BLACK', 'hexColor': '000000',\n    'colorTag': 'black', 'profile': 'PLA'}, {'filament': 'PLA WHITE',\n    'hexColor': 'ffffff', 'colorTag': 'white', 'profile': 'PLA'}])],\n    test_mock={'_make_request': lambda *args, **kwargs: {'filaments': [{\n    'filament': 'PLA BLACK', 'hexColor': '000000', 'colorTag': 'black',\n    'profile': 'PLA'}, {'filament': 'PLA WHITE', 'hexColor': 'ffffff',\n    'colorTag': 'white', 'profile': 'PLA'}]}})",
              "start_line": 29,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ntry:",
              "start_line": 78,
              "end_line": 85,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nresult = self._make_request('GET', 'filament', credentials.api_key.\n    get_secret_value())\nyield 'filaments', result['filaments']",
                  "start_line": 79,
                  "end_line": 82,
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "#16\nyield 'error', str(e)",
                  "start_line": 84,
                  "end_line": 84,
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nraise",
                      "start_line": 85,
                      "end_line": 85,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "start_line": 20,
              "end_line": 20,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nfilaments: List[Filament] = SchemaField(description=\n    'List of available filaments')\nerror: str = SchemaField(description='Error message if request failed')",
              "start_line": 23,
              "end_line": 26,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}