{
  "name": "164.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 12,
          "label": "#12\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_highest_set_bit_position",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n    TypeError: Input value must be an 'int' type\n    \"\"\"\nif not isinstance(number, int):",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise TypeError(\"Input value must be an 'int' type\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nposition = 0",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nwhile number:",
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nposition += 1\nnumber >>= 1",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "#9\nreturn position",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}