{
  "name": "185.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nIn this problem, we want to determine all possible combinations of k\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"\nfrom __future__ import annotations\nfrom itertools import combinations\nif __name__ == '__main__':",
      "start_line": 1,
      "end_line": 82,
      "successors": [
        {
          "id": 24,
          "label": "#24\nfrom doctest import testmod\ntestmod()\nprint(generate_all_combinations(n=4, k=2))\ntests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
          "start_line": 70,
          "end_line": 74,
          "successors": [
            {
              "id": 26,
              "label": "#26\nfor n, k in tests:",
              "start_line": 75,
              "end_line": 76,
              "successors": [
                {
                  "id": 27,
                  "label": "#27\nprint(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                  "start_line": 76,
                  "end_line": 76,
                  "successors": []
                },
                {
                  "id": 28,
                  "label": "#28\nprint('Benchmark:')\nfrom timeit import timeit",
                  "start_line": 78,
                  "end_line": 79,
                  "successors": [
                    {
                      "id": 29,
                      "label": "#29\nfor func in ('combination_lists', 'generate_all_combinations'):",
                      "start_line": 81,
                      "end_line": 82,
                      "successors": [
                        {
                          "id": 30,
                          "label": "#30\nprint(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                          "start_line": 82,
                          "end_line": 82,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "combination_lists",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\nreturn [list(x) for x in combinations(range(1, n + 1), k)]",
          "start_line": 14,
          "end_line": 18,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_all_combinations",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    True\n    \"\"\"\nif k < 0:",
          "start_line": 22,
          "end_line": 43,
          "successors": [
            {
              "id": 8,
              "label": "#8\nraise ValueError('k must not be negative')",
              "start_line": 43,
              "end_line": 43,
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nif n < 0:",
              "start_line": 44,
              "end_line": 45,
              "successors": [
                {
                  "id": 11,
                  "label": "#11\nraise ValueError('n must not be negative')",
                  "start_line": 45,
                  "end_line": 45,
                  "successors": []
                },
                {
                  "id": 12,
                  "label": "#12\nresult: list[list[int]] = []\ncreate_all_state(1, n, k, [], result)\nreturn result",
                  "start_line": 47,
                  "end_line": 49,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_all_state",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\nif level == 0:",
          "start_line": 59,
          "end_line": 61,
          "successors": [
            {
              "id": 18,
              "label": "#18\ntotal_list.append(current_list[:])\nreturn",
              "start_line": 60,
              "end_line": 61,
              "successors": []
            },
            {
              "id": 19,
              "label": "#19\nfor i in range(increment, total_number - level + 2):",
              "start_line": 63,
              "end_line": 66,
              "successors": [
                {
                  "id": 21,
                  "label": "#21\ncurrent_list.append(i)\ncreate_all_state(i + 1, total_number, level - 1, current_list, total_list)\ncurrent_list.pop()",
                  "start_line": 64,
                  "end_line": 66,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}