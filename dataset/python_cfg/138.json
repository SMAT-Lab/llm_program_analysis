{
  "name": "138.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport time\nfrom typing import Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='d_id', api_key=\n    SecretStr('mock-d-id-api-key'), title='Mock D-ID API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "start_line": 1,
      "end_line": 172,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "CreateTalkingAvatarVideoBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 32,
          "end_line": 172,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='98c6f503-8c47-4b1c-a96d-351fc7c87dab', description=\n    'This block integrates with D-ID to create video clips and retrieve their URLs.'\n    , categories={BlockCategory.AI}, input_schema=\n    CreateTalkingAvatarVideoBlock.Input, output_schema=\n    CreateTalkingAvatarVideoBlock.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'script_input': 'Welcome to AutoGPT',\n    'voice_id': 'en-US-JennyNeural', 'presenter_id': 'amy-Aq6OmGZnMt',\n    'driver_id': 'Vcq0R4a8F0', 'result_format': 'mp4', 'crop_type': 'wide',\n    'subtitles': False, 'ssml': False, 'max_polling_attempts': 5,\n    'polling_interval': 5}, test_output=[('video_url',\n    'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video'\n    )], test_mock={'create_clip': lambda *args, **kwargs: {'id':\n    'abcd1234-5678-efgh-ijkl-mnopqrstuvwx', 'status': 'created'},\n    'get_clip_status': lambda *args, **kwargs: {'status': 'done',\n    'result_url':\n    'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video'\n    }}, test_credentials=TEST_CREDENTIALS)",
              "start_line": 78,
              "end_line": 114,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_clip",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nurl = 'https://api.d-id.com/clips'\nheaders = {'accept': 'application/json', 'content-type': 'application/json',\n    'authorization': f'Basic {api_key.get_secret_value()}'}\nresponse = requests.post(url, json=payload, headers=headers)\nreturn response.json()",
              "start_line": 117,
              "end_line": 124,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_clip_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\nurl = f'https://api.d-id.com/clips/{clip_id}'\nheaders = {'accept': 'application/json', 'authorization':\n    f'Basic {api_key.get_secret_value()}'}\nresponse = requests.get(url, headers=headers)\nreturn response.json()",
              "start_line": 127,
              "end_line": 133,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\npayload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles\n    ).lower(), 'provider': {'type': input_data.provider, 'voice_id':\n    input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input':\n    input_data.script_input}, 'config': {'result_format': input_data.\n    result_format}, 'presenter_config': {'crop': {'type': input_data.\n    crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id':\n    input_data.driver_id}\nresponse = self.create_clip(credentials.api_key, payload)\nclip_id = response['id']",
              "start_line": 139,
              "end_line": 157,
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nfor _ in range(input_data.max_polling_attempts):",
                  "start_line": 160,
                  "end_line": 170,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nstatus_response = self.get_clip_status(credentials.api_key, clip_id)\nif status_response['status'] == 'done':",
                      "start_line": 161,
                      "end_line": 168,
                      "successors": [
                        {
                          "id": 26,
                          "label": "#26\nyield 'video_url', status_response['result_url']",
                          "start_line": 163,
                          "end_line": 163,
                          "successors": [
                            {
                              "id": 32,
                              "label": "#32\nreturn",
                              "start_line": 164,
                              "end_line": 164,
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 28,
                          "label": "#28\nif status_response['status'] == 'error':",
                          "start_line": 165,
                          "end_line": 168,
                          "successors": [
                            {
                              "id": 29,
                              "label": "#29\nraise RuntimeError(\n    f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")",
                              "start_line": 166,
                              "end_line": 168,
                              "successors": []
                            },
                            {
                              "id": 27,
                              "label": "#27\ntime.sleep(input_data.polling_interval)",
                              "start_line": 170,
                              "end_line": 170,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 25,
                      "label": "#25\nraise TimeoutError('Clip creation timed out')",
                      "start_line": 172,
                      "end_line": 172,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal[\n    'api_key']] = CredentialsField(description=\n    'The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )\nscript_input: str = SchemaField(description='The text input for the script',\n    placeholder='Welcome to AutoGPT')\nprovider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(\n    description='The voice provider to use', default='microsoft')\nvoice_id: str = SchemaField(description=\n    'The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)'\n    , default='en-US-JennyNeural')\npresenter_id: str = SchemaField(description='The presenter ID to use',\n    default='amy-Aq6OmGZnMt')\ndriver_id: str = SchemaField(description='The driver ID to use', default=\n    'Vcq0R4a8F0')\nresult_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description=\n    'The desired result format', default='mp4')\ncrop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description=\n    'The crop type for the presenter', default='wide')\nsubtitles: bool = SchemaField(description='Whether to include subtitles',\n    default=False)\nssml: bool = SchemaField(description='Whether the input is SSML', default=False\n    )\nmax_polling_attempts: int = SchemaField(description=\n    'Maximum number of polling attempts', default=30, ge=5)\npolling_interval: int = SchemaField(description=\n    'Interval between polling attempts in seconds', default=10, ge=5)",
              "start_line": 33,
              "end_line": 71,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nvideo_url: str = SchemaField(description='The URL of the created video')\nerror: str = SchemaField(description='Error message if the request failed')",
              "start_line": 74,
              "end_line": 75,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}