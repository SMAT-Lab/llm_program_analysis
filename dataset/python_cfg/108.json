{
  "name": "108.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom base64 import b64encode\nfrom urllib.parse import urlencode\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nfrom .base import BaseOAuthHandler",
      "start_line": 1,
      "end_line": 90,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "NotionOAuthHandler",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Based on the documentation at https://developers.notion.com/docs/authorization\n\n    Notes:\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\n    - Notion doesn't use scopes\n    \"\"\"\nPROVIDER_NAME = ProviderName.NOTION",
          "start_line": 12,
          "end_line": 90,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.client_id = client_id\nself.client_secret = client_secret\nself.redirect_uri = redirect_uri\nself.auth_base_url = 'https://api.notion.com/v1/oauth/authorize'\nself.token_url = 'https://api.notion.com/v1/oauth/token'",
              "start_line": 23,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_login_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nparams = {'client_id': self.client_id, 'redirect_uri': self.redirect_uri,\n    'response_type': 'code', 'owner': 'user', 'state': state}\nreturn f'{self.auth_base_url}?{urlencode(params)}'",
              "start_line": 30,
              "end_line": 37,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nrequest_body = {'grant_type': 'authorization_code', 'code': code,\n    'redirect_uri': self.redirect_uri}\nauth_str = b64encode(f'{self.client_id}:{self.client_secret}'.encode()).decode(\n    )\nheaders = {'Authorization': f'Basic {auth_str}', 'Accept': 'application/json'}\nresponse = requests.post(self.token_url, json=request_body, headers=headers)\ntoken_data = response.json()\nemail = token_data['owner']['person']['email'] if 'person' in token_data[\n    'owner'] and 'email' in token_data['owner']['person'] else None\nreturn OAuth2Credentials(provider=self.PROVIDER_NAME, title=token_data.get(\n    'workspace_name'), username=email, access_token=token_data[\n    'access_token'], refresh_token=None, access_token_expires_at=None,\n    refresh_token_expires_at=None, scopes=[], metadata={'owner': token_data\n    ['owner'], 'bot_id': token_data['bot_id'], 'workspace_id': token_data[\n    'workspace_id'], 'workspace_name': token_data.get('workspace_name'),\n    'workspace_icon': token_data.get('workspace_icon')})",
              "start_line": 42,
              "end_line": 78,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "revoke_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 16,
              "label": "#16\nreturn False",
              "start_line": 82,
              "end_line": 82,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_refresh_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\nreturn credentials",
              "start_line": 86,
              "end_line": 86,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "needs_refresh",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nreturn False",
              "start_line": 90,
              "end_line": 90,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}