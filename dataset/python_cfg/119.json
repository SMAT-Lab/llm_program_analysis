{
  "name": "119.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom timeit import timeit\nif __name__ == '__main__':",
      "start_line": 1,
      "end_line": 93,
      "successors": [
        {
          "id": 33,
          "label": "#33\nimport doctest\ndoctest.testmod()\nbenchmark()",
          "start_line": 90,
          "end_line": 93,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_set_bits_count_using_brian_kernighans_algorithm",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n    ValueError: the value of input must not be negative\n    \"\"\"\nif number < 0:",
          "start_line": 5,
          "end_line": 25,
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('the value of input must not be negative')",
              "start_line": 25,
              "end_line": 25,
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nresult = 0",
              "start_line": 26,
              "end_line": 26,
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nwhile number:",
                  "start_line": 27,
                  "end_line": 29,
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nnumber &= number - 1\nresult += 1",
                      "start_line": 28,
                      "end_line": 29,
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "#9\nreturn result",
                      "start_line": 30,
                      "end_line": 30,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_set_bits_count_using_modulo_operator",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\n\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n    ValueError: the value of input must not be negative\n    \"\"\"\nif number < 0:",
          "start_line": 34,
          "end_line": 54,
          "successors": [
            {
              "id": 14,
              "label": "#14\nraise ValueError('the value of input must not be negative')",
              "start_line": 54,
              "end_line": 54,
              "successors": []
            },
            {
              "id": 15,
              "label": "#15\nresult = 0",
              "start_line": 55,
              "end_line": 55,
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nwhile number:",
                  "start_line": 56,
                  "end_line": 59,
                  "successors": [
                    {
                      "id": 18,
                      "label": "#18\nif number % 2 == 1:",
                      "start_line": 57,
                      "end_line": 58,
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\nresult += 1",
                          "start_line": 58,
                          "end_line": 58,
                          "successors": [
                            {
                              "id": 21,
                              "label": "#21\nnumber >>= 1",
                              "start_line": 59,
                              "end_line": 59,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 19,
                      "label": "#19\nreturn result",
                      "start_line": 60,
                      "end_line": 60,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "benchmark",
      "type": "CFG",
      "blocks": [
        {
          "id": 25,
          "label": "#25\n\"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"",
          "start_line": 64,
          "end_line": 82,
          "successors": [
            {
              "id": 29,
              "label": "#29\nfor number in (25, 37, 58, 0):",
              "start_line": 84,
              "end_line": 86,
              "successors": [
                {
                  "id": 30,
                  "label": "#30\ndo_benchmark(number)\nprint()",
                  "start_line": 85,
                  "end_line": 86,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "do_benchmark",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\nsetup = 'import __main__ as z'\nprint(f'Benchmark when number = {number!r}:')\nprint(\n    f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}'\n    )\ntiming = timeit(f'z.get_set_bits_count_using_modulo_operator({number})',\n    setup=setup)\nprint(f'timeit() runs in {timing} seconds')\nprint(\n    f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}'\n    )\ntiming = timeit(\n    f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})',\n    setup=setup)\nprint(f'timeit() runs in {timing} seconds')",
              "start_line": 70,
              "end_line": 82,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}