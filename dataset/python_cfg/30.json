{
  "name": "30.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport re\nimport sys\nimport random\nfrom typing import List, Tuple\nimport requests\nfrom requests.models import Response\nif __name__ == '__main__':",
      "start_line": 3,
      "end_line": 273,
      "successors": [
        {
          "id": 97,
          "label": "#97\nnum_args = len(sys.argv)\nonly_duplicate_links_checker = False\nif num_args < 2:",
          "start_line": 256,
          "end_line": 269,
          "successors": [
            {
              "id": 99,
              "label": "#99\nprint('No .md file passed')\nsys.exit(1)",
              "start_line": 260,
              "end_line": 261,
              "successors": [
                {
                  "id": 100,
                  "label": "#100\nfilename = sys.argv[1]\nmain(filename, only_duplicate_links_checker)",
                  "start_line": 271,
                  "end_line": 273,
                  "successors": []
                }
              ]
            },
            {
              "id": 101,
              "label": "#101\nif num_args == 3:",
              "start_line": 262,
              "end_line": 269,
              "successors": [
                {
                  "id": 102,
                  "label": "#102\nthird_arg = sys.argv[2].lower()\nif third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':",
                  "start_line": 263,
                  "end_line": 269,
                  "successors": [
                    {
                      "id": 104,
                      "label": "#104\nonly_duplicate_links_checker = True",
                      "start_line": 266,
                      "end_line": 266,
                      "successors": []
                    },
                    {
                      "id": 106,
                      "label": "#106\nprint(\n    f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'\n    )\nsys.exit(1)",
                      "start_line": 268,
                      "end_line": 269,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "find_links_in_text",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Find links in a text and return a list of URLs.\"\"\"\nlink_pattern = re.compile(\n    '((?:https?://|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s`!()\\\\[\\\\]{};:\\\\\\'\\\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))'\n    )\nraw_links = re.findall(link_pattern, text)\nlinks = [str(raw_link[0]) for raw_link in raw_links]\nreturn links",
          "start_line": 13,
          "end_line": 23,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "find_links_in_file",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\nwith open(filename, mode='r', encoding='utf-8') as file:",
          "start_line": 27,
          "end_line": 34,
          "successors": [
            {
              "id": 8,
              "label": "#8\nreadme = file.read()\nindex_section = readme.find('## Index')\nif index_section == -1:",
              "start_line": 30,
              "end_line": 33,
              "successors": [
                {
                  "id": 10,
                  "label": "#10\nindex_section = 0",
                  "start_line": 33,
                  "end_line": 33,
                  "successors": [
                    {
                      "id": 11,
                      "label": "#11\ncontent = readme[index_section:]",
                      "start_line": 34,
                      "end_line": 34,
                      "successors": [
                        {
                          "id": 9,
                          "label": "#9\nlinks = find_links_in_text(content)\nreturn links",
                          "start_line": 36,
                          "end_line": 38,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_duplicate_links",
      "type": "CFG",
      "blocks": [
        {
          "id": 15,
          "label": "#15\n\"\"\"Check for duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\nseen = {}\nduplicates = []\nhas_duplicate = False",
          "start_line": 42,
          "end_line": 49,
          "successors": [
            {
              "id": 16,
              "label": "#16\nfor link in links:",
              "start_line": 51,
              "end_line": 57,
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nlink = link.rstrip('/')\nif link not in seen:",
                  "start_line": 52,
                  "end_line": 57,
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nseen[link] = 1",
                      "start_line": 54,
                      "end_line": 54,
                      "successors": []
                    },
                    {
                      "id": 21,
                      "label": "#21\nif seen[link] == 1:",
                      "start_line": 56,
                      "end_line": 57,
                      "successors": [
                        {
                          "id": 22,
                          "label": "#22\nduplicates.append(link)",
                          "start_line": 57,
                          "end_line": 57,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 18,
                  "label": "#18\nif duplicates:",
                  "start_line": 59,
                  "end_line": 60,
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nhas_duplicate = True",
                      "start_line": 60,
                      "end_line": 60,
                      "successors": [
                        {
                          "id": 25,
                          "label": "#25\nreturn has_duplicate, duplicates",
                          "start_line": 62,
                          "end_line": 62,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "fake_user_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 29,
          "label": "#29\n\"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\nuser_agents = [\n    'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36'\n    ,\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)'\n    ,\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36'\n    ,\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36'\n    ]\nreturn random.choice(user_agents)",
          "start_line": 66,
          "end_line": 75,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_host_from_link",
      "type": "CFG",
      "blocks": [
        {
          "id": 33,
          "label": "#33\nhost = link.split('://', 1)[1] if '://' in link else link\nif '/' in host:",
          "start_line": 80,
          "end_line": 90,
          "successors": [
            {
              "id": 34,
              "label": "#34\nhost = host.split('/', 1)[0]",
              "start_line": 84,
              "end_line": 84,
              "successors": [
                {
                  "id": 35,
                  "label": "#35\nreturn host",
                  "start_line": 92,
                  "end_line": 92,
                  "successors": []
                }
              ]
            },
            {
              "id": 36,
              "label": "#36\nif '?' in host:",
              "start_line": 86,
              "end_line": 90,
              "successors": [
                {
                  "id": 37,
                  "label": "#37\nhost = host.split('?', 1)[0]",
                  "start_line": 87,
                  "end_line": 87,
                  "successors": []
                },
                {
                  "id": 39,
                  "label": "#39\nif '#' in host:",
                  "start_line": 89,
                  "end_line": 90,
                  "successors": [
                    {
                      "id": 40,
                      "label": "#40\nhost = host.split('#', 1)[0]",
                      "start_line": 90,
                      "end_line": 90,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "has_cloudflare_protection",
      "type": "CFG",
      "blocks": [
        {
          "id": 45,
          "label": "#45\n\"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\ncode = resp.status_code\nserver = resp.headers.get('Server') or resp.headers.get('server')\ncloudflare_flags = ['403 Forbidden', 'cloudflare', 'Cloudflare',\n    'Checking your browser before accessing', 'This process is automatic.',\n    'Your browser will redirect to your requested content shortly.',\n    'Please allow up to 5 seconds', 'DDoS protection by', 'Ray ID:',\n    'Cloudflare Ray ID:', '_cf_chl', '_cf_chl_opt', '__cf_chl_rt_tk',\n    'cf-spinner-please-wait', 'cf-spinner-redirecting']\nif code in [403, 503] and server == 'cloudflare':",
          "start_line": 96,
          "end_line": 147,
          "successors": [
            {
              "id": 46,
              "label": "#46\nhtml = resp.text\nflags_found = [(flag in html) for flag in cloudflare_flags]\nany_flag_found = any(flags_found)\nif any_flag_found:",
              "start_line": 141,
              "end_line": 147,
              "successors": [
                {
                  "id": 48,
                  "label": "#48\nreturn True",
                  "start_line": 147,
                  "end_line": 147,
                  "successors": []
                },
                {
                  "id": 47,
                  "label": "#47\nreturn False",
                  "start_line": 149,
                  "end_line": 149,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_if_link_is_working",
      "type": "CFG",
      "blocks": [
        {
          "id": 54,
          "label": "#54\n\"\"\"Checks if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\nhas_error = False\nerror_message = ''\ntry:",
          "start_line": 153,
          "end_line": 196,
          "successors": [
            {
              "id": 55,
              "label": "#55\nresp = requests.get(link, timeout=25, headers={'User-Agent':\n    fake_user_agent(), 'host': get_host_from_link(link)})\ncode = resp.status_code\nif code >= 400 and not has_cloudflare_protection(resp):",
              "start_line": 167,
              "end_line": 176,
              "successors": [
                {
                  "id": 62,
                  "label": "#62\nhas_error = True\nerror_message = f'ERR:CLT: {code} : {link}'",
                  "start_line": 175,
                  "end_line": 176,
                  "successors": [
                    {
                      "id": 61,
                      "label": "#61\nreturn has_error, error_message",
                      "start_line": 198,
                      "end_line": 198,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 56,
              "label": "#56\nhas_error = True\nerror_message = f'ERR:SSL: {error} : {link}'",
              "start_line": 179,
              "end_line": 180,
              "successors": []
            },
            {
              "id": 57,
              "label": "#57\nhas_error = True\nerror_message = f'ERR:CNT: {error} : {link}'",
              "start_line": 183,
              "end_line": 184,
              "successors": []
            },
            {
              "id": 58,
              "label": "#58\nhas_error = True\nerror_message = f'ERR:TMO: {link}'",
              "start_line": 187,
              "end_line": 188,
              "successors": []
            },
            {
              "id": 59,
              "label": "#59\nhas_error = True\nerror_message = f'ERR:TMR: {error} : {link}'",
              "start_line": 191,
              "end_line": 192,
              "successors": []
            },
            {
              "id": 60,
              "label": "#60\nhas_error = True\nerror_message = f'ERR:UKN: {error} : {link}'",
              "start_line": 195,
              "end_line": 196,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_if_list_of_links_are_working",
      "type": "CFG",
      "blocks": [
        {
          "id": 67,
          "label": "#67\nerror_messages = []",
          "start_line": 202,
          "end_line": 202,
          "successors": [
            {
              "id": 68,
              "label": "#68\nfor link in list_of_links:",
              "start_line": 203,
              "end_line": 207,
              "successors": [
                {
                  "id": 69,
                  "label": "#69\nhas_error, error_message = check_if_link_is_working(link)\nif has_error:",
                  "start_line": 204,
                  "end_line": 207,
                  "successors": [
                    {
                      "id": 71,
                      "label": "#71\nerror_messages.append(error_message)",
                      "start_line": 207,
                      "end_line": 207,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 70,
                  "label": "#70\nreturn error_messages",
                  "start_line": 209,
                  "end_line": 209,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "start_duplicate_links_checker",
      "type": "CFG",
      "blocks": [
        {
          "id": 76,
          "label": "#76\nhas_duplicate_link, duplicates_links = check_duplicate_links(links)\nif has_duplicate_link:",
          "start_line": 214,
          "end_line": 226,
          "successors": [
            {
              "id": 77,
              "label": "#77\nprint(f'Found duplicate links:')",
              "start_line": 219,
              "end_line": 219,
              "successors": [
                {
                  "id": 80,
                  "label": "#80\nfor duplicate_link in duplicates_links:",
                  "start_line": 221,
                  "end_line": 222,
                  "successors": [
                    {
                      "id": 81,
                      "label": "#81\nprint(duplicate_link)",
                      "start_line": 222,
                      "end_line": 222,
                      "successors": []
                    },
                    {
                      "id": 82,
                      "label": "#82\nsys.exit(1)",
                      "start_line": 224,
                      "end_line": 224,
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 79,
              "label": "#79\nprint('No duplicate links.')",
              "start_line": 226,
              "end_line": 226,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "start_links_working_checker",
      "type": "CFG",
      "blocks": [
        {
          "id": 85,
          "label": "#85\nerrors = check_if_list_of_links_are_working(links)\nif errors:",
          "start_line": 231,
          "end_line": 242,
          "successors": [
            {
              "id": 86,
              "label": "#86\nnum_errors = len(errors)\nprint(f'Apparently {num_errors} links are not working properly. See in:')",
              "start_line": 236,
              "end_line": 237,
              "successors": [
                {
                  "id": 88,
                  "label": "#88\nfor error_message in errors:",
                  "start_line": 239,
                  "end_line": 240,
                  "successors": [
                    {
                      "id": 89,
                      "label": "#89\nprint(error_message)",
                      "start_line": 240,
                      "end_line": 240,
                      "successors": []
                    },
                    {
                      "id": 90,
                      "label": "#90\nsys.exit(1)",
                      "start_line": 242,
                      "end_line": 242,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 93,
          "label": "#93\nlinks = find_links_in_file(filename)\nstart_duplicate_links_checker(links)\nif not only_duplicate_links_checker:",
          "start_line": 247,
          "end_line": 252,
          "successors": [
            {
              "id": 94,
              "label": "#94\nstart_links_working_checker(links)",
              "start_line": 252,
              "end_line": 252,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}