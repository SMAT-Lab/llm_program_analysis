{
  "name": "134.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport json\nimport logging\nfrom pathlib import Path\nfrom pydantic import BaseModel\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockWebhookConfig\nfrom backend.data.model import SchemaField\nfrom ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentialsField, GithubCredentialsInput\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "GitHubTriggerBase",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nyield 'payload', input_data.payload",
              "successors": [
                {
                  "id": 12,
                  "label": "#12\nyield 'triggered_by_user', input_data.payload['sender']",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo: str = SchemaField(description=\n    \"\"\"Repository to subscribe to.\n\n**Note:** Make sure your GitHub credentials have permissions to create webhooks on this repo.\"\"\"\n    , placeholder='{owner}/{repo}')\npayload: dict = SchemaField(hidden=True, default={})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\npayload: dict = SchemaField(description=\n    'The complete webhook payload that was received from GitHub. Includes information about the affected resource (e.g. pull request), the event, and the user who triggered the event.'\n    )\ntriggered_by_user: dict = SchemaField(description=\n    'Object representing the GitHub user who triggered the event')\nerror: str = SchemaField(description=\n    'Error message if the payload could not be processed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubPullRequestTriggerBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\nEXAMPLE_PAYLOAD_FILE = Path(__file__\n    ).parent / 'example_payloads' / 'pull_request.synchronize.json'",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 28,
              "label": "#28\nfrom backend.integrations.webhooks.github import GithubWebhookType\nexample_payload = json.loads(self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\n    'utf-8'))\nsuper().__init__(id='6c60ec01-8128-419e-988f-96a063ee2fea', description=\n    'This block triggers on pull request events and outputs the event type and payload.'\n    , categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT},\n    input_schema=GithubPullRequestTriggerBlock.Input, output_schema=\n    GithubPullRequestTriggerBlock.Output, webhook_config=BlockWebhookConfig\n    (provider='github', webhook_type=GithubWebhookType.REPO,\n    resource_format='{repo}', event_filter_input='events', event_format=\n    'pull_request.{event}'), test_input={'repo':\n    'Significant-Gravitas/AutoGPT', 'events': {'opened': True,\n    'synchronize': True}, 'credentials': TEST_CREDENTIALS_INPUT, 'payload':\n    example_payload}, test_credentials=TEST_CREDENTIALS, test_output=[(\n    'payload', example_payload), ('triggered_by_user', example_payload[\n    'sender']), ('event', example_payload['action']), ('number',\n    example_payload['number']), ('pull_request', example_payload[\n    'pull_request']), ('pull_request_url', example_payload['pull_request'][\n    'html_url'])])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 31,
              "label": "#31\nyield from super().run(input_data, **kwargs)\nyield 'event', input_data.payload['action']",
              "successors": [
                {
                  "id": 32,
                  "label": "#32\nyield 'number', input_data.payload['number']",
                  "successors": [
                    {
                      "id": 33,
                      "label": "#33\nyield 'pull_request', input_data.payload['pull_request']",
                      "successors": [
                        {
                          "id": 34,
                          "label": "#34\nyield 'pull_request_url', input_data.payload['pull_request']['html_url']",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 19,
              "label": "#19\nevents: EventsFilter = SchemaField(title='Events', description=\n    'The events to subscribe to')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "EventsFilter",
              "type": "CFG",
              "blocks": [
                {
                  "id": 21,
                  "label": "#21\n\"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\nopened: bool = False\nedited: bool = False\nclosed: bool = False\nreopened: bool = False\nsynchronize: bool = False\nassigned: bool = False\nunassigned: bool = False\nlabeled: bool = False\nunlabeled: bool = False\nconverted_to_draft: bool = False\nlocked: bool = False\nunlocked: bool = False\nenqueued: bool = False\ndequeued: bool = False\nmilestoned: bool = False\ndemilestoned: bool = False\nready_for_review: bool = False\nreview_requested: bool = False\nreview_request_removed: bool = False\nauto_merge_enabled: bool = False\nauto_merge_disabled: bool = False",
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 25,
              "label": "#25\nevent: str = SchemaField(description=\n    \"The PR event that triggered the webhook (e.g. 'opened')\")\nnumber: int = SchemaField(description='The number of the affected pull request'\n    )\npull_request: dict = SchemaField(description=\n    'Object representing the affected pull request')\npull_request_url: str = SchemaField(description=\n    'The URL of the affected pull request')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}