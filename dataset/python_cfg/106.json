{
  "name": "106.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom enum import Enum\nfrom typing import Literal\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='e2b', api_key=\n    SecretStr('mock-e2b-api-key'), title='Mock E2B API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "start_line": 1,
      "end_line": 190,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ProgrammingLanguage",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nPYTHON = 'python'\nJAVASCRIPT = 'js'\nBASH = 'bash'\nR = 'r'\nJAVA = 'java'",
          "start_line": 32,
          "end_line": 36,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CodeExecutionBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6",
          "start_line": 42,
          "end_line": 190,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description=\n    'Executes code in an isolated sandbox environment with internet access.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output,\n    test_credentials=TEST_CREDENTIALS, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language':\n    ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300,\n    'template_id': ''}, test_output=[('response', 'Hello World'), (\n    'stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda\n    code, language, setup_commands, timeout, api_key, template_id: (\n    'Hello World', 'Hello World\\n', '')})",
              "start_line": 98,
              "end_line": 124,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execute_code",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\ntry:",
              "start_line": 135,
              "end_line": 168,
              "successors": [
                {
                  "id": 18,
                  "label": "#18\nsandbox = None\nif template_id:",
                  "start_line": 136,
                  "end_line": 142,
                  "successors": [
                    {
                      "id": 21,
                      "label": "#21\nsandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)",
                      "start_line": 138,
                      "end_line": 140,
                      "successors": [
                        {
                          "id": 22,
                          "label": "#22\nif not sandbox:",
                          "start_line": 144,
                          "end_line": 145,
                          "successors": [
                            {
                              "id": 24,
                              "label": "#24\nraise Exception('Sandbox not created')",
                              "start_line": 145,
                              "end_line": 145,
                              "successors": []
                            },
                            {
                              "id": 25,
                              "label": "#25\nfor cmd in setup_commands:",
                              "start_line": 148,
                              "end_line": 149,
                              "successors": [
                                {
                                  "id": 27,
                                  "label": "#27\nsandbox.commands.run(cmd)",
                                  "start_line": 149,
                                  "end_line": 149,
                                  "successors": []
                                },
                                {
                                  "id": 28,
                                  "label": "#28\nexecution = sandbox.run_code(code, language=language.value, on_error=lambda\n    e: sandbox.kill())\nif execution.error:",
                                  "start_line": 152,
                                  "end_line": 159,
                                  "successors": [
                                    {
                                      "id": 29,
                                      "label": "#29\nraise Exception(execution.error)",
                                      "start_line": 159,
                                      "end_line": 159,
                                      "successors": []
                                    },
                                    {
                                      "id": 30,
                                      "label": "#30\nresponse = execution.text\nstdout_logs = ''.join(execution.logs.stdout)\nstderr_logs = ''.join(execution.logs.stderr)\nreturn response, stdout_logs, stderr_logs",
                                      "start_line": 161,
                                      "end_line": 165,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 23,
                      "label": "#23\nsandbox = Sandbox(api_key=api_key, timeout=timeout)",
                      "start_line": 142,
                      "end_line": 142,
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 19,
                  "label": "#19\nraise e",
                  "start_line": 168,
                  "end_line": 168,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\ntry:",
              "start_line": 173,
              "end_line": 190,
              "successors": [
                {
                  "id": 37,
                  "label": "#37\nresponse, stdout_logs, stderr_logs = self.execute_code(input_data.code,\n    input_data.language, input_data.setup_commands, input_data.timeout,\n    credentials.api_key.get_secret_value(), input_data.template_id)\nif response:",
                  "start_line": 174,
                  "end_line": 184,
                  "successors": [
                    {
                      "id": 40,
                      "label": "#40\nyield 'response', response",
                      "start_line": 184,
                      "end_line": 184,
                      "successors": [
                        {
                          "id": 41,
                          "label": "#41\nif stdout_logs:",
                          "start_line": 185,
                          "end_line": 186,
                          "successors": [
                            {
                              "id": 43,
                              "label": "#43\nyield 'stdout_logs', stdout_logs",
                              "start_line": 186,
                              "end_line": 186,
                              "successors": [
                                {
                                  "id": 44,
                                  "label": "#44\nif stderr_logs:",
                                  "start_line": 187,
                                  "end_line": 188,
                                  "successors": [
                                    {
                                      "id": 46,
                                      "label": "#46\nyield 'stderr_logs', stderr_logs",
                                      "start_line": 188,
                                      "end_line": 188,
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 38,
                  "label": "#38\nyield 'error', str(e)",
                  "start_line": 190,
                  "end_line": 190,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\ncredentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']\n    ] = CredentialsField(description=\n    'Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs'\n    )\nsetup_commands: list[str] = SchemaField(description=\n    \"\"\"Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\n\nThese commands are executed with `sh`, in the foreground.\"\"\"\n    , placeholder='pip install cowsay', default=[], advanced=False)\ncode: str = SchemaField(description='Code to execute in the sandbox',\n    placeholder=\"print('Hello, World!')\", default='', advanced=False)\nlanguage: ProgrammingLanguage = SchemaField(description=\n    'Programming language to execute', default=ProgrammingLanguage.PYTHON,\n    advanced=False)\ntimeout: int = SchemaField(description='Execution timeout in seconds',\n    default=300)\ntemplate_id: str = SchemaField(description=\n    'You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)'\n    , default='', advanced=True)",
              "start_line": 43,
              "end_line": 87,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nresponse: str = SchemaField(description='Response from code execution')\nstdout_logs: str = SchemaField(description=\n    'Standard output logs from execution')\nstderr_logs: str = SchemaField(description='Standard error logs from execution'\n    )\nerror: str = SchemaField(description='Error message if execution failed')",
              "start_line": 90,
              "end_line": 95,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}