{
  "name": "192.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport operator\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Operation",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nADD = 'Add'\nSUBTRACT = 'Subtract'\nMULTIPLY = 'Multiply'\nDIVIDE = 'Divide'\nPOWER = 'Power'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CalculatorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='b1ab9b19-67a6-406d-abf5-2dba76d00c79', input_schema=\n    CalculatorBlock.Input, output_schema=CalculatorBlock.Output,\n    description='Performs a mathematical operation on two numbers.',\n    categories={BlockCategory.LOGIC}, test_input={'operation': Operation.\n    ADD.value, 'a': 10.0, 'b': 5.0, 'round_result': False}, test_output=[(\n    'result', 15.0)])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\noperation = input_data.operation\na = input_data.a\nb = input_data.b\noperations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub,\n    Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv,\n    Operation.POWER: operator.pow}\nop_func = operations[operation]\ntry:",
              "successors": [
                {
                  "id": 18,
                  "label": "#18\nif operation == Operation.DIVIDE and b == 0:",
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\nraise ZeroDivisionError('Cannot divide by zero')",
                      "successors": []
                    },
                    {
                      "id": 23,
                      "label": "#23\nresult = op_func(a, b)\nif input_data.round_result:",
                      "successors": [
                        {
                          "id": 25,
                          "label": "#25\nresult = round(result)",
                          "successors": [
                            {
                              "id": 26,
                              "label": "#26\nyield 'result', result",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 19,
                  "label": "#19\nyield 'result', float('inf')",
                  "successors": []
                },
                {
                  "id": 20,
                  "label": "#20\nyield 'result', float('nan')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\noperation: Operation = SchemaField(description=\n    'Choose the math operation you want to perform', placeholder=\n    'Select an operation')\na: float = SchemaField(description='Enter the first number (A)',\n    placeholder='For example: 10')\nb: float = SchemaField(description='Enter the second number (B)',\n    placeholder='For example: 5')\nround_result: bool = SchemaField(description=\n    'Do you want to round the result to a whole number?', default=False)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nresult: float = SchemaField(description='The result of your calculation')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "CountItemsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 33,
          "label": "#33",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 41,
              "label": "#41\nsuper().__init__(id='3c9c2f42-b0c3-435f-ba35-05f7a25c772a', input_schema=\n    CountItemsBlock.Input, output_schema=CountItemsBlock.Output,\n    description='Counts the number of items in a collection.', categories={\n    BlockCategory.LOGIC}, test_input={'collection': [1, 2, 3, 4, 5]},\n    test_output=[('count', 5)])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 44,
              "label": "#44\ncollection = input_data.collection\ntry:",
              "successors": [
                {
                  "id": 45,
                  "label": "#45\nif isinstance(collection, (str, list, tuple, set, dict)):",
                  "successors": [
                    {
                      "id": 48,
                      "label": "#48\ncount = len(collection)",
                      "successors": [
                        {
                          "id": 49,
                          "label": "#49\nyield 'count', count",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 50,
                      "label": "#50\nif hasattr(collection, '__iter__'):",
                      "successors": [
                        {
                          "id": 51,
                          "label": "#51\ncount = sum(1 for _ in collection)",
                          "successors": []
                        },
                        {
                          "id": 53,
                          "label": "#53\nraise ValueError('Input is not a countable collection')",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 46,
                  "label": "#46\nyield 'count', -1",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35\ncollection: Any = SchemaField(description=\n    'Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.'\n    , placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 38,
              "label": "#38\ncount: int = SchemaField(description='The number of items in the collection')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}