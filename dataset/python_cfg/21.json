{
  "name": "21.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import APIKeyError, APIKeyNotFoundError, APIKeyPermissionError, APIKeyWithoutHash, generate_api_key, get_api_key_by_id, list_user_api_keys, revoke_api_key, suspend_api_key, update_api_key_permissions\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import on_graph_activate, on_graph_deactivate\nfrom backend.server.model import CreateAPIKeyRequest, CreateAPIKeyResponse, CreateGraph, SetGraphActiveVersion, UpdatePermissionsRequest\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\nif TYPE_CHECKING:",
      "successors": [
        {
          "id": 2,
          "label": "#2\nfrom backend.data.model import Credentials",
          "successors": [
            {
              "id": 3,
              "label": "#3\nsettings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n_user_credit_model = get_user_credit_model()\nv1_router = APIRouter()\nv1_router.include_router(backend.server.integrations.router.router, prefix=\n    '/integrations', tags=['integrations'])\nv1_router.include_router(backend.server.routers.analytics.router, prefix=\n    '/analytics', tags=['analytics'], dependencies=[Depends(auth_middleware)])",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "execution_manager_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 5,
          "label": "#5\nreturn get_service_client(ExecutionManager)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execution_scheduler_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\nreturn get_service_client(ExecutionScheduler)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_or_create_user_route",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\nuser = await get_or_create_user(user_data)",
          "successors": [
            {
              "id": 14,
              "label": "#14\nreturn user.model_dump()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph_blocks",
      "type": "CFG",
      "blocks": [
        {
          "id": 18,
          "label": "#18\nblocks = [block() for block in backend.data.block.get_blocks().values()]\ncosts = get_block_costs()\nreturn [{**b.to_dict(), 'costs': costs.get(b.id, [])} for b in blocks]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute_graph_block",
      "type": "CFG",
      "blocks": [
        {
          "id": 22,
          "label": "#22\nobj = backend.data.block.get_block(block_id)\nif not obj:",
          "successors": [
            {
              "id": 23,
              "label": "#23\nraise HTTPException(status_code=404, detail=f'Block #{block_id} not found.')",
              "successors": []
            },
            {
              "id": 24,
              "label": "#24\noutput = defaultdict(list)",
              "successors": [
                {
                  "id": 26,
                  "label": "#26\nfor name, data in obj.execute(data):",
                  "successors": [
                    {
                      "id": 27,
                      "label": "#27\noutput[name].append(data)",
                      "successors": []
                    },
                    {
                      "id": 28,
                      "label": "#28\nreturn output",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_user_credits",
      "type": "CFG",
      "blocks": [
        {
          "id": 32,
          "label": "#32\nreturn {'credits': max(await _user_credit_model.get_or_refill_credit(\n    user_id), 0)}",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graphs",
      "type": "CFG",
      "blocks": [
        {
          "id": 39,
          "label": "#39\nreturn await graph_db.get_graphs(filter_by='active', user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 43,
          "label": "#43\ngraph = await graph_db.get_graph(graph_id, version, user_id=user_id,\n    for_export=hide_credentials)",
          "successors": [
            {
              "id": 44,
              "label": "#44\nif not graph:",
              "successors": [
                {
                  "id": 45,
                  "label": "#45\nraise HTTPException(status_code=404, detail=f'Graph #{graph_id} not found.')",
                  "successors": []
                },
                {
                  "id": 46,
                  "label": "#46\nreturn graph",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph_all_versions",
      "type": "CFG",
      "blocks": [
        {
          "id": 51,
          "label": "#51\ngraphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
          "successors": [
            {
              "id": 52,
              "label": "#52\nif not graphs:",
              "successors": [
                {
                  "id": 53,
                  "label": "#53\nraise HTTPException(status_code=404, detail=f'Graph #{graph_id} not found.')",
                  "successors": []
                },
                {
                  "id": 54,
                  "label": "#54\nreturn graphs",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_new_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 59,
          "label": "#59\nreturn await do_create_graph(create_graph, is_template=False, user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "do_create_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 63,
          "label": "#63\nif create_graph.graph:",
          "successors": [
            {
              "id": 64,
              "label": "#64\ngraph = graph_db.make_graph_model(create_graph.graph, user_id)",
              "successors": [
                {
                  "id": 65,
                  "label": "#65\ngraph.is_template = is_template\ngraph.is_active = not is_template\ngraph.reassign_ids(user_id=user_id, reassign_graph_id=True)\ngraph = await graph_db.create_graph(graph, user_id=user_id)",
                  "successors": [
                    {
                      "id": 75,
                      "label": "#75\ngraph = await on_graph_activate(graph, get_credentials=lambda id:\n    integration_creds_manager.get(user_id, id))",
                      "successors": [
                        {
                          "id": 76,
                          "label": "#76\nreturn graph",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 66,
              "label": "#66\nif create_graph.template_id:",
              "successors": [
                {
                  "id": 67,
                  "label": "#67\ngraph = await graph_db.get_graph(create_graph.template_id, create_graph.\n    template_version, template=True, user_id=user_id)",
                  "successors": [
                    {
                      "id": 71,
                      "label": "#71\nif not graph:",
                      "successors": [
                        {
                          "id": 72,
                          "label": "#72\nraise HTTPException(400, detail=\n    f'Template #{create_graph.template_id} not found')",
                          "successors": []
                        },
                        {
                          "id": 73,
                          "label": "#73\ngraph.version = 1",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 69,
                  "label": "#69\nraise HTTPException(status_code=400, detail=\n    'Either graph or template_id must be provided.')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 80,
          "label": "#80\nif (active_version := await graph_db.get_graph(graph_id, user_id=user_id)):",
          "successors": [
            {
              "id": 81,
              "label": "#81\nawait on_graph_deactivate(active_version, get_credentials)",
              "successors": [
                {
                  "id": 82,
                  "label": "#82\nreturn {'version_counts': await graph_db.delete_graph(graph_id, user_id=\n    user_id)}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_credentials",
          "type": "CFG",
          "blocks": [
            {
              "id": 84,
              "label": "#84\nreturn integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "update_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 91,
          "label": "#91\nif graph.id and graph.id != graph_id:",
          "successors": [
            {
              "id": 92,
              "label": "#92\nraise HTTPException(400, detail='Graph ID does not match ID in URI')",
              "successors": []
            },
            {
              "id": 93,
              "label": "#93\nexisting_versions = await graph_db.get_graph_all_versions(graph_id, user_id\n    =user_id)",
              "successors": [
                {
                  "id": 95,
                  "label": "#95\nif not existing_versions:",
                  "successors": [
                    {
                      "id": 96,
                      "label": "#96\nraise HTTPException(404, detail=f'Graph #{graph_id} not found')",
                      "successors": []
                    },
                    {
                      "id": 97,
                      "label": "#97\nlatest_version_number = max(g.version for g in existing_versions)\ngraph.version = latest_version_number + 1\nlatest_version_graph = next(v for v in existing_versions if v.version ==\n    latest_version_number)\ncurrent_active_version = next((v for v in existing_versions if v.is_active),\n    None)\nif latest_version_graph.is_template != graph.is_template:",
                      "successors": [
                        {
                          "id": 99,
                          "label": "#99\nraise HTTPException(400, detail=\n    'Changing is_template on an existing graph is forbidden')",
                          "successors": []
                        },
                        {
                          "id": 100,
                          "label": "#100\ngraph.is_active = not graph.is_template\ngraph = graph_db.make_graph_model(graph, user_id)\ngraph.reassign_ids(user_id=user_id)\nnew_graph_version = await graph_db.create_graph(graph, user_id=user_id)",
                          "successors": [
                            {
                              "id": 102,
                              "label": "#102\nif new_graph_version.is_active:",
                              "successors": [
                                {
                                  "id": 103,
                                  "label": "#103\nnew_graph_version = await on_graph_activate(new_graph_version,\n    get_credentials=get_credentials)",
                                  "successors": [
                                    {
                                      "id": 109,
                                      "label": "#109\nawait graph_db.set_graph_active_version(graph_id=graph_id, version=\n    new_graph_version.version, user_id=user_id)",
                                      "successors": [
                                        {
                                          "id": 110,
                                          "label": "#110\nif current_active_version:",
                                          "successors": [
                                            {
                                              "id": 111,
                                              "label": "#111\nawait on_graph_deactivate(current_active_version, get_credentials=\n    get_credentials)",
                                              "successors": [
                                                {
                                                  "id": 104,
                                                  "label": "#104\nreturn new_graph_version",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_credentials",
          "type": "CFG",
          "blocks": [
            {
              "id": 106,
              "label": "#106\nreturn integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "set_graph_active_version",
      "type": "CFG",
      "blocks": [
        {
          "id": 117,
          "label": "#117\nnew_active_version = request_body.active_graph_version\nnew_active_graph = await graph_db.get_graph(graph_id, new_active_version,\n    user_id=user_id)",
          "successors": [
            {
              "id": 118,
              "label": "#118\nif not new_active_graph:",
              "successors": [
                {
                  "id": 119,
                  "label": "#119\nraise HTTPException(404, f'Graph #{graph_id} v{new_active_version} not found')",
                  "successors": []
                },
                {
                  "id": 120,
                  "label": "#120\ncurrent_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)",
                  "successors": [
                    {
                      "id": 122,
                      "label": "#122\nawait on_graph_activate(new_active_graph, get_credentials=get_credentials)",
                      "successors": [
                        {
                          "id": 127,
                          "label": "#127\nawait graph_db.set_graph_active_version(graph_id=graph_id, version=\n    new_active_version, user_id=user_id)",
                          "successors": [
                            {
                              "id": 128,
                              "label": "#128\nif current_active_graph and current_active_graph.version != new_active_version:",
                              "successors": [
                                {
                                  "id": 129,
                                  "label": "#129\nawait on_graph_deactivate(current_active_graph, get_credentials=get_credentials\n    )",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_credentials",
          "type": "CFG",
          "blocks": [
            {
              "id": 124,
              "label": "#124\nreturn integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "execute_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 134,
          "label": "#134\ntry:",
          "successors": [
            {
              "id": 135,
              "label": "#135\ngraph_exec = execution_manager_client().add_execution(graph_id, node_input,\n    user_id=user_id)\nreturn {'id': graph_exec.graph_exec_id}",
              "successors": []
            },
            {
              "id": 136,
              "label": "#136\nmsg = e.__str__().encode().decode('unicode_escape')\nraise HTTPException(status_code=400, detail=msg)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "stop_graph_run",
      "type": "CFG",
      "blocks": [
        {
          "id": 142,
          "label": "#142\nif not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id",
          "successors": [
            {
              "id": 143,
              "label": "#143\nraise HTTPException(404, detail=f'Agent execution #{graph_exec_id} not found')",
              "successors": []
            },
            {
              "id": 144,
              "label": "#144\nawait asyncio.to_thread(lambda : execution_manager_client().\n    cancel_execution(graph_exec_id))",
              "successors": [
                {
                  "id": 146,
                  "label": "#146\nreturn await execution_db.get_execution_results(graph_exec_id)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_executions",
      "type": "CFG",
      "blocks": [
        {
          "id": 150,
          "label": "#150\nreturn await graph_db.get_executions(user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph_run_node_execution_results",
      "type": "CFG",
      "blocks": [
        {
          "id": 154,
          "label": "#154\ngraph = await graph_db.get_graph(graph_id, user_id=user_id)",
          "successors": [
            {
              "id": 155,
              "label": "#155\nif not graph:",
              "successors": [
                {
                  "id": 156,
                  "label": "#156\nraise HTTPException(status_code=404, detail=f'Graph #{graph_id} not found.')",
                  "successors": []
                },
                {
                  "id": 157,
                  "label": "#157\nreturn await execution_db.get_execution_results(graph_exec_id)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_templates",
      "type": "CFG",
      "blocks": [
        {
          "id": 162,
          "label": "#162\nreturn await graph_db.get_graphs(filter_by='template', user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_template",
      "type": "CFG",
      "blocks": [
        {
          "id": 166,
          "label": "#166\ngraph = await graph_db.get_graph(graph_id, version, template=True)",
          "successors": [
            {
              "id": 167,
              "label": "#167\nif not graph:",
              "successors": [
                {
                  "id": 168,
                  "label": "#168\nraise HTTPException(status_code=404, detail=f'Template #{graph_id} not found.')",
                  "successors": []
                },
                {
                  "id": 169,
                  "label": "#169\nreturn graph",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_new_template",
      "type": "CFG",
      "blocks": [
        {
          "id": 174,
          "label": "#174\nreturn await do_create_graph(create_graph, is_template=True, user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_schedule",
      "type": "CFG",
      "blocks": [
        {
          "id": 181,
          "label": "#181\ngraph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)",
          "successors": [
            {
              "id": 182,
              "label": "#182\nif not graph:",
              "successors": [
                {
                  "id": 183,
                  "label": "#183\nraise HTTPException(status_code=404, detail=\n    f'Graph #{schedule.graph_id} not found.')",
                  "successors": []
                },
                {
                  "id": 184,
                  "label": "#184\nreturn await asyncio.to_thread(lambda : execution_scheduler_client().\n    add_execution_schedule(graph_id=schedule.graph_id, graph_version=graph.\n    version, cron=schedule.cron, input_data=schedule.input_data, user_id=\n    user_id))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_schedule",
      "type": "CFG",
      "blocks": [
        {
          "id": 189,
          "label": "#189\nexecution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\nreturn {'id': schedule_id}",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_execution_schedules",
      "type": "CFG",
      "blocks": [
        {
          "id": 193,
          "label": "#193\nreturn execution_scheduler_client().get_execution_schedules(user_id=user_id,\n    graph_id=graph_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 197,
          "label": "#197\n\"\"\"Create a new API key\"\"\"\ntry:",
          "successors": [
            {
              "id": 198,
              "label": "#198\napi_key, plain_text = await generate_api_key(name=request.name, user_id=\n    user_id, permissions=request.permissions, description=request.description)",
              "successors": [
                {
                  "id": 201,
                  "label": "#201\nreturn CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
                  "successors": []
                }
              ]
            },
            {
              "id": 199,
              "label": "#199\nlogger.error(f'Failed to create API key: {str(e)}')\nraise HTTPException(status_code=400, detail=str(e))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_api_keys",
      "type": "CFG",
      "blocks": [
        {
          "id": 206,
          "label": "#206\n\"\"\"List all API keys for the user\"\"\"\ntry:",
          "successors": [
            {
              "id": 207,
              "label": "#207\nreturn await list_user_api_keys(user_id)",
              "successors": []
            },
            {
              "id": 208,
              "label": "#208\nlogger.error(f'Failed to list API keys: {str(e)}')\nraise HTTPException(status_code=400, detail=str(e))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 214,
          "label": "#214\n\"\"\"Get a specific API key\"\"\"\ntry:",
          "successors": [
            {
              "id": 215,
              "label": "#215\napi_key = await get_api_key_by_id(key_id, user_id)",
              "successors": [
                {
                  "id": 218,
                  "label": "#218\nif not api_key:",
                  "successors": [
                    {
                      "id": 219,
                      "label": "#219\nraise HTTPException(status_code=404, detail='API key not found')",
                      "successors": []
                    },
                    {
                      "id": 220,
                      "label": "#220\nreturn api_key",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 216,
              "label": "#216\nlogger.error(f'Failed to get API key: {str(e)}')\nraise HTTPException(status_code=400, detail=str(e))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 226,
          "label": "#226\n\"\"\"Revoke an API key\"\"\"\ntry:",
          "successors": [
            {
              "id": 227,
              "label": "#227\nreturn await revoke_api_key(key_id, user_id)",
              "successors": []
            },
            {
              "id": 228,
              "label": "#228\nraise HTTPException(status_code=404, detail='API key not found')",
              "successors": []
            },
            {
              "id": 229,
              "label": "#229\nraise HTTPException(status_code=403, detail='Permission denied')",
              "successors": []
            },
            {
              "id": 230,
              "label": "#230\nlogger.error(f'Failed to revoke API key: {str(e)}')\nraise HTTPException(status_code=400, detail=str(e))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "suspend_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 238,
          "label": "#238\n\"\"\"Suspend an API key\"\"\"\ntry:",
          "successors": [
            {
              "id": 239,
              "label": "#239\nreturn await suspend_api_key(key_id, user_id)",
              "successors": []
            },
            {
              "id": 240,
              "label": "#240\nraise HTTPException(status_code=404, detail='API key not found')",
              "successors": []
            },
            {
              "id": 241,
              "label": "#241\nraise HTTPException(status_code=403, detail='Permission denied')",
              "successors": []
            },
            {
              "id": 242,
              "label": "#242\nlogger.error(f'Failed to suspend API key: {str(e)}')\nraise HTTPException(status_code=400, detail=str(e))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_permissions",
      "type": "CFG",
      "blocks": [
        {
          "id": 250,
          "label": "#250\n\"\"\"Update API key permissions\"\"\"\ntry:",
          "successors": [
            {
              "id": 251,
              "label": "#251\nreturn await update_api_key_permissions(key_id, user_id, request.permissions)",
              "successors": []
            },
            {
              "id": 252,
              "label": "#252\nraise HTTPException(status_code=404, detail='API key not found')",
              "successors": []
            },
            {
              "id": 253,
              "label": "#253\nraise HTTPException(status_code=403, detail='Permission denied')",
              "successors": []
            },
            {
              "id": 254,
              "label": "#254\nlogger.error(f'Failed to update API key permissions: {str(e)}')\nraise HTTPException(status_code=400, detail=str(e))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "DeleteGraphResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 36,
          "label": "#36\nversion_counts: int",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ScheduleCreationRequest",
      "type": "CFG",
      "blocks": [
        {
          "id": 178,
          "label": "#178\ncron: str\ninput_data: dict[Any, Any]\ngraph_id: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}