{
  "name": "188.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom datetime import datetime\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\nimport backend.server.v2.store.db as db\nfrom backend.server.v2.store.model import Profile",
      "start_line": 1,
      "end_line": 264,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "setup_prisma",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\ntry:",
          "start_line": 15,
          "end_line": 18,
          "successors": [
            {
              "id": 4,
              "label": "#4\nPrisma()",
              "start_line": 16,
              "end_line": 16,
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nyield",
                  "start_line": 19,
                  "end_line": 19,
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "#5\npass",
              "start_line": 18,
              "end_line": 18,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_store_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 10,
          "label": "#10\nmock_agents = [prisma.models.StoreAgent(listing_id='test-id',\n    storeListingVersionId='version123', slug='test-agent', agent_name=\n    'Test Agent', agent_video=None, agent_image=['image.jpg'], featured=\n    False, creator_username='creator', creator_avatar='avatar.jpg',\n    sub_heading='Test heading', description='Test description', categories=\n    [], runs=10, rating=4.5, versions=['1.0'], updated_at=datetime.now())]\nmock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')\nmock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=\n    mock_agents)\nmock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)\nresult = await db.get_store_agents()",
          "start_line": 25,
          "end_line": 52,
          "successors": [
            {
              "id": 11,
              "label": "#11\nassert len(result.agents) == 1",
              "start_line": 55,
              "end_line": 55,
              "successors": [
                {
                  "id": 13,
                  "label": "#13\nassert result.agents[0].slug == 'test-agent'",
                  "start_line": 56,
                  "end_line": 56,
                  "successors": [
                    {
                      "id": 15,
                      "label": "#15\nassert result.pagination.total_items == 1",
                      "start_line": 57,
                      "end_line": 57,
                      "successors": [
                        {
                          "id": 17,
                          "label": "#17\nmock_store_agent.return_value.find_many.assert_called_once()\nmock_store_agent.return_value.count.assert_called_once()",
                          "start_line": 60,
                          "end_line": 61,
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_store_agent_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\nmock_agent = prisma.models.StoreAgent(listing_id='test-id',\n    storeListingVersionId='version123', slug='test-agent', agent_name=\n    'Test Agent', agent_video='video.mp4', agent_image=['image.jpg'],\n    featured=False, creator_username='creator', creator_avatar='avatar.jpg',\n    sub_heading='Test heading', description='Test description', categories=\n    ['test'], runs=10, rating=4.5, versions=['1.0'], updated_at=datetime.now())\nmock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')\nmock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=\n    mock_agent)\nresult = await db.get_store_agent_details('creator', 'test-agent')",
          "start_line": 67,
          "end_line": 91,
          "successors": [
            {
              "id": 21,
              "label": "#21\nassert result.slug == 'test-agent'",
              "start_line": 94,
              "end_line": 94,
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nassert result.agent_name == 'Test Agent'",
                  "start_line": 95,
                  "end_line": 95,
                  "successors": [
                    {
                      "id": 25,
                      "label": "#25\nmock_store_agent.return_value.find_first.assert_called_once_with(where={\n    'creator_username': 'creator', 'slug': 'test-agent'})",
                      "start_line": 98,
                      "end_line": 100,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_store_creator_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 28,
          "label": "#28\nmock_creator_data = prisma.models.Creator(name='Test Creator', username=\n    'creator', description='Test description', links=['link1'], avatar_url=\n    'avatar.jpg', num_agents=1, agent_rating=4.5, agent_runs=10,\n    top_categories=['test'], is_featured=False)\nmock_creator = mocker.patch('prisma.models.Creator.prisma')\nmock_creator.return_value.find_unique = mocker.AsyncMock()\nmock_creator.return_value.find_unique.return_value = mock_creator_data\nresult = await db.get_store_creator_details('creator')",
          "start_line": 106,
          "end_line": 126,
          "successors": [
            {
              "id": 29,
              "label": "#29\nassert result.username == 'creator'",
              "start_line": 129,
              "end_line": 129,
              "successors": [
                {
                  "id": 31,
                  "label": "#31\nassert result.name == 'Test Creator'",
                  "start_line": 130,
                  "end_line": 130,
                  "successors": [
                    {
                      "id": 33,
                      "label": "#33\nassert result.description == 'Test description'",
                      "start_line": 131,
                      "end_line": 131,
                      "successors": [
                        {
                          "id": 35,
                          "label": "#35\nassert result.avatar_url == 'avatar.jpg'",
                          "start_line": 132,
                          "end_line": 132,
                          "successors": [
                            {
                              "id": 37,
                              "label": "#37\nmock_creator.return_value.find_unique.assert_called_once_with(where={\n    'username': 'creator'})",
                              "start_line": 135,
                              "end_line": 137,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_create_store_submission",
      "type": "CFG",
      "blocks": [
        {
          "id": 40,
          "label": "#40\nmock_agent = prisma.models.AgentGraph(id='agent-id', version=1, userId=\n    'user-id', createdAt=datetime.now(), isActive=True, isTemplate=False)\nmock_listing = prisma.models.StoreListing(id='listing-id', createdAt=\n    datetime.now(), updatedAt=datetime.now(), isDeleted=False, isApproved=\n    False, agentId='agent-id', agentVersion=1, owningUserId='user-id')\nmock_agent_graph = mocker.patch('prisma.models.AgentGraph.prisma')\nmock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=\n    mock_agent)\nmock_store_listing = mocker.patch('prisma.models.StoreListing.prisma')\nmock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None\n    )\nmock_store_listing.return_value.create = mocker.AsyncMock(return_value=\n    mock_listing)\nresult = await db.create_store_submission(user_id='user-id', agent_id=\n    'agent-id', agent_version=1, slug='test-agent', name='Test Agent',\n    description='Test description')",
          "start_line": 143,
          "end_line": 179,
          "successors": [
            {
              "id": 41,
              "label": "#41\nassert result.name == 'Test Agent'",
              "start_line": 182,
              "end_line": 182,
              "successors": [
                {
                  "id": 43,
                  "label": "#43\nassert result.description == 'Test description'",
                  "start_line": 183,
                  "end_line": 183,
                  "successors": [
                    {
                      "id": 45,
                      "label": "#45\nmock_agent_graph.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.create.assert_called_once()",
                      "start_line": 186,
                      "end_line": 188,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_update_profile",
      "type": "CFG",
      "blocks": [
        {
          "id": 48,
          "label": "#48\nmock_profile = prisma.models.Profile(id='profile-id', name='Test Creator',\n    username='creator', description='Test description', links=['link1'],\n    avatarUrl='avatar.jpg', isFeatured=False, createdAt=datetime.now(),\n    updatedAt=datetime.now())\nmock_profile_db = mocker.patch('prisma.models.Profile.prisma')\nmock_profile_db.return_value.find_first = mocker.AsyncMock(return_value=\n    mock_profile)\nmock_profile_db.return_value.update = mocker.AsyncMock(return_value=\n    mock_profile)\nprofile = Profile(name='Test Creator', username='creator', description=\n    'Test description', links=['link1'], avatar_url='avatar.jpg',\n    is_featured=False)\nresult = await db.update_or_create_profile('user-id', profile)",
          "start_line": 194,
          "end_line": 224,
          "successors": [
            {
              "id": 49,
              "label": "#49\nassert result.username == 'creator'",
              "start_line": 227,
              "end_line": 227,
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nassert result.name == 'Test Creator'",
                  "start_line": 228,
                  "end_line": 228,
                  "successors": [
                    {
                      "id": 53,
                      "label": "#53\nmock_profile_db.return_value.find_first.assert_called_once()\nmock_profile_db.return_value.update.assert_called_once()",
                      "start_line": 231,
                      "end_line": 232,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_user_profile",
      "type": "CFG",
      "blocks": [
        {
          "id": 56,
          "label": "#56\nmock_profile = prisma.models.Profile(id='profile-id', name=\n    'No Profile Data', username='testuser', description='Test description',\n    links=['link1', 'link2'], avatarUrl='avatar.jpg', isFeatured=False,\n    createdAt=datetime.now(), updatedAt=datetime.now())\nmock_profile_db = mocker.patch('prisma.models.Profile.prisma')\nmock_profile_db.return_value.find_unique = mocker.AsyncMock(return_value=\n    mock_profile)\nresult = await db.get_user_profile('user-id')",
          "start_line": 238,
          "end_line": 257,
          "successors": [
            {
              "id": 57,
              "label": "#57\nassert result.name == 'No Profile Data'",
              "start_line": 260,
              "end_line": 260,
              "successors": [
                {
                  "id": 59,
                  "label": "#59\nassert result.username == 'No Profile Data'",
                  "start_line": 261,
                  "end_line": 261,
                  "successors": [
                    {
                      "id": 61,
                      "label": "#61\nassert result.description == 'No Profile Data'",
                      "start_line": 262,
                      "end_line": 262,
                      "successors": [
                        {
                          "id": 63,
                          "label": "#63\nassert result.links == []",
                          "start_line": 263,
                          "end_line": 263,
                          "successors": [
                            {
                              "id": 65,
                              "label": "#65\nassert result.avatar_url == ''",
                              "start_line": 264,
                              "end_line": 264,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}