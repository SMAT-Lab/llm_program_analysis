{
  "name": "8.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nfrom autogpt_libs.utils.cache import thread_cached\nfrom backend.data.block import Block, BlockCategory, BlockInput, BlockOutput, BlockSchema, BlockType, get_block\nfrom backend.data.execution import ExecutionStatus\nfrom backend.data.model import SchemaField\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_executor_manager_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nfrom backend.executor import ExecutionManager\nfrom backend.util.service import get_service_client\nreturn get_service_client(ExecutionManager)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_event_bus",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nfrom backend.data.execution import RedisExecutionEventBus\nreturn RedisExecutionEventBus()",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AgentExecutorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 11,
          "label": "#11",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 19,
              "label": "#19\nsuper().__init__(id='e189baac-8c20-45a1-94a7-55177ea42565', description=\n    'Executes an existing agent inside your agent', input_schema=\n    AgentExecutorBlock.Input, output_schema=AgentExecutorBlock.Output,\n    block_type=BlockType.AGENT, categories={BlockCategory.AGENT})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nexecutor_manager = get_executor_manager_client()\nevent_bus = get_event_bus()\ngraph_exec = executor_manager.add_execution(graph_id=input_data.graph_id,\n    graph_version=input_data.graph_version, user_id=input_data.user_id,\n    data=input_data.data)\nlog_id = (\n    f'Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}'\n    )\nlogger.info(f'Starting execution of {log_id}')",
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nfor event in event_bus.listen(graph_id=graph_exec.graph_id, graph_exec_id=",
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nlogger.info(\n    f'Execution {log_id} produced input {event.input_data} output {event.output_data}'\n    )\nif not event.node_id:",
                      "successors": [
                        {
                          "id": 26,
                          "label": "#26\nif event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:",
                          "successors": [
                            {
                              "id": 28,
                              "label": "#28\nlogger.info(f'Execution {log_id} ended with status {event.status}')",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 27,
                          "label": "#27\nif not event.block_id:",
                          "successors": [
                            {
                              "id": 31,
                              "label": "#31\nlogger.warning(f'{log_id} received event without block_id {event}')",
                              "successors": []
                            },
                            {
                              "id": 32,
                              "label": "#32\nblock = get_block(event.block_id)\nif not block or block.block_type != BlockType.OUTPUT:",
                              "successors": [
                                {
                                  "id": 34,
                                  "label": "#34\noutput_name = event.input_data.get('name')\nif not output_name:",
                                  "successors": [
                                    {
                                      "id": 35,
                                      "label": "#35\nlogger.warning(f'{log_id} produced an output with no name {event}')",
                                      "successors": []
                                    },
                                    {
                                      "id": 36,
                                      "label": "#36\nfor output_data in event.output_data.get('output', []):",
                                      "successors": [
                                        {
                                          "id": 37,
                                          "label": "#37\nlogger.info(f'Execution {log_id} produced {output_name}: {output_data}')\nyield output_name, output_data",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 13,
              "label": "#13\nuser_id: str = SchemaField(description='User ID')\ngraph_id: str = SchemaField(description='Graph ID')\ngraph_version: int = SchemaField(description='Graph Version')\ndata: BlockInput = SchemaField(description='Input data for the graph')\ninput_schema: dict = SchemaField(description='Input schema for the graph')\noutput_schema: dict = SchemaField(description='Output schema for the graph')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 16,
              "label": "#16\npass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}