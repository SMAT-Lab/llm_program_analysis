{
  "name": "55.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\nimport feedparser\nimport pydantic\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "start_line": 1,
      "end_line": 116,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "RSSEntry",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\ntitle: str\nlink: str\ndescription: str\npub_date: datetime\nauthor: str\ncategories: list[str]",
          "start_line": 13,
          "end_line": 18,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ReadRSSFeedBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6",
          "start_line": 22,
          "end_line": 116,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='5ebe6768-8e5d-41e3-9134-1c7bd89a8d52', input_schema=\n    ReadRSSFeedBlock.Input, output_schema=ReadRSSFeedBlock.Output,\n    description='Reads RSS feed entries from a given URL.', categories={\n    BlockCategory.INPUT}, test_input={'rss_url': 'https://example.com/rss',\n    'time_period': 10000000, 'polling_rate': 1, 'run_continuously': False},\n    test_output=[('entry', RSSEntry(title='Example RSS Item', link=\n    'https://example.com/article', description=\n    'This is an example RSS item description.', pub_date=datetime(2023, 6, \n    23, 12, 30, 0, tzinfo=timezone.utc), author='John Doe', categories=[\n    'Technology', 'News']))], test_mock={'parse_feed': lambda *args, **\n    kwargs: {'entries': [{'title': 'Example RSS Item', 'link':\n    'https://example.com/article', 'summary':\n    'This is an example RSS item description.', 'published_parsed': (2023, \n    6, 23, 12, 30, 0, 4, 174, 0), 'author': 'John Doe', 'tags': [{'term':\n    'Technology'}, {'term': 'News'}]}]}})",
              "start_line": 45,
              "end_line": 84,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "parse_feed",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\nreturn feedparser.parse(url)",
              "start_line": 88,
              "end_line": 88,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\nkeep_going = True\nstart_time = datetime.now(timezone.utc) - timedelta(minutes=input_data.\n    time_period)",
              "start_line": 91,
              "end_line": 94,
              "successors": [
                {
                  "id": 22,
                  "label": "#22\nwhile keep_going:",
                  "start_line": 95,
                  "end_line": 116,
                  "successors": [
                    {
                      "id": 23,
                      "label": "#23\nkeep_going = input_data.run_continuously\nfeed = self.parse_feed(input_data.rss_url)",
                      "start_line": 96,
                      "end_line": 98,
                      "successors": [
                        {
                          "id": 25,
                          "label": "#25\nfor entry in feed['entries']:",
                          "start_line": 100,
                          "end_line": 114,
                          "successors": [
                            {
                              "id": 26,
                              "label": "#26\npub_date = datetime(*entry['published_parsed'][:6], tzinfo=timezone.utc)\nif pub_date > start_time:",
                              "start_line": 101,
                              "end_line": 114,
                              "successors": [
                                {
                                  "id": 28,
                                  "label": "#28\nyield 'entry', RSSEntry(title=entry['title'], link=entry['link'],\n    description=entry.get('summary', ''), pub_date=pub_date, author=entry.\n    get('author', ''), categories=[tag['term'] for tag in entry.get('tags',\n    [])])",
                                  "start_line": 104,
                                  "end_line": 114,
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 27,
                              "label": "#27\ntime.sleep(input_data.polling_rate)",
                              "start_line": 116,
                              "end_line": 116,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nrss_url: str = SchemaField(description='The URL of the RSS feed to read',\n    placeholder='https://example.com/rss')\ntime_period: int = SchemaField(description=\n    'The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.'\n    , placeholder='1440', default=1440)\npolling_rate: int = SchemaField(description=\n    'The number of seconds to wait between polling attempts.', placeholder=\n    '300')\nrun_continuously: bool = SchemaField(description=\n    'Whether to run the block continuously or just once.', default=True)",
              "start_line": 23,
              "end_line": 39,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nentry: RSSEntry = SchemaField(description='The RSS item')",
              "start_line": 42,
              "end_line": 42,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}