{
  "name": "167.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport json\nfrom typing import Optional\nfrom cryptography.fernet import Fernet\nfrom backend.util.settings import Settings\nENCRYPTION_KEY = Settings().secrets.encryption_key",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "JSONCryptor",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.key = key or ENCRYPTION_KEY\nif not self.key:",
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nraise ValueError(\n    'Encryption key must be provided or set in ENCRYPTION_KEY environment variable'\n    )",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "#7\nself.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else\n    self.key)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "encrypt",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\n\"\"\"Encrypt dictionary data to string\"\"\"\njson_str = json.dumps(data)\nencrypted = self.fernet.encrypt(json_str.encode())\nreturn encrypted.decode()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "decrypt",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\n\"\"\"Decrypt string to dictionary\"\"\"\nif not encrypted_str:",
              "successors": [
                {
                  "id": 16,
                  "label": "#16\nreturn {}",
                  "successors": []
                },
                {
                  "id": 17,
                  "label": "#17\ndecrypted = self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}