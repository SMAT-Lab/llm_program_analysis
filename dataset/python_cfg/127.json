{
  "name": "127.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom __future__ import annotations\nif __name__ == '__main__':",
      "start_line": 1,
      "end_line": 197,
      "successors": [
        {
          "id": 28,
          "label": "#28\nimport doctest\ndoctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE)",
          "start_line": 195,
          "end_line": 197,
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "solve_maze",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    This method solves the \"rat in maze\" problem.\n    Parameters :\n        - maze: A two dimensional matrix of zeros and ones.\n        - source_row: The row index of the starting point.\n        - source_column: The column index of the starting point.\n        - destination_row: The row index of the destination point.\n        - destination_column: The column index of the destination point.\n    Returns:\n        - solution: A 2D matrix representing the solution path if it exists.\n    Raises:\n        - ValueError: If no solution exists or if the source or\n            destination coordinates are invalid.\n    Description:\n        This method navigates through a maze represented as an n by n matrix,\n        starting from a specified source cell and\n        aiming to reach a destination cell.\n        The maze consists of walls (1s) and open paths (0s).\n        By providing custom row and column values, the source and destination\n        cells can be adjusted.\n    >>> maze = [[0, 1, 0, 1, 1],\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 0, 1],\n    [1, 1, 1, 0, 0],\n    [1, 1, 1, 1, 0]]\n\n    Note:\n        In the output maze, the zeros (0s) represent one of the possible\n        paths from the source to the destination.\n\n    >>> maze = [[0, 1, 0, 1, 1],\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0]]\n\n    >>> maze = [[0, 0, 0],\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]]\n\n    >>> maze = [[1, 0, 0],\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[1, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]]\n\n    >>> maze = [[1, 1, 0, 0, 1, 0, 0, 1],\n    >>> solve_maze(maze,0,2,len(maze)-1,2)  # doctest: +NORMALIZE_WHITESPACE\n    [[1, 1, 0, 0, 1, 1, 1, 1],\n    [1, 1, 1, 0, 0, 1, 1, 1],\n    [1, 1, 1, 1, 0, 1, 1, 1],\n    [1, 1, 1, 0, 0, 1, 1, 1],\n    [1, 1, 0, 0, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1]]\n    >>> maze = [[1, 0, 0],\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n    ValueError: No solution exists!\n\n    >>> maze = [[0, 0],\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n    ValueError: No solution exists!\n\n    >>> maze = [[0, 1],\n    >>> solve_maze(maze,2,0,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n    ValueError: Invalid source or destination coordinates\n\n    >>> maze = [[1, 0, 0],\n    >>> solve_maze(maze,0,1,len(maze),len(maze)-1)\n    Traceback (most recent call last):\n    ValueError: Invalid source or destination coordinates\n    \"\"\"\nsize = len(maze)\nif not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1",
          "start_line": 11,
          "end_line": 127,
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('Invalid source or destination coordinates')",
              "start_line": 127,
              "end_line": 127,
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nsolutions = [[(1) for _ in range(size)] for _ in range(size)]\nsolved = run_maze(maze, source_row, source_column, destination_row,\n    destination_column, solutions)\nif solved:",
              "start_line": 129,
              "end_line": 136,
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nreturn solutions",
                  "start_line": 134,
                  "end_line": 134,
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "#9\nraise ValueError('No solution exists!')",
                  "start_line": 136,
                  "end_line": 136,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run_maze",
      "type": "CFG",
      "blocks": [
        {
          "id": 14,
          "label": "#14\n\"\"\"\n    This method is recursive starting from (i, j) and going in one of four directions:\n    up, down, left, right.\n    If a path is found to destination it returns True otherwise it returns False.\n    Parameters\n        maze: A two dimensional matrix of zeros and ones.\n        i, j : coordinates of matrix\n        solutions: A two dimensional matrix of solutions.\n    Returns:\n        Boolean if path is found True, Otherwise False.\n    \"\"\"\nsize = len(maze)\nif i == destination_row and j == destination_column and maze[i][j] == 0:",
          "start_line": 147,
          "end_line": 162,
          "successors": [
            {
              "id": 15,
              "label": "#15\nsolutions[i][j] = 0\nreturn True",
              "start_line": 161,
              "end_line": 162,
              "successors": []
            },
            {
              "id": 16,
              "label": "#16\nlower_flag = not i < 0 and not j < 0\nupper_flag = i < size and j < size\nif lower_flag and upper_flag:",
              "start_line": 164,
              "end_line": 190,
              "successors": [
                {
                  "id": 18,
                  "label": "#18\nblock_flag = solutions[i][j] and not maze[i][j]\nif block_flag:",
                  "start_line": 169,
                  "end_line": 190,
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nsolutions[i][j] = 0\nif run_maze(maze, i + 1, j, destination_row, destination_column, solutions",
                      "start_line": 172,
                      "end_line": 187,
                      "successors": [
                        {
                          "id": 22,
                          "label": "#22\nreturn True",
                          "start_line": 187,
                          "end_line": 187,
                          "successors": []
                        },
                        {
                          "id": 23,
                          "label": "#23\nsolutions[i][j] = 1\nreturn False",
                          "start_line": 189,
                          "end_line": 190,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 19,
                      "label": "#19\nreturn False",
                      "start_line": 191,
                      "end_line": 191,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}