{
  "name": "116.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nfrom colorama import Fore, Style\nfrom google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler\nfrom .utils import remove_color_codes",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "FancyConsoleFormatter",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    A custom logging formatter designed for console output.\n\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"\nLEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.\n    BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.\n    CRITICAL: Fore.RED + Style.BRIGHT}",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "format",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nif not hasattr(record, 'msg'):",
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nrecord.msg = ''",
                  "successors": [
                    {
                      "id": 7,
                      "label": "#7\nlevel_color = ''\nif record.levelno in self.LEVEL_COLOR_MAP:",
                      "successors": [
                        {
                          "id": 11,
                          "label": "#11\nlevel_color = self.LEVEL_COLOR_MAP[record.levelno]\nrecord.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'",
                          "successors": [
                            {
                              "id": 12,
                              "label": "#12\ncolor = getattr(record, 'color', level_color)\ncolor_is_specified = hasattr(record, 'color')\nif color and (record.levelno != logging.INFO or color_is_specified):",
                              "successors": [
                                {
                                  "id": 13,
                                  "label": "#13\nrecord.msg = f'{color}{record.msg}{Style.RESET_ALL}'",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "#14\nreturn super().format(record)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "#8\nif type(record.msg) is not str:",
                  "successors": [
                    {
                      "id": 9,
                      "label": "#9\nrecord.msg = str(record.msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "AGPTFormatter",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\nsuper().__init__(*args, **kwargs)\nself.no_color = no_color",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "format",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nif not hasattr(record, 'msg'):",
              "successors": [
                {
                  "id": 25,
                  "label": "#25\nrecord.msg = ''",
                  "successors": [
                    {
                      "id": 26,
                      "label": "#26\nif record.msg and not getattr(record, 'preserve_color', False):",
                      "successors": [
                        {
                          "id": 30,
                          "label": "#30\nrecord.msg = remove_color_codes(record.msg)",
                          "successors": [
                            {
                              "id": 31,
                              "label": "#31\ntitle = getattr(record, 'title', '')\ntitle_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(\n    record.levelno, '')\nif title and title_color:",
                              "successors": [
                                {
                                  "id": 32,
                                  "label": "#32\ntitle = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'",
                                  "successors": [
                                    {
                                      "id": 33,
                                      "label": "#33\nrecord.title = f'{title} ' if title else ''\nif self.no_color:",
                                      "successors": [
                                        {
                                          "id": 34,
                                          "label": "#34\nreturn remove_color_codes(super().format(record))",
                                          "successors": []
                                        },
                                        {
                                          "id": 36,
                                          "label": "#36\nreturn super().format(record)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 27,
                  "label": "#27\nif type(record.msg) is not str:",
                  "successors": [
                    {
                      "id": 28,
                      "label": "#28\nrecord.msg = str(record.msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "StructuredLoggingFormatter",
      "type": "CFG",
      "blocks": [
        {
          "id": 42,
          "label": "#42",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 44,
              "label": "#44\nself.cloud_logging_filter = CloudLoggingFilter()\nsuper().__init__()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "format",
          "type": "CFG",
          "blocks": [
            {
              "id": 47,
              "label": "#47\nself.cloud_logging_filter.filter(record)\nreturn super().format(record)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}