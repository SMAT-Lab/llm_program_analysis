{
  "name": "6.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom urllib.parse import quote\nimport requests\nfrom backend.blocks.jina._auth import JinaCredentials, JinaCredentialsField, JinaCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "start_line": 1,
      "end_line": 59,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "FactCheckerBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 15,
          "end_line": 59,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='d38b6c5e-9968-4271-8423-6cfe60d6e7e6', description=\n    \"This block checks the factuality of a given statement using Jina AI's Grounding API.\"\n    , categories={BlockCategory.SEARCH}, input_schema=FactCheckerBlock.\n    Input, output_schema=FactCheckerBlock.Output)",
              "start_line": 30,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nencoded_statement = quote(input_data.statement)\nurl = f'https://g.jina.ai/{encoded_statement}'\nheaders = {'Accept': 'application/json', 'Authorization':\n    f'Bearer {credentials.api_key.get_secret_value()}'}\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()\ndata = response.json()\nif 'data' in data:",
              "start_line": 41,
              "end_line": 59,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\ndata = data['data']\nyield 'factuality', data['factuality']",
                  "start_line": 54,
                  "end_line": 55,
                  "successors": [
                    {
                      "id": 19,
                      "label": "#19\nyield 'result', data['result']",
                      "start_line": 56,
                      "end_line": 56,
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\nyield 'reason', data['reason']",
                          "start_line": 57,
                          "end_line": 57,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 17,
                  "label": "#17\nraise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
                  "start_line": 59,
                  "end_line": 59,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nstatement: str = SchemaField(description=\n    'The statement to check for factuality')\ncredentials: JinaCredentialsInput = JinaCredentialsField()",
              "start_line": 16,
              "end_line": 19,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nfactuality: float = SchemaField(description=\n    'The factuality score of the statement')\nresult: bool = SchemaField(description='The result of the factuality check')\nreason: str = SchemaField(description='The reason for the factuality result')\nerror: str = SchemaField(description='Error message if the check fails')",
              "start_line": 22,
              "end_line": 27,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}