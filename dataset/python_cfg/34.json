{
  "name": "34.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import ExecutionResult, RedisExecutionEventBus, create_graph_execution, get_execution_results, get_incomplete_executions, get_latest_execution, update_execution_status, update_graph_execution_stats, update_node_execution_stats, upsert_execution_input, upsert_execution_output\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import get_user_integrations, get_user_metadata, update_user_integrations, update_user_metadata\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\nP = ParamSpec('P')\nR = TypeVar('R')\nconfig = Config()",
      "start_line": 1,
      "end_line": 94,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "DatabaseManager",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\ncreate_graph_execution = exposed_run_and_wait(create_graph_execution)\nget_execution_results = exposed_run_and_wait(get_execution_results)\nget_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\nget_latest_execution = exposed_run_and_wait(get_latest_execution)\nupdate_execution_status = exposed_run_and_wait(update_execution_status)\nupdate_graph_execution_stats = exposed_run_and_wait(\n    update_graph_execution_stats)\nupdate_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\nupsert_execution_input = exposed_run_and_wait(upsert_execution_input)\nupsert_execution_output = exposed_run_and_wait(upsert_execution_output)\nget_node = exposed_run_and_wait(get_node)\nget_graph = exposed_run_and_wait(get_graph)\nuser_credit_model = get_user_credit_model()\nget_or_refill_credit = cast(Callable[[Any, str], int], exposed_run_and_wait\n    (user_credit_model.get_or_refill_credit))\nspend_credits = cast(Callable[[Any, str, int, str, dict[str, str], float,\n    float], int], exposed_run_and_wait(user_credit_model.spend_credits))\nget_user_metadata = exposed_run_and_wait(get_user_metadata)\nupdate_user_metadata = exposed_run_and_wait(update_user_metadata)\nget_user_integrations = exposed_run_and_wait(get_user_integrations)\nupdate_user_integrations = exposed_run_and_wait(update_user_integrations)",
          "start_line": 34,
          "end_line": 94,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nsuper().__init__()\nself.use_db = True\nself.use_redis = True\nself.event_queue = RedisExecutionEventBus()",
              "start_line": 35,
              "end_line": 38,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_port",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nreturn config.database_api_port",
              "start_line": 42,
              "end_line": 42,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "send_execution_update",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nself.event_queue.publish(execution_result)",
              "start_line": 46,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "exposed_run_and_wait",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nregister_pydantic_serializers(f)\nreturn wrapper",
              "start_line": 54,
              "end_line": 62,
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 17,
                  "label": "#17\ncoroutine = f(*args, **kwargs)\nres = self.run_and_wait(coroutine)\nreturn res",
                  "start_line": 55,
                  "end_line": 57,
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}