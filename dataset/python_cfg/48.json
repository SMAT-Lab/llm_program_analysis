{
  "name": "48.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 30,
          "label": "#30\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "match_word_pattern",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\npattern_map: dict[str, str] = {}\nstr_map: dict[str, str] = {}\nreturn backtrack(0, 0)",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "backtrack",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\n\"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\nif pattern_index == len(pattern) and str_index == len(input_string):",
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nreturn True",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "#7\nif pattern_index == len(pattern) or str_index == len(input_string):",
                  "successors": [
                    {
                      "id": 9,
                      "label": "#9\nreturn False",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "#10\nchar = pattern[pattern_index]\nif char in pattern_map:",
                      "successors": [
                        {
                          "id": 12,
                          "label": "#12\nmapped_str = pattern_map[char]\nif input_string.startswith(mapped_str, str_index):",
                          "successors": [
                            {
                              "id": 14,
                              "label": "#14\nreturn backtrack(pattern_index + 1, str_index + len(mapped_str))",
                              "successors": []
                            },
                            {
                              "id": 16,
                              "label": "#16\nreturn False",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 13,
                          "label": "#13\nfor end in range(str_index + 1, len(input_string) + 1):",
                          "successors": [
                            {
                              "id": 19,
                              "label": "#19\nsubstr = input_string[str_index:end]\nif substr in str_map:",
                              "successors": [
                                {
                                  "id": 22,
                                  "label": "#22\npattern_map[char] = substr\nstr_map[substr] = char\nif backtrack(pattern_index + 1, end):",
                                  "successors": [
                                    {
                                      "id": 23,
                                      "label": "#23\nreturn True",
                                      "successors": []
                                    },
                                    {
                                      "id": 24,
                                      "label": "#24\ndel pattern_map[char]\ndel str_map[substr]",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "#20\nreturn False",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}