{
  "name": "195.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport uuid\nfrom typing import Any, Literal\nfrom pinecone import Pinecone, ServerlessSpec\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nPineconeCredentials = APIKeyCredentials\nPineconeCredentialsInput = CredentialsMetaInput[Literal[ProviderName.\n    PINECONE], Literal['api_key']]",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "PineconeCredentialsField",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"Creates a Pinecone credentials input on a block.\"\"\"\nreturn CredentialsField(description=\n    'The Pinecone integration can be used with an API Key.')",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "PineconeInitBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nsuper().__init__(id='48d8fdab-8f03-41f3-8407-8107ba11ec9b', description=\n    'Initializes a Pinecone index', categories={BlockCategory.LOGIC},\n    input_schema=PineconeInitBlock.Input, output_schema=PineconeInitBlock.\n    Output)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\npc = Pinecone(api_key=credentials.api_key.get_secret_value())\ntry:",
              "successors": [
                {
                  "id": 19,
                  "label": "#19\nexisting_indexes = pc.list_indexes()\nif input_data.index_name not in [index.name for index in existing_indexes]:",
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\npc.create_index(name=input_data.index_name, dimension=input_data.dimension,\n    metric=input_data.metric, spec=ServerlessSpec(cloud=input_data.cloud,\n    region=input_data.region))\nmessage = f'Created new index: {input_data.index_name}'",
                      "successors": [
                        {
                          "id": 23,
                          "label": "#23\nyield 'index', input_data.index_name",
                          "successors": [
                            {
                              "id": 25,
                              "label": "#25\nyield 'message', message",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 24,
                      "label": "#24\nmessage = f'Using existing index: {input_data.index_name}'",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 20,
                  "label": "#20\nyield 'message', f'Error initializing Pinecone index: {str(e)}'",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 9,
              "label": "#9\ncredentials: PineconeCredentialsInput = PineconeCredentialsField()\nindex_name: str = SchemaField(description='Name of the Pinecone index')\ndimension: int = SchemaField(description='Dimension of the vectors',\n    default=768)\nmetric: str = SchemaField(description='Distance metric for the index',\n    default='cosine')\ncloud: str = SchemaField(description='Cloud provider for serverless',\n    default='aws')\nregion: str = SchemaField(description='Region for serverless', default=\n    'us-east-1')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nindex: str = SchemaField(description='Name of the initialized Pinecone index')\nmessage: str = SchemaField(description='Status message')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "PineconeQueryBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 31,
          "label": "#31",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 39,
              "label": "#39\nsuper().__init__(id='9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5', description=\n    'Queries a Pinecone index', categories={BlockCategory.LOGIC},\n    input_schema=PineconeQueryBlock.Input, output_schema=PineconeQueryBlock\n    .Output)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 42,
              "label": "#42\ntry:",
              "successors": [
                {
                  "id": 43,
                  "label": "#43\npc = Pinecone(api_key=credentials.api_key.get_secret_value())\nidx = pc.Index(input_data.idx_name)\nquery_vector = input_data.query_vector\nif isinstance(query_vector, list) and len(query_vector) > 0:",
                  "successors": [
                    {
                      "id": 46,
                      "label": "#46\nif isinstance(query_vector[0], list):",
                      "successors": [
                        {
                          "id": 48,
                          "label": "#48\nquery_vector = query_vector[0]",
                          "successors": [
                            {
                              "id": 47,
                              "label": "#47\nresults = idx.query(namespace=input_data.namespace, vector=query_vector,\n    top_k=input_data.top_k, include_values=input_data.include_values,\n    include_metadata=input_data.include_metadata).to_dict()\ncombined_text = ''\nif results['matches']:",
                              "successors": [
                                {
                                  "id": 50,
                                  "label": "#50\ntexts = [match['metadata']['text'] for match in results['matches'] if match\n    .get('metadata', {}).get('text')]\ncombined_text = '\\n\\n'.join(texts)",
                                  "successors": [
                                    {
                                      "id": 51,
                                      "label": "#51\nyield 'results', {'matches': results['matches'], 'combined_text': combined_text\n    }",
                                      "successors": [
                                        {
                                          "id": 52,
                                          "label": "#52\nyield 'combined_results', combined_text",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 44,
                  "label": "#44\nerror_msg = f'Error querying Pinecone: {str(e)}'\nraise RuntimeError(error_msg) from e",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\ncredentials: PineconeCredentialsInput = PineconeCredentialsField()\nquery_vector: list = SchemaField(description='Query vector')\nnamespace: str = SchemaField(description='Namespace to query in Pinecone',\n    default='')\ntop_k: int = SchemaField(description='Number of top results to return',\n    default=3)\ninclude_values: bool = SchemaField(description=\n    'Whether to include vector values in the response', default=False)\ninclude_metadata: bool = SchemaField(description=\n    'Whether to include metadata in the response', default=True)\nhost: str = SchemaField(description='Host for pinecone', default='')\nidx_name: str = SchemaField(description='Index name for pinecone')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\nresults: Any = SchemaField(description='Query results from Pinecone')\ncombined_results: Any = SchemaField(description=\n    'Combined results from Pinecone')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "PineconeInsertBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 58,
          "label": "#58",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 66,
              "label": "#66\nsuper().__init__(id='477f2168-cd91-475a-8146-9499a5982434', description=\n    'Upload data to a Pinecone index', categories={BlockCategory.LOGIC},\n    input_schema=PineconeInsertBlock.Input, output_schema=\n    PineconeInsertBlock.Output)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 69,
              "label": "#69\ntry:",
              "successors": [
                {
                  "id": 70,
                  "label": "#70\npc = Pinecone(api_key=credentials.api_key.get_secret_value())\nidx = pc.Index(input_data.index)\nvectors = []",
                  "successors": [
                    {
                      "id": 73,
                      "label": "#73\nfor chunk, embedding in zip(input_data.chunks, input_data.embeddings):",
                      "successors": [
                        {
                          "id": 74,
                          "label": "#74\nvector_metadata = input_data.metadata.copy()\nvector_metadata['text'] = chunk\nvectors.append({'id': str(uuid.uuid4()), 'values': embedding, 'metadata':\n    vector_metadata})",
                          "successors": []
                        },
                        {
                          "id": 75,
                          "label": "#75\nidx.upsert(vectors=vectors, namespace=input_data.namespace)\nyield 'upsert_response', 'successfully upserted'",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 71,
                  "label": "#71\nerror_msg = f'Error uploading to Pinecone: {str(e)}'\nraise RuntimeError(error_msg) from e",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 60,
              "label": "#60\ncredentials: PineconeCredentialsInput = PineconeCredentialsField()\nindex: str = SchemaField(description='Initialized Pinecone index')\nchunks: list = SchemaField(description='List of text chunks to ingest')\nembeddings: list = SchemaField(description=\n    'List of embeddings corresponding to the chunks')\nnamespace: str = SchemaField(description='Namespace to use in Pinecone',\n    default='')\nmetadata: dict = SchemaField(description=\n    'Additional metadata to store with each vector', default={})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 63,
              "label": "#63\nupsert_response: str = SchemaField(description=\n    'Response from Pinecone upsert operation')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}