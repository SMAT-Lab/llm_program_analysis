{
  "name": "19.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport asyncio\nimport json\nimport logging\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar\nfrom pydantic import BaseModel\nfrom redis.asyncio.client import PubSub as AsyncPubSub\nfrom redis.client import PubSub\nfrom backend.data import redis\nlogger = logging.getLogger(__name__)\nM = TypeVar('M', bound=BaseModel)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "DateTimeEncoder",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "default",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nif isinstance(o, datetime):",
              "successors": [
                {
                  "id": 6,
                  "label": "#6\nreturn o.isoformat()",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "#7\nreturn super().default(o)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "BaseRedisEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\nModel: type[M]",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "event_bus_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\npass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_serialize_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\nmessage = json.dumps(item.model_dump(), cls=DateTimeEncoder)\nchannel_name = f'{self.event_bus_name}/{channel_key}'\nlogger.info(f'[{channel_name}] Publishing an event to Redis {message}')\nreturn message, channel_name",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_deserialize_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nmessage_type = 'pmessage' if '*' in channel_key else 'message'\nif msg['type'] != message_type:",
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nreturn None",
                  "successors": []
                },
                {
                  "id": 24,
                  "label": "#24\ntry:",
                  "successors": [
                    {
                      "id": 26,
                      "label": "#26\ndata = json.loads(msg['data'])\nlogger.info(f'Consuming an event from Redis {data}')\nreturn self.Model(**data)",
                      "successors": []
                    },
                    {
                      "id": 27,
                      "label": "#27\nlogger.error(f'Failed to parse event result from Redis {msg} {e}')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_pubsub_channel",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nfull_channel_name = f'{self.event_bus_name}/{channel_key}'\npubsub = connection.pubsub()\nreturn pubsub, full_channel_name",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "RedisEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 37,
          "label": "#37\nModel: type[M]",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "connection",
          "type": "CFG",
          "blocks": [
            {
              "id": 39,
              "label": "#39\nreturn redis.get_redis()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "publish_event",
          "type": "CFG",
          "blocks": [
            {
              "id": 43,
              "label": "#43\nmessage, full_channel_name = self._serialize_message(event, channel_key)\nself.connection.publish(full_channel_name, message)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "listen_events",
          "type": "CFG",
          "blocks": [
            {
              "id": 46,
              "label": "#46\npubsub, full_channel_name = self._get_pubsub_channel(self.connection,\n    channel_key)\nassert isinstance(pubsub, PubSub)",
              "successors": [
                {
                  "id": 48,
                  "label": "#48\nif '*' in channel_key:",
                  "successors": [
                    {
                      "id": 49,
                      "label": "#49\npubsub.psubscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 50,
                          "label": "#50\nfor message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 52,
                              "label": "#52\nif (event := self._deserialize_message(message, channel_key)):",
                              "successors": [
                                {
                                  "id": 54,
                                  "label": "#54\nyield event",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 51,
                      "label": "#51\npubsub.subscribe(full_channel_name)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "AsyncRedisEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 60,
          "label": "#60\nModel: type[M]",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "connection",
          "type": "CFG",
          "blocks": [
            {
              "id": 62,
              "label": "#62\nreturn await redis.get_redis_async()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "publish_event",
          "type": "CFG",
          "blocks": [
            {
              "id": 66,
              "label": "#66\nmessage, full_channel_name = self._serialize_message(event, channel_key)\nconnection = await self.connection",
              "successors": [
                {
                  "id": 67,
                  "label": "#67\nawait connection.publish(full_channel_name, message)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "listen_events",
          "type": "CFG",
          "blocks": [
            {
              "id": 71,
              "label": "#71\npubsub, full_channel_name = self._get_pubsub_channel(await self.connection,\n    channel_key)\nassert isinstance(pubsub, AsyncPubSub)",
              "successors": [
                {
                  "id": 73,
                  "label": "#73\nif '*' in channel_key:",
                  "successors": [
                    {
                      "id": 74,
                      "label": "#74\nawait pubsub.psubscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 75,
                          "label": "#75\nasync for message in pubsub.listen():\n    if (event := self._deserialize_message(message, channel_key)):\n        yield event",
                          "successors": [
                            {
                              "id": 79,
                              "label": "#79\nif (event := self._deserialize_message(message, channel_key)):",
                              "successors": [
                                {
                                  "id": 81,
                                  "label": "#81\nyield event",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 76,
                      "label": "#76\nawait pubsub.subscribe(full_channel_name)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "wait_for_event",
          "type": "CFG",
          "blocks": [
            {
              "id": 86,
              "label": "#86\ntry:",
              "successors": [
                {
                  "id": 87,
                  "label": "#87\nreturn await asyncio.wait_for(anext(aiter(self.listen_events(channel_key))),\n    timeout)",
                  "successors": []
                },
                {
                  "id": 88,
                  "label": "#88\nreturn None",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}