{
  "name": "197.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 9,
          "label": "#9\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "binary_or",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Take in 2 integers, convert them to binary, and return a binary number that is the\n    result of a binary or operation on the integers provided.\n\n    >>> binary_or(25, 32)\n    '0b111001'\n    >>> binary_or(37, 50)\n    '0b110111'\n    >>> binary_or(21, 30)\n    '0b11111'\n    >>> binary_or(58, 73)\n    '0b1111011'\n    >>> binary_or(0, 255)\n    '0b11111111'\n    >>> binary_or(0, 256)\n    '0b100000000'\n    >>> binary_or(0, -1)\n    Traceback (most recent call last):\n    ValueError: the value of both inputs must be positive\n    >>> binary_or(0, 1.1)\n    Traceback (most recent call last):\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_or(\"0\", \"1\")\n    Traceback (most recent call last):\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\nif a < 0 or b < 0:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('the value of both inputs must be positive')",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\na_binary = str(bin(a))[2:]\nb_binary = str(bin(b))[2:]\nmax_len = max(len(a_binary), len(b_binary))\nreturn '0b' + ''.join(str(int('1' in (char_a, char_b))) for char_a, char_b in\n    zip(a_binary.zfill(max_len), b_binary.zfill(max_len)))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}