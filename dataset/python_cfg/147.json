{
  "name": "147.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1",
      "start_line": 4,
      "end_line": 90,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "QueryApi",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 6,
          "end_line": 22,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.memory_cache = memory_cache\nself.reverse_index_cluster = reverse_index_cluster",
              "start_line": 7,
              "end_line": 8,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "parse_query",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\n\"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"",
              "start_line": 11,
              "end_line": 14,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "process_query",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nquery = self.parse_query(query)\nresults = self.memory_cache.get(query)\nif results is None:",
              "start_line": 17,
              "end_line": 21,
              "successors": [
                {
                  "id": 12,
                  "label": "#12\nresults = self.reverse_index_cluster.process_search(query)\nself.memory_cache.set(query, results)",
                  "start_line": 20,
                  "end_line": 21,
                  "successors": [
                    {
                      "id": 13,
                      "label": "#13\nreturn results",
                      "start_line": 22,
                      "end_line": 22,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Node",
      "type": "CFG",
      "blocks": [
        {
          "id": 18,
          "label": "#18",
          "start_line": 27,
          "end_line": 29,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\nself.query = query\nself.results = results",
              "start_line": 28,
              "end_line": 29,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "LinkedList",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24",
          "start_line": 34,
          "end_line": 45,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 26,
              "label": "#26\nself.head = None\nself.tail = None",
              "start_line": 35,
              "end_line": 36,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "move_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29",
              "start_line": 39,
              "end_line": 39,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "append_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32",
              "start_line": 42,
              "end_line": 42,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "remove_from_tail",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35",
              "start_line": 45,
              "end_line": 45,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Cache",
      "type": "CFG",
      "blocks": [
        {
          "id": 39,
          "label": "#39",
          "start_line": 50,
          "end_line": 90,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 41,
              "label": "#41\nself.MAX_SIZE = MAX_SIZE\nself.size = 0\nself.lookup = {}\nself.linked_list = LinkedList()",
              "start_line": 51,
              "end_line": 54,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 44,
              "label": "#44\n\"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\nnode = self.lookup[query]\nif node is None:",
              "start_line": 57,
              "end_line": 63,
              "successors": [
                {
                  "id": 45,
                  "label": "#45\nreturn None",
                  "start_line": 63,
                  "end_line": 63,
                  "successors": []
                },
                {
                  "id": 46,
                  "label": "#46\nself.linked_list.move_to_front(node)\nreturn node.results",
                  "start_line": 64,
                  "end_line": 65,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set",
          "type": "CFG",
          "blocks": [
            {
              "id": 51,
              "label": "#51\n\"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\nnode = self.map[query]\nif node is not None:",
              "start_line": 68,
              "end_line": 90,
              "successors": [
                {
                  "id": 52,
                  "label": "#52\nnode.results = results\nself.linked_list.move_to_front(node)",
                  "start_line": 77,
                  "end_line": 78,
                  "successors": []
                },
                {
                  "id": 54,
                  "label": "#54\nif self.size == self.MAX_SIZE:",
                  "start_line": 81,
                  "end_line": 86,
                  "successors": [
                    {
                      "id": 55,
                      "label": "#55\nself.lookup.pop(self.linked_list.tail.query, None)\nself.linked_list.remove_from_tail()",
                      "start_line": 83,
                      "end_line": 84,
                      "successors": [
                        {
                          "id": 56,
                          "label": "#56\nnew_node = Node(query, results)\nself.linked_list.append_to_front(new_node)\nself.lookup[query] = new_node",
                          "start_line": 88,
                          "end_line": 90,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 57,
                      "label": "#57\nself.size += 1",
                      "start_line": 86,
                      "end_line": 86,
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}