{
  "name": "100.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom backend.blocks.jina._auth import JinaCredentials, JinaCredentialsField, JinaCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "JinaChunkingBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='806fb15e-830f-4796-8692-557d300ff43c', description=\n    \"Chunks texts using Jina AI's segmentation service\", categories={\n    BlockCategory.AI, BlockCategory.TEXT}, input_schema=JinaChunkingBlock.\n    Input, output_schema=JinaChunkingBlock.Output)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nurl = 'https://segment.jina.ai/'\nheaders = {'Content-Type': 'application/json', 'Authorization':\n    f'Bearer {credentials.api_key.get_secret_value()}'}\nall_chunks = []\nall_tokens = []",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nfor text in input_data.texts:",
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\ndata = {'content': text, 'return_tokens': str(input_data.return_tokens).\n    lower(), 'return_chunks': 'true', 'max_chunk_length': str(input_data.\n    max_chunk_length)}\nresponse = requests.post(url, headers=headers, json=data)\nresult = response.json()\nall_chunks.extend(result.get('chunks', []))\nif input_data.return_tokens:",
                      "successors": [
                        {
                          "id": 18,
                          "label": "#18\nall_tokens.extend(result.get('tokens', []))",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "#17\nyield 'chunks', all_chunks",
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\nif input_data.return_tokens:",
                          "successors": [
                            {
                              "id": 21,
                              "label": "#21\nyield 'tokens', all_tokens",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ntexts: list = SchemaField(description='List of texts to chunk')\ncredentials: JinaCredentialsInput = JinaCredentialsField()\nmax_chunk_length: int = SchemaField(description=\n    'Maximum length of each chunk', default=1000)\nreturn_tokens: bool = SchemaField(description=\n    'Whether to return token information', default=False)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nchunks: list = SchemaField(description='List of chunked texts')\ntokens: list = SchemaField(description=\n    'List of token information for each chunk', optional=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}