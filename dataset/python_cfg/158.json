{
  "name": "158.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport io\nimport unittest.mock\nimport fastapi\nimport pytest\nimport starlette.datastructures\nimport backend.server.v2.store.exceptions\nimport backend.server.v2.store.media\nfrom backend.util.settings import Settings",
      "start_line": 1,
      "end_line": 190,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "mock_settings",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nsettings = Settings()\nsettings.config.media_gcs_bucket_name = 'test-bucket'\nsettings.config.google_application_credentials = 'test-credentials'\nmonkeypatch.setattr('backend.server.v2.store.media.Settings', lambda : settings\n    )\nreturn settings",
          "start_line": 15,
          "end_line": 19,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mock_storage_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nmock_client = unittest.mock.MagicMock()\nmock_bucket = unittest.mock.MagicMock()\nmock_blob = unittest.mock.MagicMock()\nmock_client.bucket.return_value = mock_bucket\nmock_bucket.blob.return_value = mock_blob\nmock_blob.public_url = 'http://test-url/media/laptop.jpeg'\nmocker.patch('google.cloud.storage.Client', return_value=mock_client)\nreturn mock_client",
          "start_line": 24,
          "end_line": 34,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 11,
          "label": "#11\ntest_data = b'\\xff\\xd8\\xff' + b'test data'\ntest_file = fastapi.UploadFile(filename='laptop.jpeg', file=io.BytesIO(\n    test_data), headers=starlette.datastructures.Headers({'content-type':\n    'image/jpeg'}))\nresult = await backend.server.v2.store.media.upload_media('test-user',\n    test_file)",
          "start_line": 39,
          "end_line": 47,
          "successors": [
            {
              "id": 12,
              "label": "#12\nassert result == 'http://test-url/media/laptop.jpeg'",
              "start_line": 49,
              "end_line": 49,
              "successors": [
                {
                  "id": 14,
                  "label": "#14\nmock_bucket = mock_storage_client.bucket.return_value\nmock_blob = mock_bucket.blob.return_value\nmock_blob.upload_from_string.assert_called_once()",
                  "start_line": 50,
                  "end_line": 52,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_invalid_type",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\ntest_file = fastapi.UploadFile(filename='test.txt', file=io.BytesIO(\n    b'test data'), headers=starlette.datastructures.Headers({'content-type':\n    'text/plain'}))\nwith pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
          "start_line": 56,
          "end_line": 63,
          "successors": [
            {
              "id": 18,
              "label": "#18\nawait backend.server.v2.store.media.upload_media('test-user', test_file)",
              "start_line": 63,
              "end_line": 63,
              "successors": [
                {
                  "id": 19,
                  "label": "#19\nmock_bucket = mock_storage_client.bucket.return_value\nmock_blob = mock_bucket.blob.return_value\nmock_blob.upload_from_string.assert_not_called()",
                  "start_line": 65,
                  "end_line": 67,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_missing_credentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 23,
          "label": "#23\nsettings = Settings()\nsettings.config.media_gcs_bucket_name = ''\nsettings.config.google_application_credentials = ''\nmonkeypatch.setattr('backend.server.v2.store.media.Settings', lambda : settings\n    )\ntest_file = fastapi.UploadFile(filename='laptop.jpeg', file=io.BytesIO(\n    b'\\xff\\xd8\\xff' + b'test data'), headers=starlette.datastructures.\n    Headers({'content-type': 'image/jpeg'}))\nwith pytest.raises(backend.server.v2.store.exceptions.StorageConfigError):",
          "start_line": 71,
          "end_line": 83,
          "successors": [
            {
              "id": 24,
              "label": "#24\nawait backend.server.v2.store.media.upload_media('test-user', test_file)",
              "start_line": 83,
              "end_line": 83,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_video_type",
      "type": "CFG",
      "blocks": [
        {
          "id": 29,
          "label": "#29\ntest_file = fastapi.UploadFile(filename='test.mp4', file=io.BytesIO(\n    b'\\x00\\x00\\x00\\x18ftypmp42'), headers=starlette.datastructures.Headers(\n    {'content-type': 'video/mp4'}))\nresult = await backend.server.v2.store.media.upload_media('test-user',\n    test_file)",
          "start_line": 87,
          "end_line": 93,
          "successors": [
            {
              "id": 30,
              "label": "#30\nassert result == 'http://test-url/media/laptop.jpeg'",
              "start_line": 95,
              "end_line": 95,
              "successors": [
                {
                  "id": 32,
                  "label": "#32\nmock_bucket = mock_storage_client.bucket.return_value\nmock_blob = mock_bucket.blob.return_value\nmock_blob.upload_from_string.assert_called_once()",
                  "start_line": 96,
                  "end_line": 98,
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_file_too_large",
      "type": "CFG",
      "blocks": [
        {
          "id": 35,
          "label": "#35\nlarge_data = b'\\xff\\xd8\\xff' + b'x' * (50 * 1024 * 1024 + 1)\ntest_file = fastapi.UploadFile(filename='laptop.jpeg', file=io.BytesIO(\n    large_data), headers=starlette.datastructures.Headers({'content-type':\n    'image/jpeg'}))\nwith pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):",
          "start_line": 102,
          "end_line": 112,
          "successors": [
            {
              "id": 36,
              "label": "#36\nawait backend.server.v2.store.media.upload_media('test-user', test_file)",
              "start_line": 112,
              "end_line": 112,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_file_read_error",
      "type": "CFG",
      "blocks": [
        {
          "id": 41,
          "label": "#41\ntest_file = fastapi.UploadFile(filename='laptop.jpeg', file=io.BytesIO(b''),\n    headers=starlette.datastructures.Headers({'content-type': 'image/jpeg'}))\ntest_file.read = unittest.mock.AsyncMock(side_effect=Exception('Read error'))\nwith pytest.raises(backend.server.v2.store.exceptions.FileReadError):",
          "start_line": 116,
          "end_line": 124,
          "successors": [
            {
              "id": 42,
              "label": "#42\nawait backend.server.v2.store.media.upload_media('test-user', test_file)",
              "start_line": 124,
              "end_line": 124,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_png_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 47,
          "label": "#47\ntest_file = fastapi.UploadFile(filename='test.png', file=io.BytesIO(\n    b'\\x89PNG\\r\\n\\x1a\\n'), headers=starlette.datastructures.Headers({\n    'content-type': 'image/png'}))\nresult = await backend.server.v2.store.media.upload_media('test-user',\n    test_file)",
          "start_line": 128,
          "end_line": 134,
          "successors": [
            {
              "id": 48,
              "label": "#48\nassert result == 'http://test-url/media/laptop.jpeg'",
              "start_line": 135,
              "end_line": 135,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_gif_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 53,
          "label": "#53\ntest_file = fastapi.UploadFile(filename='test.gif', file=io.BytesIO(\n    b'GIF89a'), headers=starlette.datastructures.Headers({'content-type':\n    'image/gif'}))\nresult = await backend.server.v2.store.media.upload_media('test-user',\n    test_file)",
          "start_line": 139,
          "end_line": 145,
          "successors": [
            {
              "id": 54,
              "label": "#54\nassert result == 'http://test-url/media/laptop.jpeg'",
              "start_line": 146,
              "end_line": 146,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_webp_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 59,
          "label": "#59\ntest_file = fastapi.UploadFile(filename='test.webp', file=io.BytesIO(\n    b'RIFF\\x00\\x00\\x00\\x00WEBP'), headers=starlette.datastructures.Headers(\n    {'content-type': 'image/webp'}))\nresult = await backend.server.v2.store.media.upload_media('test-user',\n    test_file)",
          "start_line": 150,
          "end_line": 156,
          "successors": [
            {
              "id": 60,
              "label": "#60\nassert result == 'http://test-url/media/laptop.jpeg'",
              "start_line": 157,
              "end_line": 157,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_webm_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 65,
          "label": "#65\ntest_file = fastapi.UploadFile(filename='test.webm', file=io.BytesIO(\n    b'\\x1aE\\xdf\\xa3'), headers=starlette.datastructures.Headers({\n    'content-type': 'video/webm'}))\nresult = await backend.server.v2.store.media.upload_media('test-user',\n    test_file)",
          "start_line": 161,
          "end_line": 167,
          "successors": [
            {
              "id": 66,
              "label": "#66\nassert result == 'http://test-url/media/laptop.jpeg'",
              "start_line": 168,
              "end_line": 168,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_mismatched_signature",
      "type": "CFG",
      "blocks": [
        {
          "id": 71,
          "label": "#71\ntest_file = fastapi.UploadFile(filename='test.jpeg', file=io.BytesIO(\n    b'\\x89PNG\\r\\n\\x1a\\n'), headers=starlette.datastructures.Headers({\n    'content-type': 'image/jpeg'}))\nwith pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
          "start_line": 172,
          "end_line": 179,
          "successors": [
            {
              "id": 72,
              "label": "#72\nawait backend.server.v2.store.media.upload_media('test-user', test_file)",
              "start_line": 179,
              "end_line": 179,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_upload_media_invalid_signature",
      "type": "CFG",
      "blocks": [
        {
          "id": 77,
          "label": "#77\ntest_file = fastapi.UploadFile(filename='test.jpeg', file=io.BytesIO(\n    b'invalid signature'), headers=starlette.datastructures.Headers({\n    'content-type': 'image/jpeg'}))\nwith pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
          "start_line": 183,
          "end_line": 190,
          "successors": [
            {
              "id": 78,
              "label": "#78\nawait backend.server.v2.store.media.upload_media('test-user', test_file)",
              "start_line": 190,
              "end_line": 190,
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}