{
  "name": "118.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 16,
          "label": "#16\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\nif len(partial) == 2 * n:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nresult.append(partial)\nreturn",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nif open_count < n:",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nbacktrack(partial + '(', open_count + 1, close_count, n, result)",
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nif close_count < open_count:",
                      "successors": [
                        {
                          "id": 9,
                          "label": "#9\nbacktrack(partial + ')', open_count, close_count + 1, n, result)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_parenthesis",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\n\"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\nresult: list[str] = []\nbacktrack('', 0, 0, n, result)\nreturn result",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}