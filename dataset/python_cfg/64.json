{
  "name": "64.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Any\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 11,
          "label": "#11\nseq: list[Any] = [1, 2, 3]\ngenerate_all_subsequences(seq)\nseq.clear()\nseq.extend(['A', 'B', 'C'])\ngenerate_all_subsequences(seq)",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "generate_all_subsequences",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\ncreate_state_space_tree(sequence, [], 0)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_state_space_tree",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\n\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\nif index == len(sequence):",
          "successors": [
            {
              "id": 7,
              "label": "#7\nprint(current_subsequence)\nreturn",
              "successors": []
            },
            {
              "id": 8,
              "label": "#8\ncreate_state_space_tree(sequence, current_subsequence, index + 1)\ncurrent_subsequence.append(sequence[index])\ncreate_state_space_tree(sequence, current_subsequence, index + 1)\ncurrent_subsequence.pop()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}