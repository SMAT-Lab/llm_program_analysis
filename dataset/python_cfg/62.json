{
  "name": "62.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom urllib.parse import parse_qs, urlparse\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "start_line": 1,
      "end_line": 90,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "TranscribeYoutubeVideoBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "start_line": 11,
          "end_line": 90,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c', input_schema=\n    TranscribeYoutubeVideoBlock.Input, output_schema=\n    TranscribeYoutubeVideoBlock.Output, description=\n    'Transcribes a YouTube video.', categories={BlockCategory.SOCIAL},\n    test_input={'youtube_url':\n    'https://www.youtube.com/watch?v=dQw4w9WgXcQ'}, test_output=[(\n    'video_id', 'dQw4w9WgXcQ'), ('transcript',\n    \"\"\"Never gonna give you up\nNever gonna let you down\"\"\")], test_mock={\n    'get_transcript': lambda video_id: [{'text': 'Never gonna give you up'},\n    {'text': 'Never gonna let you down'}]})",
              "start_line": 26,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "extract_video_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nparsed_url = urlparse(url)\nif parsed_url.netloc == 'youtu.be':",
              "start_line": 50,
              "end_line": 52,
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nreturn parsed_url.path[1:]",
                  "start_line": 52,
                  "end_line": 52,
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "#16\nif parsed_url.netloc in ('www.youtube.com', 'youtube.com'):",
                  "start_line": 53,
                  "end_line": 60,
                  "successors": [
                    {
                      "id": 18,
                      "label": "#18\nif parsed_url.path == '/watch':",
                      "start_line": 54,
                      "end_line": 56,
                      "successors": [
                        {
                          "id": 20,
                          "label": "#20\np = parse_qs(parsed_url.query)\nreturn p['v'][0]",
                          "start_line": 55,
                          "end_line": 56,
                          "successors": []
                        },
                        {
                          "id": 21,
                          "label": "#21\nif parsed_url.path[:7] == '/embed/':",
                          "start_line": 57,
                          "end_line": 58,
                          "successors": [
                            {
                              "id": 23,
                              "label": "#23\nreturn parsed_url.path.split('/')[2]",
                              "start_line": 58,
                              "end_line": 58,
                              "successors": []
                            },
                            {
                              "id": 24,
                              "label": "#24\nif parsed_url.path[:3] == '/v/':",
                              "start_line": 59,
                              "end_line": 60,
                              "successors": [
                                {
                                  "id": 26,
                                  "label": "#26\nreturn parsed_url.path.split('/')[2]",
                                  "start_line": 60,
                                  "end_line": 60,
                                  "successors": []
                                },
                                {
                                  "id": 19,
                                  "label": "#19\nraise ValueError(f'Invalid YouTube URL: {url}')",
                                  "start_line": 61,
                                  "end_line": 61,
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_transcript",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\ntry:",
              "start_line": 65,
              "end_line": 80,
              "successors": [
                {
                  "id": 33,
                  "label": "#33\ntranscript_list = YouTubeTranscriptApi.list_transcripts(video_id)\nif not transcript_list:",
                  "start_line": 66,
                  "end_line": 69,
                  "successors": [
                    {
                      "id": 36,
                      "label": "#36\nraise ValueError(f'No transcripts found for the video: {video_id}')",
                      "start_line": 69,
                      "end_line": 69,
                      "successors": []
                    },
                    {
                      "id": 37,
                      "label": "#37\nfor transcript in transcript_list:",
                      "start_line": 71,
                      "end_line": 77,
                      "successors": [
                        {
                          "id": 39,
                          "label": "#39\nfirst_transcript = transcript_list.find_transcript([transcript.language_code])\nreturn YouTubeTranscriptApi.get_transcript(video_id, languages=[\n    first_transcript.language_code])",
                          "start_line": 72,
                          "end_line": 77,
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 34,
                  "label": "#34\nraise ValueError(f'No transcripts found for the video: {video_id}')",
                  "start_line": 80,
                  "end_line": 80,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 45,
              "label": "#45\nvideo_id = self.extract_video_id(input_data.youtube_url)\nyield 'video_id', video_id",
              "start_line": 83,
              "end_line": 84,
              "successors": [
                {
                  "id": 46,
                  "label": "#46\ntranscript = self.get_transcript(video_id)\nformatter = TextFormatter()\ntranscript_text = formatter.format_transcript(transcript)\nyield 'transcript', transcript_text",
                  "start_line": 86,
                  "end_line": 90,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nyoutube_url: str = SchemaField(title='YouTube URL', description=\n    'The URL of the YouTube video to transcribe', placeholder=\n    'https://www.youtube.com/watch?v=dQw4w9WgXcQ')",
              "start_line": 12,
              "end_line": 16,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nvideo_id: str = SchemaField(description='The extracted YouTube video ID')\ntranscript: str = SchemaField(description='The transcribed text of the video')\nerror: str = SchemaField(description=\n    'Any error message if the transcription fails')",
              "start_line": 19,
              "end_line": 23,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}