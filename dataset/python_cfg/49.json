{
  "name": "49.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import ContributorDetails, SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ReadCsvBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='acf7625e-d2cb-4941-bfeb-2819fc6fc015', input_schema=\n    ReadCsvBlock.Input, output_schema=ReadCsvBlock.Output, description=\n    'Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.'\n    , contributors=[ContributorDetails(name='Nicholas Tindle')], categories\n    ={BlockCategory.TEXT, BlockCategory.DATA}, test_input={'contents':\n    \"\"\"a, b, c\n1,2,3\n4,5,6\"\"\"}, test_output=[('row', {'a': '1', 'b': '2',\n    'c': '3'}), ('row', {'a': '4', 'b': '5', 'c': '6'}), ('all_data', [{'a':\n    '1', 'b': '2', 'c': '3'}, {'a': '4', 'b': '5', 'c': '6'}])])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nimport csv\nfrom io import StringIO\ncsv_file = StringIO(input_data.contents)\nreader = csv.reader(csv_file, delimiter=input_data.delimiter, quotechar=\n    input_data.quotechar, escapechar=input_data.escapechar)\nheader = None\nif input_data.has_header:",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nheader = next(reader)\nif input_data.strip:",
                  "successors": [
                    {
                      "id": 17,
                      "label": "#17\nheader = [h.strip() for h in header]",
                      "successors": [
                        {
                          "id": 16,
                          "label": "#16\nfor _ in range(input_data.skip_rows):",
                          "successors": [
                            {
                              "id": 19,
                              "label": "#19\nnext(reader)",
                              "successors": []
                            },
                            {
                              "id": 20,
                              "label": "#20\nall_data = []",
                              "successors": [
                                {
                                  "id": 33,
                                  "label": "#33\nfor row in reader:",
                                  "successors": [
                                    {
                                      "id": 34,
                                      "label": "#34\nprocessed_row = process_row(row)\nall_data.append(processed_row)\nyield 'row', processed_row",
                                      "successors": []
                                    },
                                    {
                                      "id": 35,
                                      "label": "#35\nyield 'all_data', all_data",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "process_row",
              "type": "CFG",
              "blocks": [
                {
                  "id": 22,
                  "label": "#22\ndata = {}",
                  "successors": [
                    {
                      "id": 23,
                      "label": "#23\nfor i, value in enumerate(row):",
                      "successors": [
                        {
                          "id": 24,
                          "label": "#24\nif i not in input_data.skip_columns:",
                          "successors": [
                            {
                              "id": 26,
                              "label": "#26\nif input_data.has_header and header:",
                              "successors": [
                                {
                                  "id": 28,
                                  "label": "#28\ndata[header[i]] = value.strip() if input_data.strip else value",
                                  "successors": []
                                },
                                {
                                  "id": 30,
                                  "label": "#30\ndata[str(i)] = value.strip() if input_data.strip else value",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 25,
                          "label": "#25\nreturn data",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncontents: str = SchemaField(description=\n    'The contents of the CSV file to read', placeholder=\n    \"\"\"a, b, c\n1,2,3\n4,5,6\"\"\")\ndelimiter: str = SchemaField(description=\n    'The delimiter used in the CSV file', default=',')\nquotechar: str = SchemaField(description=\n    'The character used to quote fields', default='\"')\nescapechar: str = SchemaField(description=\n    'The character used to escape the delimiter', default='\\\\')\nhas_header: bool = SchemaField(description=\n    'Whether the CSV file has a header row', default=True)\nskip_rows: int = SchemaField(description=\n    'The number of rows to skip from the start of the file', default=0)\nstrip: bool = SchemaField(description=\n    'Whether to strip whitespace from the values', default=True)\nskip_columns: list[str] = SchemaField(description=\n    'The columns to skip from the start of the row', default=[])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nrow: dict[str, str] = SchemaField(description=\n    'The data produced from each row in the CSV file')\nall_data: list[dict[str, str]] = SchemaField(description=\n    'All the data in the CSV file as a list of rows')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}