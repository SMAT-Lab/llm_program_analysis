{
  "name": "47.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport asyncio\nimport logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\nfrom tenacity import retry, stop_after_attempt, wait_exponential\nfrom backend.util.process import get_service_name\nlogger = logging.getLogger(__name__)",
      "start_line": 1,
      "end_line": 75,
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_log_prefix",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\nreturn f'[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]'",
          "start_line": 16,
          "end_line": 21,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "conn_retry",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nconn_id = str(uuid4())\nreturn decorator",
          "start_line": 32,
          "end_line": 75,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "on_retry",
          "type": "CFG",
          "blocks": [
            {
              "id": 9,
              "label": "#9\nprefix = _log_prefix(resource_name, conn_id)\nexception = retry_state.outcome.exception()",
              "start_line": 35,
              "end_line": 37,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "decorator",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nis_coroutine = asyncio.iscoroutinefunction(func)\nretry_decorator = retry(stop=stop_after_attempt(max_retry + 1), wait=\n    wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n    before_sleep=on_retry, reraise=True)\nwrapped_func = retry_decorator(func)\nreturn async_wrapper if is_coroutine else sync_wrapper",
              "start_line": 40,
              "end_line": 73,
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "sync_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 14,
                  "label": "#14\nprefix = _log_prefix(resource_name, conn_id)\ntry:",
                  "start_line": 51,
                  "end_line": 59,
                  "successors": [
                    {
                      "id": 15,
                      "label": "#15\nresult = wrapped_func(*args, **kwargs)\nlogger.info(f'{prefix} {action_name} completed successfully.')\nreturn result",
                      "start_line": 54,
                      "end_line": 56,
                      "successors": []
                    },
                    {
                      "id": 16,
                      "label": "#16\nlogger.error(f'{prefix} {action_name} failed after retries: {e}')\nraise",
                      "start_line": 58,
                      "end_line": 59,
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            },
            {
              "name": "async_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 22,
                  "label": "#22\nprefix = _log_prefix(resource_name, conn_id)\ntry:",
                  "start_line": 63,
                  "end_line": 71,
                  "successors": [
                    {
                      "id": 23,
                      "label": "#23\nresult = await wrapped_func(*args, **kwargs)",
                      "start_line": 66,
                      "end_line": 66,
                      "successors": [
                        {
                          "id": 26,
                          "label": "#26\nlogger.info(f'{prefix} {action_name} completed successfully.')\nreturn result",
                          "start_line": 67,
                          "end_line": 68,
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 24,
                      "label": "#24\nlogger.error(f'{prefix} {action_name} failed after retries: {e}')\nraise",
                      "start_line": 70,
                      "end_line": 71,
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}