{
  "name": "206.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport pytest\nfrom backend.data import db\nfrom backend.executor import ExecutionScheduler\nfrom backend.server.model import CreateGraph\nfrom backend.usecases.sample import create_test_graph, create_test_user\nfrom backend.util.service import get_service_client\nfrom backend.util.test import SpinTestServer",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_agent_schedule",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nawait db.connect()",
          "successors": [
            {
              "id": 4,
              "label": "#4\ntest_user = await create_test_user()",
              "successors": [
                {
                  "id": 5,
                  "label": "#5\ntest_graph = await server.agent_server.test_create_graph(create_graph=\n    CreateGraph(graph=create_test_graph()), user_id=test_user.id)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "#6\nscheduler = get_service_client(ExecutionScheduler)\nschedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\nassert len(schedules) == 0",
                      "successors": [
                        {
                          "id": 8,
                          "label": "#8\nschedule = scheduler.add_execution_schedule(graph_id=test_graph.id, user_id\n    =test_user.id, graph_version=1, cron='0 0 * * *', input_data={'input':\n    'data'})\nassert schedule",
                          "successors": [
                            {
                              "id": 10,
                              "label": "#10\nschedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\nassert len(schedules) == 1",
                              "successors": [
                                {
                                  "id": 12,
                                  "label": "#12\nassert schedules[0].cron == '0 0 * * *'",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "label": "#14\nscheduler.delete_schedule(schedule.id, user_id=test_user.id)\nschedules = scheduler.get_execution_schedules(test_graph.id, user_id=\n    test_user.id)\nassert len(schedules) == 0",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}