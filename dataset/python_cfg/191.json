{
  "name": "191.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom __future__ import annotations\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 41,
          "label": "#41\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_valid_pos",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\ny, x = position\npositions = [(y + 1, x + 2), (y - 1, x + 2), (y + 1, x - 2), (y - 1, x - 2),\n    (y + 2, x + 1), (y + 2, x - 1), (y - 2, x + 1), (y - 2, x - 1)]\npermissible_positions = []",
          "successors": [
            {
              "id": 4,
              "label": "#4\nfor inner_position in positions:",
              "successors": [
                {
                  "id": 5,
                  "label": "#5\ny_test, x_test = inner_position\nif 0 <= y_test < n and 0 <= x_test < n:",
                  "successors": [
                    {
                      "id": 7,
                      "label": "#7\npermissible_positions.append(inner_position)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "#6\nreturn permissible_positions",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "is_complete",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\n\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\nreturn not any(elem == 0 for row in board for elem in row)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "open_knight_tour_helper",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\n\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\nif is_complete(board):",
          "successors": [
            {
              "id": 17,
              "label": "#17\nreturn True",
              "successors": []
            },
            {
              "id": 18,
              "label": "#18\nfor position in get_valid_pos(pos, len(board)):",
              "successors": [
                {
                  "id": 20,
                  "label": "#20\ny, x = position\nif board[y][x] == 0:",
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\nboard[y][x] = curr + 1\nif open_knight_tour_helper(board, position, curr + 1):",
                      "successors": [
                        {
                          "id": 24,
                          "label": "#24\nreturn True",
                          "successors": []
                        },
                        {
                          "id": 25,
                          "label": "#25\nboard[y][x] = 0",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 21,
                  "label": "#21\nreturn False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "open_knight_tour",
      "type": "CFG",
      "blocks": [
        {
          "id": 30,
          "label": "#30\n\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\nboard = [[(0) for i in range(n)] for j in range(n)]",
          "successors": [
            {
              "id": 31,
              "label": "#31\nfor i in range(n):",
              "successors": [
                {
                  "id": 32,
                  "label": "#32\nfor j in range(n):",
                  "successors": [
                    {
                      "id": 34,
                      "label": "#34\nboard[i][j] = 1\nif open_knight_tour_helper(board, (i, j), 1):",
                      "successors": [
                        {
                          "id": 36,
                          "label": "#36\nreturn board",
                          "successors": []
                        },
                        {
                          "id": 37,
                          "label": "#37\nboard[i][j] = 0",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 33,
                  "label": "#33\nmsg = f'Open Knight Tour cannot be performed on a board of size {n}'\nraise ValueError(msg)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}