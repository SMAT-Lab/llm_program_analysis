{
  "name": "125.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport time\nfrom enum import Enum\nfrom typing import Any\nimport httpx\nfrom backend.blocks.fal._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, FalCredentials, FalCredentialsField, FalCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nlogger = logging.getLogger(__name__)",
      "start_line": 1,
      "end_line": 199,
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "FalModel",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nMOCHI = 'fal-ai/mochi-v1'\nLUMA = 'fal-ai/luma-dream-machine'",
          "start_line": 22,
          "end_line": 23,
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AIVideoGeneratorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6",
          "start_line": 27,
          "end_line": 199,
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='530cf046-2ce0-4854-ae2c-659db17c7a46', description=\n    'Generate videos using FAL AI models.', categories={BlockCategory.AI},\n    input_schema=self.Input, output_schema=self.Output, test_input={\n    'prompt': 'A dog running in a field.', 'model': FalModel.MOCHI,\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('video_url',\n    'https://fal.media/files/example/video.mp4')], test_mock={\n    'generate_video': lambda *args, **kwargs:\n    'https://fal.media/files/example/video.mp4'})",
              "start_line": 49,
              "end_line": 65,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_headers",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\n\"\"\"Get headers for FAL API requests.\"\"\"\nreturn {'Authorization': f'Key {api_key}', 'Content-Type': 'application/json'}",
              "start_line": 68,
              "end_line": 72,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_submit_request",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\n\"\"\"Submit a request to the FAL API.\"\"\"\ntry:",
              "start_line": 77,
              "end_line": 84,
              "successors": [
                {
                  "id": 22,
                  "label": "#22\nresponse = httpx.post(url, headers=headers, json=data)\nresponse.raise_for_status()\nreturn response.json()",
                  "start_line": 79,
                  "end_line": 81,
                  "successors": []
                },
                {
                  "id": 23,
                  "label": "#23\nlogger.error(f'FAL API request failed: {str(e)}')\nraise RuntimeError(f'Failed to submit request: {str(e)}')",
                  "start_line": 83,
                  "end_line": 84,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_poll_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\n\"\"\"Poll the status endpoint until completion or failure.\"\"\"\ntry:",
              "start_line": 87,
              "end_line": 94,
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nresponse = httpx.get(status_url, headers=headers)\nresponse.raise_for_status()\nreturn response.json()",
                  "start_line": 89,
                  "end_line": 91,
                  "successors": []
                },
                {
                  "id": 31,
                  "label": "#31\nlogger.error(f'Failed to get status: {str(e)}')\nraise RuntimeError(f'Failed to get status: {str(e)}')",
                  "start_line": 93,
                  "end_line": 94,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "generate_video",
          "type": "CFG",
          "blocks": [
            {
              "id": 37,
              "label": "#37\n\"\"\"Generate video using the specified FAL model.\"\"\"\nbase_url = 'https://queue.fal.run'\napi_key = credentials.api_key.get_secret_value()\nheaders = self._get_headers(api_key)\nsubmit_url = f'{base_url}/{input_data.model.value}'\nsubmit_data = {'prompt': input_data.prompt}\nseen_logs = set()\ntry:",
              "start_line": 97,
              "end_line": 189,
              "successors": [
                {
                  "id": 38,
                  "label": "#38\nsubmit_response = httpx.post(submit_url, headers=headers, json=submit_data)\nsubmit_response.raise_for_status()\nrequest_data = submit_response.json()\nrequest_id = request_data.get('request_id')\nstatus_url = request_data.get('status_url')\nresult_url = request_data.get('response_url')\nif not all([request_id, status_url, result_url]):",
                  "start_line": 110,
                  "end_line": 120,
                  "successors": [
                    {
                      "id": 41,
                      "label": "#41\nraise ValueError('Missing required data in submission response')",
                      "start_line": 120,
                      "end_line": 120,
                      "successors": []
                    },
                    {
                      "id": 42,
                      "label": "#42\nmax_attempts = 30\nattempt = 0\nbase_wait_time = 5",
                      "start_line": 123,
                      "end_line": 125,
                      "successors": [
                        {
                          "id": 44,
                          "label": "#44\nwhile attempt < max_attempts:",
                          "start_line": 127,
                          "end_line": 184,
                          "successors": [
                            {
                              "id": 45,
                              "label": "#45\nstatus_response = httpx.get(f'{status_url}?logs=1', headers=headers)\nstatus_response.raise_for_status()\nstatus_data = status_response.json()\nlogs = status_data.get('logs', [])\nif logs and isinstance(logs, list):",
                              "start_line": 128,
                              "end_line": 147,
                              "successors": [
                                {
                                  "id": 47,
                                  "label": "#47\nfor log in logs:",
                                  "start_line": 135,
                                  "end_line": 147,
                                  "successors": [
                                    {
                                      "id": 49,
                                      "label": "#49\nif isinstance(log, dict):",
                                      "start_line": 136,
                                      "end_line": 147,
                                      "successors": [
                                        {
                                          "id": 51,
                                          "label": "#51\nlog_key = f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\nif log_key not in seen_logs:",
                                          "start_line": 138,
                                          "end_line": 147,
                                          "successors": [
                                            {
                                              "id": 53,
                                              "label": "#53\nseen_logs.add(log_key)\nmessage = log.get('message', '')\nif message:",
                                              "start_line": 142,
                                              "end_line": 147,
                                              "successors": [
                                                {
                                                  "id": 55,
                                                  "label": "#55\nlogger.debug(\n    f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\"\n    )",
                                                  "start_line": 145,
                                                  "end_line": 147,
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 48,
                                      "label": "#48\nstatus = status_data.get('status')\nif status == 'COMPLETED':",
                                      "start_line": 149,
                                      "end_line": 180,
                                      "successors": [
                                        {
                                          "id": 57,
                                          "label": "#57\nresult_response = httpx.get(result_url, headers=headers)\nresult_response.raise_for_status()\nresult_data = result_response.json()\nif 'video' not in result_data or not isinstance(result_data['video'], dict):",
                                          "start_line": 152,
                                          "end_line": 159,
                                          "successors": [
                                            {
                                              "id": 70,
                                              "label": "#70\nraise ValueError('Invalid response format - missing video data')",
                                              "start_line": 159,
                                              "end_line": 159,
                                              "successors": []
                                            },
                                            {
                                              "id": 71,
                                              "label": "#71\nvideo_url = result_data['video'].get('url')\nif not video_url:",
                                              "start_line": 161,
                                              "end_line": 163,
                                              "successors": [
                                                {
                                                  "id": 73,
                                                  "label": "#73\nraise ValueError('No video URL in response')",
                                                  "start_line": 163,
                                                  "end_line": 163,
                                                  "successors": []
                                                },
                                                {
                                                  "id": 74,
                                                  "label": "#74\nreturn video_url",
                                                  "start_line": 165,
                                                  "end_line": 165,
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 59,
                                          "label": "#59\nif status == 'FAILED':",
                                          "start_line": 167,
                                          "end_line": 180,
                                          "successors": [
                                            {
                                              "id": 60,
                                              "label": "#60\nerror_msg = status_data.get('error', 'No error details provided')\nraise RuntimeError(f'Video generation failed: {error_msg}')",
                                              "start_line": 168,
                                              "end_line": 169,
                                              "successors": []
                                            },
                                            {
                                              "id": 62,
                                              "label": "#62\nif status == 'IN_QUEUE':",
                                              "start_line": 170,
                                              "end_line": 180,
                                              "successors": [
                                                {
                                                  "id": 63,
                                                  "label": "#63\nposition = status_data.get('queue_position', 'unknown')\nlogger.debug(f'[FAL Generation] Status: In queue, position: {position}')",
                                                  "start_line": 171,
                                                  "end_line": 174,
                                                  "successors": [
                                                    {
                                                      "id": 58,
                                                      "label": "#58\nwait_time = min(base_wait_time * 2 ** attempt, 60)\ntime.sleep(wait_time)\nattempt += 1",
                                                      "start_line": 182,
                                                      "end_line": 184,
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 65,
                                                  "label": "#65\nif status == 'IN_PROGRESS':",
                                                  "start_line": 175,
                                                  "end_line": 180,
                                                  "successors": [
                                                    {
                                                      "id": 66,
                                                      "label": "#66",
                                                      "start_line": 176,
                                                      "end_line": 178,
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 68,
                                                      "label": "#68\nlogger.info(f'[FAL Generation] Status: Unknown status: {status}')",
                                                      "start_line": 180,
                                                      "end_line": 180,
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 46,
                              "label": "#46\nraise RuntimeError('Maximum polling attempts reached')",
                              "start_line": 186,
                              "end_line": 186,
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 39,
                  "label": "#39\nraise RuntimeError(f'API request failed: {str(e)}')",
                  "start_line": 189,
                  "end_line": 189,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 81,
              "label": "#81\ntry:",
              "start_line": 194,
              "end_line": 199,
              "successors": [
                {
                  "id": 82,
                  "label": "#82\nvideo_url = self.generate_video(input_data, credentials)\nyield 'video_url', video_url",
                  "start_line": 195,
                  "end_line": 196,
                  "successors": []
                },
                {
                  "id": 83,
                  "label": "#83\nerror_message = str(e)\nyield 'error', error_message",
                  "start_line": 198,
                  "end_line": 199,
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nprompt: str = SchemaField(description=\n    'Description of the video to generate.', placeholder=\n    'A dog running in a field.')\nmodel: FalModel = SchemaField(title='FAL Model', default=FalModel.MOCHI,\n    description='The FAL model to use for video generation.')\ncredentials: FalCredentialsInput = FalCredentialsField()",
              "start_line": 28,
              "end_line": 37,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nvideo_url: str = SchemaField(description='The URL of the generated video.')\nerror: str = SchemaField(description=\n    'Error message if video generation failed.')\nlogs: list[str] = SchemaField(description='Generation progress logs.',\n    optional=True)",
              "start_line": 40,
              "end_line": 46,
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}